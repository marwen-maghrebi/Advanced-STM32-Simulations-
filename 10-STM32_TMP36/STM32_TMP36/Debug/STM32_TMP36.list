
STM32_TMP36.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066f4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08006808  08006808  00007808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c88  08006c88  000081d8  2**0
                  CONTENTS
  4 .ARM          00000008  08006c88  08006c88  00007c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c90  08006c90  000081d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c90  08006c90  00007c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c94  08006c94  00007c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08006c98  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001d8  08006e70  000081d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08006e70  000083e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c28  00000000  00000000  00008201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b7e  00000000  00000000  00010e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  000129a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006bd  00000000  00000000  00013290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181e9  00000000  00000000  0001394d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac5f  00000000  00000000  0002bb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b5d  00000000  00000000  00036795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd2f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f0  00000000  00000000  000bd338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000c0828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080067ec 	.word	0x080067ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080067ec 	.word	0x080067ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_fmul>:
 8000b28:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b30:	bf1e      	ittt	ne
 8000b32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b36:	ea92 0f0c 	teqne	r2, ip
 8000b3a:	ea93 0f0c 	teqne	r3, ip
 8000b3e:	d06f      	beq.n	8000c20 <__aeabi_fmul+0xf8>
 8000b40:	441a      	add	r2, r3
 8000b42:	ea80 0c01 	eor.w	ip, r0, r1
 8000b46:	0240      	lsls	r0, r0, #9
 8000b48:	bf18      	it	ne
 8000b4a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b4e:	d01e      	beq.n	8000b8e <__aeabi_fmul+0x66>
 8000b50:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b54:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b58:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b5c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b60:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b64:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b68:	bf3e      	ittt	cc
 8000b6a:	0049      	lslcc	r1, r1, #1
 8000b6c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b70:	005b      	lslcc	r3, r3, #1
 8000b72:	ea40 0001 	orr.w	r0, r0, r1
 8000b76:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000b7a:	2afd      	cmp	r2, #253	@ 0xfd
 8000b7c:	d81d      	bhi.n	8000bba <__aeabi_fmul+0x92>
 8000b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000b82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b86:	bf08      	it	eq
 8000b88:	f020 0001 	biceq.w	r0, r0, #1
 8000b8c:	4770      	bx	lr
 8000b8e:	f090 0f00 	teq	r0, #0
 8000b92:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b96:	bf08      	it	eq
 8000b98:	0249      	lsleq	r1, r1, #9
 8000b9a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b9e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ba2:	3a7f      	subs	r2, #127	@ 0x7f
 8000ba4:	bfc2      	ittt	gt
 8000ba6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000baa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bae:	4770      	bxgt	lr
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	dc5d      	bgt.n	8000c78 <__aeabi_fmul+0x150>
 8000bbc:	f112 0f19 	cmn.w	r2, #25
 8000bc0:	bfdc      	itt	le
 8000bc2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bxle	lr
 8000bc8:	f1c2 0200 	rsb	r2, r2, #0
 8000bcc:	0041      	lsls	r1, r0, #1
 8000bce:	fa21 f102 	lsr.w	r1, r1, r2
 8000bd2:	f1c2 0220 	rsb	r2, r2, #32
 8000bd6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bda:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bde:	f140 0000 	adc.w	r0, r0, #0
 8000be2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000be6:	bf08      	it	eq
 8000be8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bec:	4770      	bx	lr
 8000bee:	f092 0f00 	teq	r2, #0
 8000bf2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bf6:	bf02      	ittt	eq
 8000bf8:	0040      	lsleq	r0, r0, #1
 8000bfa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bfe:	3a01      	subeq	r2, #1
 8000c00:	d0f9      	beq.n	8000bf6 <__aeabi_fmul+0xce>
 8000c02:	ea40 000c 	orr.w	r0, r0, ip
 8000c06:	f093 0f00 	teq	r3, #0
 8000c0a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c0e:	bf02      	ittt	eq
 8000c10:	0049      	lsleq	r1, r1, #1
 8000c12:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c16:	3b01      	subeq	r3, #1
 8000c18:	d0f9      	beq.n	8000c0e <__aeabi_fmul+0xe6>
 8000c1a:	ea41 010c 	orr.w	r1, r1, ip
 8000c1e:	e78f      	b.n	8000b40 <__aeabi_fmul+0x18>
 8000c20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c24:	ea92 0f0c 	teq	r2, ip
 8000c28:	bf18      	it	ne
 8000c2a:	ea93 0f0c 	teqne	r3, ip
 8000c2e:	d00a      	beq.n	8000c46 <__aeabi_fmul+0x11e>
 8000c30:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c34:	bf18      	it	ne
 8000c36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c3a:	d1d8      	bne.n	8000bee <__aeabi_fmul+0xc6>
 8000c3c:	ea80 0001 	eor.w	r0, r0, r1
 8000c40:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f090 0f00 	teq	r0, #0
 8000c4a:	bf17      	itett	ne
 8000c4c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c50:	4608      	moveq	r0, r1
 8000c52:	f091 0f00 	teqne	r1, #0
 8000c56:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c5a:	d014      	beq.n	8000c86 <__aeabi_fmul+0x15e>
 8000c5c:	ea92 0f0c 	teq	r2, ip
 8000c60:	d101      	bne.n	8000c66 <__aeabi_fmul+0x13e>
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	d10f      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c66:	ea93 0f0c 	teq	r3, ip
 8000c6a:	d103      	bne.n	8000c74 <__aeabi_fmul+0x14c>
 8000c6c:	024b      	lsls	r3, r1, #9
 8000c6e:	bf18      	it	ne
 8000c70:	4608      	movne	r0, r1
 8000c72:	d108      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c74:	ea80 0001 	eor.w	r0, r0, r1
 8000c78:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c8a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_fdiv>:
 8000c90:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c98:	bf1e      	ittt	ne
 8000c9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c9e:	ea92 0f0c 	teqne	r2, ip
 8000ca2:	ea93 0f0c 	teqne	r3, ip
 8000ca6:	d069      	beq.n	8000d7c <__aeabi_fdiv+0xec>
 8000ca8:	eba2 0203 	sub.w	r2, r2, r3
 8000cac:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cb6:	d037      	beq.n	8000d28 <__aeabi_fdiv+0x98>
 8000cb8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cbc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cc0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cc4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	bf38      	it	cc
 8000ccc:	005b      	lslcc	r3, r3, #1
 8000cce:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000cd2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	bf24      	itt	cs
 8000cda:	1a5b      	subcs	r3, r3, r1
 8000cdc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ce0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ce4:	bf24      	itt	cs
 8000ce6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cf2:	bf24      	itt	cs
 8000cf4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cf8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cfc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d00:	bf24      	itt	cs
 8000d02:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d06:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	bf18      	it	ne
 8000d0e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d12:	d1e0      	bne.n	8000cd6 <__aeabi_fdiv+0x46>
 8000d14:	2afd      	cmp	r2, #253	@ 0xfd
 8000d16:	f63f af50 	bhi.w	8000bba <__aeabi_fmul+0x92>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d2c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d30:	327f      	adds	r2, #127	@ 0x7f
 8000d32:	bfc2      	ittt	gt
 8000d34:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d38:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3c:	4770      	bxgt	lr
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	3a01      	subs	r2, #1
 8000d48:	e737      	b.n	8000bba <__aeabi_fmul+0x92>
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0040      	lsleq	r0, r0, #1
 8000d56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d5a:	3a01      	subeq	r2, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fdiv+0xc2>
 8000d5e:	ea40 000c 	orr.w	r0, r0, ip
 8000d62:	f093 0f00 	teq	r3, #0
 8000d66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0049      	lsleq	r1, r1, #1
 8000d6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d72:	3b01      	subeq	r3, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fdiv+0xda>
 8000d76:	ea41 010c 	orr.w	r1, r1, ip
 8000d7a:	e795      	b.n	8000ca8 <__aeabi_fdiv+0x18>
 8000d7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	d108      	bne.n	8000d98 <__aeabi_fdiv+0x108>
 8000d86:	0242      	lsls	r2, r0, #9
 8000d88:	f47f af7d 	bne.w	8000c86 <__aeabi_fmul+0x15e>
 8000d8c:	ea93 0f0c 	teq	r3, ip
 8000d90:	f47f af70 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000d94:	4608      	mov	r0, r1
 8000d96:	e776      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000d98:	ea93 0f0c 	teq	r3, ip
 8000d9c:	d104      	bne.n	8000da8 <__aeabi_fdiv+0x118>
 8000d9e:	024b      	lsls	r3, r1, #9
 8000da0:	f43f af4c 	beq.w	8000c3c <__aeabi_fmul+0x114>
 8000da4:	4608      	mov	r0, r1
 8000da6:	e76e      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000da8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dac:	bf18      	it	ne
 8000dae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db2:	d1ca      	bne.n	8000d4a <__aeabi_fdiv+0xba>
 8000db4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000db8:	f47f af5c 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000dbc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000dc0:	f47f af3c 	bne.w	8000c3c <__aeabi_fmul+0x114>
 8000dc4:	e75f      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000dc6:	bf00      	nop

08000dc8 <__gesf2>:
 8000dc8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dcc:	e006      	b.n	8000ddc <__cmpsf2+0x4>
 8000dce:	bf00      	nop

08000dd0 <__lesf2>:
 8000dd0:	f04f 0c01 	mov.w	ip, #1
 8000dd4:	e002      	b.n	8000ddc <__cmpsf2+0x4>
 8000dd6:	bf00      	nop

08000dd8 <__cmpsf2>:
 8000dd8:	f04f 0c01 	mov.w	ip, #1
 8000ddc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000de0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000de4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000de8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dec:	bf18      	it	ne
 8000dee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000df2:	d011      	beq.n	8000e18 <__cmpsf2+0x40>
 8000df4:	b001      	add	sp, #4
 8000df6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dfa:	bf18      	it	ne
 8000dfc:	ea90 0f01 	teqne	r0, r1
 8000e00:	bf58      	it	pl
 8000e02:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e06:	bf88      	it	hi
 8000e08:	17c8      	asrhi	r0, r1, #31
 8000e0a:	bf38      	it	cc
 8000e0c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e10:	bf18      	it	ne
 8000e12:	f040 0001 	orrne.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e1c:	d102      	bne.n	8000e24 <__cmpsf2+0x4c>
 8000e1e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e22:	d105      	bne.n	8000e30 <__cmpsf2+0x58>
 8000e24:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e28:	d1e4      	bne.n	8000df4 <__cmpsf2+0x1c>
 8000e2a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e2e:	d0e1      	beq.n	8000df4 <__cmpsf2+0x1c>
 8000e30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <__aeabi_cfrcmple>:
 8000e38:	4684      	mov	ip, r0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	4661      	mov	r1, ip
 8000e3e:	e7ff      	b.n	8000e40 <__aeabi_cfcmpeq>

08000e40 <__aeabi_cfcmpeq>:
 8000e40:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e42:	f7ff ffc9 	bl	8000dd8 <__cmpsf2>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	bf48      	it	mi
 8000e4a:	f110 0f00 	cmnmi.w	r0, #0
 8000e4e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e50 <__aeabi_fcmpeq>:
 8000e50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e54:	f7ff fff4 	bl	8000e40 <__aeabi_cfcmpeq>
 8000e58:	bf0c      	ite	eq
 8000e5a:	2001      	moveq	r0, #1
 8000e5c:	2000      	movne	r0, #0
 8000e5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e62:	bf00      	nop

08000e64 <__aeabi_fcmplt>:
 8000e64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e68:	f7ff ffea 	bl	8000e40 <__aeabi_cfcmpeq>
 8000e6c:	bf34      	ite	cc
 8000e6e:	2001      	movcc	r0, #1
 8000e70:	2000      	movcs	r0, #0
 8000e72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e76:	bf00      	nop

08000e78 <__aeabi_fcmple>:
 8000e78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e7c:	f7ff ffe0 	bl	8000e40 <__aeabi_cfcmpeq>
 8000e80:	bf94      	ite	ls
 8000e82:	2001      	movls	r0, #1
 8000e84:	2000      	movhi	r0, #0
 8000e86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8a:	bf00      	nop

08000e8c <__aeabi_fcmpge>:
 8000e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e90:	f7ff ffd2 	bl	8000e38 <__aeabi_cfrcmple>
 8000e94:	bf94      	ite	ls
 8000e96:	2001      	movls	r0, #1
 8000e98:	2000      	movhi	r0, #0
 8000e9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_fcmpgt>:
 8000ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea4:	f7ff ffc8 	bl	8000e38 <__aeabi_cfrcmple>
 8000ea8:	bf34      	ite	cc
 8000eaa:	2001      	movcc	r0, #1
 8000eac:	2000      	movcs	r0, #0
 8000eae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb2:	bf00      	nop

08000eb4 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
           uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08e      	sub	sp, #56	@ 0x38
 8000eb8:	af0a      	add	r7, sp, #40	@ 0x28
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	817b      	strh	r3, [r7, #10]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	813b      	strh	r3, [r7, #8]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8000ece:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <LiquidCrystal+0x90>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d019      	beq.n	8000f0a <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000ed6:	8939      	ldrh	r1, [r7, #8]
 8000ed8:	897a      	ldrh	r2, [r7, #10]
 8000eda:	2300      	movs	r3, #0
 8000edc:	9308      	str	r3, [sp, #32]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	9307      	str	r3, [sp, #28]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	9306      	str	r3, [sp, #24]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	9305      	str	r3, [sp, #20]
 8000eea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000eec:	9304      	str	r3, [sp, #16]
 8000eee:	8c3b      	ldrh	r3, [r7, #32]
 8000ef0:	9303      	str	r3, [sp, #12]
 8000ef2:	8bbb      	ldrh	r3, [r7, #28]
 8000ef4:	9302      	str	r3, [sp, #8]
 8000ef6:	8b3b      	ldrh	r3, [r7, #24]
 8000ef8:	9301      	str	r3, [sp, #4]
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	460b      	mov	r3, r1
 8000f00:	68f9      	ldr	r1, [r7, #12]
 8000f02:	2001      	movs	r0, #1
 8000f04:	f000 f820 	bl	8000f48 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8000f08:	e018      	b.n	8000f3c <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000f0a:	8939      	ldrh	r1, [r7, #8]
 8000f0c:	897a      	ldrh	r2, [r7, #10]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	9308      	str	r3, [sp, #32]
 8000f12:	2300      	movs	r3, #0
 8000f14:	9307      	str	r3, [sp, #28]
 8000f16:	2300      	movs	r3, #0
 8000f18:	9306      	str	r3, [sp, #24]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	9305      	str	r3, [sp, #20]
 8000f1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f20:	9304      	str	r3, [sp, #16]
 8000f22:	8c3b      	ldrh	r3, [r7, #32]
 8000f24:	9303      	str	r3, [sp, #12]
 8000f26:	8bbb      	ldrh	r3, [r7, #28]
 8000f28:	9302      	str	r3, [sp, #8]
 8000f2a:	8b3b      	ldrh	r3, [r7, #24]
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	460b      	mov	r3, r1
 8000f34:	68f9      	ldr	r1, [r7, #12]
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f806 	bl	8000f48 <init>
}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000000 	.word	0x20000000

08000f48 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
       uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
       uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	4611      	mov	r1, r2
 8000f52:	461a      	mov	r2, r3
 8000f54:	4603      	mov	r3, r0
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	81bb      	strh	r3, [r7, #12]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000f60:	4a19      	ldr	r2, [pc, #100]	@ (8000fc8 <init+0x80>)
 8000f62:	89bb      	ldrh	r3, [r7, #12]
 8000f64:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000f66:	4a19      	ldr	r2, [pc, #100]	@ (8000fcc <init+0x84>)
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000f6c:	4a18      	ldr	r2, [pc, #96]	@ (8000fd0 <init+0x88>)
 8000f6e:	8b3b      	ldrh	r3, [r7, #24]
 8000f70:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8000f72:	4a18      	ldr	r2, [pc, #96]	@ (8000fd4 <init+0x8c>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 8000f78:	4a17      	ldr	r2, [pc, #92]	@ (8000fd8 <init+0x90>)
 8000f7a:	8bbb      	ldrh	r3, [r7, #28]
 8000f7c:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8000f7e:	4a16      	ldr	r2, [pc, #88]	@ (8000fd8 <init+0x90>)
 8000f80:	8c3b      	ldrh	r3, [r7, #32]
 8000f82:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000f84:	4a14      	ldr	r2, [pc, #80]	@ (8000fd8 <init+0x90>)
 8000f86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f88:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 8000f8a:	4a13      	ldr	r2, [pc, #76]	@ (8000fd8 <init+0x90>)
 8000f8c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000f8e:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 8000f90:	4a11      	ldr	r2, [pc, #68]	@ (8000fd8 <init+0x90>)
 8000f92:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000f94:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000f96:	4a10      	ldr	r2, [pc, #64]	@ (8000fd8 <init+0x90>)
 8000f98:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000f9a:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd8 <init+0x90>)
 8000f9e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000fa0:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 8000fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd8 <init+0x90>)
 8000fa4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000fa6:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <init+0x94>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;

 // begin(16, 2);
}
 8000fb4:	e002      	b.n	8000fbc <init+0x74>
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <init+0x94>)
 8000fb8:	2210      	movs	r2, #16
 8000fba:	701a      	strb	r2, [r3, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200001f6 	.word	0x200001f6
 8000fcc:	200001f8 	.word	0x200001f8
 8000fd0:	200001fa 	.word	0x200001fa
 8000fd4:	2000020c 	.word	0x2000020c
 8000fd8:	200001fc 	.word	0x200001fc
 8000fdc:	20000210 	.word	0x20000210

08000fe0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460a      	mov	r2, r1
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d906      	bls.n	8001004 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8000ff6:	4b73      	ldr	r3, [pc, #460]	@ (80011c4 <begin+0x1e4>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	f043 0308 	orr.w	r3, r3, #8
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	4b70      	ldr	r3, [pc, #448]	@ (80011c4 <begin+0x1e4>)
 8001002:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8001004:	4a70      	ldr	r2, [pc, #448]	@ (80011c8 <begin+0x1e8>)
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 800100a:	79fa      	ldrb	r2, [r7, #7]
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	3340      	adds	r3, #64	@ 0x40
 8001010:	2140      	movs	r1, #64	@ 0x40
 8001012:	2000      	movs	r0, #0
 8001014:	f000 f95a 	bl	80012cc <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8001018:	4b6c      	ldr	r3, [pc, #432]	@ (80011cc <begin+0x1ec>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d009      	beq.n	8001034 <begin+0x54>
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d106      	bne.n	8001034 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8001026:	4b67      	ldr	r3, [pc, #412]	@ (80011c4 <begin+0x1e4>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b64      	ldr	r3, [pc, #400]	@ (80011c4 <begin+0x1e4>)
 8001032:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8001034:	f000 f8dc 	bl	80011f0 <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	617b      	str	r3, [r7, #20]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	60fb      	str	r3, [r7, #12]

 if(_fourbit_mode)
 8001040:	4b63      	ldr	r3, [pc, #396]	@ (80011d0 <begin+0x1f0>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d01b      	beq.n	8001080 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8001048:	4b62      	ldr	r3, [pc, #392]	@ (80011d4 <begin+0x1f4>)
 800104a:	881a      	ldrh	r2, [r3, #0]
 800104c:	4b62      	ldr	r3, [pc, #392]	@ (80011d8 <begin+0x1f8>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	4313      	orrs	r3, r2
 8001052:	b29a      	uxth	r2, r3
 8001054:	4b61      	ldr	r3, [pc, #388]	@ (80011dc <begin+0x1fc>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	4313      	orrs	r3, r2
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b60      	ldr	r3, [pc, #384]	@ (80011e0 <begin+0x200>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	4313      	orrs	r3, r2
 8001062:	b29a      	uxth	r2, r3
 8001064:	4b5e      	ldr	r3, [pc, #376]	@ (80011e0 <begin+0x200>)
 8001066:	885b      	ldrh	r3, [r3, #2]
 8001068:	4313      	orrs	r3, r2
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b5c      	ldr	r3, [pc, #368]	@ (80011e0 <begin+0x200>)
 800106e:	889b      	ldrh	r3, [r3, #4]
 8001070:	4313      	orrs	r3, r2
 8001072:	b29a      	uxth	r2, r3
 8001074:	4b5a      	ldr	r3, [pc, #360]	@ (80011e0 <begin+0x200>)
 8001076:	88db      	ldrh	r3, [r3, #6]
 8001078:	4313      	orrs	r3, r2
 800107a:	b29b      	uxth	r3, r3
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	e02a      	b.n	80010d6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001080:	4b54      	ldr	r3, [pc, #336]	@ (80011d4 <begin+0x1f4>)
 8001082:	881a      	ldrh	r2, [r3, #0]
 8001084:	4b54      	ldr	r3, [pc, #336]	@ (80011d8 <begin+0x1f8>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	4313      	orrs	r3, r2
 800108a:	b29a      	uxth	r2, r3
 800108c:	4b53      	ldr	r3, [pc, #332]	@ (80011dc <begin+0x1fc>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	4313      	orrs	r3, r2
 8001092:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001094:	4b52      	ldr	r3, [pc, #328]	@ (80011e0 <begin+0x200>)
 8001096:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001098:	4313      	orrs	r3, r2
 800109a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800109c:	4b50      	ldr	r3, [pc, #320]	@ (80011e0 <begin+0x200>)
 800109e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80010a4:	4b4e      	ldr	r3, [pc, #312]	@ (80011e0 <begin+0x200>)
 80010a6:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80010ac:	4b4c      	ldr	r3, [pc, #304]	@ (80011e0 <begin+0x200>)
 80010ae:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b4a      	ldr	r3, [pc, #296]	@ (80011e0 <begin+0x200>)
 80010b6:	891b      	ldrh	r3, [r3, #8]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	4b48      	ldr	r3, [pc, #288]	@ (80011e0 <begin+0x200>)
 80010be:	895b      	ldrh	r3, [r3, #10]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	4b46      	ldr	r3, [pc, #280]	@ (80011e0 <begin+0x200>)
 80010c6:	899b      	ldrh	r3, [r3, #12]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b44      	ldr	r3, [pc, #272]	@ (80011e0 <begin+0x200>)
 80010ce:	89db      	ldrh	r3, [r3, #14]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80010d4:	60bb      	str	r3, [r7, #8]
// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
// according to datasheet, we need at least 40ms after power rises above 2.7V
// so we'll wait 50 just to make sure
  HAL_Delay(50);
 80010d6:	2032      	movs	r0, #50	@ 0x32
 80010d8:	f000 fef6 	bl	8001ec8 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80010dc:	4b41      	ldr	r3, [pc, #260]	@ (80011e4 <begin+0x204>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a3c      	ldr	r2, [pc, #240]	@ (80011d4 <begin+0x1f4>)
 80010e2:	8811      	ldrh	r1, [r2, #0]
 80010e4:	2200      	movs	r2, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fdca 	bl	8002c80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80010ec:	4b3d      	ldr	r3, [pc, #244]	@ (80011e4 <begin+0x204>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a3a      	ldr	r2, [pc, #232]	@ (80011dc <begin+0x1fc>)
 80010f2:	8811      	ldrh	r1, [r2, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 fdc2 	bl	8002c80 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 80010fc:	4b36      	ldr	r3, [pc, #216]	@ (80011d8 <begin+0x1f8>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	2bff      	cmp	r3, #255	@ 0xff
 8001102:	d007      	beq.n	8001114 <begin+0x134>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8001104:	4b37      	ldr	r3, [pc, #220]	@ (80011e4 <begin+0x204>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a33      	ldr	r2, [pc, #204]	@ (80011d8 <begin+0x1f8>)
 800110a:	8811      	ldrh	r1, [r2, #0]
 800110c:	2200      	movs	r2, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fdb6 	bl	8002c80 <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8001114:	4b2b      	ldr	r3, [pc, #172]	@ (80011c4 <begin+0x1e4>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	2b00      	cmp	r3, #0
 800111e:	d115      	bne.n	800114c <begin+0x16c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f9f3 	bl	800150c <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8001126:	2005      	movs	r0, #5
 8001128:	f000 fece 	bl	8001ec8 <HAL_Delay>

    // second try
    write4bits(0x03);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f9ed 	bl	800150c <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8001132:	2005      	movs	r0, #5
 8001134:	f000 fec8 	bl	8001ec8 <HAL_Delay>

    // third go!
    write4bits(0x03);
 8001138:	2003      	movs	r0, #3
 800113a:	f000 f9e7 	bl	800150c <write4bits>
    HAL_Delay(1);
 800113e:	2001      	movs	r0, #1
 8001140:	f000 fec2 	bl	8001ec8 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 8001144:	2002      	movs	r0, #2
 8001146:	f000 f9e1 	bl	800150c <write4bits>
 800114a:	e01d      	b.n	8001188 <begin+0x1a8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800114c:	4b1d      	ldr	r3, [pc, #116]	@ (80011c4 <begin+0x1e4>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	f043 0320 	orr.w	r3, r3, #32
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f953 	bl	8001402 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800115c:	2005      	movs	r0, #5
 800115e:	f000 feb3 	bl	8001ec8 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8001162:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <begin+0x1e4>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	f043 0320 	orr.w	r3, r3, #32
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f948 	bl	8001402 <command>
    HAL_Delay(1);
 8001172:	2001      	movs	r0, #1
 8001174:	f000 fea8 	bl	8001ec8 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <begin+0x1e4>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	f043 0320 	orr.w	r3, r3, #32
 8001180:	b2db      	uxtb	r3, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f93d 	bl	8001402 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8001188:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <begin+0x1e4>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	b2db      	uxtb	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f935 	bl	8001402 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001198:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <begin+0x208>)
 800119a:	2204      	movs	r2, #4
 800119c:	701a      	strb	r2, [r3, #0]
  display();
 800119e:	f000 f8ef 	bl	8001380 <display>

  // clear it off
  clear();
 80011a2:	f000 f8b1 	bl	8001308 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <begin+0x20c>)
 80011a8:	2202      	movs	r2, #2
 80011aa:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80011ac:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <begin+0x20c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f923 	bl	8001402 <command>

}
 80011bc:	bf00      	nop
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000210 	.word	0x20000210
 80011c8:	20000213 	.word	0x20000213
 80011cc:	200001f4 	.word	0x200001f4
 80011d0:	20000000 	.word	0x20000000
 80011d4:	200001f6 	.word	0x200001f6
 80011d8:	200001f8 	.word	0x200001f8
 80011dc:	200001fa 	.word	0x200001fa
 80011e0:	200001fc 	.word	0x200001fc
 80011e4:	2000020c 	.word	0x2000020c
 80011e8:	20000211 	.word	0x20000211
 80011ec:	20000212 	.word	0x20000212

080011f0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80011f6:	4b2f      	ldr	r3, [pc, #188]	@ (80012b4 <enableClock+0xc4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a2f      	ldr	r2, [pc, #188]	@ (80012b8 <enableClock+0xc8>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d10c      	bne.n	800121a <enableClock+0x2a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	4b2e      	ldr	r3, [pc, #184]	@ (80012bc <enableClock+0xcc>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a2d      	ldr	r2, [pc, #180]	@ (80012bc <enableClock+0xcc>)
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b2b      	ldr	r3, [pc, #172]	@ (80012bc <enableClock+0xcc>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
  else if(_port == GPIOD)
    __HAL_RCC_GPIOD_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8001218:	e046      	b.n	80012a8 <enableClock+0xb8>
  else if(_port == GPIOB)
 800121a:	4b26      	ldr	r3, [pc, #152]	@ (80012b4 <enableClock+0xc4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a28      	ldr	r2, [pc, #160]	@ (80012c0 <enableClock+0xd0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d10c      	bne.n	800123e <enableClock+0x4e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001224:	4b25      	ldr	r3, [pc, #148]	@ (80012bc <enableClock+0xcc>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a24      	ldr	r2, [pc, #144]	@ (80012bc <enableClock+0xcc>)
 800122a:	f043 0308 	orr.w	r3, r3, #8
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b22      	ldr	r3, [pc, #136]	@ (80012bc <enableClock+0xcc>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]
}
 800123c:	e034      	b.n	80012a8 <enableClock+0xb8>
  else if(_port == GPIOB)
 800123e:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <enableClock+0xc4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a1f      	ldr	r2, [pc, #124]	@ (80012c0 <enableClock+0xd0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d10c      	bne.n	8001262 <enableClock+0x72>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001248:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <enableClock+0xcc>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a1b      	ldr	r2, [pc, #108]	@ (80012bc <enableClock+0xcc>)
 800124e:	f043 0308 	orr.w	r3, r3, #8
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <enableClock+0xcc>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	e022      	b.n	80012a8 <enableClock+0xb8>
  else if(_port == GPIOC)
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <enableClock+0xc4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a17      	ldr	r2, [pc, #92]	@ (80012c4 <enableClock+0xd4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d10c      	bne.n	8001286 <enableClock+0x96>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126c:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <enableClock+0xcc>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a12      	ldr	r2, [pc, #72]	@ (80012bc <enableClock+0xcc>)
 8001272:	f043 0310 	orr.w	r3, r3, #16
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <enableClock+0xcc>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
}
 8001284:	e010      	b.n	80012a8 <enableClock+0xb8>
  else if(_port == GPIOD)
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <enableClock+0xc4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a0f      	ldr	r2, [pc, #60]	@ (80012c8 <enableClock+0xd8>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d10b      	bne.n	80012a8 <enableClock+0xb8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001290:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <enableClock+0xcc>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a09      	ldr	r2, [pc, #36]	@ (80012bc <enableClock+0xcc>)
 8001296:	f043 0320 	orr.w	r3, r3, #32
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <enableClock+0xcc>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0320 	and.w	r3, r3, #32
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
}
 80012a8:	bf00      	nop
 80012aa:	371c      	adds	r7, #28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	2000020c 	.word	0x2000020c
 80012b8:	40010800 	.word	0x40010800
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010c00 	.word	0x40010c00
 80012c4:	40011000 	.word	0x40011000
 80012c8:	40011400 	.word	0x40011400

080012cc <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <setRowOffsets+0x38>)
 80012e0:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <setRowOffsets+0x38>)
 80012e8:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <setRowOffsets+0x38>)
 80012f0:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <setRowOffsets+0x38>)
 80012f8:	70da      	strb	r2, [r3, #3]
}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	20000214 	.word	0x20000214

08001308 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800130c:	2001      	movs	r0, #1
 800130e:	f000 f878 	bl	8001402 <command>
  HAL_Delay(2);  // this command takes a long time!
 8001312:	2002      	movs	r0, #2
 8001314:	f000 fdd8 	bl	8001ec8 <HAL_Delay>
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	460a      	mov	r2, r1
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	4613      	mov	r3, r2
 800132a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800132c:	2304      	movs	r3, #4
 800132e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d803      	bhi.n	8001340 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	3b01      	subs	r3, #1
 800133e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8001340:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <setCursor+0x5c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	79ba      	ldrb	r2, [r7, #6]
 8001346:	429a      	cmp	r2, r3
 8001348:	d303      	bcc.n	8001352 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800134a:	4b0b      	ldr	r3, [pc, #44]	@ (8001378 <setCursor+0x5c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	3b01      	subs	r3, #1
 8001350:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	4a09      	ldr	r2, [pc, #36]	@ (800137c <setCursor+0x60>)
 8001356:	5cd2      	ldrb	r2, [r2, r3]
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	4413      	add	r3, r2
 800135c:	b2db      	uxtb	r3, r3
 800135e:	b25b      	sxtb	r3, r3
 8001360:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001364:	b25b      	sxtb	r3, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f84a 	bl	8001402 <command>
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000213 	.word	0x20000213
 800137c:	20000214 	.word	0x20000214

08001380 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8001384:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <display+0x28>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <display+0x28>)
 8001390:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8001392:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <display+0x28>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	b2db      	uxtb	r3, r3
 800139c:	4618      	mov	r0, r3
 800139e:	f000 f830 	bl	8001402 <command>
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000211 	.word	0x20000211

080013ac <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <print+0x12>
 80013ba:	2300      	movs	r3, #0
 80013bc:	e01d      	b.n	80013fa <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7fe fec4 	bl	8000150 <strlen>
 80013c8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80013ce:	e00c      	b.n	80013ea <print+0x3e>
    if (write(*buffer++)) n++;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	617a      	str	r2, [r7, #20]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 f820 	bl	800141e <write>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d008      	beq.n	80013f6 <print+0x4a>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3301      	adds	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
  while (size--) {
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1e5a      	subs	r2, r3, #1
 80013ee:	613a      	str	r2, [r7, #16]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1ed      	bne.n	80013d0 <print+0x24>
 80013f4:	e000      	b.n	80013f8 <print+0x4c>
    else break;
 80013f6:	bf00      	nop
  }
  return n;
 80013f8:	68fb      	ldr	r3, [r7, #12]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f000 f813 	bl	800143c <send>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <write>:

inline size_t write(uint8_t value) {
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	2101      	movs	r1, #1
 800142c:	4618      	mov	r0, r3
 800142e:	f000 f805 	bl	800143c <send>
  return 1; // assume sucess
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	460a      	mov	r2, r1
 8001446:	71fb      	strb	r3, [r7, #7]
 8001448:	4613      	mov	r3, r2
 800144a:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 800144c:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <send+0x6c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a16      	ldr	r2, [pc, #88]	@ (80014ac <send+0x70>)
 8001452:	8811      	ldrh	r1, [r2, #0]
 8001454:	79ba      	ldrb	r2, [r7, #6]
 8001456:	4618      	mov	r0, r3
 8001458:	f001 fc12 	bl	8002c80 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 800145c:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <send+0x74>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	2bff      	cmp	r3, #255	@ 0xff
 8001462:	d007      	beq.n	8001474 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8001464:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <send+0x6c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a11      	ldr	r2, [pc, #68]	@ (80014b0 <send+0x74>)
 800146a:	8811      	ldrh	r1, [r2, #0]
 800146c:	2200      	movs	r2, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f001 fc06 	bl	8002c80 <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 8001474:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <send+0x78>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	f003 0310 	and.w	r3, r3, #16
 800147c:	2b00      	cmp	r3, #0
 800147e:	d004      	beq.n	800148a <send+0x4e>
    write8bits(value);
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f86c 	bl	8001560 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8001488:	e009      	b.n	800149e <send+0x62>
    write4bits(value>>4);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	091b      	lsrs	r3, r3, #4
 800148e:	b2db      	uxtb	r3, r3
 8001490:	4618      	mov	r0, r3
 8001492:	f000 f83b 	bl	800150c <write4bits>
    write4bits(value);
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	4618      	mov	r0, r3
 800149a:	f000 f837 	bl	800150c <write4bits>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2000020c 	.word	0x2000020c
 80014ac:	200001f6 	.word	0x200001f6
 80014b0:	200001f8 	.word	0x200001f8
 80014b4:	20000210 	.word	0x20000210

080014b8 <pulseEnable>:

void pulseEnable(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80014bc:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <pulseEnable+0x4c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a11      	ldr	r2, [pc, #68]	@ (8001508 <pulseEnable+0x50>)
 80014c2:	8811      	ldrh	r1, [r2, #0]
 80014c4:	2200      	movs	r2, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 fbda 	bl	8002c80 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f000 fcfb 	bl	8001ec8 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 80014d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <pulseEnable+0x4c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001508 <pulseEnable+0x50>)
 80014d8:	8811      	ldrh	r1, [r2, #0]
 80014da:	2201      	movs	r2, #1
 80014dc:	4618      	mov	r0, r3
 80014de:	f001 fbcf 	bl	8002c80 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 80014e2:	2001      	movs	r0, #1
 80014e4:	f000 fcf0 	bl	8001ec8 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <pulseEnable+0x4c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a06      	ldr	r2, [pc, #24]	@ (8001508 <pulseEnable+0x50>)
 80014ee:	8811      	ldrh	r1, [r2, #0]
 80014f0:	2200      	movs	r2, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 fbc4 	bl	8002c80 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 80014f8:	2001      	movs	r0, #1
 80014fa:	f000 fce5 	bl	8001ec8 <HAL_Delay>
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000020c 	.word	0x2000020c
 8001508:	200001fa 	.word	0x200001fa

0800150c <write4bits>:

void write4bits(uint8_t value) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	e013      	b.n	8001544 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800151c:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <write4bits+0x4c>)
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	4a0e      	ldr	r2, [pc, #56]	@ (800155c <write4bits+0x50>)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001528:	79fa      	ldrb	r2, [r7, #7]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	fa42 f303 	asr.w	r3, r2, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	b2db      	uxtb	r3, r3
 8001538:	461a      	mov	r2, r3
 800153a:	f001 fba1 	bl	8002c80 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	3301      	adds	r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b03      	cmp	r3, #3
 8001548:	dde8      	ble.n	800151c <write4bits+0x10>
  }

  pulseEnable();
 800154a:	f7ff ffb5 	bl	80014b8 <pulseEnable>
}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000020c 	.word	0x2000020c
 800155c:	200001fc 	.word	0x200001fc

08001560 <write8bits>:

void write8bits(uint8_t value) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	e013      	b.n	8001598 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001570:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <write8bits+0x4c>)
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	4a0e      	ldr	r2, [pc, #56]	@ (80015b0 <write8bits+0x50>)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800157c:	79fa      	ldrb	r2, [r7, #7]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	fa42 f303 	asr.w	r3, r2, r3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	b2db      	uxtb	r3, r3
 800158c:	461a      	mov	r2, r3
 800158e:	f001 fb77 	bl	8002c80 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3301      	adds	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b07      	cmp	r3, #7
 800159c:	dde8      	ble.n	8001570 <write8bits+0x10>
  }

  pulseEnable();
 800159e:	f7ff ff8b 	bl	80014b8 <pulseEnable>
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000020c 	.word	0x2000020c
 80015b0:	200001fc 	.word	0x200001fc
 80015b4:	00000000 	.word	0x00000000

080015b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b0ae      	sub	sp, #184	@ 0xb8
 80015bc:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
    float Voltage_mV = 0;
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    float Temperature_C = 0;
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    float Temperature_F = 0;
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d6:	f000 fc15 	bl	8001e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015da:	f000 f941 	bl	8001860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015de:	f000 f9f7 	bl	80019d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80015e2:	f000 f98d 	bl	8001900 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80015e6:	f000 f9c9 	bl	800197c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LiquidCrystal(GPIOB, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_8, GPIO_PIN_9);
 80015ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015ee:	9303      	str	r3, [sp, #12]
 80015f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	2380      	movs	r3, #128	@ 0x80
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	2340      	movs	r3, #64	@ 0x40
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2320      	movs	r3, #32
 8001600:	2210      	movs	r2, #16
 8001602:	2108      	movs	r1, #8
 8001604:	4888      	ldr	r0, [pc, #544]	@ (8001828 <main+0x270>)
 8001606:	f7ff fc55 	bl	8000eb4 <LiquidCrystal>
  begin(16, 2);
 800160a:	2102      	movs	r1, #2
 800160c:	2010      	movs	r0, #16
 800160e:	f7ff fce7 	bl	8000fe0 <begin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);                    // Start ADC Conversion
 8001612:	4886      	ldr	r0, [pc, #536]	@ (800182c <main+0x274>)
 8001614:	f000 fd54 	bl	80020c0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1);     // Poll ADC1 and Timeout = 1mSec
 8001618:	2101      	movs	r1, #1
 800161a:	4884      	ldr	r0, [pc, #528]	@ (800182c <main+0x274>)
 800161c:	f000 fe2a 	bl	8002274 <HAL_ADC_PollForConversion>
	  uint32_t adc_value = HAL_ADC_GetValue(&hadc1);  // Read the ADC Conversion Result
 8001620:	4882      	ldr	r0, [pc, #520]	@ (800182c <main+0x274>)
 8001622:	f000 ff2d 	bl	8002480 <HAL_ADC_GetValue>
 8001626:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
	  HAL_ADC_Stop(&hadc1);
 800162a:	4880      	ldr	r0, [pc, #512]	@ (800182c <main+0x274>)
 800162c:	f000 fdf6 	bl	800221c <HAL_ADC_Stop>

	  // Calculate voltage and temperature
	  Voltage_mV = (((adc_value * 3.3) / 4095.0) - 0.5) * 1000;
 8001630:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8001634:	f7fe fed6 	bl	80003e4 <__aeabi_ui2d>
 8001638:	a375      	add	r3, pc, #468	@ (adr r3, 8001810 <main+0x258>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7fe ff4b 	bl	80004d8 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	a373      	add	r3, pc, #460	@ (adr r3, 8001818 <main+0x260>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7ff f86c 	bl	800072c <__aeabi_ddiv>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b73      	ldr	r3, [pc, #460]	@ (8001830 <main+0x278>)
 8001662:	f7fe fd81 	bl	8000168 <__aeabi_dsub>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	4b70      	ldr	r3, [pc, #448]	@ (8001834 <main+0x27c>)
 8001674:	f7fe ff30 	bl	80004d8 <__aeabi_dmul>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	f7ff fa02 	bl	8000a88 <__aeabi_d2f>
 8001684:	4603      	mov	r3, r0
 8001686:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	  Temperature_C = Voltage_mV / 10;
 800168a:	496b      	ldr	r1, [pc, #428]	@ (8001838 <main+0x280>)
 800168c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001690:	f7ff fafe 	bl	8000c90 <__aeabi_fdiv>
 8001694:	4603      	mov	r3, r0
 8001696:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	  Temperature_F = (Temperature_C * 1.8) + 32;
 800169a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800169e:	f7fe fec3 	bl	8000428 <__aeabi_f2d>
 80016a2:	a35f      	add	r3, pc, #380	@ (adr r3, 8001820 <main+0x268>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7fe ff16 	bl	80004d8 <__aeabi_dmul>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	4b60      	ldr	r3, [pc, #384]	@ (800183c <main+0x284>)
 80016ba:	f7fe fd57 	bl	800016c <__adddf3>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff f9df 	bl	8000a88 <__aeabi_d2f>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

	  // Transmit temperature over UART
	  char msg[100];
	  sprintf(msg, "TempC: %.2f C", Temperature_C);
 80016d0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80016d4:	f7fe fea8 	bl	8000428 <__aeabi_f2d>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4638      	mov	r0, r7
 80016de:	4958      	ldr	r1, [pc, #352]	@ (8001840 <main+0x288>)
 80016e0:	f002 ff50 	bl	8004584 <siprintf>
	  	 setCursor(0, 0);
 80016e4:	2100      	movs	r1, #0
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff fe18 	bl	800131c <setCursor>
	  	 print(msg);
 80016ec:	463b      	mov	r3, r7
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fe5c 	bl	80013ac <print>

	  	 sprintf(msg, "TempF: %.2f F", Temperature_F);
 80016f4:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80016f8:	f7fe fe96 	bl	8000428 <__aeabi_f2d>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4638      	mov	r0, r7
 8001702:	4950      	ldr	r1, [pc, #320]	@ (8001844 <main+0x28c>)
 8001704:	f002 ff3e 	bl	8004584 <siprintf>
	  	 setCursor(0, 1);
 8001708:	2101      	movs	r1, #1
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff fe06 	bl	800131c <setCursor>
	  	 print(msg);
 8001710:	463b      	mov	r3, r7
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fe4a 	bl	80013ac <print>
	  // LED Alerts for Temperature Levels
	  if (Temperature_C > 60) {
 8001718:	494b      	ldr	r1, [pc, #300]	@ (8001848 <main+0x290>)
 800171a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800171e:	f7ff fbbf 	bl	8000ea0 <__aeabi_fcmpgt>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d020      	beq.n	800176a <main+0x1b2>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);     // Red LED ON
 8001728:	2201      	movs	r2, #1
 800172a:	2102      	movs	r1, #2
 800172c:	483e      	ldr	r0, [pc, #248]	@ (8001828 <main+0x270>)
 800172e:	f001 faa7 	bl	8002c80 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // Blue LED OFF
 8001732:	2200      	movs	r2, #0
 8001734:	2104      	movs	r1, #4
 8001736:	483c      	ldr	r0, [pc, #240]	@ (8001828 <main+0x270>)
 8001738:	f001 faa2 	bl	8002c80 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);   // Green LED OFF
 800173c:	2200      	movs	r2, #0
 800173e:	2101      	movs	r1, #1
 8001740:	4839      	ldr	r0, [pc, #228]	@ (8001828 <main+0x270>)
 8001742:	f001 fa9d 	bl	8002c80 <HAL_GPIO_WritePin>

	      sprintf(msg, "LED: Red ON (Temperature > 60 degrees Celsius)\r\n");
 8001746:	463b      	mov	r3, r7
 8001748:	4940      	ldr	r1, [pc, #256]	@ (800184c <main+0x294>)
 800174a:	4618      	mov	r0, r3
 800174c:	f002 ff1a 	bl	8004584 <siprintf>
	      HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001750:	463b      	mov	r3, r7
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fcfc 	bl	8000150 <strlen>
 8001758:	4603      	mov	r3, r0
 800175a:	b29a      	uxth	r2, r3
 800175c:	4639      	mov	r1, r7
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	483b      	ldr	r0, [pc, #236]	@ (8001850 <main+0x298>)
 8001764:	f002 f870 	bl	8003848 <HAL_UART_Transmit>
 8001768:	e048      	b.n	80017fc <main+0x244>
	  } else if (Temperature_C < 20) {
 800176a:	493a      	ldr	r1, [pc, #232]	@ (8001854 <main+0x29c>)
 800176c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8001770:	f7ff fb78 	bl	8000e64 <__aeabi_fcmplt>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d020      	beq.n	80017bc <main+0x204>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);   // Blue LED ON
 800177a:	2201      	movs	r2, #1
 800177c:	2104      	movs	r1, #4
 800177e:	482a      	ldr	r0, [pc, #168]	@ (8001828 <main+0x270>)
 8001780:	f001 fa7e 	bl	8002c80 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);     // Red LED OFF
 8001784:	2200      	movs	r2, #0
 8001786:	2102      	movs	r1, #2
 8001788:	4827      	ldr	r0, [pc, #156]	@ (8001828 <main+0x270>)
 800178a:	f001 fa79 	bl	8002c80 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);   // Green LED OFF
 800178e:	2200      	movs	r2, #0
 8001790:	2101      	movs	r1, #1
 8001792:	4825      	ldr	r0, [pc, #148]	@ (8001828 <main+0x270>)
 8001794:	f001 fa74 	bl	8002c80 <HAL_GPIO_WritePin>
	      sprintf(msg, "LED: Blue ON (Temperature < 20 degrees Celsius)\r\n");
 8001798:	463b      	mov	r3, r7
 800179a:	492f      	ldr	r1, [pc, #188]	@ (8001858 <main+0x2a0>)
 800179c:	4618      	mov	r0, r3
 800179e:	f002 fef1 	bl	8004584 <siprintf>
	      HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80017a2:	463b      	mov	r3, r7
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fcd3 	bl	8000150 <strlen>
 80017aa:	4603      	mov	r3, r0
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	4639      	mov	r1, r7
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
 80017b4:	4826      	ldr	r0, [pc, #152]	@ (8001850 <main+0x298>)
 80017b6:	f002 f847 	bl	8003848 <HAL_UART_Transmit>
 80017ba:	e01f      	b.n	80017fc <main+0x244>
	  } else {
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);   // Green LED ON
 80017bc:	2201      	movs	r2, #1
 80017be:	2101      	movs	r1, #1
 80017c0:	4819      	ldr	r0, [pc, #100]	@ (8001828 <main+0x270>)
 80017c2:	f001 fa5d 	bl	8002c80 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // Blue LED OFF
 80017c6:	2200      	movs	r2, #0
 80017c8:	2104      	movs	r1, #4
 80017ca:	4817      	ldr	r0, [pc, #92]	@ (8001828 <main+0x270>)
 80017cc:	f001 fa58 	bl	8002c80 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);     // Red LED OFF
 80017d0:	2200      	movs	r2, #0
 80017d2:	2102      	movs	r1, #2
 80017d4:	4814      	ldr	r0, [pc, #80]	@ (8001828 <main+0x270>)
 80017d6:	f001 fa53 	bl	8002c80 <HAL_GPIO_WritePin>
	      sprintf(msg, "LED: Green ON (20 degrees Celsius <= Temperature <= 60 degrees Celsius)\r\n");
 80017da:	463b      	mov	r3, r7
 80017dc:	491f      	ldr	r1, [pc, #124]	@ (800185c <main+0x2a4>)
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 fed0 	bl	8004584 <siprintf>
	      HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80017e4:	463b      	mov	r3, r7
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fcb2 	bl	8000150 <strlen>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	4639      	mov	r1, r7
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	4816      	ldr	r0, [pc, #88]	@ (8001850 <main+0x298>)
 80017f8:	f002 f826 	bl	8003848 <HAL_UART_Transmit>
	  }

	  HAL_Delay(2000);
 80017fc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001800:	f000 fb62 	bl	8001ec8 <HAL_Delay>
	  clear();
 8001804:	f7ff fd80 	bl	8001308 <clear>
  {
 8001808:	e703      	b.n	8001612 <main+0x5a>
 800180a:	bf00      	nop
 800180c:	f3af 8000 	nop.w
 8001810:	66666666 	.word	0x66666666
 8001814:	400a6666 	.word	0x400a6666
 8001818:	00000000 	.word	0x00000000
 800181c:	40affe00 	.word	0x40affe00
 8001820:	cccccccd 	.word	0xcccccccd
 8001824:	3ffccccc 	.word	0x3ffccccc
 8001828:	40010c00 	.word	0x40010c00
 800182c:	20000218 	.word	0x20000218
 8001830:	3fe00000 	.word	0x3fe00000
 8001834:	408f4000 	.word	0x408f4000
 8001838:	41200000 	.word	0x41200000
 800183c:	40400000 	.word	0x40400000
 8001840:	08006808 	.word	0x08006808
 8001844:	08006818 	.word	0x08006818
 8001848:	42700000 	.word	0x42700000
 800184c:	08006828 	.word	0x08006828
 8001850:	20000248 	.word	0x20000248
 8001854:	41a00000 	.word	0x41a00000
 8001858:	0800685c 	.word	0x0800685c
 800185c:	08006890 	.word	0x08006890

08001860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b094      	sub	sp, #80	@ 0x50
 8001864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001866:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800186a:	2228      	movs	r2, #40	@ 0x28
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f002 feeb 	bl	800464a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001890:	2302      	movs	r3, #2
 8001892:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001894:	2301      	movs	r3, #1
 8001896:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001898:	2310      	movs	r3, #16
 800189a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800189c:	2300      	movs	r3, #0
 800189e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018a4:	4618      	mov	r0, r3
 80018a6:	f001 fa03 	bl	8002cb0 <HAL_RCC_OscConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80018b0:	f000 f8ce 	bl	8001a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b4:	230f      	movs	r3, #15
 80018b6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f001 fc70 	bl	80031b4 <HAL_RCC_ClockConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80018da:	f000 f8b9 	bl	8001a50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018de:	2302      	movs	r3, #2
 80018e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	4618      	mov	r0, r3
 80018ea:	f001 fdf1 	bl	80034d0 <HAL_RCCEx_PeriphCLKConfig>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018f4:	f000 f8ac 	bl	8001a50 <Error_Handler>
  }
}
 80018f8:	bf00      	nop
 80018fa:	3750      	adds	r7, #80	@ 0x50
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001910:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <MX_ADC1_Init+0x74>)
 8001912:	4a19      	ldr	r2, [pc, #100]	@ (8001978 <MX_ADC1_Init+0x78>)
 8001914:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001916:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <MX_ADC1_Init+0x74>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800191c:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <MX_ADC1_Init+0x74>)
 800191e:	2200      	movs	r2, #0
 8001920:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001922:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <MX_ADC1_Init+0x74>)
 8001924:	2200      	movs	r2, #0
 8001926:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001928:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <MX_ADC1_Init+0x74>)
 800192a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800192e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001930:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <MX_ADC1_Init+0x74>)
 8001932:	2200      	movs	r2, #0
 8001934:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001936:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <MX_ADC1_Init+0x74>)
 8001938:	2201      	movs	r2, #1
 800193a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800193c:	480d      	ldr	r0, [pc, #52]	@ (8001974 <MX_ADC1_Init+0x74>)
 800193e:	f000 fae7 	bl	8001f10 <HAL_ADC_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001948:	f000 f882 	bl	8001a50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800194c:	2304      	movs	r3, #4
 800194e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001950:	2301      	movs	r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	4619      	mov	r1, r3
 800195c:	4805      	ldr	r0, [pc, #20]	@ (8001974 <MX_ADC1_Init+0x74>)
 800195e:	f000 fd9b 	bl	8002498 <HAL_ADC_ConfigChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001968:	f000 f872 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000218 	.word	0x20000218
 8001978:	40012400 	.word	0x40012400

0800197c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <MX_USART1_UART_Init+0x4c>)
 8001982:	4a12      	ldr	r2, [pc, #72]	@ (80019cc <MX_USART1_UART_Init+0x50>)
 8001984:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <MX_USART1_UART_Init+0x4c>)
 8001988:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800198c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800198e:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <MX_USART1_UART_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001994:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <MX_USART1_UART_Init+0x4c>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800199a:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <MX_USART1_UART_Init+0x4c>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019a0:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <MX_USART1_UART_Init+0x4c>)
 80019a2:	220c      	movs	r2, #12
 80019a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a6:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <MX_USART1_UART_Init+0x4c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <MX_USART1_UART_Init+0x4c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019b2:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <MX_USART1_UART_Init+0x4c>)
 80019b4:	f001 fef8 	bl	80037a8 <HAL_UART_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019be:	f000 f847 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000248 	.word	0x20000248
 80019cc:	40013800 	.word	0x40013800

080019d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d6:	f107 0308 	add.w	r3, r7, #8
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <MX_GPIO_Init+0x78>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a17      	ldr	r2, [pc, #92]	@ (8001a48 <MX_GPIO_Init+0x78>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <MX_GPIO_Init+0x78>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <MX_GPIO_Init+0x78>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a11      	ldr	r2, [pc, #68]	@ (8001a48 <MX_GPIO_Init+0x78>)
 8001a02:	f043 0308 	orr.w	r3, r3, #8
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <MX_GPIO_Init+0x78>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a14:	2200      	movs	r2, #0
 8001a16:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001a1a:	480c      	ldr	r0, [pc, #48]	@ (8001a4c <MX_GPIO_Init+0x7c>)
 8001a1c:	f001 f930 	bl	8002c80 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a20:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8001a24:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	4619      	mov	r1, r3
 8001a38:	4804      	ldr	r0, [pc, #16]	@ (8001a4c <MX_GPIO_Init+0x7c>)
 8001a3a:	f000 ffa5 	bl	8002988 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010c00 	.word	0x40010c00

08001a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <Error_Handler+0x8>

08001a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a62:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <HAL_MspInit+0x5c>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	4a14      	ldr	r2, [pc, #80]	@ (8001ab8 <HAL_MspInit+0x5c>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6193      	str	r3, [r2, #24]
 8001a6e:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <HAL_MspInit+0x5c>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <HAL_MspInit+0x5c>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab8 <HAL_MspInit+0x5c>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a84:	61d3      	str	r3, [r2, #28]
 8001a86:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <HAL_MspInit+0x5c>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a92:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <HAL_MspInit+0x60>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	4a04      	ldr	r2, [pc, #16]	@ (8001abc <HAL_MspInit+0x60>)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010000 	.word	0x40010000

08001ac0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a14      	ldr	r2, [pc, #80]	@ (8001b2c <HAL_ADC_MspInit+0x6c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d121      	bne.n	8001b24 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ae0:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <HAL_ADC_MspInit+0x70>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a12      	ldr	r2, [pc, #72]	@ (8001b30 <HAL_ADC_MspInit+0x70>)
 8001ae6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <HAL_ADC_MspInit+0x70>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <HAL_ADC_MspInit+0x70>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a0c      	ldr	r2, [pc, #48]	@ (8001b30 <HAL_ADC_MspInit+0x70>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <HAL_ADC_MspInit+0x70>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b10:	2310      	movs	r3, #16
 8001b12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b14:	2303      	movs	r3, #3
 8001b16:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4805      	ldr	r0, [pc, #20]	@ (8001b34 <HAL_ADC_MspInit+0x74>)
 8001b20:	f000 ff32 	bl	8002988 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b24:	bf00      	nop
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40012400 	.word	0x40012400
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40010800 	.word	0x40010800

08001b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc4 <HAL_UART_MspInit+0x8c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d131      	bne.n	8001bbc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b58:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc8 <HAL_UART_MspInit+0x90>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8001bc8 <HAL_UART_MspInit+0x90>)
 8001b5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b18      	ldr	r3, [pc, #96]	@ (8001bc8 <HAL_UART_MspInit+0x90>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <HAL_UART_MspInit+0x90>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a14      	ldr	r2, [pc, #80]	@ (8001bc8 <HAL_UART_MspInit+0x90>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <HAL_UART_MspInit+0x90>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480b      	ldr	r0, [pc, #44]	@ (8001bcc <HAL_UART_MspInit+0x94>)
 8001b9e:	f000 fef3 	bl	8002988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ba6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4805      	ldr	r0, [pc, #20]	@ (8001bcc <HAL_UART_MspInit+0x94>)
 8001bb8:	f000 fee6 	bl	8002988 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bbc:	bf00      	nop
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40013800 	.word	0x40013800
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010800 	.word	0x40010800

08001bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <NMI_Handler+0x4>

08001bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <HardFault_Handler+0x4>

08001be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <MemManage_Handler+0x4>

08001be8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <BusFault_Handler+0x4>

08001bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <UsageFault_Handler+0x4>

08001bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c20:	f000 f936 	bl	8001e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <_getpid>:
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	4618      	mov	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <_kill>:
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
 8001c40:	f002 fd56 	bl	80046f0 <__errno>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2216      	movs	r2, #22
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <_exit>:
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffe7 	bl	8001c36 <_kill>
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <_exit+0x12>

08001c6c <_read>:
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e00a      	b.n	8001c94 <_read+0x28>
 8001c7e:	f3af 8000 	nop.w
 8001c82:	4601      	mov	r1, r0
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	60ba      	str	r2, [r7, #8]
 8001c8a:	b2ca      	uxtb	r2, r1
 8001c8c:	701a      	strb	r2, [r3, #0]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	dbf0      	blt.n	8001c7e <_read+0x12>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_write>:
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e009      	b.n	8001ccc <_write+0x26>
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	60ba      	str	r2, [r7, #8]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f3af 8000 	nop.w
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	dbf1      	blt.n	8001cb8 <_write+0x12>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <_close>:
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <_fstat>:
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	2300      	movs	r3, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <_isatty>:
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <_lseek>:
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	2300      	movs	r3, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
	...

08001d40 <_sbrk>:
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	4a14      	ldr	r2, [pc, #80]	@ (8001d9c <_sbrk+0x5c>)
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <_sbrk+0x60>)
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <_sbrk+0x22>
 8001d5c:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <_sbrk+0x64>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	@ (8001da8 <_sbrk+0x68>)
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d207      	bcs.n	8001d80 <_sbrk+0x40>
 8001d70:	f002 fcbe 	bl	80046f0 <__errno>
 8001d74:	4603      	mov	r3, r0
 8001d76:	220c      	movs	r2, #12
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	e009      	b.n	8001d94 <_sbrk+0x54>
 8001d80:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <_sbrk+0x64>)
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20002800 	.word	0x20002800
 8001da0:	00000400 	.word	0x00000400
 8001da4:	20000290 	.word	0x20000290
 8001da8:	200003e8 	.word	0x200003e8

08001dac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <Reset_Handler>:
 8001db8:	f7ff fff8 	bl	8001dac <SystemInit>
 8001dbc:	480b      	ldr	r0, [pc, #44]	@ (8001dec <LoopFillZerobss+0xe>)
 8001dbe:	490c      	ldr	r1, [pc, #48]	@ (8001df0 <LoopFillZerobss+0x12>)
 8001dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001df4 <LoopFillZerobss+0x16>)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:
 8001dc6:	58d4      	ldr	r4, [r2, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:
 8001dcc:	18c4      	adds	r4, r0, r3
 8001dce:	428c      	cmp	r4, r1
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
 8001dd2:	4a09      	ldr	r2, [pc, #36]	@ (8001df8 <LoopFillZerobss+0x1a>)
 8001dd4:	4c09      	ldr	r4, [pc, #36]	@ (8001dfc <LoopFillZerobss+0x1e>)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:
 8001dde:	42a2      	cmp	r2, r4
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>
 8001de2:	f002 fc8b 	bl	80046fc <__libc_init_array>
 8001de6:	f7ff fbe7 	bl	80015b8 <main>
 8001dea:	4770      	bx	lr
 8001dec:	20000000 	.word	0x20000000
 8001df0:	200001d8 	.word	0x200001d8
 8001df4:	08006c98 	.word	0x08006c98
 8001df8:	200001d8 	.word	0x200001d8
 8001dfc:	200003e4 	.word	0x200003e4

08001e00 <ADC1_2_IRQHandler>:
 8001e00:	e7fe      	b.n	8001e00 <ADC1_2_IRQHandler>
	...

08001e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e08:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <HAL_Init+0x28>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a07      	ldr	r2, [pc, #28]	@ (8001e2c <HAL_Init+0x28>)
 8001e0e:	f043 0310 	orr.w	r3, r3, #16
 8001e12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e14:	2003      	movs	r0, #3
 8001e16:	f000 fd83 	bl	8002920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1a:	200f      	movs	r0, #15
 8001e1c:	f000 f808 	bl	8001e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e20:	f7ff fe1c 	bl	8001a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40022000 	.word	0x40022000

08001e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <HAL_InitTick+0x54>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b12      	ldr	r3, [pc, #72]	@ (8001e88 <HAL_InitTick+0x58>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 fd8d 	bl	800296e <HAL_SYSTICK_Config>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00e      	b.n	8001e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b0f      	cmp	r3, #15
 8001e62:	d80a      	bhi.n	8001e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e64:	2200      	movs	r2, #0
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f000 fd63 	bl	8002936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e70:	4a06      	ldr	r2, [pc, #24]	@ (8001e8c <HAL_InitTick+0x5c>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e000      	b.n	8001e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000004 	.word	0x20000004
 8001e88:	2000000c 	.word	0x2000000c
 8001e8c:	20000008 	.word	0x20000008

08001e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <HAL_IncTick+0x1c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <HAL_IncTick+0x20>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a03      	ldr	r2, [pc, #12]	@ (8001eb0 <HAL_IncTick+0x20>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	2000000c 	.word	0x2000000c
 8001eb0:	20000294 	.word	0x20000294

08001eb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b02      	ldr	r3, [pc, #8]	@ (8001ec4 <HAL_GetTick+0x10>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	20000294 	.word	0x20000294

08001ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed0:	f7ff fff0 	bl	8001eb4 <HAL_GetTick>
 8001ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee0:	d005      	beq.n	8001eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <HAL_Delay+0x44>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4413      	add	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eee:	bf00      	nop
 8001ef0:	f7ff ffe0 	bl	8001eb4 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d8f7      	bhi.n	8001ef0 <HAL_Delay+0x28>
  {
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2000000c 	.word	0x2000000c

08001f10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0be      	b.n	80020b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d109      	bne.n	8001f54 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff fdb6 	bl	8001ac0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fbf1 	bl	800273c <ADC_ConversionStop_Disable>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f040 8099 	bne.w	800209e <HAL_ADC_Init+0x18e>
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 8095 	bne.w	800209e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f78:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f7c:	f023 0302 	bic.w	r3, r3, #2
 8001f80:	f043 0202 	orr.w	r2, r3, #2
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f90:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7b1b      	ldrb	r3, [r3, #12]
 8001f96:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f98:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fa8:	d003      	beq.n	8001fb2 <HAL_ADC_Init+0xa2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d102      	bne.n	8001fb8 <HAL_ADC_Init+0xa8>
 8001fb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fb6:	e000      	b.n	8001fba <HAL_ADC_Init+0xaa>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7d1b      	ldrb	r3, [r3, #20]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d119      	bne.n	8001ffc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7b1b      	ldrb	r3, [r3, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d109      	bne.n	8001fe4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	035a      	lsls	r2, r3, #13
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	e00b      	b.n	8001ffc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe8:	f043 0220 	orr.w	r2, r3, #32
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff4:	f043 0201 	orr.w	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	430a      	orrs	r2, r1
 800200e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	4b28      	ldr	r3, [pc, #160]	@ (80020b8 <HAL_ADC_Init+0x1a8>)
 8002018:	4013      	ands	r3, r2
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	430b      	orrs	r3, r1
 8002022:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800202c:	d003      	beq.n	8002036 <HAL_ADC_Init+0x126>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d104      	bne.n	8002040 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	3b01      	subs	r3, #1
 800203c:	051b      	lsls	r3, r3, #20
 800203e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002046:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	430a      	orrs	r2, r1
 8002052:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	4b18      	ldr	r3, [pc, #96]	@ (80020bc <HAL_ADC_Init+0x1ac>)
 800205c:	4013      	ands	r3, r2
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	429a      	cmp	r2, r3
 8002062:	d10b      	bne.n	800207c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206e:	f023 0303 	bic.w	r3, r3, #3
 8002072:	f043 0201 	orr.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800207a:	e018      	b.n	80020ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002080:	f023 0312 	bic.w	r3, r3, #18
 8002084:	f043 0210 	orr.w	r2, r3, #16
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002090:	f043 0201 	orr.w	r2, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800209c:	e007      	b.n	80020ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a2:	f043 0210 	orr.w	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	ffe1f7fd 	.word	0xffe1f7fd
 80020bc:	ff1f0efe 	.word	0xff1f0efe

080020c0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_ADC_Start+0x1a>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e098      	b.n	800220c <HAL_ADC_Start+0x14c>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fad0 	bl	8002688 <ADC_Enable>
 80020e8:	4603      	mov	r3, r0
 80020ea:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 8087 	bne.w	8002202 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a41      	ldr	r2, [pc, #260]	@ (8002214 <HAL_ADC_Start+0x154>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d105      	bne.n	800211e <HAL_ADC_Start+0x5e>
 8002112:	4b41      	ldr	r3, [pc, #260]	@ (8002218 <HAL_ADC_Start+0x158>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d115      	bne.n	800214a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002122:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002134:	2b00      	cmp	r3, #0
 8002136:	d026      	beq.n	8002186 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002140:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002148:	e01d      	b.n	8002186 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a2f      	ldr	r2, [pc, #188]	@ (8002218 <HAL_ADC_Start+0x158>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d004      	beq.n	800216a <HAL_ADC_Start+0xaa>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a2b      	ldr	r2, [pc, #172]	@ (8002214 <HAL_ADC_Start+0x154>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d10d      	bne.n	8002186 <HAL_ADC_Start+0xc6>
 800216a:	4b2b      	ldr	r3, [pc, #172]	@ (8002218 <HAL_ADC_Start+0x158>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800217e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d006      	beq.n	80021a0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002196:	f023 0206 	bic.w	r2, r3, #6
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800219e:	e002      	b.n	80021a6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f06f 0202 	mvn.w	r2, #2
 80021b6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021c2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021c6:	d113      	bne.n	80021f0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021cc:	4a11      	ldr	r2, [pc, #68]	@ (8002214 <HAL_ADC_Start+0x154>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d105      	bne.n	80021de <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021d2:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <HAL_ADC_Start+0x158>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d108      	bne.n	80021f0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	e00c      	b.n	800220a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	e003      	b.n	800220a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800220a:	7bfb      	ldrb	r3, [r7, #15]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40012800 	.word	0x40012800
 8002218:	40012400 	.word	0x40012400

0800221c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_ADC_Stop+0x1a>
 8002232:	2302      	movs	r3, #2
 8002234:	e01a      	b.n	800226c <HAL_ADC_Stop+0x50>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fa7c 	bl	800273c <ADC_ConversionStop_Disable>
 8002244:	4603      	mov	r3, r0
 8002246:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002252:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800228a:	f7ff fe13 	bl	8001eb4 <HAL_GetTick>
 800228e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a2:	f043 0220 	orr.w	r2, r3, #32
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0d3      	b.n	800245e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d131      	bne.n	8002328 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ca:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d12a      	bne.n	8002328 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022d2:	e021      	b.n	8002318 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022da:	d01d      	beq.n	8002318 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <HAL_ADC_PollForConversion+0x7e>
 80022e2:	f7ff fde7 	bl	8001eb4 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d212      	bcs.n	8002318 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10b      	bne.n	8002318 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002304:	f043 0204 	orr.w	r2, r3, #4
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e0a2      	b.n	800245e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0d6      	beq.n	80022d4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002326:	e070      	b.n	800240a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002328:	4b4f      	ldr	r3, [pc, #316]	@ (8002468 <HAL_ADC_PollForConversion+0x1f4>)
 800232a:	681c      	ldr	r4, [r3, #0]
 800232c:	2002      	movs	r0, #2
 800232e:	f001 f985 	bl	800363c <HAL_RCCEx_GetPeriphCLKFreq>
 8002332:	4603      	mov	r3, r0
 8002334:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6919      	ldr	r1, [r3, #16]
 800233e:	4b4b      	ldr	r3, [pc, #300]	@ (800246c <HAL_ADC_PollForConversion+0x1f8>)
 8002340:	400b      	ands	r3, r1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d118      	bne.n	8002378 <HAL_ADC_PollForConversion+0x104>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68d9      	ldr	r1, [r3, #12]
 800234c:	4b48      	ldr	r3, [pc, #288]	@ (8002470 <HAL_ADC_PollForConversion+0x1fc>)
 800234e:	400b      	ands	r3, r1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d111      	bne.n	8002378 <HAL_ADC_PollForConversion+0x104>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6919      	ldr	r1, [r3, #16]
 800235a:	4b46      	ldr	r3, [pc, #280]	@ (8002474 <HAL_ADC_PollForConversion+0x200>)
 800235c:	400b      	ands	r3, r1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d108      	bne.n	8002374 <HAL_ADC_PollForConversion+0x100>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68d9      	ldr	r1, [r3, #12]
 8002368:	4b43      	ldr	r3, [pc, #268]	@ (8002478 <HAL_ADC_PollForConversion+0x204>)
 800236a:	400b      	ands	r3, r1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_ADC_PollForConversion+0x100>
 8002370:	2314      	movs	r3, #20
 8002372:	e020      	b.n	80023b6 <HAL_ADC_PollForConversion+0x142>
 8002374:	2329      	movs	r3, #41	@ 0x29
 8002376:	e01e      	b.n	80023b6 <HAL_ADC_PollForConversion+0x142>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6919      	ldr	r1, [r3, #16]
 800237e:	4b3d      	ldr	r3, [pc, #244]	@ (8002474 <HAL_ADC_PollForConversion+0x200>)
 8002380:	400b      	ands	r3, r1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_ADC_PollForConversion+0x120>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68d9      	ldr	r1, [r3, #12]
 800238c:	4b3a      	ldr	r3, [pc, #232]	@ (8002478 <HAL_ADC_PollForConversion+0x204>)
 800238e:	400b      	ands	r3, r1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00d      	beq.n	80023b0 <HAL_ADC_PollForConversion+0x13c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6919      	ldr	r1, [r3, #16]
 800239a:	4b38      	ldr	r3, [pc, #224]	@ (800247c <HAL_ADC_PollForConversion+0x208>)
 800239c:	400b      	ands	r3, r1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d108      	bne.n	80023b4 <HAL_ADC_PollForConversion+0x140>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68d9      	ldr	r1, [r3, #12]
 80023a8:	4b34      	ldr	r3, [pc, #208]	@ (800247c <HAL_ADC_PollForConversion+0x208>)
 80023aa:	400b      	ands	r3, r1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_PollForConversion+0x140>
 80023b0:	2354      	movs	r3, #84	@ 0x54
 80023b2:	e000      	b.n	80023b6 <HAL_ADC_PollForConversion+0x142>
 80023b4:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023bc:	e021      	b.n	8002402 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d01a      	beq.n	80023fc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d007      	beq.n	80023dc <HAL_ADC_PollForConversion+0x168>
 80023cc:	f7ff fd72 	bl	8001eb4 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d20f      	bcs.n	80023fc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d90b      	bls.n	80023fc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e8:	f043 0204 	orr.w	r2, r3, #4
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e030      	b.n	800245e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	3301      	adds	r3, #1
 8002400:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	429a      	cmp	r2, r3
 8002408:	d8d9      	bhi.n	80023be <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f06f 0212 	mvn.w	r2, #18
 8002412:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002418:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800242a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800242e:	d115      	bne.n	800245c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002434:	2b00      	cmp	r3, #0
 8002436:	d111      	bne.n	800245c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002448:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d105      	bne.n	800245c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002454:	f043 0201 	orr.w	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	371c      	adds	r7, #28
 8002462:	46bd      	mov	sp, r7
 8002464:	bd90      	pop	{r4, r7, pc}
 8002466:	bf00      	nop
 8002468:	20000004 	.word	0x20000004
 800246c:	24924924 	.word	0x24924924
 8002470:	00924924 	.word	0x00924924
 8002474:	12492492 	.word	0x12492492
 8002478:	00492492 	.word	0x00492492
 800247c:	00249249 	.word	0x00249249

08002480 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x20>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e0dc      	b.n	8002672 <HAL_ADC_ConfigChannel+0x1da>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b06      	cmp	r3, #6
 80024c6:	d81c      	bhi.n	8002502 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	3b05      	subs	r3, #5
 80024da:	221f      	movs	r2, #31
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	4019      	ands	r1, r3
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	3b05      	subs	r3, #5
 80024f4:	fa00 f203 	lsl.w	r2, r0, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8002500:	e03c      	b.n	800257c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b0c      	cmp	r3, #12
 8002508:	d81c      	bhi.n	8002544 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	3b23      	subs	r3, #35	@ 0x23
 800251c:	221f      	movs	r2, #31
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	4019      	ands	r1, r3
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	3b23      	subs	r3, #35	@ 0x23
 8002536:	fa00 f203 	lsl.w	r2, r0, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	631a      	str	r2, [r3, #48]	@ 0x30
 8002542:	e01b      	b.n	800257c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	3b41      	subs	r3, #65	@ 0x41
 8002556:	221f      	movs	r2, #31
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	4019      	ands	r1, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	3b41      	subs	r3, #65	@ 0x41
 8002570:	fa00 f203 	lsl.w	r2, r0, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b09      	cmp	r3, #9
 8002582:	d91c      	bls.n	80025be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68d9      	ldr	r1, [r3, #12]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	4613      	mov	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4413      	add	r3, r2
 8002594:	3b1e      	subs	r3, #30
 8002596:	2207      	movs	r2, #7
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	4019      	ands	r1, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6898      	ldr	r0, [r3, #8]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	3b1e      	subs	r3, #30
 80025b0:	fa00 f203 	lsl.w	r2, r0, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	60da      	str	r2, [r3, #12]
 80025bc:	e019      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6919      	ldr	r1, [r3, #16]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	2207      	movs	r2, #7
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	4019      	ands	r1, r3
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6898      	ldr	r0, [r3, #8]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	fa00 f203 	lsl.w	r2, r0, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b10      	cmp	r3, #16
 80025f8:	d003      	beq.n	8002602 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025fe:	2b11      	cmp	r3, #17
 8002600:	d132      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a1d      	ldr	r2, [pc, #116]	@ (800267c <HAL_ADC_ConfigChannel+0x1e4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d125      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d126      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002628:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b10      	cmp	r3, #16
 8002630:	d11a      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002632:	4b13      	ldr	r3, [pc, #76]	@ (8002680 <HAL_ADC_ConfigChannel+0x1e8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a13      	ldr	r2, [pc, #76]	@ (8002684 <HAL_ADC_ConfigChannel+0x1ec>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	0c9a      	lsrs	r2, r3, #18
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002648:	e002      	b.n	8002650 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	3b01      	subs	r3, #1
 800264e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f9      	bne.n	800264a <HAL_ADC_ConfigChannel+0x1b2>
 8002656:	e007      	b.n	8002668 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265c:	f043 0220 	orr.w	r2, r3, #32
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002670:	7bfb      	ldrb	r3, [r7, #15]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	40012400 	.word	0x40012400
 8002680:	20000004 	.word	0x20000004
 8002684:	431bde83 	.word	0x431bde83

08002688 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d040      	beq.n	8002728 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0201 	orr.w	r2, r2, #1
 80026b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002734 <ADC_Enable+0xac>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002738 <ADC_Enable+0xb0>)
 80026bc:	fba2 2303 	umull	r2, r3, r2, r3
 80026c0:	0c9b      	lsrs	r3, r3, #18
 80026c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026c4:	e002      	b.n	80026cc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f9      	bne.n	80026c6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026d2:	f7ff fbef 	bl	8001eb4 <HAL_GetTick>
 80026d6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026d8:	e01f      	b.n	800271a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026da:	f7ff fbeb 	bl	8001eb4 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d918      	bls.n	800271a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d011      	beq.n	800271a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fa:	f043 0210 	orr.w	r2, r3, #16
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002706:	f043 0201 	orr.w	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e007      	b.n	800272a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b01      	cmp	r3, #1
 8002726:	d1d8      	bne.n	80026da <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000004 	.word	0x20000004
 8002738:	431bde83 	.word	0x431bde83

0800273c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d12e      	bne.n	80027b4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0201 	bic.w	r2, r2, #1
 8002764:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002766:	f7ff fba5 	bl	8001eb4 <HAL_GetTick>
 800276a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800276c:	e01b      	b.n	80027a6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800276e:	f7ff fba1 	bl	8001eb4 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d914      	bls.n	80027a6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b01      	cmp	r3, #1
 8002788:	d10d      	bne.n	80027a6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278e:	f043 0210 	orr.w	r2, r3, #16
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279a:	f043 0201 	orr.w	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e007      	b.n	80027b6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d0dc      	beq.n	800276e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <__NVIC_SetPriorityGrouping+0x44>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027dc:	4013      	ands	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027f2:	4a04      	ldr	r2, [pc, #16]	@ (8002804 <__NVIC_SetPriorityGrouping+0x44>)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	60d3      	str	r3, [r2, #12]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800280c:	4b04      	ldr	r3, [pc, #16]	@ (8002820 <__NVIC_GetPriorityGrouping+0x18>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	0a1b      	lsrs	r3, r3, #8
 8002812:	f003 0307 	and.w	r3, r3, #7
}
 8002816:	4618      	mov	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002834:	2b00      	cmp	r3, #0
 8002836:	db0a      	blt.n	800284e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	b2da      	uxtb	r2, r3
 800283c:	490c      	ldr	r1, [pc, #48]	@ (8002870 <__NVIC_SetPriority+0x4c>)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	0112      	lsls	r2, r2, #4
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	440b      	add	r3, r1
 8002848:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800284c:	e00a      	b.n	8002864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	4908      	ldr	r1, [pc, #32]	@ (8002874 <__NVIC_SetPriority+0x50>)
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	3b04      	subs	r3, #4
 800285c:	0112      	lsls	r2, r2, #4
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	440b      	add	r3, r1
 8002862:	761a      	strb	r2, [r3, #24]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000e100 	.word	0xe000e100
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	@ 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f1c3 0307 	rsb	r3, r3, #7
 8002892:	2b04      	cmp	r3, #4
 8002894:	bf28      	it	cs
 8002896:	2304      	movcs	r3, #4
 8002898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3304      	adds	r3, #4
 800289e:	2b06      	cmp	r3, #6
 80028a0:	d902      	bls.n	80028a8 <NVIC_EncodePriority+0x30>
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3b03      	subs	r3, #3
 80028a6:	e000      	b.n	80028aa <NVIC_EncodePriority+0x32>
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	f04f 32ff 	mov.w	r2, #4294967295
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43da      	mvns	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	401a      	ands	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c0:	f04f 31ff 	mov.w	r1, #4294967295
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ca:	43d9      	mvns	r1, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	4313      	orrs	r3, r2
         );
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3724      	adds	r7, #36	@ 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028ec:	d301      	bcc.n	80028f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ee:	2301      	movs	r3, #1
 80028f0:	e00f      	b.n	8002912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028f2:	4a0a      	ldr	r2, [pc, #40]	@ (800291c <SysTick_Config+0x40>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028fa:	210f      	movs	r1, #15
 80028fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002900:	f7ff ff90 	bl	8002824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002904:	4b05      	ldr	r3, [pc, #20]	@ (800291c <SysTick_Config+0x40>)
 8002906:	2200      	movs	r2, #0
 8002908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800290a:	4b04      	ldr	r3, [pc, #16]	@ (800291c <SysTick_Config+0x40>)
 800290c:	2207      	movs	r2, #7
 800290e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	e000e010 	.word	0xe000e010

08002920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff ff49 	bl	80027c0 <__NVIC_SetPriorityGrouping>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002936:	b580      	push	{r7, lr}
 8002938:	b086      	sub	sp, #24
 800293a:	af00      	add	r7, sp, #0
 800293c:	4603      	mov	r3, r0
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002948:	f7ff ff5e 	bl	8002808 <__NVIC_GetPriorityGrouping>
 800294c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f7ff ff90 	bl	8002878 <NVIC_EncodePriority>
 8002958:	4602      	mov	r2, r0
 800295a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff5f 	bl	8002824 <__NVIC_SetPriority>
}
 8002966:	bf00      	nop
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ffb0 	bl	80028dc <SysTick_Config>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002988:	b480      	push	{r7}
 800298a:	b08b      	sub	sp, #44	@ 0x2c
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002992:	2300      	movs	r3, #0
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002996:	2300      	movs	r3, #0
 8002998:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800299a:	e161      	b.n	8002c60 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800299c:	2201      	movs	r2, #1
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	f040 8150 	bne.w	8002c5a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4a97      	ldr	r2, [pc, #604]	@ (8002c1c <HAL_GPIO_Init+0x294>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d05e      	beq.n	8002a82 <HAL_GPIO_Init+0xfa>
 80029c4:	4a95      	ldr	r2, [pc, #596]	@ (8002c1c <HAL_GPIO_Init+0x294>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d875      	bhi.n	8002ab6 <HAL_GPIO_Init+0x12e>
 80029ca:	4a95      	ldr	r2, [pc, #596]	@ (8002c20 <HAL_GPIO_Init+0x298>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d058      	beq.n	8002a82 <HAL_GPIO_Init+0xfa>
 80029d0:	4a93      	ldr	r2, [pc, #588]	@ (8002c20 <HAL_GPIO_Init+0x298>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d86f      	bhi.n	8002ab6 <HAL_GPIO_Init+0x12e>
 80029d6:	4a93      	ldr	r2, [pc, #588]	@ (8002c24 <HAL_GPIO_Init+0x29c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d052      	beq.n	8002a82 <HAL_GPIO_Init+0xfa>
 80029dc:	4a91      	ldr	r2, [pc, #580]	@ (8002c24 <HAL_GPIO_Init+0x29c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d869      	bhi.n	8002ab6 <HAL_GPIO_Init+0x12e>
 80029e2:	4a91      	ldr	r2, [pc, #580]	@ (8002c28 <HAL_GPIO_Init+0x2a0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d04c      	beq.n	8002a82 <HAL_GPIO_Init+0xfa>
 80029e8:	4a8f      	ldr	r2, [pc, #572]	@ (8002c28 <HAL_GPIO_Init+0x2a0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d863      	bhi.n	8002ab6 <HAL_GPIO_Init+0x12e>
 80029ee:	4a8f      	ldr	r2, [pc, #572]	@ (8002c2c <HAL_GPIO_Init+0x2a4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d046      	beq.n	8002a82 <HAL_GPIO_Init+0xfa>
 80029f4:	4a8d      	ldr	r2, [pc, #564]	@ (8002c2c <HAL_GPIO_Init+0x2a4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d85d      	bhi.n	8002ab6 <HAL_GPIO_Init+0x12e>
 80029fa:	2b12      	cmp	r3, #18
 80029fc:	d82a      	bhi.n	8002a54 <HAL_GPIO_Init+0xcc>
 80029fe:	2b12      	cmp	r3, #18
 8002a00:	d859      	bhi.n	8002ab6 <HAL_GPIO_Init+0x12e>
 8002a02:	a201      	add	r2, pc, #4	@ (adr r2, 8002a08 <HAL_GPIO_Init+0x80>)
 8002a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a08:	08002a83 	.word	0x08002a83
 8002a0c:	08002a5d 	.word	0x08002a5d
 8002a10:	08002a6f 	.word	0x08002a6f
 8002a14:	08002ab1 	.word	0x08002ab1
 8002a18:	08002ab7 	.word	0x08002ab7
 8002a1c:	08002ab7 	.word	0x08002ab7
 8002a20:	08002ab7 	.word	0x08002ab7
 8002a24:	08002ab7 	.word	0x08002ab7
 8002a28:	08002ab7 	.word	0x08002ab7
 8002a2c:	08002ab7 	.word	0x08002ab7
 8002a30:	08002ab7 	.word	0x08002ab7
 8002a34:	08002ab7 	.word	0x08002ab7
 8002a38:	08002ab7 	.word	0x08002ab7
 8002a3c:	08002ab7 	.word	0x08002ab7
 8002a40:	08002ab7 	.word	0x08002ab7
 8002a44:	08002ab7 	.word	0x08002ab7
 8002a48:	08002ab7 	.word	0x08002ab7
 8002a4c:	08002a65 	.word	0x08002a65
 8002a50:	08002a79 	.word	0x08002a79
 8002a54:	4a76      	ldr	r2, [pc, #472]	@ (8002c30 <HAL_GPIO_Init+0x2a8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d013      	beq.n	8002a82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a5a:	e02c      	b.n	8002ab6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	623b      	str	r3, [r7, #32]
          break;
 8002a62:	e029      	b.n	8002ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	623b      	str	r3, [r7, #32]
          break;
 8002a6c:	e024      	b.n	8002ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	3308      	adds	r3, #8
 8002a74:	623b      	str	r3, [r7, #32]
          break;
 8002a76:	e01f      	b.n	8002ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	623b      	str	r3, [r7, #32]
          break;
 8002a80:	e01a      	b.n	8002ab8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d102      	bne.n	8002a90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	623b      	str	r3, [r7, #32]
          break;
 8002a8e:	e013      	b.n	8002ab8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d105      	bne.n	8002aa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a98:	2308      	movs	r3, #8
 8002a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	611a      	str	r2, [r3, #16]
          break;
 8002aa2:	e009      	b.n	8002ab8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aa4:	2308      	movs	r3, #8
 8002aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	615a      	str	r2, [r3, #20]
          break;
 8002aae:	e003      	b.n	8002ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	623b      	str	r3, [r7, #32]
          break;
 8002ab4:	e000      	b.n	8002ab8 <HAL_GPIO_Init+0x130>
          break;
 8002ab6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2bff      	cmp	r3, #255	@ 0xff
 8002abc:	d801      	bhi.n	8002ac2 <HAL_GPIO_Init+0x13a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	e001      	b.n	8002ac6 <HAL_GPIO_Init+0x13e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2bff      	cmp	r3, #255	@ 0xff
 8002acc:	d802      	bhi.n	8002ad4 <HAL_GPIO_Init+0x14c>
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	e002      	b.n	8002ada <HAL_GPIO_Init+0x152>
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	3b08      	subs	r3, #8
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	210f      	movs	r1, #15
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	401a      	ands	r2, r3
 8002aec:	6a39      	ldr	r1, [r7, #32]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	fa01 f303 	lsl.w	r3, r1, r3
 8002af4:	431a      	orrs	r2, r3
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 80a9 	beq.w	8002c5a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b08:	4b4a      	ldr	r3, [pc, #296]	@ (8002c34 <HAL_GPIO_Init+0x2ac>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	4a49      	ldr	r2, [pc, #292]	@ (8002c34 <HAL_GPIO_Init+0x2ac>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	6193      	str	r3, [r2, #24]
 8002b14:	4b47      	ldr	r3, [pc, #284]	@ (8002c34 <HAL_GPIO_Init+0x2ac>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b20:	4a45      	ldr	r2, [pc, #276]	@ (8002c38 <HAL_GPIO_Init+0x2b0>)
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	089b      	lsrs	r3, r3, #2
 8002b26:	3302      	adds	r3, #2
 8002b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	220f      	movs	r2, #15
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4013      	ands	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a3d      	ldr	r2, [pc, #244]	@ (8002c3c <HAL_GPIO_Init+0x2b4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00d      	beq.n	8002b68 <HAL_GPIO_Init+0x1e0>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a3c      	ldr	r2, [pc, #240]	@ (8002c40 <HAL_GPIO_Init+0x2b8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d007      	beq.n	8002b64 <HAL_GPIO_Init+0x1dc>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a3b      	ldr	r2, [pc, #236]	@ (8002c44 <HAL_GPIO_Init+0x2bc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d101      	bne.n	8002b60 <HAL_GPIO_Init+0x1d8>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e004      	b.n	8002b6a <HAL_GPIO_Init+0x1e2>
 8002b60:	2303      	movs	r3, #3
 8002b62:	e002      	b.n	8002b6a <HAL_GPIO_Init+0x1e2>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <HAL_GPIO_Init+0x1e2>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b6c:	f002 0203 	and.w	r2, r2, #3
 8002b70:	0092      	lsls	r2, r2, #2
 8002b72:	4093      	lsls	r3, r2
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b7a:	492f      	ldr	r1, [pc, #188]	@ (8002c38 <HAL_GPIO_Init+0x2b0>)
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7e:	089b      	lsrs	r3, r3, #2
 8002b80:	3302      	adds	r3, #2
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d006      	beq.n	8002ba2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b94:	4b2c      	ldr	r3, [pc, #176]	@ (8002c48 <HAL_GPIO_Init+0x2c0>)
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	492b      	ldr	r1, [pc, #172]	@ (8002c48 <HAL_GPIO_Init+0x2c0>)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	608b      	str	r3, [r1, #8]
 8002ba0:	e006      	b.n	8002bb0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ba2:	4b29      	ldr	r3, [pc, #164]	@ (8002c48 <HAL_GPIO_Init+0x2c0>)
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	4927      	ldr	r1, [pc, #156]	@ (8002c48 <HAL_GPIO_Init+0x2c0>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d006      	beq.n	8002bca <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bbc:	4b22      	ldr	r3, [pc, #136]	@ (8002c48 <HAL_GPIO_Init+0x2c0>)
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	4921      	ldr	r1, [pc, #132]	@ (8002c48 <HAL_GPIO_Init+0x2c0>)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60cb      	str	r3, [r1, #12]
 8002bc8:	e006      	b.n	8002bd8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bca:	4b1f      	ldr	r3, [pc, #124]	@ (8002c48 <HAL_GPIO_Init+0x2c0>)
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	491d      	ldr	r1, [pc, #116]	@ (8002c48 <HAL_GPIO_Init+0x2c0>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d006      	beq.n	8002bf2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002be4:	4b18      	ldr	r3, [pc, #96]	@ (8002c48 <HAL_GPIO_Init+0x2c0>)
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	4917      	ldr	r1, [pc, #92]	@ (8002c48 <HAL_GPIO_Init+0x2c0>)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
 8002bf0:	e006      	b.n	8002c00 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bf2:	4b15      	ldr	r3, [pc, #84]	@ (8002c48 <HAL_GPIO_Init+0x2c0>)
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	4913      	ldr	r1, [pc, #76]	@ (8002c48 <HAL_GPIO_Init+0x2c0>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d01f      	beq.n	8002c4c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c48 <HAL_GPIO_Init+0x2c0>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	490d      	ldr	r1, [pc, #52]	@ (8002c48 <HAL_GPIO_Init+0x2c0>)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]
 8002c18:	e01f      	b.n	8002c5a <HAL_GPIO_Init+0x2d2>
 8002c1a:	bf00      	nop
 8002c1c:	10320000 	.word	0x10320000
 8002c20:	10310000 	.word	0x10310000
 8002c24:	10220000 	.word	0x10220000
 8002c28:	10210000 	.word	0x10210000
 8002c2c:	10120000 	.word	0x10120000
 8002c30:	10110000 	.word	0x10110000
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40010000 	.word	0x40010000
 8002c3c:	40010800 	.word	0x40010800
 8002c40:	40010c00 	.word	0x40010c00
 8002c44:	40011000 	.word	0x40011000
 8002c48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c7c <HAL_GPIO_Init+0x2f4>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	4909      	ldr	r1, [pc, #36]	@ (8002c7c <HAL_GPIO_Init+0x2f4>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f47f ae96 	bne.w	800299c <HAL_GPIO_Init+0x14>
  }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	372c      	adds	r7, #44	@ 0x2c
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	40010400 	.word	0x40010400

08002c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c90:	787b      	ldrb	r3, [r7, #1]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c96:	887a      	ldrh	r2, [r7, #2]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c9c:	e003      	b.n	8002ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c9e:	887b      	ldrh	r3, [r7, #2]
 8002ca0:	041a      	lsls	r2, r3, #16
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	611a      	str	r2, [r3, #16]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e272      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 8087 	beq.w	8002dde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cd0:	4b92      	ldr	r3, [pc, #584]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d00c      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cdc:	4b8f      	ldr	r3, [pc, #572]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d112      	bne.n	8002d0e <HAL_RCC_OscConfig+0x5e>
 8002ce8:	4b8c      	ldr	r3, [pc, #560]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf4:	d10b      	bne.n	8002d0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf6:	4b89      	ldr	r3, [pc, #548]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d06c      	beq.n	8002ddc <HAL_RCC_OscConfig+0x12c>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d168      	bne.n	8002ddc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e24c      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d16:	d106      	bne.n	8002d26 <HAL_RCC_OscConfig+0x76>
 8002d18:	4b80      	ldr	r3, [pc, #512]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a7f      	ldr	r2, [pc, #508]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	e02e      	b.n	8002d84 <HAL_RCC_OscConfig+0xd4>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x98>
 8002d2e:	4b7b      	ldr	r3, [pc, #492]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a7a      	ldr	r2, [pc, #488]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	4b78      	ldr	r3, [pc, #480]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a77      	ldr	r2, [pc, #476]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e01d      	b.n	8002d84 <HAL_RCC_OscConfig+0xd4>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0xbc>
 8002d52:	4b72      	ldr	r3, [pc, #456]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a71      	ldr	r2, [pc, #452]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b6f      	ldr	r3, [pc, #444]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a6e      	ldr	r2, [pc, #440]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e00b      	b.n	8002d84 <HAL_RCC_OscConfig+0xd4>
 8002d6c:	4b6b      	ldr	r3, [pc, #428]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a6a      	ldr	r2, [pc, #424]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4b68      	ldr	r3, [pc, #416]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a67      	ldr	r2, [pc, #412]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d013      	beq.n	8002db4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7ff f892 	bl	8001eb4 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d94:	f7ff f88e 	bl	8001eb4 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	@ 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e200      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0xe4>
 8002db2:	e014      	b.n	8002dde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7ff f87e 	bl	8001eb4 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7ff f87a 	bl	8001eb4 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	@ 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e1ec      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dce:	4b53      	ldr	r3, [pc, #332]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x10c>
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d063      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dea:	4b4c      	ldr	r3, [pc, #304]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00b      	beq.n	8002e0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002df6:	4b49      	ldr	r3, [pc, #292]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d11c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x18c>
 8002e02:	4b46      	ldr	r3, [pc, #280]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d116      	bne.n	8002e3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	4b43      	ldr	r3, [pc, #268]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_RCC_OscConfig+0x176>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d001      	beq.n	8002e26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e1c0      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e26:	4b3d      	ldr	r3, [pc, #244]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4939      	ldr	r1, [pc, #228]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3a:	e03a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d020      	beq.n	8002e86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e44:	4b36      	ldr	r3, [pc, #216]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4a:	f7ff f833 	bl	8001eb4 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e52:	f7ff f82f 	bl	8001eb4 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e1a1      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e64:	4b2d      	ldr	r3, [pc, #180]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e70:	4b2a      	ldr	r3, [pc, #168]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4927      	ldr	r1, [pc, #156]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	600b      	str	r3, [r1, #0]
 8002e84:	e015      	b.n	8002eb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e86:	4b26      	ldr	r3, [pc, #152]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7ff f812 	bl	8001eb4 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e94:	f7ff f80e 	bl	8001eb4 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e180      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d03a      	beq.n	8002f34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d019      	beq.n	8002efa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec6:	4b17      	ldr	r3, [pc, #92]	@ (8002f24 <HAL_RCC_OscConfig+0x274>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ecc:	f7fe fff2 	bl	8001eb4 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7fe ffee 	bl	8001eb4 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e160      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ef2:	2001      	movs	r0, #1
 8002ef4:	f000 face 	bl	8003494 <RCC_Delay>
 8002ef8:	e01c      	b.n	8002f34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002efa:	4b0a      	ldr	r3, [pc, #40]	@ (8002f24 <HAL_RCC_OscConfig+0x274>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f00:	f7fe ffd8 	bl	8001eb4 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f06:	e00f      	b.n	8002f28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f08:	f7fe ffd4 	bl	8001eb4 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d908      	bls.n	8002f28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e146      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	42420000 	.word	0x42420000
 8002f24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	4b92      	ldr	r3, [pc, #584]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e9      	bne.n	8002f08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80a6 	beq.w	800308e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f46:	4b8b      	ldr	r3, [pc, #556]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10d      	bne.n	8002f6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	4b88      	ldr	r3, [pc, #544]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	4a87      	ldr	r2, [pc, #540]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f5c:	61d3      	str	r3, [r2, #28]
 8002f5e:	4b85      	ldr	r3, [pc, #532]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6e:	4b82      	ldr	r3, [pc, #520]	@ (8003178 <HAL_RCC_OscConfig+0x4c8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d118      	bne.n	8002fac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f7a:	4b7f      	ldr	r3, [pc, #508]	@ (8003178 <HAL_RCC_OscConfig+0x4c8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a7e      	ldr	r2, [pc, #504]	@ (8003178 <HAL_RCC_OscConfig+0x4c8>)
 8002f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f86:	f7fe ff95 	bl	8001eb4 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8e:	f7fe ff91 	bl	8001eb4 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b64      	cmp	r3, #100	@ 0x64
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e103      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa0:	4b75      	ldr	r3, [pc, #468]	@ (8003178 <HAL_RCC_OscConfig+0x4c8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d106      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x312>
 8002fb4:	4b6f      	ldr	r3, [pc, #444]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	4a6e      	ldr	r2, [pc, #440]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6213      	str	r3, [r2, #32]
 8002fc0:	e02d      	b.n	800301e <HAL_RCC_OscConfig+0x36e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x334>
 8002fca:	4b6a      	ldr	r3, [pc, #424]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	4a69      	ldr	r2, [pc, #420]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	6213      	str	r3, [r2, #32]
 8002fd6:	4b67      	ldr	r3, [pc, #412]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4a66      	ldr	r2, [pc, #408]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	6213      	str	r3, [r2, #32]
 8002fe2:	e01c      	b.n	800301e <HAL_RCC_OscConfig+0x36e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b05      	cmp	r3, #5
 8002fea:	d10c      	bne.n	8003006 <HAL_RCC_OscConfig+0x356>
 8002fec:	4b61      	ldr	r3, [pc, #388]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	4a60      	ldr	r2, [pc, #384]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002ff2:	f043 0304 	orr.w	r3, r3, #4
 8002ff6:	6213      	str	r3, [r2, #32]
 8002ff8:	4b5e      	ldr	r3, [pc, #376]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4a5d      	ldr	r2, [pc, #372]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6213      	str	r3, [r2, #32]
 8003004:	e00b      	b.n	800301e <HAL_RCC_OscConfig+0x36e>
 8003006:	4b5b      	ldr	r3, [pc, #364]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	4a5a      	ldr	r2, [pc, #360]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6213      	str	r3, [r2, #32]
 8003012:	4b58      	ldr	r3, [pc, #352]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	4a57      	ldr	r2, [pc, #348]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	f023 0304 	bic.w	r3, r3, #4
 800301c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d015      	beq.n	8003052 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003026:	f7fe ff45 	bl	8001eb4 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302c:	e00a      	b.n	8003044 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7fe ff41 	bl	8001eb4 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e0b1      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	4b4b      	ldr	r3, [pc, #300]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0ee      	beq.n	800302e <HAL_RCC_OscConfig+0x37e>
 8003050:	e014      	b.n	800307c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003052:	f7fe ff2f 	bl	8001eb4 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003058:	e00a      	b.n	8003070 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fe ff2b 	bl	8001eb4 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003068:	4293      	cmp	r3, r2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e09b      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003070:	4b40      	ldr	r3, [pc, #256]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1ee      	bne.n	800305a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800307c:	7dfb      	ldrb	r3, [r7, #23]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d105      	bne.n	800308e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003082:	4b3c      	ldr	r3, [pc, #240]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	4a3b      	ldr	r2, [pc, #236]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800308c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 8087 	beq.w	80031a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003098:	4b36      	ldr	r3, [pc, #216]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d061      	beq.n	8003168 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d146      	bne.n	800313a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ac:	4b33      	ldr	r3, [pc, #204]	@ (800317c <HAL_RCC_OscConfig+0x4cc>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b2:	f7fe feff 	bl	8001eb4 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fe fefb 	bl	8001eb4 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e06d      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030cc:	4b29      	ldr	r3, [pc, #164]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e0:	d108      	bne.n	80030f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030e2:	4b24      	ldr	r3, [pc, #144]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	4921      	ldr	r1, [pc, #132]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a19      	ldr	r1, [r3, #32]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	430b      	orrs	r3, r1
 8003106:	491b      	ldr	r1, [pc, #108]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310c:	4b1b      	ldr	r3, [pc, #108]	@ (800317c <HAL_RCC_OscConfig+0x4cc>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003112:	f7fe fecf 	bl	8001eb4 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311a:	f7fe fecb 	bl	8001eb4 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e03d      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800312c:	4b11      	ldr	r3, [pc, #68]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x46a>
 8003138:	e035      	b.n	80031a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313a:	4b10      	ldr	r3, [pc, #64]	@ (800317c <HAL_RCC_OscConfig+0x4cc>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe feb8 	bl	8001eb4 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe feb4 	bl	8001eb4 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e026      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315a:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <HAL_RCC_OscConfig+0x4c4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x498>
 8003166:	e01e      	b.n	80031a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d107      	bne.n	8003180 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e019      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
 8003174:	40021000 	.word	0x40021000
 8003178:	40007000 	.word	0x40007000
 800317c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003180:	4b0b      	ldr	r3, [pc, #44]	@ (80031b0 <HAL_RCC_OscConfig+0x500>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	429a      	cmp	r2, r3
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d001      	beq.n	80031a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000

080031b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0d0      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d910      	bls.n	80031f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b67      	ldr	r3, [pc, #412]	@ (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 0207 	bic.w	r2, r3, #7
 80031de:	4965      	ldr	r1, [pc, #404]	@ (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	4b63      	ldr	r3, [pc, #396]	@ (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0b8      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d020      	beq.n	8003246 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003210:	4b59      	ldr	r3, [pc, #356]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4a58      	ldr	r2, [pc, #352]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800321a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003228:	4b53      	ldr	r3, [pc, #332]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4a52      	ldr	r2, [pc, #328]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003232:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003234:	4b50      	ldr	r3, [pc, #320]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	494d      	ldr	r1, [pc, #308]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d040      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	4b47      	ldr	r3, [pc, #284]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d115      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e07f      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003272:	4b41      	ldr	r3, [pc, #260]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e073      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003282:	4b3d      	ldr	r3, [pc, #244]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e06b      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003292:	4b39      	ldr	r3, [pc, #228]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f023 0203 	bic.w	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4936      	ldr	r1, [pc, #216]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a4:	f7fe fe06 	bl	8001eb4 <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ac:	f7fe fe02 	bl	8001eb4 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e053      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 020c 	and.w	r2, r3, #12
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d1eb      	bne.n	80032ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032d4:	4b27      	ldr	r3, [pc, #156]	@ (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d210      	bcs.n	8003304 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b24      	ldr	r3, [pc, #144]	@ (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 0207 	bic.w	r2, r3, #7
 80032ea:	4922      	ldr	r1, [pc, #136]	@ (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b20      	ldr	r3, [pc, #128]	@ (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e032      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003310:	4b19      	ldr	r3, [pc, #100]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4916      	ldr	r1, [pc, #88]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 800331e:	4313      	orrs	r3, r2
 8003320:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d009      	beq.n	8003342 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800332e:	4b12      	ldr	r3, [pc, #72]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	490e      	ldr	r1, [pc, #56]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003342:	f000 f821 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8003346:	4602      	mov	r2, r0
 8003348:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	490a      	ldr	r1, [pc, #40]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 8003354:	5ccb      	ldrb	r3, [r1, r3]
 8003356:	fa22 f303 	lsr.w	r3, r2, r3
 800335a:	4a09      	ldr	r2, [pc, #36]	@ (8003380 <HAL_RCC_ClockConfig+0x1cc>)
 800335c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800335e:	4b09      	ldr	r3, [pc, #36]	@ (8003384 <HAL_RCC_ClockConfig+0x1d0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fe fd64 	bl	8001e30 <HAL_InitTick>

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40022000 	.word	0x40022000
 8003378:	40021000 	.word	0x40021000
 800337c:	080068dc 	.word	0x080068dc
 8003380:	20000004 	.word	0x20000004
 8003384:	20000008 	.word	0x20000008

08003388 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	2300      	movs	r3, #0
 800339c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033a2:	4b1e      	ldr	r3, [pc, #120]	@ (800341c <HAL_RCC_GetSysClockFreq+0x94>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d002      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x30>
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d003      	beq.n	80033be <HAL_RCC_GetSysClockFreq+0x36>
 80033b6:	e027      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033b8:	4b19      	ldr	r3, [pc, #100]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x98>)
 80033ba:	613b      	str	r3, [r7, #16]
      break;
 80033bc:	e027      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	0c9b      	lsrs	r3, r3, #18
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	4a17      	ldr	r2, [pc, #92]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033c8:	5cd3      	ldrb	r3, [r2, r3]
 80033ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d010      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033d6:	4b11      	ldr	r3, [pc, #68]	@ (800341c <HAL_RCC_GetSysClockFreq+0x94>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	0c5b      	lsrs	r3, r3, #17
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	4a11      	ldr	r2, [pc, #68]	@ (8003428 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033e2:	5cd3      	ldrb	r3, [r2, r3]
 80033e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x98>)
 80033ea:	fb03 f202 	mul.w	r2, r3, r2
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	e004      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a0c      	ldr	r2, [pc, #48]	@ (800342c <HAL_RCC_GetSysClockFreq+0xa4>)
 80033fc:	fb02 f303 	mul.w	r3, r2, r3
 8003400:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	613b      	str	r3, [r7, #16]
      break;
 8003406:	e002      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003408:	4b05      	ldr	r3, [pc, #20]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x98>)
 800340a:	613b      	str	r3, [r7, #16]
      break;
 800340c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800340e:	693b      	ldr	r3, [r7, #16]
}
 8003410:	4618      	mov	r0, r3
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
 8003420:	007a1200 	.word	0x007a1200
 8003424:	080068f4 	.word	0x080068f4
 8003428:	08006904 	.word	0x08006904
 800342c:	003d0900 	.word	0x003d0900

08003430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003434:	4b02      	ldr	r3, [pc, #8]	@ (8003440 <HAL_RCC_GetHCLKFreq+0x10>)
 8003436:	681b      	ldr	r3, [r3, #0]
}
 8003438:	4618      	mov	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr
 8003440:	20000004 	.word	0x20000004

08003444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003448:	f7ff fff2 	bl	8003430 <HAL_RCC_GetHCLKFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	4903      	ldr	r1, [pc, #12]	@ (8003468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003460:	4618      	mov	r0, r3
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40021000 	.word	0x40021000
 8003468:	080068ec 	.word	0x080068ec

0800346c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003470:	f7ff ffde 	bl	8003430 <HAL_RCC_GetHCLKFreq>
 8003474:	4602      	mov	r2, r0
 8003476:	4b05      	ldr	r3, [pc, #20]	@ (800348c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	0adb      	lsrs	r3, r3, #11
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	4903      	ldr	r1, [pc, #12]	@ (8003490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003482:	5ccb      	ldrb	r3, [r1, r3]
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003488:	4618      	mov	r0, r3
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	080068ec 	.word	0x080068ec

08003494 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800349c:	4b0a      	ldr	r3, [pc, #40]	@ (80034c8 <RCC_Delay+0x34>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a0a      	ldr	r2, [pc, #40]	@ (80034cc <RCC_Delay+0x38>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	0a5b      	lsrs	r3, r3, #9
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	fb02 f303 	mul.w	r3, r2, r3
 80034ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034b0:	bf00      	nop
  }
  while (Delay --);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1e5a      	subs	r2, r3, #1
 80034b6:	60fa      	str	r2, [r7, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f9      	bne.n	80034b0 <RCC_Delay+0x1c>
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr
 80034c8:	20000004 	.word	0x20000004
 80034cc:	10624dd3 	.word	0x10624dd3

080034d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d07d      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034ec:	2300      	movs	r3, #0
 80034ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f0:	4b4f      	ldr	r3, [pc, #316]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10d      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fc:	4b4c      	ldr	r3, [pc, #304]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	4a4b      	ldr	r2, [pc, #300]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003506:	61d3      	str	r3, [r2, #28]
 8003508:	4b49      	ldr	r3, [pc, #292]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003514:	2301      	movs	r3, #1
 8003516:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003518:	4b46      	ldr	r3, [pc, #280]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d118      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003524:	4b43      	ldr	r3, [pc, #268]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a42      	ldr	r2, [pc, #264]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800352a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800352e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003530:	f7fe fcc0 	bl	8001eb4 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003536:	e008      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003538:	f7fe fcbc 	bl	8001eb4 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b64      	cmp	r3, #100	@ 0x64
 8003544:	d901      	bls.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e06d      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354a:	4b3a      	ldr	r3, [pc, #232]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003556:	4b36      	ldr	r3, [pc, #216]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800355e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d02e      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	429a      	cmp	r2, r3
 8003572:	d027      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003574:	4b2e      	ldr	r3, [pc, #184]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800357c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800357e:	4b2e      	ldr	r3, [pc, #184]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003580:	2201      	movs	r2, #1
 8003582:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003584:	4b2c      	ldr	r3, [pc, #176]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800358a:	4a29      	ldr	r2, [pc, #164]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d014      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359a:	f7fe fc8b 	bl	8001eb4 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a2:	f7fe fc87 	bl	8001eb4 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e036      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0ee      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4917      	ldr	r1, [pc, #92]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d105      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035dc:	4b14      	ldr	r3, [pc, #80]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	4a13      	ldr	r2, [pc, #76]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	490b      	ldr	r1, [pc, #44]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003602:	4313      	orrs	r3, r2
 8003604:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	d008      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003612:	4b07      	ldr	r3, [pc, #28]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	4904      	ldr	r1, [pc, #16]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003620:	4313      	orrs	r3, r2
 8003622:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
 8003634:	40007000 	.word	0x40007000
 8003638:	42420440 	.word	0x42420440

0800363c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	2300      	movs	r3, #0
 800364a:	61fb      	str	r3, [r7, #28]
 800364c:	2300      	movs	r3, #0
 800364e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	2300      	movs	r3, #0
 8003656:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b10      	cmp	r3, #16
 800365c:	d00a      	beq.n	8003674 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b10      	cmp	r3, #16
 8003662:	f200 808a 	bhi.w	800377a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d045      	beq.n	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d075      	beq.n	800375e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003672:	e082      	b.n	800377a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003674:	4b46      	ldr	r3, [pc, #280]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800367a:	4b45      	ldr	r3, [pc, #276]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d07b      	beq.n	800377e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	0c9b      	lsrs	r3, r3, #18
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	4a41      	ldr	r2, [pc, #260]	@ (8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003690:	5cd3      	ldrb	r3, [r2, r3]
 8003692:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d015      	beq.n	80036ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800369e:	4b3c      	ldr	r3, [pc, #240]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	0c5b      	lsrs	r3, r3, #17
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003798 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80036aa:	5cd3      	ldrb	r3, [r2, r3]
 80036ac:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00d      	beq.n	80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80036b8:	4a38      	ldr	r2, [pc, #224]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	e004      	b.n	80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4a34      	ldr	r2, [pc, #208]	@ (80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80036d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036e0:	d102      	bne.n	80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	61bb      	str	r3, [r7, #24]
      break;
 80036e6:	e04a      	b.n	800377e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	4a2d      	ldr	r2, [pc, #180]	@ (80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	61bb      	str	r3, [r7, #24]
      break;
 80036f6:	e042      	b.n	800377e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80036f8:	4b25      	ldr	r3, [pc, #148]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003708:	d108      	bne.n	800371c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003714:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	e01f      	b.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003722:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003726:	d109      	bne.n	800373c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003728:	4b19      	ldr	r3, [pc, #100]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003734:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003738:	61bb      	str	r3, [r7, #24]
 800373a:	e00f      	b.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003742:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003746:	d11c      	bne.n	8003782 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003748:	4b11      	ldr	r3, [pc, #68]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d016      	beq.n	8003782 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003754:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003758:	61bb      	str	r3, [r7, #24]
      break;
 800375a:	e012      	b.n	8003782 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800375c:	e011      	b.n	8003782 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800375e:	f7ff fe85 	bl	800346c <HAL_RCC_GetPCLK2Freq>
 8003762:	4602      	mov	r2, r0
 8003764:	4b0a      	ldr	r3, [pc, #40]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	0b9b      	lsrs	r3, r3, #14
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	3301      	adds	r3, #1
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	fbb2 f3f3 	udiv	r3, r2, r3
 8003776:	61bb      	str	r3, [r7, #24]
      break;
 8003778:	e004      	b.n	8003784 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800377a:	bf00      	nop
 800377c:	e002      	b.n	8003784 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800377e:	bf00      	nop
 8003780:	e000      	b.n	8003784 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003782:	bf00      	nop
    }
  }
  return (frequency);
 8003784:	69bb      	ldr	r3, [r7, #24]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
 8003794:	08006908 	.word	0x08006908
 8003798:	08006918 	.word	0x08006918
 800379c:	007a1200 	.word	0x007a1200
 80037a0:	003d0900 	.word	0x003d0900
 80037a4:	aaaaaaab 	.word	0xaaaaaaab

080037a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e042      	b.n	8003840 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fe f9b2 	bl	8001b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2224      	movs	r2, #36	@ 0x24
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f91d 	bl	8003a2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695a      	ldr	r2, [r3, #20]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08a      	sub	sp, #40	@ 0x28
 800384c:	af02      	add	r7, sp, #8
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b20      	cmp	r3, #32
 8003866:	d16d      	bne.n	8003944 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_UART_Transmit+0x2c>
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e066      	b.n	8003946 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2221      	movs	r2, #33	@ 0x21
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003886:	f7fe fb15 	bl	8001eb4 <HAL_GetTick>
 800388a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	88fa      	ldrh	r2, [r7, #6]
 8003890:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	88fa      	ldrh	r2, [r7, #6]
 8003896:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a0:	d108      	bne.n	80038b4 <HAL_UART_Transmit+0x6c>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d104      	bne.n	80038b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	e003      	b.n	80038bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038bc:	e02a      	b.n	8003914 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2200      	movs	r2, #0
 80038c6:	2180      	movs	r1, #128	@ 0x80
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f840 	bl	800394e <UART_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e036      	b.n	8003946 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10b      	bne.n	80038f6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	3302      	adds	r3, #2
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	e007      	b.n	8003906 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	781a      	ldrb	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	3301      	adds	r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1cf      	bne.n	80038be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2200      	movs	r2, #0
 8003926:	2140      	movs	r1, #64	@ 0x40
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f810 	bl	800394e <UART_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e006      	b.n	8003946 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b090      	sub	sp, #64	@ 0x40
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395e:	e050      	b.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003966:	d04c      	beq.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003968:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <UART_WaitOnFlagUntilTimeout+0x30>
 800396e:	f7fe faa1 	bl	8001eb4 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800397a:	429a      	cmp	r2, r3
 800397c:	d241      	bcs.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	330c      	adds	r3, #12
 8003984:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800398e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003990:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003994:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	330c      	adds	r3, #12
 800399c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800399e:	637a      	str	r2, [r7, #52]	@ 0x34
 80039a0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80039ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e5      	bne.n	800397e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3314      	adds	r3, #20
 80039b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	e853 3f00 	ldrex	r3, [r3]
 80039c0:	613b      	str	r3, [r7, #16]
   return(result);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f023 0301 	bic.w	r3, r3, #1
 80039c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3314      	adds	r3, #20
 80039d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80039d2:	623a      	str	r2, [r7, #32]
 80039d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	69f9      	ldr	r1, [r7, #28]
 80039d8:	6a3a      	ldr	r2, [r7, #32]
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	61bb      	str	r3, [r7, #24]
   return(result);
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1e5      	bne.n	80039b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e00f      	b.n	8003a22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	bf0c      	ite	eq
 8003a12:	2301      	moveq	r3, #1
 8003a14:	2300      	movne	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d09f      	beq.n	8003960 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3740      	adds	r7, #64	@ 0x40
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003a66:	f023 030c 	bic.w	r3, r3, #12
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	68b9      	ldr	r1, [r7, #8]
 8003a70:	430b      	orrs	r3, r1
 8003a72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699a      	ldr	r2, [r3, #24]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b40 <UART_SetConfig+0x114>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d103      	bne.n	8003a9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a94:	f7ff fcea 	bl	800346c <HAL_RCC_GetPCLK2Freq>
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	e002      	b.n	8003aa2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a9c:	f7ff fcd2 	bl	8003444 <HAL_RCC_GetPCLK1Freq>
 8003aa0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009a      	lsls	r2, r3, #2
 8003aac:	441a      	add	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	4a22      	ldr	r2, [pc, #136]	@ (8003b44 <UART_SetConfig+0x118>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	0119      	lsls	r1, r3, #4
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	009a      	lsls	r2, r3, #2
 8003acc:	441a      	add	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b44 <UART_SetConfig+0x118>)
 8003ada:	fba3 0302 	umull	r0, r3, r3, r2
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	2064      	movs	r0, #100	@ 0x64
 8003ae2:	fb00 f303 	mul.w	r3, r0, r3
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	3332      	adds	r3, #50	@ 0x32
 8003aec:	4a15      	ldr	r2, [pc, #84]	@ (8003b44 <UART_SetConfig+0x118>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003af8:	4419      	add	r1, r3
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	009a      	lsls	r2, r3, #2
 8003b04:	441a      	add	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b10:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <UART_SetConfig+0x118>)
 8003b12:	fba3 0302 	umull	r0, r3, r3, r2
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	2064      	movs	r0, #100	@ 0x64
 8003b1a:	fb00 f303 	mul.w	r3, r0, r3
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	3332      	adds	r3, #50	@ 0x32
 8003b24:	4a07      	ldr	r2, [pc, #28]	@ (8003b44 <UART_SetConfig+0x118>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	f003 020f 	and.w	r2, r3, #15
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	440a      	add	r2, r1
 8003b36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40013800 	.word	0x40013800
 8003b44:	51eb851f 	.word	0x51eb851f

08003b48 <__cvt>:
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b4e:	461d      	mov	r5, r3
 8003b50:	bfbb      	ittet	lt
 8003b52:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003b56:	461d      	movlt	r5, r3
 8003b58:	2300      	movge	r3, #0
 8003b5a:	232d      	movlt	r3, #45	@ 0x2d
 8003b5c:	b088      	sub	sp, #32
 8003b5e:	4614      	mov	r4, r2
 8003b60:	bfb8      	it	lt
 8003b62:	4614      	movlt	r4, r2
 8003b64:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003b66:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003b68:	7013      	strb	r3, [r2, #0]
 8003b6a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003b6c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003b70:	f023 0820 	bic.w	r8, r3, #32
 8003b74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b78:	d005      	beq.n	8003b86 <__cvt+0x3e>
 8003b7a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003b7e:	d100      	bne.n	8003b82 <__cvt+0x3a>
 8003b80:	3601      	adds	r6, #1
 8003b82:	2302      	movs	r3, #2
 8003b84:	e000      	b.n	8003b88 <__cvt+0x40>
 8003b86:	2303      	movs	r3, #3
 8003b88:	aa07      	add	r2, sp, #28
 8003b8a:	9204      	str	r2, [sp, #16]
 8003b8c:	aa06      	add	r2, sp, #24
 8003b8e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003b92:	e9cd 3600 	strd	r3, r6, [sp]
 8003b96:	4622      	mov	r2, r4
 8003b98:	462b      	mov	r3, r5
 8003b9a:	f000 fe6d 	bl	8004878 <_dtoa_r>
 8003b9e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003ba2:	4607      	mov	r7, r0
 8003ba4:	d119      	bne.n	8003bda <__cvt+0x92>
 8003ba6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003ba8:	07db      	lsls	r3, r3, #31
 8003baa:	d50e      	bpl.n	8003bca <__cvt+0x82>
 8003bac:	eb00 0906 	add.w	r9, r0, r6
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	4629      	mov	r1, r5
 8003bb8:	f7fc fef6 	bl	80009a8 <__aeabi_dcmpeq>
 8003bbc:	b108      	cbz	r0, 8003bc2 <__cvt+0x7a>
 8003bbe:	f8cd 901c 	str.w	r9, [sp, #28]
 8003bc2:	2230      	movs	r2, #48	@ 0x30
 8003bc4:	9b07      	ldr	r3, [sp, #28]
 8003bc6:	454b      	cmp	r3, r9
 8003bc8:	d31e      	bcc.n	8003c08 <__cvt+0xc0>
 8003bca:	4638      	mov	r0, r7
 8003bcc:	9b07      	ldr	r3, [sp, #28]
 8003bce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003bd0:	1bdb      	subs	r3, r3, r7
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	b008      	add	sp, #32
 8003bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bda:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003bde:	eb00 0906 	add.w	r9, r0, r6
 8003be2:	d1e5      	bne.n	8003bb0 <__cvt+0x68>
 8003be4:	7803      	ldrb	r3, [r0, #0]
 8003be6:	2b30      	cmp	r3, #48	@ 0x30
 8003be8:	d10a      	bne.n	8003c00 <__cvt+0xb8>
 8003bea:	2200      	movs	r2, #0
 8003bec:	2300      	movs	r3, #0
 8003bee:	4620      	mov	r0, r4
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	f7fc fed9 	bl	80009a8 <__aeabi_dcmpeq>
 8003bf6:	b918      	cbnz	r0, 8003c00 <__cvt+0xb8>
 8003bf8:	f1c6 0601 	rsb	r6, r6, #1
 8003bfc:	f8ca 6000 	str.w	r6, [sl]
 8003c00:	f8da 3000 	ldr.w	r3, [sl]
 8003c04:	4499      	add	r9, r3
 8003c06:	e7d3      	b.n	8003bb0 <__cvt+0x68>
 8003c08:	1c59      	adds	r1, r3, #1
 8003c0a:	9107      	str	r1, [sp, #28]
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	e7d9      	b.n	8003bc4 <__cvt+0x7c>

08003c10 <__exponent>:
 8003c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c12:	2900      	cmp	r1, #0
 8003c14:	bfb6      	itet	lt
 8003c16:	232d      	movlt	r3, #45	@ 0x2d
 8003c18:	232b      	movge	r3, #43	@ 0x2b
 8003c1a:	4249      	neglt	r1, r1
 8003c1c:	2909      	cmp	r1, #9
 8003c1e:	7002      	strb	r2, [r0, #0]
 8003c20:	7043      	strb	r3, [r0, #1]
 8003c22:	dd29      	ble.n	8003c78 <__exponent+0x68>
 8003c24:	f10d 0307 	add.w	r3, sp, #7
 8003c28:	461d      	mov	r5, r3
 8003c2a:	270a      	movs	r7, #10
 8003c2c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003c30:	461a      	mov	r2, r3
 8003c32:	fb07 1416 	mls	r4, r7, r6, r1
 8003c36:	3430      	adds	r4, #48	@ 0x30
 8003c38:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003c3c:	460c      	mov	r4, r1
 8003c3e:	2c63      	cmp	r4, #99	@ 0x63
 8003c40:	4631      	mov	r1, r6
 8003c42:	f103 33ff 	add.w	r3, r3, #4294967295
 8003c46:	dcf1      	bgt.n	8003c2c <__exponent+0x1c>
 8003c48:	3130      	adds	r1, #48	@ 0x30
 8003c4a:	1e94      	subs	r4, r2, #2
 8003c4c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003c50:	4623      	mov	r3, r4
 8003c52:	1c41      	adds	r1, r0, #1
 8003c54:	42ab      	cmp	r3, r5
 8003c56:	d30a      	bcc.n	8003c6e <__exponent+0x5e>
 8003c58:	f10d 0309 	add.w	r3, sp, #9
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	42ac      	cmp	r4, r5
 8003c60:	bf88      	it	hi
 8003c62:	2300      	movhi	r3, #0
 8003c64:	3302      	adds	r3, #2
 8003c66:	4403      	add	r3, r0
 8003c68:	1a18      	subs	r0, r3, r0
 8003c6a:	b003      	add	sp, #12
 8003c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c6e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003c72:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003c76:	e7ed      	b.n	8003c54 <__exponent+0x44>
 8003c78:	2330      	movs	r3, #48	@ 0x30
 8003c7a:	3130      	adds	r1, #48	@ 0x30
 8003c7c:	7083      	strb	r3, [r0, #2]
 8003c7e:	70c1      	strb	r1, [r0, #3]
 8003c80:	1d03      	adds	r3, r0, #4
 8003c82:	e7f1      	b.n	8003c68 <__exponent+0x58>

08003c84 <_printf_float>:
 8003c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c88:	b091      	sub	sp, #68	@ 0x44
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003c90:	4616      	mov	r6, r2
 8003c92:	461f      	mov	r7, r3
 8003c94:	4605      	mov	r5, r0
 8003c96:	f000 fce1 	bl	800465c <_localeconv_r>
 8003c9a:	6803      	ldr	r3, [r0, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	9308      	str	r3, [sp, #32]
 8003ca0:	f7fc fa56 	bl	8000150 <strlen>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	930e      	str	r3, [sp, #56]	@ 0x38
 8003ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8003cac:	9009      	str	r0, [sp, #36]	@ 0x24
 8003cae:	3307      	adds	r3, #7
 8003cb0:	f023 0307 	bic.w	r3, r3, #7
 8003cb4:	f103 0208 	add.w	r2, r3, #8
 8003cb8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003cbc:	f8d4 b000 	ldr.w	fp, [r4]
 8003cc0:	f8c8 2000 	str.w	r2, [r8]
 8003cc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003cc8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003ccc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003cce:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003cda:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003cde:	4b9c      	ldr	r3, [pc, #624]	@ (8003f50 <_printf_float+0x2cc>)
 8003ce0:	f7fc fe94 	bl	8000a0c <__aeabi_dcmpun>
 8003ce4:	bb70      	cbnz	r0, 8003d44 <_printf_float+0xc0>
 8003ce6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003cea:	f04f 32ff 	mov.w	r2, #4294967295
 8003cee:	4b98      	ldr	r3, [pc, #608]	@ (8003f50 <_printf_float+0x2cc>)
 8003cf0:	f7fc fe6e 	bl	80009d0 <__aeabi_dcmple>
 8003cf4:	bb30      	cbnz	r0, 8003d44 <_printf_float+0xc0>
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	4640      	mov	r0, r8
 8003cfc:	4649      	mov	r1, r9
 8003cfe:	f7fc fe5d 	bl	80009bc <__aeabi_dcmplt>
 8003d02:	b110      	cbz	r0, 8003d0a <_printf_float+0x86>
 8003d04:	232d      	movs	r3, #45	@ 0x2d
 8003d06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d0a:	4a92      	ldr	r2, [pc, #584]	@ (8003f54 <_printf_float+0x2d0>)
 8003d0c:	4b92      	ldr	r3, [pc, #584]	@ (8003f58 <_printf_float+0x2d4>)
 8003d0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003d12:	bf94      	ite	ls
 8003d14:	4690      	movls	r8, r2
 8003d16:	4698      	movhi	r8, r3
 8003d18:	2303      	movs	r3, #3
 8003d1a:	f04f 0900 	mov.w	r9, #0
 8003d1e:	6123      	str	r3, [r4, #16]
 8003d20:	f02b 0304 	bic.w	r3, fp, #4
 8003d24:	6023      	str	r3, [r4, #0]
 8003d26:	4633      	mov	r3, r6
 8003d28:	4621      	mov	r1, r4
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	9700      	str	r7, [sp, #0]
 8003d2e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003d30:	f000 f9d4 	bl	80040dc <_printf_common>
 8003d34:	3001      	adds	r0, #1
 8003d36:	f040 8090 	bne.w	8003e5a <_printf_float+0x1d6>
 8003d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3e:	b011      	add	sp, #68	@ 0x44
 8003d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d44:	4642      	mov	r2, r8
 8003d46:	464b      	mov	r3, r9
 8003d48:	4640      	mov	r0, r8
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	f7fc fe5e 	bl	8000a0c <__aeabi_dcmpun>
 8003d50:	b148      	cbz	r0, 8003d66 <_printf_float+0xe2>
 8003d52:	464b      	mov	r3, r9
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	bfb8      	it	lt
 8003d58:	232d      	movlt	r3, #45	@ 0x2d
 8003d5a:	4a80      	ldr	r2, [pc, #512]	@ (8003f5c <_printf_float+0x2d8>)
 8003d5c:	bfb8      	it	lt
 8003d5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003d62:	4b7f      	ldr	r3, [pc, #508]	@ (8003f60 <_printf_float+0x2dc>)
 8003d64:	e7d3      	b.n	8003d0e <_printf_float+0x8a>
 8003d66:	6863      	ldr	r3, [r4, #4]
 8003d68:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	d13f      	bne.n	8003df0 <_printf_float+0x16c>
 8003d70:	2306      	movs	r3, #6
 8003d72:	6063      	str	r3, [r4, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003d7a:	6023      	str	r3, [r4, #0]
 8003d7c:	9206      	str	r2, [sp, #24]
 8003d7e:	aa0e      	add	r2, sp, #56	@ 0x38
 8003d80:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003d84:	aa0d      	add	r2, sp, #52	@ 0x34
 8003d86:	9203      	str	r2, [sp, #12]
 8003d88:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003d8c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003d90:	6863      	ldr	r3, [r4, #4]
 8003d92:	4642      	mov	r2, r8
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	4628      	mov	r0, r5
 8003d98:	464b      	mov	r3, r9
 8003d9a:	910a      	str	r1, [sp, #40]	@ 0x28
 8003d9c:	f7ff fed4 	bl	8003b48 <__cvt>
 8003da0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003da2:	4680      	mov	r8, r0
 8003da4:	2947      	cmp	r1, #71	@ 0x47
 8003da6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003da8:	d128      	bne.n	8003dfc <_printf_float+0x178>
 8003daa:	1cc8      	adds	r0, r1, #3
 8003dac:	db02      	blt.n	8003db4 <_printf_float+0x130>
 8003dae:	6863      	ldr	r3, [r4, #4]
 8003db0:	4299      	cmp	r1, r3
 8003db2:	dd40      	ble.n	8003e36 <_printf_float+0x1b2>
 8003db4:	f1aa 0a02 	sub.w	sl, sl, #2
 8003db8:	fa5f fa8a 	uxtb.w	sl, sl
 8003dbc:	4652      	mov	r2, sl
 8003dbe:	3901      	subs	r1, #1
 8003dc0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003dc4:	910d      	str	r1, [sp, #52]	@ 0x34
 8003dc6:	f7ff ff23 	bl	8003c10 <__exponent>
 8003dca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003dcc:	4681      	mov	r9, r0
 8003dce:	1813      	adds	r3, r2, r0
 8003dd0:	2a01      	cmp	r2, #1
 8003dd2:	6123      	str	r3, [r4, #16]
 8003dd4:	dc02      	bgt.n	8003ddc <_printf_float+0x158>
 8003dd6:	6822      	ldr	r2, [r4, #0]
 8003dd8:	07d2      	lsls	r2, r2, #31
 8003dda:	d501      	bpl.n	8003de0 <_printf_float+0x15c>
 8003ddc:	3301      	adds	r3, #1
 8003dde:	6123      	str	r3, [r4, #16]
 8003de0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d09e      	beq.n	8003d26 <_printf_float+0xa2>
 8003de8:	232d      	movs	r3, #45	@ 0x2d
 8003dea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dee:	e79a      	b.n	8003d26 <_printf_float+0xa2>
 8003df0:	2947      	cmp	r1, #71	@ 0x47
 8003df2:	d1bf      	bne.n	8003d74 <_printf_float+0xf0>
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1bd      	bne.n	8003d74 <_printf_float+0xf0>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e7ba      	b.n	8003d72 <_printf_float+0xee>
 8003dfc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e00:	d9dc      	bls.n	8003dbc <_printf_float+0x138>
 8003e02:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003e06:	d118      	bne.n	8003e3a <_printf_float+0x1b6>
 8003e08:	2900      	cmp	r1, #0
 8003e0a:	6863      	ldr	r3, [r4, #4]
 8003e0c:	dd0b      	ble.n	8003e26 <_printf_float+0x1a2>
 8003e0e:	6121      	str	r1, [r4, #16]
 8003e10:	b913      	cbnz	r3, 8003e18 <_printf_float+0x194>
 8003e12:	6822      	ldr	r2, [r4, #0]
 8003e14:	07d0      	lsls	r0, r2, #31
 8003e16:	d502      	bpl.n	8003e1e <_printf_float+0x19a>
 8003e18:	3301      	adds	r3, #1
 8003e1a:	440b      	add	r3, r1
 8003e1c:	6123      	str	r3, [r4, #16]
 8003e1e:	f04f 0900 	mov.w	r9, #0
 8003e22:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003e24:	e7dc      	b.n	8003de0 <_printf_float+0x15c>
 8003e26:	b913      	cbnz	r3, 8003e2e <_printf_float+0x1aa>
 8003e28:	6822      	ldr	r2, [r4, #0]
 8003e2a:	07d2      	lsls	r2, r2, #31
 8003e2c:	d501      	bpl.n	8003e32 <_printf_float+0x1ae>
 8003e2e:	3302      	adds	r3, #2
 8003e30:	e7f4      	b.n	8003e1c <_printf_float+0x198>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e7f2      	b.n	8003e1c <_printf_float+0x198>
 8003e36:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003e3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003e3c:	4299      	cmp	r1, r3
 8003e3e:	db05      	blt.n	8003e4c <_printf_float+0x1c8>
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	6121      	str	r1, [r4, #16]
 8003e44:	07d8      	lsls	r0, r3, #31
 8003e46:	d5ea      	bpl.n	8003e1e <_printf_float+0x19a>
 8003e48:	1c4b      	adds	r3, r1, #1
 8003e4a:	e7e7      	b.n	8003e1c <_printf_float+0x198>
 8003e4c:	2900      	cmp	r1, #0
 8003e4e:	bfcc      	ite	gt
 8003e50:	2201      	movgt	r2, #1
 8003e52:	f1c1 0202 	rsble	r2, r1, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	e7e0      	b.n	8003e1c <_printf_float+0x198>
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	055a      	lsls	r2, r3, #21
 8003e5e:	d407      	bmi.n	8003e70 <_printf_float+0x1ec>
 8003e60:	6923      	ldr	r3, [r4, #16]
 8003e62:	4642      	mov	r2, r8
 8003e64:	4631      	mov	r1, r6
 8003e66:	4628      	mov	r0, r5
 8003e68:	47b8      	blx	r7
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	d12b      	bne.n	8003ec6 <_printf_float+0x242>
 8003e6e:	e764      	b.n	8003d3a <_printf_float+0xb6>
 8003e70:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e74:	f240 80dc 	bls.w	8004030 <_printf_float+0x3ac>
 8003e78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f7fc fd92 	bl	80009a8 <__aeabi_dcmpeq>
 8003e84:	2800      	cmp	r0, #0
 8003e86:	d033      	beq.n	8003ef0 <_printf_float+0x26c>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	4631      	mov	r1, r6
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	4a35      	ldr	r2, [pc, #212]	@ (8003f64 <_printf_float+0x2e0>)
 8003e90:	47b8      	blx	r7
 8003e92:	3001      	adds	r0, #1
 8003e94:	f43f af51 	beq.w	8003d3a <_printf_float+0xb6>
 8003e98:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003e9c:	4543      	cmp	r3, r8
 8003e9e:	db02      	blt.n	8003ea6 <_printf_float+0x222>
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	07d8      	lsls	r0, r3, #31
 8003ea4:	d50f      	bpl.n	8003ec6 <_printf_float+0x242>
 8003ea6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003eaa:	4631      	mov	r1, r6
 8003eac:	4628      	mov	r0, r5
 8003eae:	47b8      	blx	r7
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	f43f af42 	beq.w	8003d3a <_printf_float+0xb6>
 8003eb6:	f04f 0900 	mov.w	r9, #0
 8003eba:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ebe:	f104 0a1a 	add.w	sl, r4, #26
 8003ec2:	45c8      	cmp	r8, r9
 8003ec4:	dc09      	bgt.n	8003eda <_printf_float+0x256>
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	079b      	lsls	r3, r3, #30
 8003eca:	f100 8102 	bmi.w	80040d2 <_printf_float+0x44e>
 8003ece:	68e0      	ldr	r0, [r4, #12]
 8003ed0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003ed2:	4298      	cmp	r0, r3
 8003ed4:	bfb8      	it	lt
 8003ed6:	4618      	movlt	r0, r3
 8003ed8:	e731      	b.n	8003d3e <_printf_float+0xba>
 8003eda:	2301      	movs	r3, #1
 8003edc:	4652      	mov	r2, sl
 8003ede:	4631      	mov	r1, r6
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	47b8      	blx	r7
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	f43f af28 	beq.w	8003d3a <_printf_float+0xb6>
 8003eea:	f109 0901 	add.w	r9, r9, #1
 8003eee:	e7e8      	b.n	8003ec2 <_printf_float+0x23e>
 8003ef0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	dc38      	bgt.n	8003f68 <_printf_float+0x2e4>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	4631      	mov	r1, r6
 8003efa:	4628      	mov	r0, r5
 8003efc:	4a19      	ldr	r2, [pc, #100]	@ (8003f64 <_printf_float+0x2e0>)
 8003efe:	47b8      	blx	r7
 8003f00:	3001      	adds	r0, #1
 8003f02:	f43f af1a 	beq.w	8003d3a <_printf_float+0xb6>
 8003f06:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003f0a:	ea59 0303 	orrs.w	r3, r9, r3
 8003f0e:	d102      	bne.n	8003f16 <_printf_float+0x292>
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	07d9      	lsls	r1, r3, #31
 8003f14:	d5d7      	bpl.n	8003ec6 <_printf_float+0x242>
 8003f16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f1a:	4631      	mov	r1, r6
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	47b8      	blx	r7
 8003f20:	3001      	adds	r0, #1
 8003f22:	f43f af0a 	beq.w	8003d3a <_printf_float+0xb6>
 8003f26:	f04f 0a00 	mov.w	sl, #0
 8003f2a:	f104 0b1a 	add.w	fp, r4, #26
 8003f2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f30:	425b      	negs	r3, r3
 8003f32:	4553      	cmp	r3, sl
 8003f34:	dc01      	bgt.n	8003f3a <_printf_float+0x2b6>
 8003f36:	464b      	mov	r3, r9
 8003f38:	e793      	b.n	8003e62 <_printf_float+0x1de>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	465a      	mov	r2, fp
 8003f3e:	4631      	mov	r1, r6
 8003f40:	4628      	mov	r0, r5
 8003f42:	47b8      	blx	r7
 8003f44:	3001      	adds	r0, #1
 8003f46:	f43f aef8 	beq.w	8003d3a <_printf_float+0xb6>
 8003f4a:	f10a 0a01 	add.w	sl, sl, #1
 8003f4e:	e7ee      	b.n	8003f2e <_printf_float+0x2aa>
 8003f50:	7fefffff 	.word	0x7fefffff
 8003f54:	0800691a 	.word	0x0800691a
 8003f58:	0800691e 	.word	0x0800691e
 8003f5c:	08006922 	.word	0x08006922
 8003f60:	08006926 	.word	0x08006926
 8003f64:	0800692a 	.word	0x0800692a
 8003f68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f6a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003f6e:	4553      	cmp	r3, sl
 8003f70:	bfa8      	it	ge
 8003f72:	4653      	movge	r3, sl
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	4699      	mov	r9, r3
 8003f78:	dc36      	bgt.n	8003fe8 <_printf_float+0x364>
 8003f7a:	f04f 0b00 	mov.w	fp, #0
 8003f7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f82:	f104 021a 	add.w	r2, r4, #26
 8003f86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f88:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f8a:	eba3 0309 	sub.w	r3, r3, r9
 8003f8e:	455b      	cmp	r3, fp
 8003f90:	dc31      	bgt.n	8003ff6 <_printf_float+0x372>
 8003f92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f94:	459a      	cmp	sl, r3
 8003f96:	dc3a      	bgt.n	800400e <_printf_float+0x38a>
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	07da      	lsls	r2, r3, #31
 8003f9c:	d437      	bmi.n	800400e <_printf_float+0x38a>
 8003f9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fa0:	ebaa 0903 	sub.w	r9, sl, r3
 8003fa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003fa6:	ebaa 0303 	sub.w	r3, sl, r3
 8003faa:	4599      	cmp	r9, r3
 8003fac:	bfa8      	it	ge
 8003fae:	4699      	movge	r9, r3
 8003fb0:	f1b9 0f00 	cmp.w	r9, #0
 8003fb4:	dc33      	bgt.n	800401e <_printf_float+0x39a>
 8003fb6:	f04f 0800 	mov.w	r8, #0
 8003fba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fbe:	f104 0b1a 	add.w	fp, r4, #26
 8003fc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fc4:	ebaa 0303 	sub.w	r3, sl, r3
 8003fc8:	eba3 0309 	sub.w	r3, r3, r9
 8003fcc:	4543      	cmp	r3, r8
 8003fce:	f77f af7a 	ble.w	8003ec6 <_printf_float+0x242>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	465a      	mov	r2, fp
 8003fd6:	4631      	mov	r1, r6
 8003fd8:	4628      	mov	r0, r5
 8003fda:	47b8      	blx	r7
 8003fdc:	3001      	adds	r0, #1
 8003fde:	f43f aeac 	beq.w	8003d3a <_printf_float+0xb6>
 8003fe2:	f108 0801 	add.w	r8, r8, #1
 8003fe6:	e7ec      	b.n	8003fc2 <_printf_float+0x33e>
 8003fe8:	4642      	mov	r2, r8
 8003fea:	4631      	mov	r1, r6
 8003fec:	4628      	mov	r0, r5
 8003fee:	47b8      	blx	r7
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	d1c2      	bne.n	8003f7a <_printf_float+0x2f6>
 8003ff4:	e6a1      	b.n	8003d3a <_printf_float+0xb6>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	4631      	mov	r1, r6
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	920a      	str	r2, [sp, #40]	@ 0x28
 8003ffe:	47b8      	blx	r7
 8004000:	3001      	adds	r0, #1
 8004002:	f43f ae9a 	beq.w	8003d3a <_printf_float+0xb6>
 8004006:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004008:	f10b 0b01 	add.w	fp, fp, #1
 800400c:	e7bb      	b.n	8003f86 <_printf_float+0x302>
 800400e:	4631      	mov	r1, r6
 8004010:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004014:	4628      	mov	r0, r5
 8004016:	47b8      	blx	r7
 8004018:	3001      	adds	r0, #1
 800401a:	d1c0      	bne.n	8003f9e <_printf_float+0x31a>
 800401c:	e68d      	b.n	8003d3a <_printf_float+0xb6>
 800401e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004020:	464b      	mov	r3, r9
 8004022:	4631      	mov	r1, r6
 8004024:	4628      	mov	r0, r5
 8004026:	4442      	add	r2, r8
 8004028:	47b8      	blx	r7
 800402a:	3001      	adds	r0, #1
 800402c:	d1c3      	bne.n	8003fb6 <_printf_float+0x332>
 800402e:	e684      	b.n	8003d3a <_printf_float+0xb6>
 8004030:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004034:	f1ba 0f01 	cmp.w	sl, #1
 8004038:	dc01      	bgt.n	800403e <_printf_float+0x3ba>
 800403a:	07db      	lsls	r3, r3, #31
 800403c:	d536      	bpl.n	80040ac <_printf_float+0x428>
 800403e:	2301      	movs	r3, #1
 8004040:	4642      	mov	r2, r8
 8004042:	4631      	mov	r1, r6
 8004044:	4628      	mov	r0, r5
 8004046:	47b8      	blx	r7
 8004048:	3001      	adds	r0, #1
 800404a:	f43f ae76 	beq.w	8003d3a <_printf_float+0xb6>
 800404e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004052:	4631      	mov	r1, r6
 8004054:	4628      	mov	r0, r5
 8004056:	47b8      	blx	r7
 8004058:	3001      	adds	r0, #1
 800405a:	f43f ae6e 	beq.w	8003d3a <_printf_float+0xb6>
 800405e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004062:	2200      	movs	r2, #0
 8004064:	2300      	movs	r3, #0
 8004066:	f10a 3aff 	add.w	sl, sl, #4294967295
 800406a:	f7fc fc9d 	bl	80009a8 <__aeabi_dcmpeq>
 800406e:	b9c0      	cbnz	r0, 80040a2 <_printf_float+0x41e>
 8004070:	4653      	mov	r3, sl
 8004072:	f108 0201 	add.w	r2, r8, #1
 8004076:	4631      	mov	r1, r6
 8004078:	4628      	mov	r0, r5
 800407a:	47b8      	blx	r7
 800407c:	3001      	adds	r0, #1
 800407e:	d10c      	bne.n	800409a <_printf_float+0x416>
 8004080:	e65b      	b.n	8003d3a <_printf_float+0xb6>
 8004082:	2301      	movs	r3, #1
 8004084:	465a      	mov	r2, fp
 8004086:	4631      	mov	r1, r6
 8004088:	4628      	mov	r0, r5
 800408a:	47b8      	blx	r7
 800408c:	3001      	adds	r0, #1
 800408e:	f43f ae54 	beq.w	8003d3a <_printf_float+0xb6>
 8004092:	f108 0801 	add.w	r8, r8, #1
 8004096:	45d0      	cmp	r8, sl
 8004098:	dbf3      	blt.n	8004082 <_printf_float+0x3fe>
 800409a:	464b      	mov	r3, r9
 800409c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80040a0:	e6e0      	b.n	8003e64 <_printf_float+0x1e0>
 80040a2:	f04f 0800 	mov.w	r8, #0
 80040a6:	f104 0b1a 	add.w	fp, r4, #26
 80040aa:	e7f4      	b.n	8004096 <_printf_float+0x412>
 80040ac:	2301      	movs	r3, #1
 80040ae:	4642      	mov	r2, r8
 80040b0:	e7e1      	b.n	8004076 <_printf_float+0x3f2>
 80040b2:	2301      	movs	r3, #1
 80040b4:	464a      	mov	r2, r9
 80040b6:	4631      	mov	r1, r6
 80040b8:	4628      	mov	r0, r5
 80040ba:	47b8      	blx	r7
 80040bc:	3001      	adds	r0, #1
 80040be:	f43f ae3c 	beq.w	8003d3a <_printf_float+0xb6>
 80040c2:	f108 0801 	add.w	r8, r8, #1
 80040c6:	68e3      	ldr	r3, [r4, #12]
 80040c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80040ca:	1a5b      	subs	r3, r3, r1
 80040cc:	4543      	cmp	r3, r8
 80040ce:	dcf0      	bgt.n	80040b2 <_printf_float+0x42e>
 80040d0:	e6fd      	b.n	8003ece <_printf_float+0x24a>
 80040d2:	f04f 0800 	mov.w	r8, #0
 80040d6:	f104 0919 	add.w	r9, r4, #25
 80040da:	e7f4      	b.n	80040c6 <_printf_float+0x442>

080040dc <_printf_common>:
 80040dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040e0:	4616      	mov	r6, r2
 80040e2:	4698      	mov	r8, r3
 80040e4:	688a      	ldr	r2, [r1, #8]
 80040e6:	690b      	ldr	r3, [r1, #16]
 80040e8:	4607      	mov	r7, r0
 80040ea:	4293      	cmp	r3, r2
 80040ec:	bfb8      	it	lt
 80040ee:	4613      	movlt	r3, r2
 80040f0:	6033      	str	r3, [r6, #0]
 80040f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040f6:	460c      	mov	r4, r1
 80040f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040fc:	b10a      	cbz	r2, 8004102 <_printf_common+0x26>
 80040fe:	3301      	adds	r3, #1
 8004100:	6033      	str	r3, [r6, #0]
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	0699      	lsls	r1, r3, #26
 8004106:	bf42      	ittt	mi
 8004108:	6833      	ldrmi	r3, [r6, #0]
 800410a:	3302      	addmi	r3, #2
 800410c:	6033      	strmi	r3, [r6, #0]
 800410e:	6825      	ldr	r5, [r4, #0]
 8004110:	f015 0506 	ands.w	r5, r5, #6
 8004114:	d106      	bne.n	8004124 <_printf_common+0x48>
 8004116:	f104 0a19 	add.w	sl, r4, #25
 800411a:	68e3      	ldr	r3, [r4, #12]
 800411c:	6832      	ldr	r2, [r6, #0]
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	42ab      	cmp	r3, r5
 8004122:	dc2b      	bgt.n	800417c <_printf_common+0xa0>
 8004124:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004128:	6822      	ldr	r2, [r4, #0]
 800412a:	3b00      	subs	r3, #0
 800412c:	bf18      	it	ne
 800412e:	2301      	movne	r3, #1
 8004130:	0692      	lsls	r2, r2, #26
 8004132:	d430      	bmi.n	8004196 <_printf_common+0xba>
 8004134:	4641      	mov	r1, r8
 8004136:	4638      	mov	r0, r7
 8004138:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800413c:	47c8      	blx	r9
 800413e:	3001      	adds	r0, #1
 8004140:	d023      	beq.n	800418a <_printf_common+0xae>
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	6922      	ldr	r2, [r4, #16]
 8004146:	f003 0306 	and.w	r3, r3, #6
 800414a:	2b04      	cmp	r3, #4
 800414c:	bf14      	ite	ne
 800414e:	2500      	movne	r5, #0
 8004150:	6833      	ldreq	r3, [r6, #0]
 8004152:	f04f 0600 	mov.w	r6, #0
 8004156:	bf08      	it	eq
 8004158:	68e5      	ldreq	r5, [r4, #12]
 800415a:	f104 041a 	add.w	r4, r4, #26
 800415e:	bf08      	it	eq
 8004160:	1aed      	subeq	r5, r5, r3
 8004162:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004166:	bf08      	it	eq
 8004168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800416c:	4293      	cmp	r3, r2
 800416e:	bfc4      	itt	gt
 8004170:	1a9b      	subgt	r3, r3, r2
 8004172:	18ed      	addgt	r5, r5, r3
 8004174:	42b5      	cmp	r5, r6
 8004176:	d11a      	bne.n	80041ae <_printf_common+0xd2>
 8004178:	2000      	movs	r0, #0
 800417a:	e008      	b.n	800418e <_printf_common+0xb2>
 800417c:	2301      	movs	r3, #1
 800417e:	4652      	mov	r2, sl
 8004180:	4641      	mov	r1, r8
 8004182:	4638      	mov	r0, r7
 8004184:	47c8      	blx	r9
 8004186:	3001      	adds	r0, #1
 8004188:	d103      	bne.n	8004192 <_printf_common+0xb6>
 800418a:	f04f 30ff 	mov.w	r0, #4294967295
 800418e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004192:	3501      	adds	r5, #1
 8004194:	e7c1      	b.n	800411a <_printf_common+0x3e>
 8004196:	2030      	movs	r0, #48	@ 0x30
 8004198:	18e1      	adds	r1, r4, r3
 800419a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041a4:	4422      	add	r2, r4
 80041a6:	3302      	adds	r3, #2
 80041a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041ac:	e7c2      	b.n	8004134 <_printf_common+0x58>
 80041ae:	2301      	movs	r3, #1
 80041b0:	4622      	mov	r2, r4
 80041b2:	4641      	mov	r1, r8
 80041b4:	4638      	mov	r0, r7
 80041b6:	47c8      	blx	r9
 80041b8:	3001      	adds	r0, #1
 80041ba:	d0e6      	beq.n	800418a <_printf_common+0xae>
 80041bc:	3601      	adds	r6, #1
 80041be:	e7d9      	b.n	8004174 <_printf_common+0x98>

080041c0 <_printf_i>:
 80041c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041c4:	7e0f      	ldrb	r7, [r1, #24]
 80041c6:	4691      	mov	r9, r2
 80041c8:	2f78      	cmp	r7, #120	@ 0x78
 80041ca:	4680      	mov	r8, r0
 80041cc:	460c      	mov	r4, r1
 80041ce:	469a      	mov	sl, r3
 80041d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041d6:	d807      	bhi.n	80041e8 <_printf_i+0x28>
 80041d8:	2f62      	cmp	r7, #98	@ 0x62
 80041da:	d80a      	bhi.n	80041f2 <_printf_i+0x32>
 80041dc:	2f00      	cmp	r7, #0
 80041de:	f000 80d3 	beq.w	8004388 <_printf_i+0x1c8>
 80041e2:	2f58      	cmp	r7, #88	@ 0x58
 80041e4:	f000 80ba 	beq.w	800435c <_printf_i+0x19c>
 80041e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041f0:	e03a      	b.n	8004268 <_printf_i+0xa8>
 80041f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041f6:	2b15      	cmp	r3, #21
 80041f8:	d8f6      	bhi.n	80041e8 <_printf_i+0x28>
 80041fa:	a101      	add	r1, pc, #4	@ (adr r1, 8004200 <_printf_i+0x40>)
 80041fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004200:	08004259 	.word	0x08004259
 8004204:	0800426d 	.word	0x0800426d
 8004208:	080041e9 	.word	0x080041e9
 800420c:	080041e9 	.word	0x080041e9
 8004210:	080041e9 	.word	0x080041e9
 8004214:	080041e9 	.word	0x080041e9
 8004218:	0800426d 	.word	0x0800426d
 800421c:	080041e9 	.word	0x080041e9
 8004220:	080041e9 	.word	0x080041e9
 8004224:	080041e9 	.word	0x080041e9
 8004228:	080041e9 	.word	0x080041e9
 800422c:	0800436f 	.word	0x0800436f
 8004230:	08004297 	.word	0x08004297
 8004234:	08004329 	.word	0x08004329
 8004238:	080041e9 	.word	0x080041e9
 800423c:	080041e9 	.word	0x080041e9
 8004240:	08004391 	.word	0x08004391
 8004244:	080041e9 	.word	0x080041e9
 8004248:	08004297 	.word	0x08004297
 800424c:	080041e9 	.word	0x080041e9
 8004250:	080041e9 	.word	0x080041e9
 8004254:	08004331 	.word	0x08004331
 8004258:	6833      	ldr	r3, [r6, #0]
 800425a:	1d1a      	adds	r2, r3, #4
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6032      	str	r2, [r6, #0]
 8004260:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004264:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004268:	2301      	movs	r3, #1
 800426a:	e09e      	b.n	80043aa <_printf_i+0x1ea>
 800426c:	6833      	ldr	r3, [r6, #0]
 800426e:	6820      	ldr	r0, [r4, #0]
 8004270:	1d19      	adds	r1, r3, #4
 8004272:	6031      	str	r1, [r6, #0]
 8004274:	0606      	lsls	r6, r0, #24
 8004276:	d501      	bpl.n	800427c <_printf_i+0xbc>
 8004278:	681d      	ldr	r5, [r3, #0]
 800427a:	e003      	b.n	8004284 <_printf_i+0xc4>
 800427c:	0645      	lsls	r5, r0, #25
 800427e:	d5fb      	bpl.n	8004278 <_printf_i+0xb8>
 8004280:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004284:	2d00      	cmp	r5, #0
 8004286:	da03      	bge.n	8004290 <_printf_i+0xd0>
 8004288:	232d      	movs	r3, #45	@ 0x2d
 800428a:	426d      	negs	r5, r5
 800428c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004290:	230a      	movs	r3, #10
 8004292:	4859      	ldr	r0, [pc, #356]	@ (80043f8 <_printf_i+0x238>)
 8004294:	e011      	b.n	80042ba <_printf_i+0xfa>
 8004296:	6821      	ldr	r1, [r4, #0]
 8004298:	6833      	ldr	r3, [r6, #0]
 800429a:	0608      	lsls	r0, r1, #24
 800429c:	f853 5b04 	ldr.w	r5, [r3], #4
 80042a0:	d402      	bmi.n	80042a8 <_printf_i+0xe8>
 80042a2:	0649      	lsls	r1, r1, #25
 80042a4:	bf48      	it	mi
 80042a6:	b2ad      	uxthmi	r5, r5
 80042a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80042aa:	6033      	str	r3, [r6, #0]
 80042ac:	bf14      	ite	ne
 80042ae:	230a      	movne	r3, #10
 80042b0:	2308      	moveq	r3, #8
 80042b2:	4851      	ldr	r0, [pc, #324]	@ (80043f8 <_printf_i+0x238>)
 80042b4:	2100      	movs	r1, #0
 80042b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042ba:	6866      	ldr	r6, [r4, #4]
 80042bc:	2e00      	cmp	r6, #0
 80042be:	bfa8      	it	ge
 80042c0:	6821      	ldrge	r1, [r4, #0]
 80042c2:	60a6      	str	r6, [r4, #8]
 80042c4:	bfa4      	itt	ge
 80042c6:	f021 0104 	bicge.w	r1, r1, #4
 80042ca:	6021      	strge	r1, [r4, #0]
 80042cc:	b90d      	cbnz	r5, 80042d2 <_printf_i+0x112>
 80042ce:	2e00      	cmp	r6, #0
 80042d0:	d04b      	beq.n	800436a <_printf_i+0x1aa>
 80042d2:	4616      	mov	r6, r2
 80042d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80042d8:	fb03 5711 	mls	r7, r3, r1, r5
 80042dc:	5dc7      	ldrb	r7, [r0, r7]
 80042de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042e2:	462f      	mov	r7, r5
 80042e4:	42bb      	cmp	r3, r7
 80042e6:	460d      	mov	r5, r1
 80042e8:	d9f4      	bls.n	80042d4 <_printf_i+0x114>
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d10b      	bne.n	8004306 <_printf_i+0x146>
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	07df      	lsls	r7, r3, #31
 80042f2:	d508      	bpl.n	8004306 <_printf_i+0x146>
 80042f4:	6923      	ldr	r3, [r4, #16]
 80042f6:	6861      	ldr	r1, [r4, #4]
 80042f8:	4299      	cmp	r1, r3
 80042fa:	bfde      	ittt	le
 80042fc:	2330      	movle	r3, #48	@ 0x30
 80042fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004302:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004306:	1b92      	subs	r2, r2, r6
 8004308:	6122      	str	r2, [r4, #16]
 800430a:	464b      	mov	r3, r9
 800430c:	4621      	mov	r1, r4
 800430e:	4640      	mov	r0, r8
 8004310:	f8cd a000 	str.w	sl, [sp]
 8004314:	aa03      	add	r2, sp, #12
 8004316:	f7ff fee1 	bl	80040dc <_printf_common>
 800431a:	3001      	adds	r0, #1
 800431c:	d14a      	bne.n	80043b4 <_printf_i+0x1f4>
 800431e:	f04f 30ff 	mov.w	r0, #4294967295
 8004322:	b004      	add	sp, #16
 8004324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	f043 0320 	orr.w	r3, r3, #32
 800432e:	6023      	str	r3, [r4, #0]
 8004330:	2778      	movs	r7, #120	@ 0x78
 8004332:	4832      	ldr	r0, [pc, #200]	@ (80043fc <_printf_i+0x23c>)
 8004334:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	6831      	ldr	r1, [r6, #0]
 800433c:	061f      	lsls	r7, r3, #24
 800433e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004342:	d402      	bmi.n	800434a <_printf_i+0x18a>
 8004344:	065f      	lsls	r7, r3, #25
 8004346:	bf48      	it	mi
 8004348:	b2ad      	uxthmi	r5, r5
 800434a:	6031      	str	r1, [r6, #0]
 800434c:	07d9      	lsls	r1, r3, #31
 800434e:	bf44      	itt	mi
 8004350:	f043 0320 	orrmi.w	r3, r3, #32
 8004354:	6023      	strmi	r3, [r4, #0]
 8004356:	b11d      	cbz	r5, 8004360 <_printf_i+0x1a0>
 8004358:	2310      	movs	r3, #16
 800435a:	e7ab      	b.n	80042b4 <_printf_i+0xf4>
 800435c:	4826      	ldr	r0, [pc, #152]	@ (80043f8 <_printf_i+0x238>)
 800435e:	e7e9      	b.n	8004334 <_printf_i+0x174>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	f023 0320 	bic.w	r3, r3, #32
 8004366:	6023      	str	r3, [r4, #0]
 8004368:	e7f6      	b.n	8004358 <_printf_i+0x198>
 800436a:	4616      	mov	r6, r2
 800436c:	e7bd      	b.n	80042ea <_printf_i+0x12a>
 800436e:	6833      	ldr	r3, [r6, #0]
 8004370:	6825      	ldr	r5, [r4, #0]
 8004372:	1d18      	adds	r0, r3, #4
 8004374:	6961      	ldr	r1, [r4, #20]
 8004376:	6030      	str	r0, [r6, #0]
 8004378:	062e      	lsls	r6, r5, #24
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	d501      	bpl.n	8004382 <_printf_i+0x1c2>
 800437e:	6019      	str	r1, [r3, #0]
 8004380:	e002      	b.n	8004388 <_printf_i+0x1c8>
 8004382:	0668      	lsls	r0, r5, #25
 8004384:	d5fb      	bpl.n	800437e <_printf_i+0x1be>
 8004386:	8019      	strh	r1, [r3, #0]
 8004388:	2300      	movs	r3, #0
 800438a:	4616      	mov	r6, r2
 800438c:	6123      	str	r3, [r4, #16]
 800438e:	e7bc      	b.n	800430a <_printf_i+0x14a>
 8004390:	6833      	ldr	r3, [r6, #0]
 8004392:	2100      	movs	r1, #0
 8004394:	1d1a      	adds	r2, r3, #4
 8004396:	6032      	str	r2, [r6, #0]
 8004398:	681e      	ldr	r6, [r3, #0]
 800439a:	6862      	ldr	r2, [r4, #4]
 800439c:	4630      	mov	r0, r6
 800439e:	f000 f9d4 	bl	800474a <memchr>
 80043a2:	b108      	cbz	r0, 80043a8 <_printf_i+0x1e8>
 80043a4:	1b80      	subs	r0, r0, r6
 80043a6:	6060      	str	r0, [r4, #4]
 80043a8:	6863      	ldr	r3, [r4, #4]
 80043aa:	6123      	str	r3, [r4, #16]
 80043ac:	2300      	movs	r3, #0
 80043ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043b2:	e7aa      	b.n	800430a <_printf_i+0x14a>
 80043b4:	4632      	mov	r2, r6
 80043b6:	4649      	mov	r1, r9
 80043b8:	4640      	mov	r0, r8
 80043ba:	6923      	ldr	r3, [r4, #16]
 80043bc:	47d0      	blx	sl
 80043be:	3001      	adds	r0, #1
 80043c0:	d0ad      	beq.n	800431e <_printf_i+0x15e>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	079b      	lsls	r3, r3, #30
 80043c6:	d413      	bmi.n	80043f0 <_printf_i+0x230>
 80043c8:	68e0      	ldr	r0, [r4, #12]
 80043ca:	9b03      	ldr	r3, [sp, #12]
 80043cc:	4298      	cmp	r0, r3
 80043ce:	bfb8      	it	lt
 80043d0:	4618      	movlt	r0, r3
 80043d2:	e7a6      	b.n	8004322 <_printf_i+0x162>
 80043d4:	2301      	movs	r3, #1
 80043d6:	4632      	mov	r2, r6
 80043d8:	4649      	mov	r1, r9
 80043da:	4640      	mov	r0, r8
 80043dc:	47d0      	blx	sl
 80043de:	3001      	adds	r0, #1
 80043e0:	d09d      	beq.n	800431e <_printf_i+0x15e>
 80043e2:	3501      	adds	r5, #1
 80043e4:	68e3      	ldr	r3, [r4, #12]
 80043e6:	9903      	ldr	r1, [sp, #12]
 80043e8:	1a5b      	subs	r3, r3, r1
 80043ea:	42ab      	cmp	r3, r5
 80043ec:	dcf2      	bgt.n	80043d4 <_printf_i+0x214>
 80043ee:	e7eb      	b.n	80043c8 <_printf_i+0x208>
 80043f0:	2500      	movs	r5, #0
 80043f2:	f104 0619 	add.w	r6, r4, #25
 80043f6:	e7f5      	b.n	80043e4 <_printf_i+0x224>
 80043f8:	0800692c 	.word	0x0800692c
 80043fc:	0800693d 	.word	0x0800693d

08004400 <std>:
 8004400:	2300      	movs	r3, #0
 8004402:	b510      	push	{r4, lr}
 8004404:	4604      	mov	r4, r0
 8004406:	e9c0 3300 	strd	r3, r3, [r0]
 800440a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800440e:	6083      	str	r3, [r0, #8]
 8004410:	8181      	strh	r1, [r0, #12]
 8004412:	6643      	str	r3, [r0, #100]	@ 0x64
 8004414:	81c2      	strh	r2, [r0, #14]
 8004416:	6183      	str	r3, [r0, #24]
 8004418:	4619      	mov	r1, r3
 800441a:	2208      	movs	r2, #8
 800441c:	305c      	adds	r0, #92	@ 0x5c
 800441e:	f000 f914 	bl	800464a <memset>
 8004422:	4b0d      	ldr	r3, [pc, #52]	@ (8004458 <std+0x58>)
 8004424:	6224      	str	r4, [r4, #32]
 8004426:	6263      	str	r3, [r4, #36]	@ 0x24
 8004428:	4b0c      	ldr	r3, [pc, #48]	@ (800445c <std+0x5c>)
 800442a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800442c:	4b0c      	ldr	r3, [pc, #48]	@ (8004460 <std+0x60>)
 800442e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004430:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <std+0x64>)
 8004432:	6323      	str	r3, [r4, #48]	@ 0x30
 8004434:	4b0c      	ldr	r3, [pc, #48]	@ (8004468 <std+0x68>)
 8004436:	429c      	cmp	r4, r3
 8004438:	d006      	beq.n	8004448 <std+0x48>
 800443a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800443e:	4294      	cmp	r4, r2
 8004440:	d002      	beq.n	8004448 <std+0x48>
 8004442:	33d0      	adds	r3, #208	@ 0xd0
 8004444:	429c      	cmp	r4, r3
 8004446:	d105      	bne.n	8004454 <std+0x54>
 8004448:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800444c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004450:	f000 b978 	b.w	8004744 <__retarget_lock_init_recursive>
 8004454:	bd10      	pop	{r4, pc}
 8004456:	bf00      	nop
 8004458:	080045c5 	.word	0x080045c5
 800445c:	080045e7 	.word	0x080045e7
 8004460:	0800461f 	.word	0x0800461f
 8004464:	08004643 	.word	0x08004643
 8004468:	20000298 	.word	0x20000298

0800446c <stdio_exit_handler>:
 800446c:	4a02      	ldr	r2, [pc, #8]	@ (8004478 <stdio_exit_handler+0xc>)
 800446e:	4903      	ldr	r1, [pc, #12]	@ (800447c <stdio_exit_handler+0x10>)
 8004470:	4803      	ldr	r0, [pc, #12]	@ (8004480 <stdio_exit_handler+0x14>)
 8004472:	f000 b869 	b.w	8004548 <_fwalk_sglue>
 8004476:	bf00      	nop
 8004478:	20000010 	.word	0x20000010
 800447c:	080060b5 	.word	0x080060b5
 8004480:	20000020 	.word	0x20000020

08004484 <cleanup_stdio>:
 8004484:	6841      	ldr	r1, [r0, #4]
 8004486:	4b0c      	ldr	r3, [pc, #48]	@ (80044b8 <cleanup_stdio+0x34>)
 8004488:	b510      	push	{r4, lr}
 800448a:	4299      	cmp	r1, r3
 800448c:	4604      	mov	r4, r0
 800448e:	d001      	beq.n	8004494 <cleanup_stdio+0x10>
 8004490:	f001 fe10 	bl	80060b4 <_fflush_r>
 8004494:	68a1      	ldr	r1, [r4, #8]
 8004496:	4b09      	ldr	r3, [pc, #36]	@ (80044bc <cleanup_stdio+0x38>)
 8004498:	4299      	cmp	r1, r3
 800449a:	d002      	beq.n	80044a2 <cleanup_stdio+0x1e>
 800449c:	4620      	mov	r0, r4
 800449e:	f001 fe09 	bl	80060b4 <_fflush_r>
 80044a2:	68e1      	ldr	r1, [r4, #12]
 80044a4:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <cleanup_stdio+0x3c>)
 80044a6:	4299      	cmp	r1, r3
 80044a8:	d004      	beq.n	80044b4 <cleanup_stdio+0x30>
 80044aa:	4620      	mov	r0, r4
 80044ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044b0:	f001 be00 	b.w	80060b4 <_fflush_r>
 80044b4:	bd10      	pop	{r4, pc}
 80044b6:	bf00      	nop
 80044b8:	20000298 	.word	0x20000298
 80044bc:	20000300 	.word	0x20000300
 80044c0:	20000368 	.word	0x20000368

080044c4 <global_stdio_init.part.0>:
 80044c4:	b510      	push	{r4, lr}
 80044c6:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <global_stdio_init.part.0+0x30>)
 80044c8:	4c0b      	ldr	r4, [pc, #44]	@ (80044f8 <global_stdio_init.part.0+0x34>)
 80044ca:	4a0c      	ldr	r2, [pc, #48]	@ (80044fc <global_stdio_init.part.0+0x38>)
 80044cc:	4620      	mov	r0, r4
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	2104      	movs	r1, #4
 80044d2:	2200      	movs	r2, #0
 80044d4:	f7ff ff94 	bl	8004400 <std>
 80044d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044dc:	2201      	movs	r2, #1
 80044de:	2109      	movs	r1, #9
 80044e0:	f7ff ff8e 	bl	8004400 <std>
 80044e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80044e8:	2202      	movs	r2, #2
 80044ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ee:	2112      	movs	r1, #18
 80044f0:	f7ff bf86 	b.w	8004400 <std>
 80044f4:	200003d0 	.word	0x200003d0
 80044f8:	20000298 	.word	0x20000298
 80044fc:	0800446d 	.word	0x0800446d

08004500 <__sfp_lock_acquire>:
 8004500:	4801      	ldr	r0, [pc, #4]	@ (8004508 <__sfp_lock_acquire+0x8>)
 8004502:	f000 b920 	b.w	8004746 <__retarget_lock_acquire_recursive>
 8004506:	bf00      	nop
 8004508:	200003d9 	.word	0x200003d9

0800450c <__sfp_lock_release>:
 800450c:	4801      	ldr	r0, [pc, #4]	@ (8004514 <__sfp_lock_release+0x8>)
 800450e:	f000 b91b 	b.w	8004748 <__retarget_lock_release_recursive>
 8004512:	bf00      	nop
 8004514:	200003d9 	.word	0x200003d9

08004518 <__sinit>:
 8004518:	b510      	push	{r4, lr}
 800451a:	4604      	mov	r4, r0
 800451c:	f7ff fff0 	bl	8004500 <__sfp_lock_acquire>
 8004520:	6a23      	ldr	r3, [r4, #32]
 8004522:	b11b      	cbz	r3, 800452c <__sinit+0x14>
 8004524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004528:	f7ff bff0 	b.w	800450c <__sfp_lock_release>
 800452c:	4b04      	ldr	r3, [pc, #16]	@ (8004540 <__sinit+0x28>)
 800452e:	6223      	str	r3, [r4, #32]
 8004530:	4b04      	ldr	r3, [pc, #16]	@ (8004544 <__sinit+0x2c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f5      	bne.n	8004524 <__sinit+0xc>
 8004538:	f7ff ffc4 	bl	80044c4 <global_stdio_init.part.0>
 800453c:	e7f2      	b.n	8004524 <__sinit+0xc>
 800453e:	bf00      	nop
 8004540:	08004485 	.word	0x08004485
 8004544:	200003d0 	.word	0x200003d0

08004548 <_fwalk_sglue>:
 8004548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800454c:	4607      	mov	r7, r0
 800454e:	4688      	mov	r8, r1
 8004550:	4614      	mov	r4, r2
 8004552:	2600      	movs	r6, #0
 8004554:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004558:	f1b9 0901 	subs.w	r9, r9, #1
 800455c:	d505      	bpl.n	800456a <_fwalk_sglue+0x22>
 800455e:	6824      	ldr	r4, [r4, #0]
 8004560:	2c00      	cmp	r4, #0
 8004562:	d1f7      	bne.n	8004554 <_fwalk_sglue+0xc>
 8004564:	4630      	mov	r0, r6
 8004566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800456a:	89ab      	ldrh	r3, [r5, #12]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d907      	bls.n	8004580 <_fwalk_sglue+0x38>
 8004570:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004574:	3301      	adds	r3, #1
 8004576:	d003      	beq.n	8004580 <_fwalk_sglue+0x38>
 8004578:	4629      	mov	r1, r5
 800457a:	4638      	mov	r0, r7
 800457c:	47c0      	blx	r8
 800457e:	4306      	orrs	r6, r0
 8004580:	3568      	adds	r5, #104	@ 0x68
 8004582:	e7e9      	b.n	8004558 <_fwalk_sglue+0x10>

08004584 <siprintf>:
 8004584:	b40e      	push	{r1, r2, r3}
 8004586:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800458a:	b500      	push	{lr}
 800458c:	b09c      	sub	sp, #112	@ 0x70
 800458e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004590:	9002      	str	r0, [sp, #8]
 8004592:	9006      	str	r0, [sp, #24]
 8004594:	9107      	str	r1, [sp, #28]
 8004596:	9104      	str	r1, [sp, #16]
 8004598:	4808      	ldr	r0, [pc, #32]	@ (80045bc <siprintf+0x38>)
 800459a:	4909      	ldr	r1, [pc, #36]	@ (80045c0 <siprintf+0x3c>)
 800459c:	f853 2b04 	ldr.w	r2, [r3], #4
 80045a0:	9105      	str	r1, [sp, #20]
 80045a2:	6800      	ldr	r0, [r0, #0]
 80045a4:	a902      	add	r1, sp, #8
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	f001 fc08 	bl	8005dbc <_svfiprintf_r>
 80045ac:	2200      	movs	r2, #0
 80045ae:	9b02      	ldr	r3, [sp, #8]
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	b01c      	add	sp, #112	@ 0x70
 80045b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80045b8:	b003      	add	sp, #12
 80045ba:	4770      	bx	lr
 80045bc:	2000001c 	.word	0x2000001c
 80045c0:	ffff0208 	.word	0xffff0208

080045c4 <__sread>:
 80045c4:	b510      	push	{r4, lr}
 80045c6:	460c      	mov	r4, r1
 80045c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045cc:	f000 f86c 	bl	80046a8 <_read_r>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	bfab      	itete	ge
 80045d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80045d6:	89a3      	ldrhlt	r3, [r4, #12]
 80045d8:	181b      	addge	r3, r3, r0
 80045da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80045de:	bfac      	ite	ge
 80045e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80045e2:	81a3      	strhlt	r3, [r4, #12]
 80045e4:	bd10      	pop	{r4, pc}

080045e6 <__swrite>:
 80045e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ea:	461f      	mov	r7, r3
 80045ec:	898b      	ldrh	r3, [r1, #12]
 80045ee:	4605      	mov	r5, r0
 80045f0:	05db      	lsls	r3, r3, #23
 80045f2:	460c      	mov	r4, r1
 80045f4:	4616      	mov	r6, r2
 80045f6:	d505      	bpl.n	8004604 <__swrite+0x1e>
 80045f8:	2302      	movs	r3, #2
 80045fa:	2200      	movs	r2, #0
 80045fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004600:	f000 f840 	bl	8004684 <_lseek_r>
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	4632      	mov	r2, r6
 8004608:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800460c:	81a3      	strh	r3, [r4, #12]
 800460e:	4628      	mov	r0, r5
 8004610:	463b      	mov	r3, r7
 8004612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800461a:	f000 b857 	b.w	80046cc <_write_r>

0800461e <__sseek>:
 800461e:	b510      	push	{r4, lr}
 8004620:	460c      	mov	r4, r1
 8004622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004626:	f000 f82d 	bl	8004684 <_lseek_r>
 800462a:	1c43      	adds	r3, r0, #1
 800462c:	89a3      	ldrh	r3, [r4, #12]
 800462e:	bf15      	itete	ne
 8004630:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004632:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004636:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800463a:	81a3      	strheq	r3, [r4, #12]
 800463c:	bf18      	it	ne
 800463e:	81a3      	strhne	r3, [r4, #12]
 8004640:	bd10      	pop	{r4, pc}

08004642 <__sclose>:
 8004642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004646:	f000 b80d 	b.w	8004664 <_close_r>

0800464a <memset>:
 800464a:	4603      	mov	r3, r0
 800464c:	4402      	add	r2, r0
 800464e:	4293      	cmp	r3, r2
 8004650:	d100      	bne.n	8004654 <memset+0xa>
 8004652:	4770      	bx	lr
 8004654:	f803 1b01 	strb.w	r1, [r3], #1
 8004658:	e7f9      	b.n	800464e <memset+0x4>
	...

0800465c <_localeconv_r>:
 800465c:	4800      	ldr	r0, [pc, #0]	@ (8004660 <_localeconv_r+0x4>)
 800465e:	4770      	bx	lr
 8004660:	2000015c 	.word	0x2000015c

08004664 <_close_r>:
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	2300      	movs	r3, #0
 8004668:	4d05      	ldr	r5, [pc, #20]	@ (8004680 <_close_r+0x1c>)
 800466a:	4604      	mov	r4, r0
 800466c:	4608      	mov	r0, r1
 800466e:	602b      	str	r3, [r5, #0]
 8004670:	f7fd fb35 	bl	8001cde <_close>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d102      	bne.n	800467e <_close_r+0x1a>
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	b103      	cbz	r3, 800467e <_close_r+0x1a>
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	200003d4 	.word	0x200003d4

08004684 <_lseek_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	4604      	mov	r4, r0
 8004688:	4608      	mov	r0, r1
 800468a:	4611      	mov	r1, r2
 800468c:	2200      	movs	r2, #0
 800468e:	4d05      	ldr	r5, [pc, #20]	@ (80046a4 <_lseek_r+0x20>)
 8004690:	602a      	str	r2, [r5, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	f7fd fb47 	bl	8001d26 <_lseek>
 8004698:	1c43      	adds	r3, r0, #1
 800469a:	d102      	bne.n	80046a2 <_lseek_r+0x1e>
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	b103      	cbz	r3, 80046a2 <_lseek_r+0x1e>
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	bd38      	pop	{r3, r4, r5, pc}
 80046a4:	200003d4 	.word	0x200003d4

080046a8 <_read_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4604      	mov	r4, r0
 80046ac:	4608      	mov	r0, r1
 80046ae:	4611      	mov	r1, r2
 80046b0:	2200      	movs	r2, #0
 80046b2:	4d05      	ldr	r5, [pc, #20]	@ (80046c8 <_read_r+0x20>)
 80046b4:	602a      	str	r2, [r5, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f7fd fad8 	bl	8001c6c <_read>
 80046bc:	1c43      	adds	r3, r0, #1
 80046be:	d102      	bne.n	80046c6 <_read_r+0x1e>
 80046c0:	682b      	ldr	r3, [r5, #0]
 80046c2:	b103      	cbz	r3, 80046c6 <_read_r+0x1e>
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	bd38      	pop	{r3, r4, r5, pc}
 80046c8:	200003d4 	.word	0x200003d4

080046cc <_write_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	4604      	mov	r4, r0
 80046d0:	4608      	mov	r0, r1
 80046d2:	4611      	mov	r1, r2
 80046d4:	2200      	movs	r2, #0
 80046d6:	4d05      	ldr	r5, [pc, #20]	@ (80046ec <_write_r+0x20>)
 80046d8:	602a      	str	r2, [r5, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	f7fd fae3 	bl	8001ca6 <_write>
 80046e0:	1c43      	adds	r3, r0, #1
 80046e2:	d102      	bne.n	80046ea <_write_r+0x1e>
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	b103      	cbz	r3, 80046ea <_write_r+0x1e>
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	bd38      	pop	{r3, r4, r5, pc}
 80046ec:	200003d4 	.word	0x200003d4

080046f0 <__errno>:
 80046f0:	4b01      	ldr	r3, [pc, #4]	@ (80046f8 <__errno+0x8>)
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	2000001c 	.word	0x2000001c

080046fc <__libc_init_array>:
 80046fc:	b570      	push	{r4, r5, r6, lr}
 80046fe:	2600      	movs	r6, #0
 8004700:	4d0c      	ldr	r5, [pc, #48]	@ (8004734 <__libc_init_array+0x38>)
 8004702:	4c0d      	ldr	r4, [pc, #52]	@ (8004738 <__libc_init_array+0x3c>)
 8004704:	1b64      	subs	r4, r4, r5
 8004706:	10a4      	asrs	r4, r4, #2
 8004708:	42a6      	cmp	r6, r4
 800470a:	d109      	bne.n	8004720 <__libc_init_array+0x24>
 800470c:	f002 f86e 	bl	80067ec <_init>
 8004710:	2600      	movs	r6, #0
 8004712:	4d0a      	ldr	r5, [pc, #40]	@ (800473c <__libc_init_array+0x40>)
 8004714:	4c0a      	ldr	r4, [pc, #40]	@ (8004740 <__libc_init_array+0x44>)
 8004716:	1b64      	subs	r4, r4, r5
 8004718:	10a4      	asrs	r4, r4, #2
 800471a:	42a6      	cmp	r6, r4
 800471c:	d105      	bne.n	800472a <__libc_init_array+0x2e>
 800471e:	bd70      	pop	{r4, r5, r6, pc}
 8004720:	f855 3b04 	ldr.w	r3, [r5], #4
 8004724:	4798      	blx	r3
 8004726:	3601      	adds	r6, #1
 8004728:	e7ee      	b.n	8004708 <__libc_init_array+0xc>
 800472a:	f855 3b04 	ldr.w	r3, [r5], #4
 800472e:	4798      	blx	r3
 8004730:	3601      	adds	r6, #1
 8004732:	e7f2      	b.n	800471a <__libc_init_array+0x1e>
 8004734:	08006c90 	.word	0x08006c90
 8004738:	08006c90 	.word	0x08006c90
 800473c:	08006c90 	.word	0x08006c90
 8004740:	08006c94 	.word	0x08006c94

08004744 <__retarget_lock_init_recursive>:
 8004744:	4770      	bx	lr

08004746 <__retarget_lock_acquire_recursive>:
 8004746:	4770      	bx	lr

08004748 <__retarget_lock_release_recursive>:
 8004748:	4770      	bx	lr

0800474a <memchr>:
 800474a:	4603      	mov	r3, r0
 800474c:	b510      	push	{r4, lr}
 800474e:	b2c9      	uxtb	r1, r1
 8004750:	4402      	add	r2, r0
 8004752:	4293      	cmp	r3, r2
 8004754:	4618      	mov	r0, r3
 8004756:	d101      	bne.n	800475c <memchr+0x12>
 8004758:	2000      	movs	r0, #0
 800475a:	e003      	b.n	8004764 <memchr+0x1a>
 800475c:	7804      	ldrb	r4, [r0, #0]
 800475e:	3301      	adds	r3, #1
 8004760:	428c      	cmp	r4, r1
 8004762:	d1f6      	bne.n	8004752 <memchr+0x8>
 8004764:	bd10      	pop	{r4, pc}

08004766 <quorem>:
 8004766:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800476a:	6903      	ldr	r3, [r0, #16]
 800476c:	690c      	ldr	r4, [r1, #16]
 800476e:	4607      	mov	r7, r0
 8004770:	42a3      	cmp	r3, r4
 8004772:	db7e      	blt.n	8004872 <quorem+0x10c>
 8004774:	3c01      	subs	r4, #1
 8004776:	00a3      	lsls	r3, r4, #2
 8004778:	f100 0514 	add.w	r5, r0, #20
 800477c:	f101 0814 	add.w	r8, r1, #20
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800478c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004790:	3301      	adds	r3, #1
 8004792:	429a      	cmp	r2, r3
 8004794:	fbb2 f6f3 	udiv	r6, r2, r3
 8004798:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800479c:	d32e      	bcc.n	80047fc <quorem+0x96>
 800479e:	f04f 0a00 	mov.w	sl, #0
 80047a2:	46c4      	mov	ip, r8
 80047a4:	46ae      	mov	lr, r5
 80047a6:	46d3      	mov	fp, sl
 80047a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80047ac:	b298      	uxth	r0, r3
 80047ae:	fb06 a000 	mla	r0, r6, r0, sl
 80047b2:	0c1b      	lsrs	r3, r3, #16
 80047b4:	0c02      	lsrs	r2, r0, #16
 80047b6:	fb06 2303 	mla	r3, r6, r3, r2
 80047ba:	f8de 2000 	ldr.w	r2, [lr]
 80047be:	b280      	uxth	r0, r0
 80047c0:	b292      	uxth	r2, r2
 80047c2:	1a12      	subs	r2, r2, r0
 80047c4:	445a      	add	r2, fp
 80047c6:	f8de 0000 	ldr.w	r0, [lr]
 80047ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80047d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80047d8:	b292      	uxth	r2, r2
 80047da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80047de:	45e1      	cmp	r9, ip
 80047e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80047e4:	f84e 2b04 	str.w	r2, [lr], #4
 80047e8:	d2de      	bcs.n	80047a8 <quorem+0x42>
 80047ea:	9b00      	ldr	r3, [sp, #0]
 80047ec:	58eb      	ldr	r3, [r5, r3]
 80047ee:	b92b      	cbnz	r3, 80047fc <quorem+0x96>
 80047f0:	9b01      	ldr	r3, [sp, #4]
 80047f2:	3b04      	subs	r3, #4
 80047f4:	429d      	cmp	r5, r3
 80047f6:	461a      	mov	r2, r3
 80047f8:	d32f      	bcc.n	800485a <quorem+0xf4>
 80047fa:	613c      	str	r4, [r7, #16]
 80047fc:	4638      	mov	r0, r7
 80047fe:	f001 f979 	bl	8005af4 <__mcmp>
 8004802:	2800      	cmp	r0, #0
 8004804:	db25      	blt.n	8004852 <quorem+0xec>
 8004806:	4629      	mov	r1, r5
 8004808:	2000      	movs	r0, #0
 800480a:	f858 2b04 	ldr.w	r2, [r8], #4
 800480e:	f8d1 c000 	ldr.w	ip, [r1]
 8004812:	fa1f fe82 	uxth.w	lr, r2
 8004816:	fa1f f38c 	uxth.w	r3, ip
 800481a:	eba3 030e 	sub.w	r3, r3, lr
 800481e:	4403      	add	r3, r0
 8004820:	0c12      	lsrs	r2, r2, #16
 8004822:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004826:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800482a:	b29b      	uxth	r3, r3
 800482c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004830:	45c1      	cmp	r9, r8
 8004832:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004836:	f841 3b04 	str.w	r3, [r1], #4
 800483a:	d2e6      	bcs.n	800480a <quorem+0xa4>
 800483c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004840:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004844:	b922      	cbnz	r2, 8004850 <quorem+0xea>
 8004846:	3b04      	subs	r3, #4
 8004848:	429d      	cmp	r5, r3
 800484a:	461a      	mov	r2, r3
 800484c:	d30b      	bcc.n	8004866 <quorem+0x100>
 800484e:	613c      	str	r4, [r7, #16]
 8004850:	3601      	adds	r6, #1
 8004852:	4630      	mov	r0, r6
 8004854:	b003      	add	sp, #12
 8004856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	3b04      	subs	r3, #4
 800485e:	2a00      	cmp	r2, #0
 8004860:	d1cb      	bne.n	80047fa <quorem+0x94>
 8004862:	3c01      	subs	r4, #1
 8004864:	e7c6      	b.n	80047f4 <quorem+0x8e>
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	3b04      	subs	r3, #4
 800486a:	2a00      	cmp	r2, #0
 800486c:	d1ef      	bne.n	800484e <quorem+0xe8>
 800486e:	3c01      	subs	r4, #1
 8004870:	e7ea      	b.n	8004848 <quorem+0xe2>
 8004872:	2000      	movs	r0, #0
 8004874:	e7ee      	b.n	8004854 <quorem+0xee>
	...

08004878 <_dtoa_r>:
 8004878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487c:	4614      	mov	r4, r2
 800487e:	461d      	mov	r5, r3
 8004880:	69c7      	ldr	r7, [r0, #28]
 8004882:	b097      	sub	sp, #92	@ 0x5c
 8004884:	4683      	mov	fp, r0
 8004886:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800488a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800488c:	b97f      	cbnz	r7, 80048ae <_dtoa_r+0x36>
 800488e:	2010      	movs	r0, #16
 8004890:	f000 fe02 	bl	8005498 <malloc>
 8004894:	4602      	mov	r2, r0
 8004896:	f8cb 001c 	str.w	r0, [fp, #28]
 800489a:	b920      	cbnz	r0, 80048a6 <_dtoa_r+0x2e>
 800489c:	21ef      	movs	r1, #239	@ 0xef
 800489e:	4ba8      	ldr	r3, [pc, #672]	@ (8004b40 <_dtoa_r+0x2c8>)
 80048a0:	48a8      	ldr	r0, [pc, #672]	@ (8004b44 <_dtoa_r+0x2cc>)
 80048a2:	f001 fc67 	bl	8006174 <__assert_func>
 80048a6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80048aa:	6007      	str	r7, [r0, #0]
 80048ac:	60c7      	str	r7, [r0, #12]
 80048ae:	f8db 301c 	ldr.w	r3, [fp, #28]
 80048b2:	6819      	ldr	r1, [r3, #0]
 80048b4:	b159      	cbz	r1, 80048ce <_dtoa_r+0x56>
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	2301      	movs	r3, #1
 80048ba:	4093      	lsls	r3, r2
 80048bc:	604a      	str	r2, [r1, #4]
 80048be:	608b      	str	r3, [r1, #8]
 80048c0:	4658      	mov	r0, fp
 80048c2:	f000 fedf 	bl	8005684 <_Bfree>
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	1e2b      	subs	r3, r5, #0
 80048d0:	bfaf      	iteee	ge
 80048d2:	2300      	movge	r3, #0
 80048d4:	2201      	movlt	r2, #1
 80048d6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80048da:	9303      	strlt	r3, [sp, #12]
 80048dc:	bfa8      	it	ge
 80048de:	6033      	strge	r3, [r6, #0]
 80048e0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80048e4:	4b98      	ldr	r3, [pc, #608]	@ (8004b48 <_dtoa_r+0x2d0>)
 80048e6:	bfb8      	it	lt
 80048e8:	6032      	strlt	r2, [r6, #0]
 80048ea:	ea33 0308 	bics.w	r3, r3, r8
 80048ee:	d112      	bne.n	8004916 <_dtoa_r+0x9e>
 80048f0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80048f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80048fc:	4323      	orrs	r3, r4
 80048fe:	f000 8550 	beq.w	80053a2 <_dtoa_r+0xb2a>
 8004902:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004904:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004b4c <_dtoa_r+0x2d4>
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 8552 	beq.w	80053b2 <_dtoa_r+0xb3a>
 800490e:	f10a 0303 	add.w	r3, sl, #3
 8004912:	f000 bd4c 	b.w	80053ae <_dtoa_r+0xb36>
 8004916:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800491a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800491e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004922:	2200      	movs	r2, #0
 8004924:	2300      	movs	r3, #0
 8004926:	f7fc f83f 	bl	80009a8 <__aeabi_dcmpeq>
 800492a:	4607      	mov	r7, r0
 800492c:	b158      	cbz	r0, 8004946 <_dtoa_r+0xce>
 800492e:	2301      	movs	r3, #1
 8004930:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004936:	b113      	cbz	r3, 800493e <_dtoa_r+0xc6>
 8004938:	4b85      	ldr	r3, [pc, #532]	@ (8004b50 <_dtoa_r+0x2d8>)
 800493a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004b54 <_dtoa_r+0x2dc>
 8004942:	f000 bd36 	b.w	80053b2 <_dtoa_r+0xb3a>
 8004946:	ab14      	add	r3, sp, #80	@ 0x50
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	ab15      	add	r3, sp, #84	@ 0x54
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	4658      	mov	r0, fp
 8004950:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004954:	f001 f97e 	bl	8005c54 <__d2b>
 8004958:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800495c:	4681      	mov	r9, r0
 800495e:	2e00      	cmp	r6, #0
 8004960:	d077      	beq.n	8004a52 <_dtoa_r+0x1da>
 8004962:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004966:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004968:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800496c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004970:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004974:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004978:	9712      	str	r7, [sp, #72]	@ 0x48
 800497a:	4619      	mov	r1, r3
 800497c:	2200      	movs	r2, #0
 800497e:	4b76      	ldr	r3, [pc, #472]	@ (8004b58 <_dtoa_r+0x2e0>)
 8004980:	f7fb fbf2 	bl	8000168 <__aeabi_dsub>
 8004984:	a368      	add	r3, pc, #416	@ (adr r3, 8004b28 <_dtoa_r+0x2b0>)
 8004986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498a:	f7fb fda5 	bl	80004d8 <__aeabi_dmul>
 800498e:	a368      	add	r3, pc, #416	@ (adr r3, 8004b30 <_dtoa_r+0x2b8>)
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	f7fb fbea 	bl	800016c <__adddf3>
 8004998:	4604      	mov	r4, r0
 800499a:	4630      	mov	r0, r6
 800499c:	460d      	mov	r5, r1
 800499e:	f7fb fd31 	bl	8000404 <__aeabi_i2d>
 80049a2:	a365      	add	r3, pc, #404	@ (adr r3, 8004b38 <_dtoa_r+0x2c0>)
 80049a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a8:	f7fb fd96 	bl	80004d8 <__aeabi_dmul>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4620      	mov	r0, r4
 80049b2:	4629      	mov	r1, r5
 80049b4:	f7fb fbda 	bl	800016c <__adddf3>
 80049b8:	4604      	mov	r4, r0
 80049ba:	460d      	mov	r5, r1
 80049bc:	f7fc f83c 	bl	8000a38 <__aeabi_d2iz>
 80049c0:	2200      	movs	r2, #0
 80049c2:	4607      	mov	r7, r0
 80049c4:	2300      	movs	r3, #0
 80049c6:	4620      	mov	r0, r4
 80049c8:	4629      	mov	r1, r5
 80049ca:	f7fb fff7 	bl	80009bc <__aeabi_dcmplt>
 80049ce:	b140      	cbz	r0, 80049e2 <_dtoa_r+0x16a>
 80049d0:	4638      	mov	r0, r7
 80049d2:	f7fb fd17 	bl	8000404 <__aeabi_i2d>
 80049d6:	4622      	mov	r2, r4
 80049d8:	462b      	mov	r3, r5
 80049da:	f7fb ffe5 	bl	80009a8 <__aeabi_dcmpeq>
 80049de:	b900      	cbnz	r0, 80049e2 <_dtoa_r+0x16a>
 80049e0:	3f01      	subs	r7, #1
 80049e2:	2f16      	cmp	r7, #22
 80049e4:	d853      	bhi.n	8004a8e <_dtoa_r+0x216>
 80049e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049ea:	4b5c      	ldr	r3, [pc, #368]	@ (8004b5c <_dtoa_r+0x2e4>)
 80049ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	f7fb ffe2 	bl	80009bc <__aeabi_dcmplt>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d04a      	beq.n	8004a92 <_dtoa_r+0x21a>
 80049fc:	2300      	movs	r3, #0
 80049fe:	3f01      	subs	r7, #1
 8004a00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004a02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004a04:	1b9b      	subs	r3, r3, r6
 8004a06:	1e5a      	subs	r2, r3, #1
 8004a08:	bf46      	itte	mi
 8004a0a:	f1c3 0801 	rsbmi	r8, r3, #1
 8004a0e:	2300      	movmi	r3, #0
 8004a10:	f04f 0800 	movpl.w	r8, #0
 8004a14:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a16:	bf48      	it	mi
 8004a18:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004a1a:	2f00      	cmp	r7, #0
 8004a1c:	db3b      	blt.n	8004a96 <_dtoa_r+0x21e>
 8004a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a20:	970e      	str	r7, [sp, #56]	@ 0x38
 8004a22:	443b      	add	r3, r7
 8004a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a26:	2300      	movs	r3, #0
 8004a28:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a2c:	2b09      	cmp	r3, #9
 8004a2e:	d866      	bhi.n	8004afe <_dtoa_r+0x286>
 8004a30:	2b05      	cmp	r3, #5
 8004a32:	bfc4      	itt	gt
 8004a34:	3b04      	subgt	r3, #4
 8004a36:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004a38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a3a:	bfc8      	it	gt
 8004a3c:	2400      	movgt	r4, #0
 8004a3e:	f1a3 0302 	sub.w	r3, r3, #2
 8004a42:	bfd8      	it	le
 8004a44:	2401      	movle	r4, #1
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d864      	bhi.n	8004b14 <_dtoa_r+0x29c>
 8004a4a:	e8df f003 	tbb	[pc, r3]
 8004a4e:	382b      	.short	0x382b
 8004a50:	5636      	.short	0x5636
 8004a52:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004a56:	441e      	add	r6, r3
 8004a58:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	bfc1      	itttt	gt
 8004a60:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004a64:	fa08 f803 	lslgt.w	r8, r8, r3
 8004a68:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004a6c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004a70:	bfd6      	itet	le
 8004a72:	f1c3 0320 	rsble	r3, r3, #32
 8004a76:	ea48 0003 	orrgt.w	r0, r8, r3
 8004a7a:	fa04 f003 	lslle.w	r0, r4, r3
 8004a7e:	f7fb fcb1 	bl	80003e4 <__aeabi_ui2d>
 8004a82:	2201      	movs	r2, #1
 8004a84:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004a88:	3e01      	subs	r6, #1
 8004a8a:	9212      	str	r2, [sp, #72]	@ 0x48
 8004a8c:	e775      	b.n	800497a <_dtoa_r+0x102>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e7b6      	b.n	8004a00 <_dtoa_r+0x188>
 8004a92:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004a94:	e7b5      	b.n	8004a02 <_dtoa_r+0x18a>
 8004a96:	427b      	negs	r3, r7
 8004a98:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	eba8 0807 	sub.w	r8, r8, r7
 8004aa0:	930e      	str	r3, [sp, #56]	@ 0x38
 8004aa2:	e7c2      	b.n	8004a2a <_dtoa_r+0x1b2>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004aa8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	dc35      	bgt.n	8004b1a <_dtoa_r+0x2a2>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004ab6:	9221      	str	r2, [sp, #132]	@ 0x84
 8004ab8:	e00b      	b.n	8004ad2 <_dtoa_r+0x25a>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e7f3      	b.n	8004aa6 <_dtoa_r+0x22e>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ac2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ac4:	18fb      	adds	r3, r7, r3
 8004ac6:	9308      	str	r3, [sp, #32]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	9307      	str	r3, [sp, #28]
 8004ace:	bfb8      	it	lt
 8004ad0:	2301      	movlt	r3, #1
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	2204      	movs	r2, #4
 8004ad6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004ada:	f102 0514 	add.w	r5, r2, #20
 8004ade:	429d      	cmp	r5, r3
 8004ae0:	d91f      	bls.n	8004b22 <_dtoa_r+0x2aa>
 8004ae2:	6041      	str	r1, [r0, #4]
 8004ae4:	4658      	mov	r0, fp
 8004ae6:	f000 fd8d 	bl	8005604 <_Balloc>
 8004aea:	4682      	mov	sl, r0
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d139      	bne.n	8004b64 <_dtoa_r+0x2ec>
 8004af0:	4602      	mov	r2, r0
 8004af2:	f240 11af 	movw	r1, #431	@ 0x1af
 8004af6:	4b1a      	ldr	r3, [pc, #104]	@ (8004b60 <_dtoa_r+0x2e8>)
 8004af8:	e6d2      	b.n	80048a0 <_dtoa_r+0x28>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e7e0      	b.n	8004ac0 <_dtoa_r+0x248>
 8004afe:	2401      	movs	r4, #1
 8004b00:	2300      	movs	r3, #0
 8004b02:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004b04:	9320      	str	r3, [sp, #128]	@ 0x80
 8004b06:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004b10:	2312      	movs	r3, #18
 8004b12:	e7d0      	b.n	8004ab6 <_dtoa_r+0x23e>
 8004b14:	2301      	movs	r3, #1
 8004b16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b18:	e7f5      	b.n	8004b06 <_dtoa_r+0x28e>
 8004b1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b1c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004b20:	e7d7      	b.n	8004ad2 <_dtoa_r+0x25a>
 8004b22:	3101      	adds	r1, #1
 8004b24:	0052      	lsls	r2, r2, #1
 8004b26:	e7d8      	b.n	8004ada <_dtoa_r+0x262>
 8004b28:	636f4361 	.word	0x636f4361
 8004b2c:	3fd287a7 	.word	0x3fd287a7
 8004b30:	8b60c8b3 	.word	0x8b60c8b3
 8004b34:	3fc68a28 	.word	0x3fc68a28
 8004b38:	509f79fb 	.word	0x509f79fb
 8004b3c:	3fd34413 	.word	0x3fd34413
 8004b40:	0800695b 	.word	0x0800695b
 8004b44:	08006972 	.word	0x08006972
 8004b48:	7ff00000 	.word	0x7ff00000
 8004b4c:	08006957 	.word	0x08006957
 8004b50:	0800692b 	.word	0x0800692b
 8004b54:	0800692a 	.word	0x0800692a
 8004b58:	3ff80000 	.word	0x3ff80000
 8004b5c:	08006a68 	.word	0x08006a68
 8004b60:	080069ca 	.word	0x080069ca
 8004b64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004b68:	6018      	str	r0, [r3, #0]
 8004b6a:	9b07      	ldr	r3, [sp, #28]
 8004b6c:	2b0e      	cmp	r3, #14
 8004b6e:	f200 80a4 	bhi.w	8004cba <_dtoa_r+0x442>
 8004b72:	2c00      	cmp	r4, #0
 8004b74:	f000 80a1 	beq.w	8004cba <_dtoa_r+0x442>
 8004b78:	2f00      	cmp	r7, #0
 8004b7a:	dd33      	ble.n	8004be4 <_dtoa_r+0x36c>
 8004b7c:	4b86      	ldr	r3, [pc, #536]	@ (8004d98 <_dtoa_r+0x520>)
 8004b7e:	f007 020f 	and.w	r2, r7, #15
 8004b82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b86:	05f8      	lsls	r0, r7, #23
 8004b88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b8c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004b90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004b94:	d516      	bpl.n	8004bc4 <_dtoa_r+0x34c>
 8004b96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b9a:	4b80      	ldr	r3, [pc, #512]	@ (8004d9c <_dtoa_r+0x524>)
 8004b9c:	2603      	movs	r6, #3
 8004b9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ba2:	f7fb fdc3 	bl	800072c <__aeabi_ddiv>
 8004ba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004baa:	f004 040f 	and.w	r4, r4, #15
 8004bae:	4d7b      	ldr	r5, [pc, #492]	@ (8004d9c <_dtoa_r+0x524>)
 8004bb0:	b954      	cbnz	r4, 8004bc8 <_dtoa_r+0x350>
 8004bb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bba:	f7fb fdb7 	bl	800072c <__aeabi_ddiv>
 8004bbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bc2:	e028      	b.n	8004c16 <_dtoa_r+0x39e>
 8004bc4:	2602      	movs	r6, #2
 8004bc6:	e7f2      	b.n	8004bae <_dtoa_r+0x336>
 8004bc8:	07e1      	lsls	r1, r4, #31
 8004bca:	d508      	bpl.n	8004bde <_dtoa_r+0x366>
 8004bcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004bd4:	f7fb fc80 	bl	80004d8 <__aeabi_dmul>
 8004bd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bdc:	3601      	adds	r6, #1
 8004bde:	1064      	asrs	r4, r4, #1
 8004be0:	3508      	adds	r5, #8
 8004be2:	e7e5      	b.n	8004bb0 <_dtoa_r+0x338>
 8004be4:	f000 80d2 	beq.w	8004d8c <_dtoa_r+0x514>
 8004be8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004bec:	427c      	negs	r4, r7
 8004bee:	4b6a      	ldr	r3, [pc, #424]	@ (8004d98 <_dtoa_r+0x520>)
 8004bf0:	f004 020f 	and.w	r2, r4, #15
 8004bf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfc:	f7fb fc6c 	bl	80004d8 <__aeabi_dmul>
 8004c00:	2602      	movs	r6, #2
 8004c02:	2300      	movs	r3, #0
 8004c04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c08:	4d64      	ldr	r5, [pc, #400]	@ (8004d9c <_dtoa_r+0x524>)
 8004c0a:	1124      	asrs	r4, r4, #4
 8004c0c:	2c00      	cmp	r4, #0
 8004c0e:	f040 80b2 	bne.w	8004d76 <_dtoa_r+0x4fe>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1d3      	bne.n	8004bbe <_dtoa_r+0x346>
 8004c16:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004c1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80b7 	beq.w	8004d90 <_dtoa_r+0x518>
 8004c22:	2200      	movs	r2, #0
 8004c24:	4620      	mov	r0, r4
 8004c26:	4629      	mov	r1, r5
 8004c28:	4b5d      	ldr	r3, [pc, #372]	@ (8004da0 <_dtoa_r+0x528>)
 8004c2a:	f7fb fec7 	bl	80009bc <__aeabi_dcmplt>
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	f000 80ae 	beq.w	8004d90 <_dtoa_r+0x518>
 8004c34:	9b07      	ldr	r3, [sp, #28]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 80aa 	beq.w	8004d90 <_dtoa_r+0x518>
 8004c3c:	9b08      	ldr	r3, [sp, #32]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	dd37      	ble.n	8004cb2 <_dtoa_r+0x43a>
 8004c42:	1e7b      	subs	r3, r7, #1
 8004c44:	4620      	mov	r0, r4
 8004c46:	9304      	str	r3, [sp, #16]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	4629      	mov	r1, r5
 8004c4c:	4b55      	ldr	r3, [pc, #340]	@ (8004da4 <_dtoa_r+0x52c>)
 8004c4e:	f7fb fc43 	bl	80004d8 <__aeabi_dmul>
 8004c52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c56:	9c08      	ldr	r4, [sp, #32]
 8004c58:	3601      	adds	r6, #1
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	f7fb fbd2 	bl	8000404 <__aeabi_i2d>
 8004c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c64:	f7fb fc38 	bl	80004d8 <__aeabi_dmul>
 8004c68:	2200      	movs	r2, #0
 8004c6a:	4b4f      	ldr	r3, [pc, #316]	@ (8004da8 <_dtoa_r+0x530>)
 8004c6c:	f7fb fa7e 	bl	800016c <__adddf3>
 8004c70:	4605      	mov	r5, r0
 8004c72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004c76:	2c00      	cmp	r4, #0
 8004c78:	f040 809a 	bne.w	8004db0 <_dtoa_r+0x538>
 8004c7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c80:	2200      	movs	r2, #0
 8004c82:	4b4a      	ldr	r3, [pc, #296]	@ (8004dac <_dtoa_r+0x534>)
 8004c84:	f7fb fa70 	bl	8000168 <__aeabi_dsub>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c90:	462a      	mov	r2, r5
 8004c92:	4633      	mov	r3, r6
 8004c94:	f7fb feb0 	bl	80009f8 <__aeabi_dcmpgt>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	f040 828e 	bne.w	80051ba <_dtoa_r+0x942>
 8004c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ca2:	462a      	mov	r2, r5
 8004ca4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004ca8:	f7fb fe88 	bl	80009bc <__aeabi_dcmplt>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	f040 8127 	bne.w	8004f00 <_dtoa_r+0x688>
 8004cb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004cb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004cba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f2c0 8163 	blt.w	8004f88 <_dtoa_r+0x710>
 8004cc2:	2f0e      	cmp	r7, #14
 8004cc4:	f300 8160 	bgt.w	8004f88 <_dtoa_r+0x710>
 8004cc8:	4b33      	ldr	r3, [pc, #204]	@ (8004d98 <_dtoa_r+0x520>)
 8004cca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004cce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004cd2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004cd6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	da03      	bge.n	8004ce4 <_dtoa_r+0x46c>
 8004cdc:	9b07      	ldr	r3, [sp, #28]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f340 8100 	ble.w	8004ee4 <_dtoa_r+0x66c>
 8004ce4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004ce8:	4656      	mov	r6, sl
 8004cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cee:	4620      	mov	r0, r4
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	f7fb fd1b 	bl	800072c <__aeabi_ddiv>
 8004cf6:	f7fb fe9f 	bl	8000a38 <__aeabi_d2iz>
 8004cfa:	4680      	mov	r8, r0
 8004cfc:	f7fb fb82 	bl	8000404 <__aeabi_i2d>
 8004d00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d04:	f7fb fbe8 	bl	80004d8 <__aeabi_dmul>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	4629      	mov	r1, r5
 8004d10:	f7fb fa2a 	bl	8000168 <__aeabi_dsub>
 8004d14:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004d18:	9d07      	ldr	r5, [sp, #28]
 8004d1a:	f806 4b01 	strb.w	r4, [r6], #1
 8004d1e:	eba6 040a 	sub.w	r4, r6, sl
 8004d22:	42a5      	cmp	r5, r4
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	f040 8116 	bne.w	8004f58 <_dtoa_r+0x6e0>
 8004d2c:	f7fb fa1e 	bl	800016c <__adddf3>
 8004d30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d34:	4604      	mov	r4, r0
 8004d36:	460d      	mov	r5, r1
 8004d38:	f7fb fe5e 	bl	80009f8 <__aeabi_dcmpgt>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	f040 80f8 	bne.w	8004f32 <_dtoa_r+0x6ba>
 8004d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d46:	4620      	mov	r0, r4
 8004d48:	4629      	mov	r1, r5
 8004d4a:	f7fb fe2d 	bl	80009a8 <__aeabi_dcmpeq>
 8004d4e:	b118      	cbz	r0, 8004d58 <_dtoa_r+0x4e0>
 8004d50:	f018 0f01 	tst.w	r8, #1
 8004d54:	f040 80ed 	bne.w	8004f32 <_dtoa_r+0x6ba>
 8004d58:	4649      	mov	r1, r9
 8004d5a:	4658      	mov	r0, fp
 8004d5c:	f000 fc92 	bl	8005684 <_Bfree>
 8004d60:	2300      	movs	r3, #0
 8004d62:	7033      	strb	r3, [r6, #0]
 8004d64:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004d66:	3701      	adds	r7, #1
 8004d68:	601f      	str	r7, [r3, #0]
 8004d6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 8320 	beq.w	80053b2 <_dtoa_r+0xb3a>
 8004d72:	601e      	str	r6, [r3, #0]
 8004d74:	e31d      	b.n	80053b2 <_dtoa_r+0xb3a>
 8004d76:	07e2      	lsls	r2, r4, #31
 8004d78:	d505      	bpl.n	8004d86 <_dtoa_r+0x50e>
 8004d7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004d7e:	f7fb fbab 	bl	80004d8 <__aeabi_dmul>
 8004d82:	2301      	movs	r3, #1
 8004d84:	3601      	adds	r6, #1
 8004d86:	1064      	asrs	r4, r4, #1
 8004d88:	3508      	adds	r5, #8
 8004d8a:	e73f      	b.n	8004c0c <_dtoa_r+0x394>
 8004d8c:	2602      	movs	r6, #2
 8004d8e:	e742      	b.n	8004c16 <_dtoa_r+0x39e>
 8004d90:	9c07      	ldr	r4, [sp, #28]
 8004d92:	9704      	str	r7, [sp, #16]
 8004d94:	e761      	b.n	8004c5a <_dtoa_r+0x3e2>
 8004d96:	bf00      	nop
 8004d98:	08006a68 	.word	0x08006a68
 8004d9c:	08006a40 	.word	0x08006a40
 8004da0:	3ff00000 	.word	0x3ff00000
 8004da4:	40240000 	.word	0x40240000
 8004da8:	401c0000 	.word	0x401c0000
 8004dac:	40140000 	.word	0x40140000
 8004db0:	4b70      	ldr	r3, [pc, #448]	@ (8004f74 <_dtoa_r+0x6fc>)
 8004db2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004db4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004db8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004dbc:	4454      	add	r4, sl
 8004dbe:	2900      	cmp	r1, #0
 8004dc0:	d045      	beq.n	8004e4e <_dtoa_r+0x5d6>
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	496c      	ldr	r1, [pc, #432]	@ (8004f78 <_dtoa_r+0x700>)
 8004dc6:	f7fb fcb1 	bl	800072c <__aeabi_ddiv>
 8004dca:	4633      	mov	r3, r6
 8004dcc:	462a      	mov	r2, r5
 8004dce:	f7fb f9cb 	bl	8000168 <__aeabi_dsub>
 8004dd2:	4656      	mov	r6, sl
 8004dd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004dd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ddc:	f7fb fe2c 	bl	8000a38 <__aeabi_d2iz>
 8004de0:	4605      	mov	r5, r0
 8004de2:	f7fb fb0f 	bl	8000404 <__aeabi_i2d>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dee:	f7fb f9bb 	bl	8000168 <__aeabi_dsub>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	3530      	adds	r5, #48	@ 0x30
 8004df8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004dfc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e00:	f806 5b01 	strb.w	r5, [r6], #1
 8004e04:	f7fb fdda 	bl	80009bc <__aeabi_dcmplt>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d163      	bne.n	8004ed4 <_dtoa_r+0x65c>
 8004e0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e10:	2000      	movs	r0, #0
 8004e12:	495a      	ldr	r1, [pc, #360]	@ (8004f7c <_dtoa_r+0x704>)
 8004e14:	f7fb f9a8 	bl	8000168 <__aeabi_dsub>
 8004e18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e1c:	f7fb fdce 	bl	80009bc <__aeabi_dcmplt>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	f040 8087 	bne.w	8004f34 <_dtoa_r+0x6bc>
 8004e26:	42a6      	cmp	r6, r4
 8004e28:	f43f af43 	beq.w	8004cb2 <_dtoa_r+0x43a>
 8004e2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004e30:	2200      	movs	r2, #0
 8004e32:	4b53      	ldr	r3, [pc, #332]	@ (8004f80 <_dtoa_r+0x708>)
 8004e34:	f7fb fb50 	bl	80004d8 <__aeabi_dmul>
 8004e38:	2200      	movs	r2, #0
 8004e3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e42:	4b4f      	ldr	r3, [pc, #316]	@ (8004f80 <_dtoa_r+0x708>)
 8004e44:	f7fb fb48 	bl	80004d8 <__aeabi_dmul>
 8004e48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e4c:	e7c4      	b.n	8004dd8 <_dtoa_r+0x560>
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4628      	mov	r0, r5
 8004e52:	f7fb fb41 	bl	80004d8 <__aeabi_dmul>
 8004e56:	4656      	mov	r6, sl
 8004e58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e5c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e62:	f7fb fde9 	bl	8000a38 <__aeabi_d2iz>
 8004e66:	4605      	mov	r5, r0
 8004e68:	f7fb facc 	bl	8000404 <__aeabi_i2d>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e74:	f7fb f978 	bl	8000168 <__aeabi_dsub>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	3530      	adds	r5, #48	@ 0x30
 8004e7e:	f806 5b01 	strb.w	r5, [r6], #1
 8004e82:	42a6      	cmp	r6, r4
 8004e84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	d124      	bne.n	8004ed8 <_dtoa_r+0x660>
 8004e8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004e92:	4b39      	ldr	r3, [pc, #228]	@ (8004f78 <_dtoa_r+0x700>)
 8004e94:	f7fb f96a 	bl	800016c <__adddf3>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ea0:	f7fb fdaa 	bl	80009f8 <__aeabi_dcmpgt>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d145      	bne.n	8004f34 <_dtoa_r+0x6bc>
 8004ea8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004eac:	2000      	movs	r0, #0
 8004eae:	4932      	ldr	r1, [pc, #200]	@ (8004f78 <_dtoa_r+0x700>)
 8004eb0:	f7fb f95a 	bl	8000168 <__aeabi_dsub>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ebc:	f7fb fd7e 	bl	80009bc <__aeabi_dcmplt>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	f43f aef6 	beq.w	8004cb2 <_dtoa_r+0x43a>
 8004ec6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004ec8:	1e73      	subs	r3, r6, #1
 8004eca:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004ecc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004ed0:	2b30      	cmp	r3, #48	@ 0x30
 8004ed2:	d0f8      	beq.n	8004ec6 <_dtoa_r+0x64e>
 8004ed4:	9f04      	ldr	r7, [sp, #16]
 8004ed6:	e73f      	b.n	8004d58 <_dtoa_r+0x4e0>
 8004ed8:	4b29      	ldr	r3, [pc, #164]	@ (8004f80 <_dtoa_r+0x708>)
 8004eda:	f7fb fafd 	bl	80004d8 <__aeabi_dmul>
 8004ede:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ee2:	e7bc      	b.n	8004e5e <_dtoa_r+0x5e6>
 8004ee4:	d10c      	bne.n	8004f00 <_dtoa_r+0x688>
 8004ee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004eea:	2200      	movs	r2, #0
 8004eec:	4b25      	ldr	r3, [pc, #148]	@ (8004f84 <_dtoa_r+0x70c>)
 8004eee:	f7fb faf3 	bl	80004d8 <__aeabi_dmul>
 8004ef2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ef6:	f7fb fd75 	bl	80009e4 <__aeabi_dcmpge>
 8004efa:	2800      	cmp	r0, #0
 8004efc:	f000 815b 	beq.w	80051b6 <_dtoa_r+0x93e>
 8004f00:	2400      	movs	r4, #0
 8004f02:	4625      	mov	r5, r4
 8004f04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f06:	4656      	mov	r6, sl
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	9304      	str	r3, [sp, #16]
 8004f0c:	2700      	movs	r7, #0
 8004f0e:	4621      	mov	r1, r4
 8004f10:	4658      	mov	r0, fp
 8004f12:	f000 fbb7 	bl	8005684 <_Bfree>
 8004f16:	2d00      	cmp	r5, #0
 8004f18:	d0dc      	beq.n	8004ed4 <_dtoa_r+0x65c>
 8004f1a:	b12f      	cbz	r7, 8004f28 <_dtoa_r+0x6b0>
 8004f1c:	42af      	cmp	r7, r5
 8004f1e:	d003      	beq.n	8004f28 <_dtoa_r+0x6b0>
 8004f20:	4639      	mov	r1, r7
 8004f22:	4658      	mov	r0, fp
 8004f24:	f000 fbae 	bl	8005684 <_Bfree>
 8004f28:	4629      	mov	r1, r5
 8004f2a:	4658      	mov	r0, fp
 8004f2c:	f000 fbaa 	bl	8005684 <_Bfree>
 8004f30:	e7d0      	b.n	8004ed4 <_dtoa_r+0x65c>
 8004f32:	9704      	str	r7, [sp, #16]
 8004f34:	4633      	mov	r3, r6
 8004f36:	461e      	mov	r6, r3
 8004f38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f3c:	2a39      	cmp	r2, #57	@ 0x39
 8004f3e:	d107      	bne.n	8004f50 <_dtoa_r+0x6d8>
 8004f40:	459a      	cmp	sl, r3
 8004f42:	d1f8      	bne.n	8004f36 <_dtoa_r+0x6be>
 8004f44:	9a04      	ldr	r2, [sp, #16]
 8004f46:	3201      	adds	r2, #1
 8004f48:	9204      	str	r2, [sp, #16]
 8004f4a:	2230      	movs	r2, #48	@ 0x30
 8004f4c:	f88a 2000 	strb.w	r2, [sl]
 8004f50:	781a      	ldrb	r2, [r3, #0]
 8004f52:	3201      	adds	r2, #1
 8004f54:	701a      	strb	r2, [r3, #0]
 8004f56:	e7bd      	b.n	8004ed4 <_dtoa_r+0x65c>
 8004f58:	2200      	movs	r2, #0
 8004f5a:	4b09      	ldr	r3, [pc, #36]	@ (8004f80 <_dtoa_r+0x708>)
 8004f5c:	f7fb fabc 	bl	80004d8 <__aeabi_dmul>
 8004f60:	2200      	movs	r2, #0
 8004f62:	2300      	movs	r3, #0
 8004f64:	4604      	mov	r4, r0
 8004f66:	460d      	mov	r5, r1
 8004f68:	f7fb fd1e 	bl	80009a8 <__aeabi_dcmpeq>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	f43f aebc 	beq.w	8004cea <_dtoa_r+0x472>
 8004f72:	e6f1      	b.n	8004d58 <_dtoa_r+0x4e0>
 8004f74:	08006a68 	.word	0x08006a68
 8004f78:	3fe00000 	.word	0x3fe00000
 8004f7c:	3ff00000 	.word	0x3ff00000
 8004f80:	40240000 	.word	0x40240000
 8004f84:	40140000 	.word	0x40140000
 8004f88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004f8a:	2a00      	cmp	r2, #0
 8004f8c:	f000 80db 	beq.w	8005146 <_dtoa_r+0x8ce>
 8004f90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004f92:	2a01      	cmp	r2, #1
 8004f94:	f300 80bf 	bgt.w	8005116 <_dtoa_r+0x89e>
 8004f98:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004f9a:	2a00      	cmp	r2, #0
 8004f9c:	f000 80b7 	beq.w	800510e <_dtoa_r+0x896>
 8004fa0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004fa4:	4646      	mov	r6, r8
 8004fa6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004fa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004faa:	2101      	movs	r1, #1
 8004fac:	441a      	add	r2, r3
 8004fae:	4658      	mov	r0, fp
 8004fb0:	4498      	add	r8, r3
 8004fb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fb4:	f000 fc1a 	bl	80057ec <__i2b>
 8004fb8:	4605      	mov	r5, r0
 8004fba:	b15e      	cbz	r6, 8004fd4 <_dtoa_r+0x75c>
 8004fbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	dd08      	ble.n	8004fd4 <_dtoa_r+0x75c>
 8004fc2:	42b3      	cmp	r3, r6
 8004fc4:	bfa8      	it	ge
 8004fc6:	4633      	movge	r3, r6
 8004fc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fca:	eba8 0803 	sub.w	r8, r8, r3
 8004fce:	1af6      	subs	r6, r6, r3
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fd6:	b1f3      	cbz	r3, 8005016 <_dtoa_r+0x79e>
 8004fd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 80b7 	beq.w	800514e <_dtoa_r+0x8d6>
 8004fe0:	b18c      	cbz	r4, 8005006 <_dtoa_r+0x78e>
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	4622      	mov	r2, r4
 8004fe6:	4658      	mov	r0, fp
 8004fe8:	f000 fcbe 	bl	8005968 <__pow5mult>
 8004fec:	464a      	mov	r2, r9
 8004fee:	4601      	mov	r1, r0
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	4658      	mov	r0, fp
 8004ff4:	f000 fc10 	bl	8005818 <__multiply>
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	9004      	str	r0, [sp, #16]
 8004ffc:	4658      	mov	r0, fp
 8004ffe:	f000 fb41 	bl	8005684 <_Bfree>
 8005002:	9b04      	ldr	r3, [sp, #16]
 8005004:	4699      	mov	r9, r3
 8005006:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005008:	1b1a      	subs	r2, r3, r4
 800500a:	d004      	beq.n	8005016 <_dtoa_r+0x79e>
 800500c:	4649      	mov	r1, r9
 800500e:	4658      	mov	r0, fp
 8005010:	f000 fcaa 	bl	8005968 <__pow5mult>
 8005014:	4681      	mov	r9, r0
 8005016:	2101      	movs	r1, #1
 8005018:	4658      	mov	r0, fp
 800501a:	f000 fbe7 	bl	80057ec <__i2b>
 800501e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005020:	4604      	mov	r4, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 81c9 	beq.w	80053ba <_dtoa_r+0xb42>
 8005028:	461a      	mov	r2, r3
 800502a:	4601      	mov	r1, r0
 800502c:	4658      	mov	r0, fp
 800502e:	f000 fc9b 	bl	8005968 <__pow5mult>
 8005032:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005034:	4604      	mov	r4, r0
 8005036:	2b01      	cmp	r3, #1
 8005038:	f300 808f 	bgt.w	800515a <_dtoa_r+0x8e2>
 800503c:	9b02      	ldr	r3, [sp, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	f040 8087 	bne.w	8005152 <_dtoa_r+0x8da>
 8005044:	9b03      	ldr	r3, [sp, #12]
 8005046:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800504a:	2b00      	cmp	r3, #0
 800504c:	f040 8083 	bne.w	8005156 <_dtoa_r+0x8de>
 8005050:	9b03      	ldr	r3, [sp, #12]
 8005052:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005056:	0d1b      	lsrs	r3, r3, #20
 8005058:	051b      	lsls	r3, r3, #20
 800505a:	b12b      	cbz	r3, 8005068 <_dtoa_r+0x7f0>
 800505c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800505e:	f108 0801 	add.w	r8, r8, #1
 8005062:	3301      	adds	r3, #1
 8005064:	9309      	str	r3, [sp, #36]	@ 0x24
 8005066:	2301      	movs	r3, #1
 8005068:	930a      	str	r3, [sp, #40]	@ 0x28
 800506a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 81aa 	beq.w	80053c6 <_dtoa_r+0xb4e>
 8005072:	6923      	ldr	r3, [r4, #16]
 8005074:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005078:	6918      	ldr	r0, [r3, #16]
 800507a:	f000 fb6b 	bl	8005754 <__hi0bits>
 800507e:	f1c0 0020 	rsb	r0, r0, #32
 8005082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005084:	4418      	add	r0, r3
 8005086:	f010 001f 	ands.w	r0, r0, #31
 800508a:	d071      	beq.n	8005170 <_dtoa_r+0x8f8>
 800508c:	f1c0 0320 	rsb	r3, r0, #32
 8005090:	2b04      	cmp	r3, #4
 8005092:	dd65      	ble.n	8005160 <_dtoa_r+0x8e8>
 8005094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005096:	f1c0 001c 	rsb	r0, r0, #28
 800509a:	4403      	add	r3, r0
 800509c:	4480      	add	r8, r0
 800509e:	4406      	add	r6, r0
 80050a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80050a2:	f1b8 0f00 	cmp.w	r8, #0
 80050a6:	dd05      	ble.n	80050b4 <_dtoa_r+0x83c>
 80050a8:	4649      	mov	r1, r9
 80050aa:	4642      	mov	r2, r8
 80050ac:	4658      	mov	r0, fp
 80050ae:	f000 fcb5 	bl	8005a1c <__lshift>
 80050b2:	4681      	mov	r9, r0
 80050b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	dd05      	ble.n	80050c6 <_dtoa_r+0x84e>
 80050ba:	4621      	mov	r1, r4
 80050bc:	461a      	mov	r2, r3
 80050be:	4658      	mov	r0, fp
 80050c0:	f000 fcac 	bl	8005a1c <__lshift>
 80050c4:	4604      	mov	r4, r0
 80050c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d053      	beq.n	8005174 <_dtoa_r+0x8fc>
 80050cc:	4621      	mov	r1, r4
 80050ce:	4648      	mov	r0, r9
 80050d0:	f000 fd10 	bl	8005af4 <__mcmp>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	da4d      	bge.n	8005174 <_dtoa_r+0x8fc>
 80050d8:	1e7b      	subs	r3, r7, #1
 80050da:	4649      	mov	r1, r9
 80050dc:	9304      	str	r3, [sp, #16]
 80050de:	220a      	movs	r2, #10
 80050e0:	2300      	movs	r3, #0
 80050e2:	4658      	mov	r0, fp
 80050e4:	f000 faf0 	bl	80056c8 <__multadd>
 80050e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050ea:	4681      	mov	r9, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 816c 	beq.w	80053ca <_dtoa_r+0xb52>
 80050f2:	2300      	movs	r3, #0
 80050f4:	4629      	mov	r1, r5
 80050f6:	220a      	movs	r2, #10
 80050f8:	4658      	mov	r0, fp
 80050fa:	f000 fae5 	bl	80056c8 <__multadd>
 80050fe:	9b08      	ldr	r3, [sp, #32]
 8005100:	4605      	mov	r5, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	dc61      	bgt.n	80051ca <_dtoa_r+0x952>
 8005106:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005108:	2b02      	cmp	r3, #2
 800510a:	dc3b      	bgt.n	8005184 <_dtoa_r+0x90c>
 800510c:	e05d      	b.n	80051ca <_dtoa_r+0x952>
 800510e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005110:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005114:	e746      	b.n	8004fa4 <_dtoa_r+0x72c>
 8005116:	9b07      	ldr	r3, [sp, #28]
 8005118:	1e5c      	subs	r4, r3, #1
 800511a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800511c:	42a3      	cmp	r3, r4
 800511e:	bfbf      	itttt	lt
 8005120:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005122:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005124:	1ae3      	sublt	r3, r4, r3
 8005126:	18d2      	addlt	r2, r2, r3
 8005128:	bfa8      	it	ge
 800512a:	1b1c      	subge	r4, r3, r4
 800512c:	9b07      	ldr	r3, [sp, #28]
 800512e:	bfbe      	ittt	lt
 8005130:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005132:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005134:	2400      	movlt	r4, #0
 8005136:	2b00      	cmp	r3, #0
 8005138:	bfb5      	itete	lt
 800513a:	eba8 0603 	sublt.w	r6, r8, r3
 800513e:	4646      	movge	r6, r8
 8005140:	2300      	movlt	r3, #0
 8005142:	9b07      	ldrge	r3, [sp, #28]
 8005144:	e730      	b.n	8004fa8 <_dtoa_r+0x730>
 8005146:	4646      	mov	r6, r8
 8005148:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800514a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800514c:	e735      	b.n	8004fba <_dtoa_r+0x742>
 800514e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005150:	e75c      	b.n	800500c <_dtoa_r+0x794>
 8005152:	2300      	movs	r3, #0
 8005154:	e788      	b.n	8005068 <_dtoa_r+0x7f0>
 8005156:	9b02      	ldr	r3, [sp, #8]
 8005158:	e786      	b.n	8005068 <_dtoa_r+0x7f0>
 800515a:	2300      	movs	r3, #0
 800515c:	930a      	str	r3, [sp, #40]	@ 0x28
 800515e:	e788      	b.n	8005072 <_dtoa_r+0x7fa>
 8005160:	d09f      	beq.n	80050a2 <_dtoa_r+0x82a>
 8005162:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005164:	331c      	adds	r3, #28
 8005166:	441a      	add	r2, r3
 8005168:	4498      	add	r8, r3
 800516a:	441e      	add	r6, r3
 800516c:	9209      	str	r2, [sp, #36]	@ 0x24
 800516e:	e798      	b.n	80050a2 <_dtoa_r+0x82a>
 8005170:	4603      	mov	r3, r0
 8005172:	e7f6      	b.n	8005162 <_dtoa_r+0x8ea>
 8005174:	9b07      	ldr	r3, [sp, #28]
 8005176:	9704      	str	r7, [sp, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	dc20      	bgt.n	80051be <_dtoa_r+0x946>
 800517c:	9308      	str	r3, [sp, #32]
 800517e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005180:	2b02      	cmp	r3, #2
 8005182:	dd1e      	ble.n	80051c2 <_dtoa_r+0x94a>
 8005184:	9b08      	ldr	r3, [sp, #32]
 8005186:	2b00      	cmp	r3, #0
 8005188:	f47f aebc 	bne.w	8004f04 <_dtoa_r+0x68c>
 800518c:	4621      	mov	r1, r4
 800518e:	2205      	movs	r2, #5
 8005190:	4658      	mov	r0, fp
 8005192:	f000 fa99 	bl	80056c8 <__multadd>
 8005196:	4601      	mov	r1, r0
 8005198:	4604      	mov	r4, r0
 800519a:	4648      	mov	r0, r9
 800519c:	f000 fcaa 	bl	8005af4 <__mcmp>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	f77f aeaf 	ble.w	8004f04 <_dtoa_r+0x68c>
 80051a6:	2331      	movs	r3, #49	@ 0x31
 80051a8:	4656      	mov	r6, sl
 80051aa:	f806 3b01 	strb.w	r3, [r6], #1
 80051ae:	9b04      	ldr	r3, [sp, #16]
 80051b0:	3301      	adds	r3, #1
 80051b2:	9304      	str	r3, [sp, #16]
 80051b4:	e6aa      	b.n	8004f0c <_dtoa_r+0x694>
 80051b6:	9c07      	ldr	r4, [sp, #28]
 80051b8:	9704      	str	r7, [sp, #16]
 80051ba:	4625      	mov	r5, r4
 80051bc:	e7f3      	b.n	80051a6 <_dtoa_r+0x92e>
 80051be:	9b07      	ldr	r3, [sp, #28]
 80051c0:	9308      	str	r3, [sp, #32]
 80051c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8104 	beq.w	80053d2 <_dtoa_r+0xb5a>
 80051ca:	2e00      	cmp	r6, #0
 80051cc:	dd05      	ble.n	80051da <_dtoa_r+0x962>
 80051ce:	4629      	mov	r1, r5
 80051d0:	4632      	mov	r2, r6
 80051d2:	4658      	mov	r0, fp
 80051d4:	f000 fc22 	bl	8005a1c <__lshift>
 80051d8:	4605      	mov	r5, r0
 80051da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d05a      	beq.n	8005296 <_dtoa_r+0xa1e>
 80051e0:	4658      	mov	r0, fp
 80051e2:	6869      	ldr	r1, [r5, #4]
 80051e4:	f000 fa0e 	bl	8005604 <_Balloc>
 80051e8:	4606      	mov	r6, r0
 80051ea:	b928      	cbnz	r0, 80051f8 <_dtoa_r+0x980>
 80051ec:	4602      	mov	r2, r0
 80051ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80051f2:	4b83      	ldr	r3, [pc, #524]	@ (8005400 <_dtoa_r+0xb88>)
 80051f4:	f7ff bb54 	b.w	80048a0 <_dtoa_r+0x28>
 80051f8:	692a      	ldr	r2, [r5, #16]
 80051fa:	f105 010c 	add.w	r1, r5, #12
 80051fe:	3202      	adds	r2, #2
 8005200:	0092      	lsls	r2, r2, #2
 8005202:	300c      	adds	r0, #12
 8005204:	f000 ffa8 	bl	8006158 <memcpy>
 8005208:	2201      	movs	r2, #1
 800520a:	4631      	mov	r1, r6
 800520c:	4658      	mov	r0, fp
 800520e:	f000 fc05 	bl	8005a1c <__lshift>
 8005212:	462f      	mov	r7, r5
 8005214:	4605      	mov	r5, r0
 8005216:	f10a 0301 	add.w	r3, sl, #1
 800521a:	9307      	str	r3, [sp, #28]
 800521c:	9b08      	ldr	r3, [sp, #32]
 800521e:	4453      	add	r3, sl
 8005220:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005222:	9b02      	ldr	r3, [sp, #8]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	930a      	str	r3, [sp, #40]	@ 0x28
 800522a:	9b07      	ldr	r3, [sp, #28]
 800522c:	4621      	mov	r1, r4
 800522e:	3b01      	subs	r3, #1
 8005230:	4648      	mov	r0, r9
 8005232:	9302      	str	r3, [sp, #8]
 8005234:	f7ff fa97 	bl	8004766 <quorem>
 8005238:	4639      	mov	r1, r7
 800523a:	9008      	str	r0, [sp, #32]
 800523c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005240:	4648      	mov	r0, r9
 8005242:	f000 fc57 	bl	8005af4 <__mcmp>
 8005246:	462a      	mov	r2, r5
 8005248:	9009      	str	r0, [sp, #36]	@ 0x24
 800524a:	4621      	mov	r1, r4
 800524c:	4658      	mov	r0, fp
 800524e:	f000 fc6d 	bl	8005b2c <__mdiff>
 8005252:	68c2      	ldr	r2, [r0, #12]
 8005254:	4606      	mov	r6, r0
 8005256:	bb02      	cbnz	r2, 800529a <_dtoa_r+0xa22>
 8005258:	4601      	mov	r1, r0
 800525a:	4648      	mov	r0, r9
 800525c:	f000 fc4a 	bl	8005af4 <__mcmp>
 8005260:	4602      	mov	r2, r0
 8005262:	4631      	mov	r1, r6
 8005264:	4658      	mov	r0, fp
 8005266:	920c      	str	r2, [sp, #48]	@ 0x30
 8005268:	f000 fa0c 	bl	8005684 <_Bfree>
 800526c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800526e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005270:	9e07      	ldr	r6, [sp, #28]
 8005272:	ea43 0102 	orr.w	r1, r3, r2
 8005276:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005278:	4319      	orrs	r1, r3
 800527a:	d110      	bne.n	800529e <_dtoa_r+0xa26>
 800527c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005280:	d029      	beq.n	80052d6 <_dtoa_r+0xa5e>
 8005282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005284:	2b00      	cmp	r3, #0
 8005286:	dd02      	ble.n	800528e <_dtoa_r+0xa16>
 8005288:	9b08      	ldr	r3, [sp, #32]
 800528a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800528e:	9b02      	ldr	r3, [sp, #8]
 8005290:	f883 8000 	strb.w	r8, [r3]
 8005294:	e63b      	b.n	8004f0e <_dtoa_r+0x696>
 8005296:	4628      	mov	r0, r5
 8005298:	e7bb      	b.n	8005212 <_dtoa_r+0x99a>
 800529a:	2201      	movs	r2, #1
 800529c:	e7e1      	b.n	8005262 <_dtoa_r+0x9ea>
 800529e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	db04      	blt.n	80052ae <_dtoa_r+0xa36>
 80052a4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80052a6:	430b      	orrs	r3, r1
 80052a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80052aa:	430b      	orrs	r3, r1
 80052ac:	d120      	bne.n	80052f0 <_dtoa_r+0xa78>
 80052ae:	2a00      	cmp	r2, #0
 80052b0:	dded      	ble.n	800528e <_dtoa_r+0xa16>
 80052b2:	4649      	mov	r1, r9
 80052b4:	2201      	movs	r2, #1
 80052b6:	4658      	mov	r0, fp
 80052b8:	f000 fbb0 	bl	8005a1c <__lshift>
 80052bc:	4621      	mov	r1, r4
 80052be:	4681      	mov	r9, r0
 80052c0:	f000 fc18 	bl	8005af4 <__mcmp>
 80052c4:	2800      	cmp	r0, #0
 80052c6:	dc03      	bgt.n	80052d0 <_dtoa_r+0xa58>
 80052c8:	d1e1      	bne.n	800528e <_dtoa_r+0xa16>
 80052ca:	f018 0f01 	tst.w	r8, #1
 80052ce:	d0de      	beq.n	800528e <_dtoa_r+0xa16>
 80052d0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80052d4:	d1d8      	bne.n	8005288 <_dtoa_r+0xa10>
 80052d6:	2339      	movs	r3, #57	@ 0x39
 80052d8:	9a02      	ldr	r2, [sp, #8]
 80052da:	7013      	strb	r3, [r2, #0]
 80052dc:	4633      	mov	r3, r6
 80052de:	461e      	mov	r6, r3
 80052e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	2a39      	cmp	r2, #57	@ 0x39
 80052e8:	d052      	beq.n	8005390 <_dtoa_r+0xb18>
 80052ea:	3201      	adds	r2, #1
 80052ec:	701a      	strb	r2, [r3, #0]
 80052ee:	e60e      	b.n	8004f0e <_dtoa_r+0x696>
 80052f0:	2a00      	cmp	r2, #0
 80052f2:	dd07      	ble.n	8005304 <_dtoa_r+0xa8c>
 80052f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80052f8:	d0ed      	beq.n	80052d6 <_dtoa_r+0xa5e>
 80052fa:	9a02      	ldr	r2, [sp, #8]
 80052fc:	f108 0301 	add.w	r3, r8, #1
 8005300:	7013      	strb	r3, [r2, #0]
 8005302:	e604      	b.n	8004f0e <_dtoa_r+0x696>
 8005304:	9b07      	ldr	r3, [sp, #28]
 8005306:	9a07      	ldr	r2, [sp, #28]
 8005308:	f803 8c01 	strb.w	r8, [r3, #-1]
 800530c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800530e:	4293      	cmp	r3, r2
 8005310:	d028      	beq.n	8005364 <_dtoa_r+0xaec>
 8005312:	4649      	mov	r1, r9
 8005314:	2300      	movs	r3, #0
 8005316:	220a      	movs	r2, #10
 8005318:	4658      	mov	r0, fp
 800531a:	f000 f9d5 	bl	80056c8 <__multadd>
 800531e:	42af      	cmp	r7, r5
 8005320:	4681      	mov	r9, r0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	f04f 020a 	mov.w	r2, #10
 800532a:	4639      	mov	r1, r7
 800532c:	4658      	mov	r0, fp
 800532e:	d107      	bne.n	8005340 <_dtoa_r+0xac8>
 8005330:	f000 f9ca 	bl	80056c8 <__multadd>
 8005334:	4607      	mov	r7, r0
 8005336:	4605      	mov	r5, r0
 8005338:	9b07      	ldr	r3, [sp, #28]
 800533a:	3301      	adds	r3, #1
 800533c:	9307      	str	r3, [sp, #28]
 800533e:	e774      	b.n	800522a <_dtoa_r+0x9b2>
 8005340:	f000 f9c2 	bl	80056c8 <__multadd>
 8005344:	4629      	mov	r1, r5
 8005346:	4607      	mov	r7, r0
 8005348:	2300      	movs	r3, #0
 800534a:	220a      	movs	r2, #10
 800534c:	4658      	mov	r0, fp
 800534e:	f000 f9bb 	bl	80056c8 <__multadd>
 8005352:	4605      	mov	r5, r0
 8005354:	e7f0      	b.n	8005338 <_dtoa_r+0xac0>
 8005356:	9b08      	ldr	r3, [sp, #32]
 8005358:	2700      	movs	r7, #0
 800535a:	2b00      	cmp	r3, #0
 800535c:	bfcc      	ite	gt
 800535e:	461e      	movgt	r6, r3
 8005360:	2601      	movle	r6, #1
 8005362:	4456      	add	r6, sl
 8005364:	4649      	mov	r1, r9
 8005366:	2201      	movs	r2, #1
 8005368:	4658      	mov	r0, fp
 800536a:	f000 fb57 	bl	8005a1c <__lshift>
 800536e:	4621      	mov	r1, r4
 8005370:	4681      	mov	r9, r0
 8005372:	f000 fbbf 	bl	8005af4 <__mcmp>
 8005376:	2800      	cmp	r0, #0
 8005378:	dcb0      	bgt.n	80052dc <_dtoa_r+0xa64>
 800537a:	d102      	bne.n	8005382 <_dtoa_r+0xb0a>
 800537c:	f018 0f01 	tst.w	r8, #1
 8005380:	d1ac      	bne.n	80052dc <_dtoa_r+0xa64>
 8005382:	4633      	mov	r3, r6
 8005384:	461e      	mov	r6, r3
 8005386:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800538a:	2a30      	cmp	r2, #48	@ 0x30
 800538c:	d0fa      	beq.n	8005384 <_dtoa_r+0xb0c>
 800538e:	e5be      	b.n	8004f0e <_dtoa_r+0x696>
 8005390:	459a      	cmp	sl, r3
 8005392:	d1a4      	bne.n	80052de <_dtoa_r+0xa66>
 8005394:	9b04      	ldr	r3, [sp, #16]
 8005396:	3301      	adds	r3, #1
 8005398:	9304      	str	r3, [sp, #16]
 800539a:	2331      	movs	r3, #49	@ 0x31
 800539c:	f88a 3000 	strb.w	r3, [sl]
 80053a0:	e5b5      	b.n	8004f0e <_dtoa_r+0x696>
 80053a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80053a4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005404 <_dtoa_r+0xb8c>
 80053a8:	b11b      	cbz	r3, 80053b2 <_dtoa_r+0xb3a>
 80053aa:	f10a 0308 	add.w	r3, sl, #8
 80053ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	4650      	mov	r0, sl
 80053b4:	b017      	add	sp, #92	@ 0x5c
 80053b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80053bc:	2b01      	cmp	r3, #1
 80053be:	f77f ae3d 	ble.w	800503c <_dtoa_r+0x7c4>
 80053c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80053c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80053c6:	2001      	movs	r0, #1
 80053c8:	e65b      	b.n	8005082 <_dtoa_r+0x80a>
 80053ca:	9b08      	ldr	r3, [sp, #32]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f77f aed6 	ble.w	800517e <_dtoa_r+0x906>
 80053d2:	4656      	mov	r6, sl
 80053d4:	4621      	mov	r1, r4
 80053d6:	4648      	mov	r0, r9
 80053d8:	f7ff f9c5 	bl	8004766 <quorem>
 80053dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80053e0:	9b08      	ldr	r3, [sp, #32]
 80053e2:	f806 8b01 	strb.w	r8, [r6], #1
 80053e6:	eba6 020a 	sub.w	r2, r6, sl
 80053ea:	4293      	cmp	r3, r2
 80053ec:	ddb3      	ble.n	8005356 <_dtoa_r+0xade>
 80053ee:	4649      	mov	r1, r9
 80053f0:	2300      	movs	r3, #0
 80053f2:	220a      	movs	r2, #10
 80053f4:	4658      	mov	r0, fp
 80053f6:	f000 f967 	bl	80056c8 <__multadd>
 80053fa:	4681      	mov	r9, r0
 80053fc:	e7ea      	b.n	80053d4 <_dtoa_r+0xb5c>
 80053fe:	bf00      	nop
 8005400:	080069ca 	.word	0x080069ca
 8005404:	0800694e 	.word	0x0800694e

08005408 <_free_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4605      	mov	r5, r0
 800540c:	2900      	cmp	r1, #0
 800540e:	d040      	beq.n	8005492 <_free_r+0x8a>
 8005410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005414:	1f0c      	subs	r4, r1, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	bfb8      	it	lt
 800541a:	18e4      	addlt	r4, r4, r3
 800541c:	f000 f8e6 	bl	80055ec <__malloc_lock>
 8005420:	4a1c      	ldr	r2, [pc, #112]	@ (8005494 <_free_r+0x8c>)
 8005422:	6813      	ldr	r3, [r2, #0]
 8005424:	b933      	cbnz	r3, 8005434 <_free_r+0x2c>
 8005426:	6063      	str	r3, [r4, #4]
 8005428:	6014      	str	r4, [r2, #0]
 800542a:	4628      	mov	r0, r5
 800542c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005430:	f000 b8e2 	b.w	80055f8 <__malloc_unlock>
 8005434:	42a3      	cmp	r3, r4
 8005436:	d908      	bls.n	800544a <_free_r+0x42>
 8005438:	6820      	ldr	r0, [r4, #0]
 800543a:	1821      	adds	r1, r4, r0
 800543c:	428b      	cmp	r3, r1
 800543e:	bf01      	itttt	eq
 8005440:	6819      	ldreq	r1, [r3, #0]
 8005442:	685b      	ldreq	r3, [r3, #4]
 8005444:	1809      	addeq	r1, r1, r0
 8005446:	6021      	streq	r1, [r4, #0]
 8005448:	e7ed      	b.n	8005426 <_free_r+0x1e>
 800544a:	461a      	mov	r2, r3
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	b10b      	cbz	r3, 8005454 <_free_r+0x4c>
 8005450:	42a3      	cmp	r3, r4
 8005452:	d9fa      	bls.n	800544a <_free_r+0x42>
 8005454:	6811      	ldr	r1, [r2, #0]
 8005456:	1850      	adds	r0, r2, r1
 8005458:	42a0      	cmp	r0, r4
 800545a:	d10b      	bne.n	8005474 <_free_r+0x6c>
 800545c:	6820      	ldr	r0, [r4, #0]
 800545e:	4401      	add	r1, r0
 8005460:	1850      	adds	r0, r2, r1
 8005462:	4283      	cmp	r3, r0
 8005464:	6011      	str	r1, [r2, #0]
 8005466:	d1e0      	bne.n	800542a <_free_r+0x22>
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	4408      	add	r0, r1
 800546e:	6010      	str	r0, [r2, #0]
 8005470:	6053      	str	r3, [r2, #4]
 8005472:	e7da      	b.n	800542a <_free_r+0x22>
 8005474:	d902      	bls.n	800547c <_free_r+0x74>
 8005476:	230c      	movs	r3, #12
 8005478:	602b      	str	r3, [r5, #0]
 800547a:	e7d6      	b.n	800542a <_free_r+0x22>
 800547c:	6820      	ldr	r0, [r4, #0]
 800547e:	1821      	adds	r1, r4, r0
 8005480:	428b      	cmp	r3, r1
 8005482:	bf01      	itttt	eq
 8005484:	6819      	ldreq	r1, [r3, #0]
 8005486:	685b      	ldreq	r3, [r3, #4]
 8005488:	1809      	addeq	r1, r1, r0
 800548a:	6021      	streq	r1, [r4, #0]
 800548c:	6063      	str	r3, [r4, #4]
 800548e:	6054      	str	r4, [r2, #4]
 8005490:	e7cb      	b.n	800542a <_free_r+0x22>
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	200003e0 	.word	0x200003e0

08005498 <malloc>:
 8005498:	4b02      	ldr	r3, [pc, #8]	@ (80054a4 <malloc+0xc>)
 800549a:	4601      	mov	r1, r0
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	f000 b825 	b.w	80054ec <_malloc_r>
 80054a2:	bf00      	nop
 80054a4:	2000001c 	.word	0x2000001c

080054a8 <sbrk_aligned>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	4e0f      	ldr	r6, [pc, #60]	@ (80054e8 <sbrk_aligned+0x40>)
 80054ac:	460c      	mov	r4, r1
 80054ae:	6831      	ldr	r1, [r6, #0]
 80054b0:	4605      	mov	r5, r0
 80054b2:	b911      	cbnz	r1, 80054ba <sbrk_aligned+0x12>
 80054b4:	f000 fe40 	bl	8006138 <_sbrk_r>
 80054b8:	6030      	str	r0, [r6, #0]
 80054ba:	4621      	mov	r1, r4
 80054bc:	4628      	mov	r0, r5
 80054be:	f000 fe3b 	bl	8006138 <_sbrk_r>
 80054c2:	1c43      	adds	r3, r0, #1
 80054c4:	d103      	bne.n	80054ce <sbrk_aligned+0x26>
 80054c6:	f04f 34ff 	mov.w	r4, #4294967295
 80054ca:	4620      	mov	r0, r4
 80054cc:	bd70      	pop	{r4, r5, r6, pc}
 80054ce:	1cc4      	adds	r4, r0, #3
 80054d0:	f024 0403 	bic.w	r4, r4, #3
 80054d4:	42a0      	cmp	r0, r4
 80054d6:	d0f8      	beq.n	80054ca <sbrk_aligned+0x22>
 80054d8:	1a21      	subs	r1, r4, r0
 80054da:	4628      	mov	r0, r5
 80054dc:	f000 fe2c 	bl	8006138 <_sbrk_r>
 80054e0:	3001      	adds	r0, #1
 80054e2:	d1f2      	bne.n	80054ca <sbrk_aligned+0x22>
 80054e4:	e7ef      	b.n	80054c6 <sbrk_aligned+0x1e>
 80054e6:	bf00      	nop
 80054e8:	200003dc 	.word	0x200003dc

080054ec <_malloc_r>:
 80054ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054f0:	1ccd      	adds	r5, r1, #3
 80054f2:	f025 0503 	bic.w	r5, r5, #3
 80054f6:	3508      	adds	r5, #8
 80054f8:	2d0c      	cmp	r5, #12
 80054fa:	bf38      	it	cc
 80054fc:	250c      	movcc	r5, #12
 80054fe:	2d00      	cmp	r5, #0
 8005500:	4606      	mov	r6, r0
 8005502:	db01      	blt.n	8005508 <_malloc_r+0x1c>
 8005504:	42a9      	cmp	r1, r5
 8005506:	d904      	bls.n	8005512 <_malloc_r+0x26>
 8005508:	230c      	movs	r3, #12
 800550a:	6033      	str	r3, [r6, #0]
 800550c:	2000      	movs	r0, #0
 800550e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005512:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055e8 <_malloc_r+0xfc>
 8005516:	f000 f869 	bl	80055ec <__malloc_lock>
 800551a:	f8d8 3000 	ldr.w	r3, [r8]
 800551e:	461c      	mov	r4, r3
 8005520:	bb44      	cbnz	r4, 8005574 <_malloc_r+0x88>
 8005522:	4629      	mov	r1, r5
 8005524:	4630      	mov	r0, r6
 8005526:	f7ff ffbf 	bl	80054a8 <sbrk_aligned>
 800552a:	1c43      	adds	r3, r0, #1
 800552c:	4604      	mov	r4, r0
 800552e:	d158      	bne.n	80055e2 <_malloc_r+0xf6>
 8005530:	f8d8 4000 	ldr.w	r4, [r8]
 8005534:	4627      	mov	r7, r4
 8005536:	2f00      	cmp	r7, #0
 8005538:	d143      	bne.n	80055c2 <_malloc_r+0xd6>
 800553a:	2c00      	cmp	r4, #0
 800553c:	d04b      	beq.n	80055d6 <_malloc_r+0xea>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	4639      	mov	r1, r7
 8005542:	4630      	mov	r0, r6
 8005544:	eb04 0903 	add.w	r9, r4, r3
 8005548:	f000 fdf6 	bl	8006138 <_sbrk_r>
 800554c:	4581      	cmp	r9, r0
 800554e:	d142      	bne.n	80055d6 <_malloc_r+0xea>
 8005550:	6821      	ldr	r1, [r4, #0]
 8005552:	4630      	mov	r0, r6
 8005554:	1a6d      	subs	r5, r5, r1
 8005556:	4629      	mov	r1, r5
 8005558:	f7ff ffa6 	bl	80054a8 <sbrk_aligned>
 800555c:	3001      	adds	r0, #1
 800555e:	d03a      	beq.n	80055d6 <_malloc_r+0xea>
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	442b      	add	r3, r5
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	f8d8 3000 	ldr.w	r3, [r8]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	bb62      	cbnz	r2, 80055c8 <_malloc_r+0xdc>
 800556e:	f8c8 7000 	str.w	r7, [r8]
 8005572:	e00f      	b.n	8005594 <_malloc_r+0xa8>
 8005574:	6822      	ldr	r2, [r4, #0]
 8005576:	1b52      	subs	r2, r2, r5
 8005578:	d420      	bmi.n	80055bc <_malloc_r+0xd0>
 800557a:	2a0b      	cmp	r2, #11
 800557c:	d917      	bls.n	80055ae <_malloc_r+0xc2>
 800557e:	1961      	adds	r1, r4, r5
 8005580:	42a3      	cmp	r3, r4
 8005582:	6025      	str	r5, [r4, #0]
 8005584:	bf18      	it	ne
 8005586:	6059      	strne	r1, [r3, #4]
 8005588:	6863      	ldr	r3, [r4, #4]
 800558a:	bf08      	it	eq
 800558c:	f8c8 1000 	streq.w	r1, [r8]
 8005590:	5162      	str	r2, [r4, r5]
 8005592:	604b      	str	r3, [r1, #4]
 8005594:	4630      	mov	r0, r6
 8005596:	f000 f82f 	bl	80055f8 <__malloc_unlock>
 800559a:	f104 000b 	add.w	r0, r4, #11
 800559e:	1d23      	adds	r3, r4, #4
 80055a0:	f020 0007 	bic.w	r0, r0, #7
 80055a4:	1ac2      	subs	r2, r0, r3
 80055a6:	bf1c      	itt	ne
 80055a8:	1a1b      	subne	r3, r3, r0
 80055aa:	50a3      	strne	r3, [r4, r2]
 80055ac:	e7af      	b.n	800550e <_malloc_r+0x22>
 80055ae:	6862      	ldr	r2, [r4, #4]
 80055b0:	42a3      	cmp	r3, r4
 80055b2:	bf0c      	ite	eq
 80055b4:	f8c8 2000 	streq.w	r2, [r8]
 80055b8:	605a      	strne	r2, [r3, #4]
 80055ba:	e7eb      	b.n	8005594 <_malloc_r+0xa8>
 80055bc:	4623      	mov	r3, r4
 80055be:	6864      	ldr	r4, [r4, #4]
 80055c0:	e7ae      	b.n	8005520 <_malloc_r+0x34>
 80055c2:	463c      	mov	r4, r7
 80055c4:	687f      	ldr	r7, [r7, #4]
 80055c6:	e7b6      	b.n	8005536 <_malloc_r+0x4a>
 80055c8:	461a      	mov	r2, r3
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	42a3      	cmp	r3, r4
 80055ce:	d1fb      	bne.n	80055c8 <_malloc_r+0xdc>
 80055d0:	2300      	movs	r3, #0
 80055d2:	6053      	str	r3, [r2, #4]
 80055d4:	e7de      	b.n	8005594 <_malloc_r+0xa8>
 80055d6:	230c      	movs	r3, #12
 80055d8:	4630      	mov	r0, r6
 80055da:	6033      	str	r3, [r6, #0]
 80055dc:	f000 f80c 	bl	80055f8 <__malloc_unlock>
 80055e0:	e794      	b.n	800550c <_malloc_r+0x20>
 80055e2:	6005      	str	r5, [r0, #0]
 80055e4:	e7d6      	b.n	8005594 <_malloc_r+0xa8>
 80055e6:	bf00      	nop
 80055e8:	200003e0 	.word	0x200003e0

080055ec <__malloc_lock>:
 80055ec:	4801      	ldr	r0, [pc, #4]	@ (80055f4 <__malloc_lock+0x8>)
 80055ee:	f7ff b8aa 	b.w	8004746 <__retarget_lock_acquire_recursive>
 80055f2:	bf00      	nop
 80055f4:	200003d8 	.word	0x200003d8

080055f8 <__malloc_unlock>:
 80055f8:	4801      	ldr	r0, [pc, #4]	@ (8005600 <__malloc_unlock+0x8>)
 80055fa:	f7ff b8a5 	b.w	8004748 <__retarget_lock_release_recursive>
 80055fe:	bf00      	nop
 8005600:	200003d8 	.word	0x200003d8

08005604 <_Balloc>:
 8005604:	b570      	push	{r4, r5, r6, lr}
 8005606:	69c6      	ldr	r6, [r0, #28]
 8005608:	4604      	mov	r4, r0
 800560a:	460d      	mov	r5, r1
 800560c:	b976      	cbnz	r6, 800562c <_Balloc+0x28>
 800560e:	2010      	movs	r0, #16
 8005610:	f7ff ff42 	bl	8005498 <malloc>
 8005614:	4602      	mov	r2, r0
 8005616:	61e0      	str	r0, [r4, #28]
 8005618:	b920      	cbnz	r0, 8005624 <_Balloc+0x20>
 800561a:	216b      	movs	r1, #107	@ 0x6b
 800561c:	4b17      	ldr	r3, [pc, #92]	@ (800567c <_Balloc+0x78>)
 800561e:	4818      	ldr	r0, [pc, #96]	@ (8005680 <_Balloc+0x7c>)
 8005620:	f000 fda8 	bl	8006174 <__assert_func>
 8005624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005628:	6006      	str	r6, [r0, #0]
 800562a:	60c6      	str	r6, [r0, #12]
 800562c:	69e6      	ldr	r6, [r4, #28]
 800562e:	68f3      	ldr	r3, [r6, #12]
 8005630:	b183      	cbz	r3, 8005654 <_Balloc+0x50>
 8005632:	69e3      	ldr	r3, [r4, #28]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800563a:	b9b8      	cbnz	r0, 800566c <_Balloc+0x68>
 800563c:	2101      	movs	r1, #1
 800563e:	fa01 f605 	lsl.w	r6, r1, r5
 8005642:	1d72      	adds	r2, r6, #5
 8005644:	4620      	mov	r0, r4
 8005646:	0092      	lsls	r2, r2, #2
 8005648:	f000 fdb2 	bl	80061b0 <_calloc_r>
 800564c:	b160      	cbz	r0, 8005668 <_Balloc+0x64>
 800564e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005652:	e00e      	b.n	8005672 <_Balloc+0x6e>
 8005654:	2221      	movs	r2, #33	@ 0x21
 8005656:	2104      	movs	r1, #4
 8005658:	4620      	mov	r0, r4
 800565a:	f000 fda9 	bl	80061b0 <_calloc_r>
 800565e:	69e3      	ldr	r3, [r4, #28]
 8005660:	60f0      	str	r0, [r6, #12]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e4      	bne.n	8005632 <_Balloc+0x2e>
 8005668:	2000      	movs	r0, #0
 800566a:	bd70      	pop	{r4, r5, r6, pc}
 800566c:	6802      	ldr	r2, [r0, #0]
 800566e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005672:	2300      	movs	r3, #0
 8005674:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005678:	e7f7      	b.n	800566a <_Balloc+0x66>
 800567a:	bf00      	nop
 800567c:	0800695b 	.word	0x0800695b
 8005680:	080069db 	.word	0x080069db

08005684 <_Bfree>:
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	69c6      	ldr	r6, [r0, #28]
 8005688:	4605      	mov	r5, r0
 800568a:	460c      	mov	r4, r1
 800568c:	b976      	cbnz	r6, 80056ac <_Bfree+0x28>
 800568e:	2010      	movs	r0, #16
 8005690:	f7ff ff02 	bl	8005498 <malloc>
 8005694:	4602      	mov	r2, r0
 8005696:	61e8      	str	r0, [r5, #28]
 8005698:	b920      	cbnz	r0, 80056a4 <_Bfree+0x20>
 800569a:	218f      	movs	r1, #143	@ 0x8f
 800569c:	4b08      	ldr	r3, [pc, #32]	@ (80056c0 <_Bfree+0x3c>)
 800569e:	4809      	ldr	r0, [pc, #36]	@ (80056c4 <_Bfree+0x40>)
 80056a0:	f000 fd68 	bl	8006174 <__assert_func>
 80056a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056a8:	6006      	str	r6, [r0, #0]
 80056aa:	60c6      	str	r6, [r0, #12]
 80056ac:	b13c      	cbz	r4, 80056be <_Bfree+0x3a>
 80056ae:	69eb      	ldr	r3, [r5, #28]
 80056b0:	6862      	ldr	r2, [r4, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056b8:	6021      	str	r1, [r4, #0]
 80056ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80056be:	bd70      	pop	{r4, r5, r6, pc}
 80056c0:	0800695b 	.word	0x0800695b
 80056c4:	080069db 	.word	0x080069db

080056c8 <__multadd>:
 80056c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056cc:	4607      	mov	r7, r0
 80056ce:	460c      	mov	r4, r1
 80056d0:	461e      	mov	r6, r3
 80056d2:	2000      	movs	r0, #0
 80056d4:	690d      	ldr	r5, [r1, #16]
 80056d6:	f101 0c14 	add.w	ip, r1, #20
 80056da:	f8dc 3000 	ldr.w	r3, [ip]
 80056de:	3001      	adds	r0, #1
 80056e0:	b299      	uxth	r1, r3
 80056e2:	fb02 6101 	mla	r1, r2, r1, r6
 80056e6:	0c1e      	lsrs	r6, r3, #16
 80056e8:	0c0b      	lsrs	r3, r1, #16
 80056ea:	fb02 3306 	mla	r3, r2, r6, r3
 80056ee:	b289      	uxth	r1, r1
 80056f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80056f4:	4285      	cmp	r5, r0
 80056f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80056fa:	f84c 1b04 	str.w	r1, [ip], #4
 80056fe:	dcec      	bgt.n	80056da <__multadd+0x12>
 8005700:	b30e      	cbz	r6, 8005746 <__multadd+0x7e>
 8005702:	68a3      	ldr	r3, [r4, #8]
 8005704:	42ab      	cmp	r3, r5
 8005706:	dc19      	bgt.n	800573c <__multadd+0x74>
 8005708:	6861      	ldr	r1, [r4, #4]
 800570a:	4638      	mov	r0, r7
 800570c:	3101      	adds	r1, #1
 800570e:	f7ff ff79 	bl	8005604 <_Balloc>
 8005712:	4680      	mov	r8, r0
 8005714:	b928      	cbnz	r0, 8005722 <__multadd+0x5a>
 8005716:	4602      	mov	r2, r0
 8005718:	21ba      	movs	r1, #186	@ 0xba
 800571a:	4b0c      	ldr	r3, [pc, #48]	@ (800574c <__multadd+0x84>)
 800571c:	480c      	ldr	r0, [pc, #48]	@ (8005750 <__multadd+0x88>)
 800571e:	f000 fd29 	bl	8006174 <__assert_func>
 8005722:	6922      	ldr	r2, [r4, #16]
 8005724:	f104 010c 	add.w	r1, r4, #12
 8005728:	3202      	adds	r2, #2
 800572a:	0092      	lsls	r2, r2, #2
 800572c:	300c      	adds	r0, #12
 800572e:	f000 fd13 	bl	8006158 <memcpy>
 8005732:	4621      	mov	r1, r4
 8005734:	4638      	mov	r0, r7
 8005736:	f7ff ffa5 	bl	8005684 <_Bfree>
 800573a:	4644      	mov	r4, r8
 800573c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005740:	3501      	adds	r5, #1
 8005742:	615e      	str	r6, [r3, #20]
 8005744:	6125      	str	r5, [r4, #16]
 8005746:	4620      	mov	r0, r4
 8005748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800574c:	080069ca 	.word	0x080069ca
 8005750:	080069db 	.word	0x080069db

08005754 <__hi0bits>:
 8005754:	4603      	mov	r3, r0
 8005756:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800575a:	bf3a      	itte	cc
 800575c:	0403      	lslcc	r3, r0, #16
 800575e:	2010      	movcc	r0, #16
 8005760:	2000      	movcs	r0, #0
 8005762:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005766:	bf3c      	itt	cc
 8005768:	021b      	lslcc	r3, r3, #8
 800576a:	3008      	addcc	r0, #8
 800576c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005770:	bf3c      	itt	cc
 8005772:	011b      	lslcc	r3, r3, #4
 8005774:	3004      	addcc	r0, #4
 8005776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800577a:	bf3c      	itt	cc
 800577c:	009b      	lslcc	r3, r3, #2
 800577e:	3002      	addcc	r0, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	db05      	blt.n	8005790 <__hi0bits+0x3c>
 8005784:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005788:	f100 0001 	add.w	r0, r0, #1
 800578c:	bf08      	it	eq
 800578e:	2020      	moveq	r0, #32
 8005790:	4770      	bx	lr

08005792 <__lo0bits>:
 8005792:	6803      	ldr	r3, [r0, #0]
 8005794:	4602      	mov	r2, r0
 8005796:	f013 0007 	ands.w	r0, r3, #7
 800579a:	d00b      	beq.n	80057b4 <__lo0bits+0x22>
 800579c:	07d9      	lsls	r1, r3, #31
 800579e:	d421      	bmi.n	80057e4 <__lo0bits+0x52>
 80057a0:	0798      	lsls	r0, r3, #30
 80057a2:	bf49      	itett	mi
 80057a4:	085b      	lsrmi	r3, r3, #1
 80057a6:	089b      	lsrpl	r3, r3, #2
 80057a8:	2001      	movmi	r0, #1
 80057aa:	6013      	strmi	r3, [r2, #0]
 80057ac:	bf5c      	itt	pl
 80057ae:	2002      	movpl	r0, #2
 80057b0:	6013      	strpl	r3, [r2, #0]
 80057b2:	4770      	bx	lr
 80057b4:	b299      	uxth	r1, r3
 80057b6:	b909      	cbnz	r1, 80057bc <__lo0bits+0x2a>
 80057b8:	2010      	movs	r0, #16
 80057ba:	0c1b      	lsrs	r3, r3, #16
 80057bc:	b2d9      	uxtb	r1, r3
 80057be:	b909      	cbnz	r1, 80057c4 <__lo0bits+0x32>
 80057c0:	3008      	adds	r0, #8
 80057c2:	0a1b      	lsrs	r3, r3, #8
 80057c4:	0719      	lsls	r1, r3, #28
 80057c6:	bf04      	itt	eq
 80057c8:	091b      	lsreq	r3, r3, #4
 80057ca:	3004      	addeq	r0, #4
 80057cc:	0799      	lsls	r1, r3, #30
 80057ce:	bf04      	itt	eq
 80057d0:	089b      	lsreq	r3, r3, #2
 80057d2:	3002      	addeq	r0, #2
 80057d4:	07d9      	lsls	r1, r3, #31
 80057d6:	d403      	bmi.n	80057e0 <__lo0bits+0x4e>
 80057d8:	085b      	lsrs	r3, r3, #1
 80057da:	f100 0001 	add.w	r0, r0, #1
 80057de:	d003      	beq.n	80057e8 <__lo0bits+0x56>
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	4770      	bx	lr
 80057e4:	2000      	movs	r0, #0
 80057e6:	4770      	bx	lr
 80057e8:	2020      	movs	r0, #32
 80057ea:	4770      	bx	lr

080057ec <__i2b>:
 80057ec:	b510      	push	{r4, lr}
 80057ee:	460c      	mov	r4, r1
 80057f0:	2101      	movs	r1, #1
 80057f2:	f7ff ff07 	bl	8005604 <_Balloc>
 80057f6:	4602      	mov	r2, r0
 80057f8:	b928      	cbnz	r0, 8005806 <__i2b+0x1a>
 80057fa:	f240 1145 	movw	r1, #325	@ 0x145
 80057fe:	4b04      	ldr	r3, [pc, #16]	@ (8005810 <__i2b+0x24>)
 8005800:	4804      	ldr	r0, [pc, #16]	@ (8005814 <__i2b+0x28>)
 8005802:	f000 fcb7 	bl	8006174 <__assert_func>
 8005806:	2301      	movs	r3, #1
 8005808:	6144      	str	r4, [r0, #20]
 800580a:	6103      	str	r3, [r0, #16]
 800580c:	bd10      	pop	{r4, pc}
 800580e:	bf00      	nop
 8005810:	080069ca 	.word	0x080069ca
 8005814:	080069db 	.word	0x080069db

08005818 <__multiply>:
 8005818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800581c:	4614      	mov	r4, r2
 800581e:	690a      	ldr	r2, [r1, #16]
 8005820:	6923      	ldr	r3, [r4, #16]
 8005822:	460f      	mov	r7, r1
 8005824:	429a      	cmp	r2, r3
 8005826:	bfa2      	ittt	ge
 8005828:	4623      	movge	r3, r4
 800582a:	460c      	movge	r4, r1
 800582c:	461f      	movge	r7, r3
 800582e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005832:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005836:	68a3      	ldr	r3, [r4, #8]
 8005838:	6861      	ldr	r1, [r4, #4]
 800583a:	eb0a 0609 	add.w	r6, sl, r9
 800583e:	42b3      	cmp	r3, r6
 8005840:	b085      	sub	sp, #20
 8005842:	bfb8      	it	lt
 8005844:	3101      	addlt	r1, #1
 8005846:	f7ff fedd 	bl	8005604 <_Balloc>
 800584a:	b930      	cbnz	r0, 800585a <__multiply+0x42>
 800584c:	4602      	mov	r2, r0
 800584e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005852:	4b43      	ldr	r3, [pc, #268]	@ (8005960 <__multiply+0x148>)
 8005854:	4843      	ldr	r0, [pc, #268]	@ (8005964 <__multiply+0x14c>)
 8005856:	f000 fc8d 	bl	8006174 <__assert_func>
 800585a:	f100 0514 	add.w	r5, r0, #20
 800585e:	462b      	mov	r3, r5
 8005860:	2200      	movs	r2, #0
 8005862:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005866:	4543      	cmp	r3, r8
 8005868:	d321      	bcc.n	80058ae <__multiply+0x96>
 800586a:	f107 0114 	add.w	r1, r7, #20
 800586e:	f104 0214 	add.w	r2, r4, #20
 8005872:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005876:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800587a:	9302      	str	r3, [sp, #8]
 800587c:	1b13      	subs	r3, r2, r4
 800587e:	3b15      	subs	r3, #21
 8005880:	f023 0303 	bic.w	r3, r3, #3
 8005884:	3304      	adds	r3, #4
 8005886:	f104 0715 	add.w	r7, r4, #21
 800588a:	42ba      	cmp	r2, r7
 800588c:	bf38      	it	cc
 800588e:	2304      	movcc	r3, #4
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	9b02      	ldr	r3, [sp, #8]
 8005894:	9103      	str	r1, [sp, #12]
 8005896:	428b      	cmp	r3, r1
 8005898:	d80c      	bhi.n	80058b4 <__multiply+0x9c>
 800589a:	2e00      	cmp	r6, #0
 800589c:	dd03      	ble.n	80058a6 <__multiply+0x8e>
 800589e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d05a      	beq.n	800595c <__multiply+0x144>
 80058a6:	6106      	str	r6, [r0, #16]
 80058a8:	b005      	add	sp, #20
 80058aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ae:	f843 2b04 	str.w	r2, [r3], #4
 80058b2:	e7d8      	b.n	8005866 <__multiply+0x4e>
 80058b4:	f8b1 a000 	ldrh.w	sl, [r1]
 80058b8:	f1ba 0f00 	cmp.w	sl, #0
 80058bc:	d023      	beq.n	8005906 <__multiply+0xee>
 80058be:	46a9      	mov	r9, r5
 80058c0:	f04f 0c00 	mov.w	ip, #0
 80058c4:	f104 0e14 	add.w	lr, r4, #20
 80058c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80058cc:	f8d9 3000 	ldr.w	r3, [r9]
 80058d0:	fa1f fb87 	uxth.w	fp, r7
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	fb0a 330b 	mla	r3, sl, fp, r3
 80058da:	4463      	add	r3, ip
 80058dc:	f8d9 c000 	ldr.w	ip, [r9]
 80058e0:	0c3f      	lsrs	r7, r7, #16
 80058e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80058e6:	fb0a c707 	mla	r7, sl, r7, ip
 80058ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80058f4:	4572      	cmp	r2, lr
 80058f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80058fa:	f849 3b04 	str.w	r3, [r9], #4
 80058fe:	d8e3      	bhi.n	80058c8 <__multiply+0xb0>
 8005900:	9b01      	ldr	r3, [sp, #4]
 8005902:	f845 c003 	str.w	ip, [r5, r3]
 8005906:	9b03      	ldr	r3, [sp, #12]
 8005908:	3104      	adds	r1, #4
 800590a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800590e:	f1b9 0f00 	cmp.w	r9, #0
 8005912:	d021      	beq.n	8005958 <__multiply+0x140>
 8005914:	46ae      	mov	lr, r5
 8005916:	f04f 0a00 	mov.w	sl, #0
 800591a:	682b      	ldr	r3, [r5, #0]
 800591c:	f104 0c14 	add.w	ip, r4, #20
 8005920:	f8bc b000 	ldrh.w	fp, [ip]
 8005924:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005928:	b29b      	uxth	r3, r3
 800592a:	fb09 770b 	mla	r7, r9, fp, r7
 800592e:	4457      	add	r7, sl
 8005930:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005934:	f84e 3b04 	str.w	r3, [lr], #4
 8005938:	f85c 3b04 	ldr.w	r3, [ip], #4
 800593c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005940:	f8be 3000 	ldrh.w	r3, [lr]
 8005944:	4562      	cmp	r2, ip
 8005946:	fb09 330a 	mla	r3, r9, sl, r3
 800594a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800594e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005952:	d8e5      	bhi.n	8005920 <__multiply+0x108>
 8005954:	9f01      	ldr	r7, [sp, #4]
 8005956:	51eb      	str	r3, [r5, r7]
 8005958:	3504      	adds	r5, #4
 800595a:	e79a      	b.n	8005892 <__multiply+0x7a>
 800595c:	3e01      	subs	r6, #1
 800595e:	e79c      	b.n	800589a <__multiply+0x82>
 8005960:	080069ca 	.word	0x080069ca
 8005964:	080069db 	.word	0x080069db

08005968 <__pow5mult>:
 8005968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800596c:	4615      	mov	r5, r2
 800596e:	f012 0203 	ands.w	r2, r2, #3
 8005972:	4607      	mov	r7, r0
 8005974:	460e      	mov	r6, r1
 8005976:	d007      	beq.n	8005988 <__pow5mult+0x20>
 8005978:	4c25      	ldr	r4, [pc, #148]	@ (8005a10 <__pow5mult+0xa8>)
 800597a:	3a01      	subs	r2, #1
 800597c:	2300      	movs	r3, #0
 800597e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005982:	f7ff fea1 	bl	80056c8 <__multadd>
 8005986:	4606      	mov	r6, r0
 8005988:	10ad      	asrs	r5, r5, #2
 800598a:	d03d      	beq.n	8005a08 <__pow5mult+0xa0>
 800598c:	69fc      	ldr	r4, [r7, #28]
 800598e:	b97c      	cbnz	r4, 80059b0 <__pow5mult+0x48>
 8005990:	2010      	movs	r0, #16
 8005992:	f7ff fd81 	bl	8005498 <malloc>
 8005996:	4602      	mov	r2, r0
 8005998:	61f8      	str	r0, [r7, #28]
 800599a:	b928      	cbnz	r0, 80059a8 <__pow5mult+0x40>
 800599c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80059a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005a14 <__pow5mult+0xac>)
 80059a2:	481d      	ldr	r0, [pc, #116]	@ (8005a18 <__pow5mult+0xb0>)
 80059a4:	f000 fbe6 	bl	8006174 <__assert_func>
 80059a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80059ac:	6004      	str	r4, [r0, #0]
 80059ae:	60c4      	str	r4, [r0, #12]
 80059b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80059b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80059b8:	b94c      	cbnz	r4, 80059ce <__pow5mult+0x66>
 80059ba:	f240 2171 	movw	r1, #625	@ 0x271
 80059be:	4638      	mov	r0, r7
 80059c0:	f7ff ff14 	bl	80057ec <__i2b>
 80059c4:	2300      	movs	r3, #0
 80059c6:	4604      	mov	r4, r0
 80059c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80059cc:	6003      	str	r3, [r0, #0]
 80059ce:	f04f 0900 	mov.w	r9, #0
 80059d2:	07eb      	lsls	r3, r5, #31
 80059d4:	d50a      	bpl.n	80059ec <__pow5mult+0x84>
 80059d6:	4631      	mov	r1, r6
 80059d8:	4622      	mov	r2, r4
 80059da:	4638      	mov	r0, r7
 80059dc:	f7ff ff1c 	bl	8005818 <__multiply>
 80059e0:	4680      	mov	r8, r0
 80059e2:	4631      	mov	r1, r6
 80059e4:	4638      	mov	r0, r7
 80059e6:	f7ff fe4d 	bl	8005684 <_Bfree>
 80059ea:	4646      	mov	r6, r8
 80059ec:	106d      	asrs	r5, r5, #1
 80059ee:	d00b      	beq.n	8005a08 <__pow5mult+0xa0>
 80059f0:	6820      	ldr	r0, [r4, #0]
 80059f2:	b938      	cbnz	r0, 8005a04 <__pow5mult+0x9c>
 80059f4:	4622      	mov	r2, r4
 80059f6:	4621      	mov	r1, r4
 80059f8:	4638      	mov	r0, r7
 80059fa:	f7ff ff0d 	bl	8005818 <__multiply>
 80059fe:	6020      	str	r0, [r4, #0]
 8005a00:	f8c0 9000 	str.w	r9, [r0]
 8005a04:	4604      	mov	r4, r0
 8005a06:	e7e4      	b.n	80059d2 <__pow5mult+0x6a>
 8005a08:	4630      	mov	r0, r6
 8005a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a0e:	bf00      	nop
 8005a10:	08006a34 	.word	0x08006a34
 8005a14:	0800695b 	.word	0x0800695b
 8005a18:	080069db 	.word	0x080069db

08005a1c <__lshift>:
 8005a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a20:	460c      	mov	r4, r1
 8005a22:	4607      	mov	r7, r0
 8005a24:	4691      	mov	r9, r2
 8005a26:	6923      	ldr	r3, [r4, #16]
 8005a28:	6849      	ldr	r1, [r1, #4]
 8005a2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005a2e:	68a3      	ldr	r3, [r4, #8]
 8005a30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a34:	f108 0601 	add.w	r6, r8, #1
 8005a38:	42b3      	cmp	r3, r6
 8005a3a:	db0b      	blt.n	8005a54 <__lshift+0x38>
 8005a3c:	4638      	mov	r0, r7
 8005a3e:	f7ff fde1 	bl	8005604 <_Balloc>
 8005a42:	4605      	mov	r5, r0
 8005a44:	b948      	cbnz	r0, 8005a5a <__lshift+0x3e>
 8005a46:	4602      	mov	r2, r0
 8005a48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005a4c:	4b27      	ldr	r3, [pc, #156]	@ (8005aec <__lshift+0xd0>)
 8005a4e:	4828      	ldr	r0, [pc, #160]	@ (8005af0 <__lshift+0xd4>)
 8005a50:	f000 fb90 	bl	8006174 <__assert_func>
 8005a54:	3101      	adds	r1, #1
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	e7ee      	b.n	8005a38 <__lshift+0x1c>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f100 0114 	add.w	r1, r0, #20
 8005a60:	f100 0210 	add.w	r2, r0, #16
 8005a64:	4618      	mov	r0, r3
 8005a66:	4553      	cmp	r3, sl
 8005a68:	db33      	blt.n	8005ad2 <__lshift+0xb6>
 8005a6a:	6920      	ldr	r0, [r4, #16]
 8005a6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a70:	f104 0314 	add.w	r3, r4, #20
 8005a74:	f019 091f 	ands.w	r9, r9, #31
 8005a78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a80:	d02b      	beq.n	8005ada <__lshift+0xbe>
 8005a82:	468a      	mov	sl, r1
 8005a84:	2200      	movs	r2, #0
 8005a86:	f1c9 0e20 	rsb	lr, r9, #32
 8005a8a:	6818      	ldr	r0, [r3, #0]
 8005a8c:	fa00 f009 	lsl.w	r0, r0, r9
 8005a90:	4310      	orrs	r0, r2
 8005a92:	f84a 0b04 	str.w	r0, [sl], #4
 8005a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a9a:	459c      	cmp	ip, r3
 8005a9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005aa0:	d8f3      	bhi.n	8005a8a <__lshift+0x6e>
 8005aa2:	ebac 0304 	sub.w	r3, ip, r4
 8005aa6:	3b15      	subs	r3, #21
 8005aa8:	f023 0303 	bic.w	r3, r3, #3
 8005aac:	3304      	adds	r3, #4
 8005aae:	f104 0015 	add.w	r0, r4, #21
 8005ab2:	4584      	cmp	ip, r0
 8005ab4:	bf38      	it	cc
 8005ab6:	2304      	movcc	r3, #4
 8005ab8:	50ca      	str	r2, [r1, r3]
 8005aba:	b10a      	cbz	r2, 8005ac0 <__lshift+0xa4>
 8005abc:	f108 0602 	add.w	r6, r8, #2
 8005ac0:	3e01      	subs	r6, #1
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	612e      	str	r6, [r5, #16]
 8005ac8:	f7ff fddc 	bl	8005684 <_Bfree>
 8005acc:	4628      	mov	r0, r5
 8005ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	e7c5      	b.n	8005a66 <__lshift+0x4a>
 8005ada:	3904      	subs	r1, #4
 8005adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ae0:	459c      	cmp	ip, r3
 8005ae2:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ae6:	d8f9      	bhi.n	8005adc <__lshift+0xc0>
 8005ae8:	e7ea      	b.n	8005ac0 <__lshift+0xa4>
 8005aea:	bf00      	nop
 8005aec:	080069ca 	.word	0x080069ca
 8005af0:	080069db 	.word	0x080069db

08005af4 <__mcmp>:
 8005af4:	4603      	mov	r3, r0
 8005af6:	690a      	ldr	r2, [r1, #16]
 8005af8:	6900      	ldr	r0, [r0, #16]
 8005afa:	b530      	push	{r4, r5, lr}
 8005afc:	1a80      	subs	r0, r0, r2
 8005afe:	d10e      	bne.n	8005b1e <__mcmp+0x2a>
 8005b00:	3314      	adds	r3, #20
 8005b02:	3114      	adds	r1, #20
 8005b04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005b08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005b0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005b14:	4295      	cmp	r5, r2
 8005b16:	d003      	beq.n	8005b20 <__mcmp+0x2c>
 8005b18:	d205      	bcs.n	8005b26 <__mcmp+0x32>
 8005b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1e:	bd30      	pop	{r4, r5, pc}
 8005b20:	42a3      	cmp	r3, r4
 8005b22:	d3f3      	bcc.n	8005b0c <__mcmp+0x18>
 8005b24:	e7fb      	b.n	8005b1e <__mcmp+0x2a>
 8005b26:	2001      	movs	r0, #1
 8005b28:	e7f9      	b.n	8005b1e <__mcmp+0x2a>
	...

08005b2c <__mdiff>:
 8005b2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	4689      	mov	r9, r1
 8005b32:	4606      	mov	r6, r0
 8005b34:	4611      	mov	r1, r2
 8005b36:	4648      	mov	r0, r9
 8005b38:	4614      	mov	r4, r2
 8005b3a:	f7ff ffdb 	bl	8005af4 <__mcmp>
 8005b3e:	1e05      	subs	r5, r0, #0
 8005b40:	d112      	bne.n	8005b68 <__mdiff+0x3c>
 8005b42:	4629      	mov	r1, r5
 8005b44:	4630      	mov	r0, r6
 8005b46:	f7ff fd5d 	bl	8005604 <_Balloc>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	b928      	cbnz	r0, 8005b5a <__mdiff+0x2e>
 8005b4e:	f240 2137 	movw	r1, #567	@ 0x237
 8005b52:	4b3e      	ldr	r3, [pc, #248]	@ (8005c4c <__mdiff+0x120>)
 8005b54:	483e      	ldr	r0, [pc, #248]	@ (8005c50 <__mdiff+0x124>)
 8005b56:	f000 fb0d 	bl	8006174 <__assert_func>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005b60:	4610      	mov	r0, r2
 8005b62:	b003      	add	sp, #12
 8005b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b68:	bfbc      	itt	lt
 8005b6a:	464b      	movlt	r3, r9
 8005b6c:	46a1      	movlt	r9, r4
 8005b6e:	4630      	mov	r0, r6
 8005b70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005b74:	bfba      	itte	lt
 8005b76:	461c      	movlt	r4, r3
 8005b78:	2501      	movlt	r5, #1
 8005b7a:	2500      	movge	r5, #0
 8005b7c:	f7ff fd42 	bl	8005604 <_Balloc>
 8005b80:	4602      	mov	r2, r0
 8005b82:	b918      	cbnz	r0, 8005b8c <__mdiff+0x60>
 8005b84:	f240 2145 	movw	r1, #581	@ 0x245
 8005b88:	4b30      	ldr	r3, [pc, #192]	@ (8005c4c <__mdiff+0x120>)
 8005b8a:	e7e3      	b.n	8005b54 <__mdiff+0x28>
 8005b8c:	f100 0b14 	add.w	fp, r0, #20
 8005b90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005b94:	f109 0310 	add.w	r3, r9, #16
 8005b98:	60c5      	str	r5, [r0, #12]
 8005b9a:	f04f 0c00 	mov.w	ip, #0
 8005b9e:	f109 0514 	add.w	r5, r9, #20
 8005ba2:	46d9      	mov	r9, fp
 8005ba4:	6926      	ldr	r6, [r4, #16]
 8005ba6:	f104 0e14 	add.w	lr, r4, #20
 8005baa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005bae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005bb2:	9301      	str	r3, [sp, #4]
 8005bb4:	9b01      	ldr	r3, [sp, #4]
 8005bb6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005bba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005bbe:	b281      	uxth	r1, r0
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	fa1f f38a 	uxth.w	r3, sl
 8005bc6:	1a5b      	subs	r3, r3, r1
 8005bc8:	0c00      	lsrs	r0, r0, #16
 8005bca:	4463      	add	r3, ip
 8005bcc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005bd0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005bda:	4576      	cmp	r6, lr
 8005bdc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005be0:	f849 3b04 	str.w	r3, [r9], #4
 8005be4:	d8e6      	bhi.n	8005bb4 <__mdiff+0x88>
 8005be6:	1b33      	subs	r3, r6, r4
 8005be8:	3b15      	subs	r3, #21
 8005bea:	f023 0303 	bic.w	r3, r3, #3
 8005bee:	3415      	adds	r4, #21
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	42a6      	cmp	r6, r4
 8005bf4:	bf38      	it	cc
 8005bf6:	2304      	movcc	r3, #4
 8005bf8:	441d      	add	r5, r3
 8005bfa:	445b      	add	r3, fp
 8005bfc:	461e      	mov	r6, r3
 8005bfe:	462c      	mov	r4, r5
 8005c00:	4544      	cmp	r4, r8
 8005c02:	d30e      	bcc.n	8005c22 <__mdiff+0xf6>
 8005c04:	f108 0103 	add.w	r1, r8, #3
 8005c08:	1b49      	subs	r1, r1, r5
 8005c0a:	f021 0103 	bic.w	r1, r1, #3
 8005c0e:	3d03      	subs	r5, #3
 8005c10:	45a8      	cmp	r8, r5
 8005c12:	bf38      	it	cc
 8005c14:	2100      	movcc	r1, #0
 8005c16:	440b      	add	r3, r1
 8005c18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005c1c:	b199      	cbz	r1, 8005c46 <__mdiff+0x11a>
 8005c1e:	6117      	str	r7, [r2, #16]
 8005c20:	e79e      	b.n	8005b60 <__mdiff+0x34>
 8005c22:	46e6      	mov	lr, ip
 8005c24:	f854 1b04 	ldr.w	r1, [r4], #4
 8005c28:	fa1f fc81 	uxth.w	ip, r1
 8005c2c:	44f4      	add	ip, lr
 8005c2e:	0c08      	lsrs	r0, r1, #16
 8005c30:	4471      	add	r1, lr
 8005c32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005c36:	b289      	uxth	r1, r1
 8005c38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005c3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005c40:	f846 1b04 	str.w	r1, [r6], #4
 8005c44:	e7dc      	b.n	8005c00 <__mdiff+0xd4>
 8005c46:	3f01      	subs	r7, #1
 8005c48:	e7e6      	b.n	8005c18 <__mdiff+0xec>
 8005c4a:	bf00      	nop
 8005c4c:	080069ca 	.word	0x080069ca
 8005c50:	080069db 	.word	0x080069db

08005c54 <__d2b>:
 8005c54:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005c58:	2101      	movs	r1, #1
 8005c5a:	4690      	mov	r8, r2
 8005c5c:	4699      	mov	r9, r3
 8005c5e:	9e08      	ldr	r6, [sp, #32]
 8005c60:	f7ff fcd0 	bl	8005604 <_Balloc>
 8005c64:	4604      	mov	r4, r0
 8005c66:	b930      	cbnz	r0, 8005c76 <__d2b+0x22>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	f240 310f 	movw	r1, #783	@ 0x30f
 8005c6e:	4b23      	ldr	r3, [pc, #140]	@ (8005cfc <__d2b+0xa8>)
 8005c70:	4823      	ldr	r0, [pc, #140]	@ (8005d00 <__d2b+0xac>)
 8005c72:	f000 fa7f 	bl	8006174 <__assert_func>
 8005c76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005c7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c7e:	b10d      	cbz	r5, 8005c84 <__d2b+0x30>
 8005c80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c84:	9301      	str	r3, [sp, #4]
 8005c86:	f1b8 0300 	subs.w	r3, r8, #0
 8005c8a:	d024      	beq.n	8005cd6 <__d2b+0x82>
 8005c8c:	4668      	mov	r0, sp
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	f7ff fd7f 	bl	8005792 <__lo0bits>
 8005c94:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005c98:	b1d8      	cbz	r0, 8005cd2 <__d2b+0x7e>
 8005c9a:	f1c0 0320 	rsb	r3, r0, #32
 8005c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca2:	430b      	orrs	r3, r1
 8005ca4:	40c2      	lsrs	r2, r0
 8005ca6:	6163      	str	r3, [r4, #20]
 8005ca8:	9201      	str	r2, [sp, #4]
 8005caa:	9b01      	ldr	r3, [sp, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	bf0c      	ite	eq
 8005cb0:	2201      	moveq	r2, #1
 8005cb2:	2202      	movne	r2, #2
 8005cb4:	61a3      	str	r3, [r4, #24]
 8005cb6:	6122      	str	r2, [r4, #16]
 8005cb8:	b1ad      	cbz	r5, 8005ce6 <__d2b+0x92>
 8005cba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005cbe:	4405      	add	r5, r0
 8005cc0:	6035      	str	r5, [r6, #0]
 8005cc2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cc8:	6018      	str	r0, [r3, #0]
 8005cca:	4620      	mov	r0, r4
 8005ccc:	b002      	add	sp, #8
 8005cce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005cd2:	6161      	str	r1, [r4, #20]
 8005cd4:	e7e9      	b.n	8005caa <__d2b+0x56>
 8005cd6:	a801      	add	r0, sp, #4
 8005cd8:	f7ff fd5b 	bl	8005792 <__lo0bits>
 8005cdc:	9b01      	ldr	r3, [sp, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	6163      	str	r3, [r4, #20]
 8005ce2:	3020      	adds	r0, #32
 8005ce4:	e7e7      	b.n	8005cb6 <__d2b+0x62>
 8005ce6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005cea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005cee:	6030      	str	r0, [r6, #0]
 8005cf0:	6918      	ldr	r0, [r3, #16]
 8005cf2:	f7ff fd2f 	bl	8005754 <__hi0bits>
 8005cf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005cfa:	e7e4      	b.n	8005cc6 <__d2b+0x72>
 8005cfc:	080069ca 	.word	0x080069ca
 8005d00:	080069db 	.word	0x080069db

08005d04 <__ssputs_r>:
 8005d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d08:	461f      	mov	r7, r3
 8005d0a:	688e      	ldr	r6, [r1, #8]
 8005d0c:	4682      	mov	sl, r0
 8005d0e:	42be      	cmp	r6, r7
 8005d10:	460c      	mov	r4, r1
 8005d12:	4690      	mov	r8, r2
 8005d14:	680b      	ldr	r3, [r1, #0]
 8005d16:	d82d      	bhi.n	8005d74 <__ssputs_r+0x70>
 8005d18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d20:	d026      	beq.n	8005d70 <__ssputs_r+0x6c>
 8005d22:	6965      	ldr	r5, [r4, #20]
 8005d24:	6909      	ldr	r1, [r1, #16]
 8005d26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d2a:	eba3 0901 	sub.w	r9, r3, r1
 8005d2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d32:	1c7b      	adds	r3, r7, #1
 8005d34:	444b      	add	r3, r9
 8005d36:	106d      	asrs	r5, r5, #1
 8005d38:	429d      	cmp	r5, r3
 8005d3a:	bf38      	it	cc
 8005d3c:	461d      	movcc	r5, r3
 8005d3e:	0553      	lsls	r3, r2, #21
 8005d40:	d527      	bpl.n	8005d92 <__ssputs_r+0x8e>
 8005d42:	4629      	mov	r1, r5
 8005d44:	f7ff fbd2 	bl	80054ec <_malloc_r>
 8005d48:	4606      	mov	r6, r0
 8005d4a:	b360      	cbz	r0, 8005da6 <__ssputs_r+0xa2>
 8005d4c:	464a      	mov	r2, r9
 8005d4e:	6921      	ldr	r1, [r4, #16]
 8005d50:	f000 fa02 	bl	8006158 <memcpy>
 8005d54:	89a3      	ldrh	r3, [r4, #12]
 8005d56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d5e:	81a3      	strh	r3, [r4, #12]
 8005d60:	6126      	str	r6, [r4, #16]
 8005d62:	444e      	add	r6, r9
 8005d64:	6026      	str	r6, [r4, #0]
 8005d66:	463e      	mov	r6, r7
 8005d68:	6165      	str	r5, [r4, #20]
 8005d6a:	eba5 0509 	sub.w	r5, r5, r9
 8005d6e:	60a5      	str	r5, [r4, #8]
 8005d70:	42be      	cmp	r6, r7
 8005d72:	d900      	bls.n	8005d76 <__ssputs_r+0x72>
 8005d74:	463e      	mov	r6, r7
 8005d76:	4632      	mov	r2, r6
 8005d78:	4641      	mov	r1, r8
 8005d7a:	6820      	ldr	r0, [r4, #0]
 8005d7c:	f000 f9c2 	bl	8006104 <memmove>
 8005d80:	2000      	movs	r0, #0
 8005d82:	68a3      	ldr	r3, [r4, #8]
 8005d84:	1b9b      	subs	r3, r3, r6
 8005d86:	60a3      	str	r3, [r4, #8]
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	4433      	add	r3, r6
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d92:	462a      	mov	r2, r5
 8005d94:	f000 fa32 	bl	80061fc <_realloc_r>
 8005d98:	4606      	mov	r6, r0
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	d1e0      	bne.n	8005d60 <__ssputs_r+0x5c>
 8005d9e:	4650      	mov	r0, sl
 8005da0:	6921      	ldr	r1, [r4, #16]
 8005da2:	f7ff fb31 	bl	8005408 <_free_r>
 8005da6:	230c      	movs	r3, #12
 8005da8:	f8ca 3000 	str.w	r3, [sl]
 8005dac:	89a3      	ldrh	r3, [r4, #12]
 8005dae:	f04f 30ff 	mov.w	r0, #4294967295
 8005db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005db6:	81a3      	strh	r3, [r4, #12]
 8005db8:	e7e9      	b.n	8005d8e <__ssputs_r+0x8a>
	...

08005dbc <_svfiprintf_r>:
 8005dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc0:	4698      	mov	r8, r3
 8005dc2:	898b      	ldrh	r3, [r1, #12]
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	061b      	lsls	r3, r3, #24
 8005dc8:	460d      	mov	r5, r1
 8005dca:	4614      	mov	r4, r2
 8005dcc:	b09d      	sub	sp, #116	@ 0x74
 8005dce:	d510      	bpl.n	8005df2 <_svfiprintf_r+0x36>
 8005dd0:	690b      	ldr	r3, [r1, #16]
 8005dd2:	b973      	cbnz	r3, 8005df2 <_svfiprintf_r+0x36>
 8005dd4:	2140      	movs	r1, #64	@ 0x40
 8005dd6:	f7ff fb89 	bl	80054ec <_malloc_r>
 8005dda:	6028      	str	r0, [r5, #0]
 8005ddc:	6128      	str	r0, [r5, #16]
 8005dde:	b930      	cbnz	r0, 8005dee <_svfiprintf_r+0x32>
 8005de0:	230c      	movs	r3, #12
 8005de2:	603b      	str	r3, [r7, #0]
 8005de4:	f04f 30ff 	mov.w	r0, #4294967295
 8005de8:	b01d      	add	sp, #116	@ 0x74
 8005dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dee:	2340      	movs	r3, #64	@ 0x40
 8005df0:	616b      	str	r3, [r5, #20]
 8005df2:	2300      	movs	r3, #0
 8005df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005df6:	2320      	movs	r3, #32
 8005df8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005dfc:	2330      	movs	r3, #48	@ 0x30
 8005dfe:	f04f 0901 	mov.w	r9, #1
 8005e02:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e06:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005fa0 <_svfiprintf_r+0x1e4>
 8005e0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e0e:	4623      	mov	r3, r4
 8005e10:	469a      	mov	sl, r3
 8005e12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e16:	b10a      	cbz	r2, 8005e1c <_svfiprintf_r+0x60>
 8005e18:	2a25      	cmp	r2, #37	@ 0x25
 8005e1a:	d1f9      	bne.n	8005e10 <_svfiprintf_r+0x54>
 8005e1c:	ebba 0b04 	subs.w	fp, sl, r4
 8005e20:	d00b      	beq.n	8005e3a <_svfiprintf_r+0x7e>
 8005e22:	465b      	mov	r3, fp
 8005e24:	4622      	mov	r2, r4
 8005e26:	4629      	mov	r1, r5
 8005e28:	4638      	mov	r0, r7
 8005e2a:	f7ff ff6b 	bl	8005d04 <__ssputs_r>
 8005e2e:	3001      	adds	r0, #1
 8005e30:	f000 80a7 	beq.w	8005f82 <_svfiprintf_r+0x1c6>
 8005e34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e36:	445a      	add	r2, fp
 8005e38:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 809f 	beq.w	8005f82 <_svfiprintf_r+0x1c6>
 8005e44:	2300      	movs	r3, #0
 8005e46:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e4e:	f10a 0a01 	add.w	sl, sl, #1
 8005e52:	9304      	str	r3, [sp, #16]
 8005e54:	9307      	str	r3, [sp, #28]
 8005e56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e5c:	4654      	mov	r4, sl
 8005e5e:	2205      	movs	r2, #5
 8005e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e64:	484e      	ldr	r0, [pc, #312]	@ (8005fa0 <_svfiprintf_r+0x1e4>)
 8005e66:	f7fe fc70 	bl	800474a <memchr>
 8005e6a:	9a04      	ldr	r2, [sp, #16]
 8005e6c:	b9d8      	cbnz	r0, 8005ea6 <_svfiprintf_r+0xea>
 8005e6e:	06d0      	lsls	r0, r2, #27
 8005e70:	bf44      	itt	mi
 8005e72:	2320      	movmi	r3, #32
 8005e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e78:	0711      	lsls	r1, r2, #28
 8005e7a:	bf44      	itt	mi
 8005e7c:	232b      	movmi	r3, #43	@ 0x2b
 8005e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e82:	f89a 3000 	ldrb.w	r3, [sl]
 8005e86:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e88:	d015      	beq.n	8005eb6 <_svfiprintf_r+0xfa>
 8005e8a:	4654      	mov	r4, sl
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	f04f 0c0a 	mov.w	ip, #10
 8005e92:	9a07      	ldr	r2, [sp, #28]
 8005e94:	4621      	mov	r1, r4
 8005e96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e9a:	3b30      	subs	r3, #48	@ 0x30
 8005e9c:	2b09      	cmp	r3, #9
 8005e9e:	d94b      	bls.n	8005f38 <_svfiprintf_r+0x17c>
 8005ea0:	b1b0      	cbz	r0, 8005ed0 <_svfiprintf_r+0x114>
 8005ea2:	9207      	str	r2, [sp, #28]
 8005ea4:	e014      	b.n	8005ed0 <_svfiprintf_r+0x114>
 8005ea6:	eba0 0308 	sub.w	r3, r0, r8
 8005eaa:	fa09 f303 	lsl.w	r3, r9, r3
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	46a2      	mov	sl, r4
 8005eb2:	9304      	str	r3, [sp, #16]
 8005eb4:	e7d2      	b.n	8005e5c <_svfiprintf_r+0xa0>
 8005eb6:	9b03      	ldr	r3, [sp, #12]
 8005eb8:	1d19      	adds	r1, r3, #4
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	9103      	str	r1, [sp, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	bfbb      	ittet	lt
 8005ec2:	425b      	neglt	r3, r3
 8005ec4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ec8:	9307      	strge	r3, [sp, #28]
 8005eca:	9307      	strlt	r3, [sp, #28]
 8005ecc:	bfb8      	it	lt
 8005ece:	9204      	strlt	r2, [sp, #16]
 8005ed0:	7823      	ldrb	r3, [r4, #0]
 8005ed2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ed4:	d10a      	bne.n	8005eec <_svfiprintf_r+0x130>
 8005ed6:	7863      	ldrb	r3, [r4, #1]
 8005ed8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005eda:	d132      	bne.n	8005f42 <_svfiprintf_r+0x186>
 8005edc:	9b03      	ldr	r3, [sp, #12]
 8005ede:	3402      	adds	r4, #2
 8005ee0:	1d1a      	adds	r2, r3, #4
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	9203      	str	r2, [sp, #12]
 8005ee6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005eea:	9305      	str	r3, [sp, #20]
 8005eec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005fa4 <_svfiprintf_r+0x1e8>
 8005ef0:	2203      	movs	r2, #3
 8005ef2:	4650      	mov	r0, sl
 8005ef4:	7821      	ldrb	r1, [r4, #0]
 8005ef6:	f7fe fc28 	bl	800474a <memchr>
 8005efa:	b138      	cbz	r0, 8005f0c <_svfiprintf_r+0x150>
 8005efc:	2240      	movs	r2, #64	@ 0x40
 8005efe:	9b04      	ldr	r3, [sp, #16]
 8005f00:	eba0 000a 	sub.w	r0, r0, sl
 8005f04:	4082      	lsls	r2, r0
 8005f06:	4313      	orrs	r3, r2
 8005f08:	3401      	adds	r4, #1
 8005f0a:	9304      	str	r3, [sp, #16]
 8005f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f10:	2206      	movs	r2, #6
 8005f12:	4825      	ldr	r0, [pc, #148]	@ (8005fa8 <_svfiprintf_r+0x1ec>)
 8005f14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f18:	f7fe fc17 	bl	800474a <memchr>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d036      	beq.n	8005f8e <_svfiprintf_r+0x1d2>
 8005f20:	4b22      	ldr	r3, [pc, #136]	@ (8005fac <_svfiprintf_r+0x1f0>)
 8005f22:	bb1b      	cbnz	r3, 8005f6c <_svfiprintf_r+0x1b0>
 8005f24:	9b03      	ldr	r3, [sp, #12]
 8005f26:	3307      	adds	r3, #7
 8005f28:	f023 0307 	bic.w	r3, r3, #7
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	9303      	str	r3, [sp, #12]
 8005f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f32:	4433      	add	r3, r6
 8005f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f36:	e76a      	b.n	8005e0e <_svfiprintf_r+0x52>
 8005f38:	460c      	mov	r4, r1
 8005f3a:	2001      	movs	r0, #1
 8005f3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f40:	e7a8      	b.n	8005e94 <_svfiprintf_r+0xd8>
 8005f42:	2300      	movs	r3, #0
 8005f44:	f04f 0c0a 	mov.w	ip, #10
 8005f48:	4619      	mov	r1, r3
 8005f4a:	3401      	adds	r4, #1
 8005f4c:	9305      	str	r3, [sp, #20]
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f54:	3a30      	subs	r2, #48	@ 0x30
 8005f56:	2a09      	cmp	r2, #9
 8005f58:	d903      	bls.n	8005f62 <_svfiprintf_r+0x1a6>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0c6      	beq.n	8005eec <_svfiprintf_r+0x130>
 8005f5e:	9105      	str	r1, [sp, #20]
 8005f60:	e7c4      	b.n	8005eec <_svfiprintf_r+0x130>
 8005f62:	4604      	mov	r4, r0
 8005f64:	2301      	movs	r3, #1
 8005f66:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f6a:	e7f0      	b.n	8005f4e <_svfiprintf_r+0x192>
 8005f6c:	ab03      	add	r3, sp, #12
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	462a      	mov	r2, r5
 8005f72:	4638      	mov	r0, r7
 8005f74:	4b0e      	ldr	r3, [pc, #56]	@ (8005fb0 <_svfiprintf_r+0x1f4>)
 8005f76:	a904      	add	r1, sp, #16
 8005f78:	f7fd fe84 	bl	8003c84 <_printf_float>
 8005f7c:	1c42      	adds	r2, r0, #1
 8005f7e:	4606      	mov	r6, r0
 8005f80:	d1d6      	bne.n	8005f30 <_svfiprintf_r+0x174>
 8005f82:	89ab      	ldrh	r3, [r5, #12]
 8005f84:	065b      	lsls	r3, r3, #25
 8005f86:	f53f af2d 	bmi.w	8005de4 <_svfiprintf_r+0x28>
 8005f8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f8c:	e72c      	b.n	8005de8 <_svfiprintf_r+0x2c>
 8005f8e:	ab03      	add	r3, sp, #12
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	462a      	mov	r2, r5
 8005f94:	4638      	mov	r0, r7
 8005f96:	4b06      	ldr	r3, [pc, #24]	@ (8005fb0 <_svfiprintf_r+0x1f4>)
 8005f98:	a904      	add	r1, sp, #16
 8005f9a:	f7fe f911 	bl	80041c0 <_printf_i>
 8005f9e:	e7ed      	b.n	8005f7c <_svfiprintf_r+0x1c0>
 8005fa0:	08006b30 	.word	0x08006b30
 8005fa4:	08006b36 	.word	0x08006b36
 8005fa8:	08006b3a 	.word	0x08006b3a
 8005fac:	08003c85 	.word	0x08003c85
 8005fb0:	08005d05 	.word	0x08005d05

08005fb4 <__sflush_r>:
 8005fb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fba:	0716      	lsls	r6, r2, #28
 8005fbc:	4605      	mov	r5, r0
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	d454      	bmi.n	800606c <__sflush_r+0xb8>
 8005fc2:	684b      	ldr	r3, [r1, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	dc02      	bgt.n	8005fce <__sflush_r+0x1a>
 8005fc8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	dd48      	ble.n	8006060 <__sflush_r+0xac>
 8005fce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fd0:	2e00      	cmp	r6, #0
 8005fd2:	d045      	beq.n	8006060 <__sflush_r+0xac>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fda:	682f      	ldr	r7, [r5, #0]
 8005fdc:	6a21      	ldr	r1, [r4, #32]
 8005fde:	602b      	str	r3, [r5, #0]
 8005fe0:	d030      	beq.n	8006044 <__sflush_r+0x90>
 8005fe2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	0759      	lsls	r1, r3, #29
 8005fe8:	d505      	bpl.n	8005ff6 <__sflush_r+0x42>
 8005fea:	6863      	ldr	r3, [r4, #4]
 8005fec:	1ad2      	subs	r2, r2, r3
 8005fee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ff0:	b10b      	cbz	r3, 8005ff6 <__sflush_r+0x42>
 8005ff2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ff4:	1ad2      	subs	r2, r2, r3
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ffc:	6a21      	ldr	r1, [r4, #32]
 8005ffe:	47b0      	blx	r6
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	89a3      	ldrh	r3, [r4, #12]
 8006004:	d106      	bne.n	8006014 <__sflush_r+0x60>
 8006006:	6829      	ldr	r1, [r5, #0]
 8006008:	291d      	cmp	r1, #29
 800600a:	d82b      	bhi.n	8006064 <__sflush_r+0xb0>
 800600c:	4a28      	ldr	r2, [pc, #160]	@ (80060b0 <__sflush_r+0xfc>)
 800600e:	410a      	asrs	r2, r1
 8006010:	07d6      	lsls	r6, r2, #31
 8006012:	d427      	bmi.n	8006064 <__sflush_r+0xb0>
 8006014:	2200      	movs	r2, #0
 8006016:	6062      	str	r2, [r4, #4]
 8006018:	6922      	ldr	r2, [r4, #16]
 800601a:	04d9      	lsls	r1, r3, #19
 800601c:	6022      	str	r2, [r4, #0]
 800601e:	d504      	bpl.n	800602a <__sflush_r+0x76>
 8006020:	1c42      	adds	r2, r0, #1
 8006022:	d101      	bne.n	8006028 <__sflush_r+0x74>
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	b903      	cbnz	r3, 800602a <__sflush_r+0x76>
 8006028:	6560      	str	r0, [r4, #84]	@ 0x54
 800602a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800602c:	602f      	str	r7, [r5, #0]
 800602e:	b1b9      	cbz	r1, 8006060 <__sflush_r+0xac>
 8006030:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006034:	4299      	cmp	r1, r3
 8006036:	d002      	beq.n	800603e <__sflush_r+0x8a>
 8006038:	4628      	mov	r0, r5
 800603a:	f7ff f9e5 	bl	8005408 <_free_r>
 800603e:	2300      	movs	r3, #0
 8006040:	6363      	str	r3, [r4, #52]	@ 0x34
 8006042:	e00d      	b.n	8006060 <__sflush_r+0xac>
 8006044:	2301      	movs	r3, #1
 8006046:	4628      	mov	r0, r5
 8006048:	47b0      	blx	r6
 800604a:	4602      	mov	r2, r0
 800604c:	1c50      	adds	r0, r2, #1
 800604e:	d1c9      	bne.n	8005fe4 <__sflush_r+0x30>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0c6      	beq.n	8005fe4 <__sflush_r+0x30>
 8006056:	2b1d      	cmp	r3, #29
 8006058:	d001      	beq.n	800605e <__sflush_r+0xaa>
 800605a:	2b16      	cmp	r3, #22
 800605c:	d11d      	bne.n	800609a <__sflush_r+0xe6>
 800605e:	602f      	str	r7, [r5, #0]
 8006060:	2000      	movs	r0, #0
 8006062:	e021      	b.n	80060a8 <__sflush_r+0xf4>
 8006064:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006068:	b21b      	sxth	r3, r3
 800606a:	e01a      	b.n	80060a2 <__sflush_r+0xee>
 800606c:	690f      	ldr	r7, [r1, #16]
 800606e:	2f00      	cmp	r7, #0
 8006070:	d0f6      	beq.n	8006060 <__sflush_r+0xac>
 8006072:	0793      	lsls	r3, r2, #30
 8006074:	bf18      	it	ne
 8006076:	2300      	movne	r3, #0
 8006078:	680e      	ldr	r6, [r1, #0]
 800607a:	bf08      	it	eq
 800607c:	694b      	ldreq	r3, [r1, #20]
 800607e:	1bf6      	subs	r6, r6, r7
 8006080:	600f      	str	r7, [r1, #0]
 8006082:	608b      	str	r3, [r1, #8]
 8006084:	2e00      	cmp	r6, #0
 8006086:	ddeb      	ble.n	8006060 <__sflush_r+0xac>
 8006088:	4633      	mov	r3, r6
 800608a:	463a      	mov	r2, r7
 800608c:	4628      	mov	r0, r5
 800608e:	6a21      	ldr	r1, [r4, #32]
 8006090:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006094:	47e0      	blx	ip
 8006096:	2800      	cmp	r0, #0
 8006098:	dc07      	bgt.n	80060aa <__sflush_r+0xf6>
 800609a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800609e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060a2:	f04f 30ff 	mov.w	r0, #4294967295
 80060a6:	81a3      	strh	r3, [r4, #12]
 80060a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060aa:	4407      	add	r7, r0
 80060ac:	1a36      	subs	r6, r6, r0
 80060ae:	e7e9      	b.n	8006084 <__sflush_r+0xd0>
 80060b0:	dfbffffe 	.word	0xdfbffffe

080060b4 <_fflush_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	690b      	ldr	r3, [r1, #16]
 80060b8:	4605      	mov	r5, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	b913      	cbnz	r3, 80060c4 <_fflush_r+0x10>
 80060be:	2500      	movs	r5, #0
 80060c0:	4628      	mov	r0, r5
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	b118      	cbz	r0, 80060ce <_fflush_r+0x1a>
 80060c6:	6a03      	ldr	r3, [r0, #32]
 80060c8:	b90b      	cbnz	r3, 80060ce <_fflush_r+0x1a>
 80060ca:	f7fe fa25 	bl	8004518 <__sinit>
 80060ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f3      	beq.n	80060be <_fflush_r+0xa>
 80060d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060d8:	07d0      	lsls	r0, r2, #31
 80060da:	d404      	bmi.n	80060e6 <_fflush_r+0x32>
 80060dc:	0599      	lsls	r1, r3, #22
 80060de:	d402      	bmi.n	80060e6 <_fflush_r+0x32>
 80060e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060e2:	f7fe fb30 	bl	8004746 <__retarget_lock_acquire_recursive>
 80060e6:	4628      	mov	r0, r5
 80060e8:	4621      	mov	r1, r4
 80060ea:	f7ff ff63 	bl	8005fb4 <__sflush_r>
 80060ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060f0:	4605      	mov	r5, r0
 80060f2:	07da      	lsls	r2, r3, #31
 80060f4:	d4e4      	bmi.n	80060c0 <_fflush_r+0xc>
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	059b      	lsls	r3, r3, #22
 80060fa:	d4e1      	bmi.n	80060c0 <_fflush_r+0xc>
 80060fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060fe:	f7fe fb23 	bl	8004748 <__retarget_lock_release_recursive>
 8006102:	e7dd      	b.n	80060c0 <_fflush_r+0xc>

08006104 <memmove>:
 8006104:	4288      	cmp	r0, r1
 8006106:	b510      	push	{r4, lr}
 8006108:	eb01 0402 	add.w	r4, r1, r2
 800610c:	d902      	bls.n	8006114 <memmove+0x10>
 800610e:	4284      	cmp	r4, r0
 8006110:	4623      	mov	r3, r4
 8006112:	d807      	bhi.n	8006124 <memmove+0x20>
 8006114:	1e43      	subs	r3, r0, #1
 8006116:	42a1      	cmp	r1, r4
 8006118:	d008      	beq.n	800612c <memmove+0x28>
 800611a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800611e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006122:	e7f8      	b.n	8006116 <memmove+0x12>
 8006124:	4601      	mov	r1, r0
 8006126:	4402      	add	r2, r0
 8006128:	428a      	cmp	r2, r1
 800612a:	d100      	bne.n	800612e <memmove+0x2a>
 800612c:	bd10      	pop	{r4, pc}
 800612e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006132:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006136:	e7f7      	b.n	8006128 <memmove+0x24>

08006138 <_sbrk_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	2300      	movs	r3, #0
 800613c:	4d05      	ldr	r5, [pc, #20]	@ (8006154 <_sbrk_r+0x1c>)
 800613e:	4604      	mov	r4, r0
 8006140:	4608      	mov	r0, r1
 8006142:	602b      	str	r3, [r5, #0]
 8006144:	f7fb fdfc 	bl	8001d40 <_sbrk>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d102      	bne.n	8006152 <_sbrk_r+0x1a>
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	b103      	cbz	r3, 8006152 <_sbrk_r+0x1a>
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	bd38      	pop	{r3, r4, r5, pc}
 8006154:	200003d4 	.word	0x200003d4

08006158 <memcpy>:
 8006158:	440a      	add	r2, r1
 800615a:	4291      	cmp	r1, r2
 800615c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006160:	d100      	bne.n	8006164 <memcpy+0xc>
 8006162:	4770      	bx	lr
 8006164:	b510      	push	{r4, lr}
 8006166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800616a:	4291      	cmp	r1, r2
 800616c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006170:	d1f9      	bne.n	8006166 <memcpy+0xe>
 8006172:	bd10      	pop	{r4, pc}

08006174 <__assert_func>:
 8006174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006176:	4614      	mov	r4, r2
 8006178:	461a      	mov	r2, r3
 800617a:	4b09      	ldr	r3, [pc, #36]	@ (80061a0 <__assert_func+0x2c>)
 800617c:	4605      	mov	r5, r0
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68d8      	ldr	r0, [r3, #12]
 8006182:	b954      	cbnz	r4, 800619a <__assert_func+0x26>
 8006184:	4b07      	ldr	r3, [pc, #28]	@ (80061a4 <__assert_func+0x30>)
 8006186:	461c      	mov	r4, r3
 8006188:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800618c:	9100      	str	r1, [sp, #0]
 800618e:	462b      	mov	r3, r5
 8006190:	4905      	ldr	r1, [pc, #20]	@ (80061a8 <__assert_func+0x34>)
 8006192:	f000 f86f 	bl	8006274 <fiprintf>
 8006196:	f000 f87f 	bl	8006298 <abort>
 800619a:	4b04      	ldr	r3, [pc, #16]	@ (80061ac <__assert_func+0x38>)
 800619c:	e7f4      	b.n	8006188 <__assert_func+0x14>
 800619e:	bf00      	nop
 80061a0:	2000001c 	.word	0x2000001c
 80061a4:	08006b86 	.word	0x08006b86
 80061a8:	08006b58 	.word	0x08006b58
 80061ac:	08006b4b 	.word	0x08006b4b

080061b0 <_calloc_r>:
 80061b0:	b570      	push	{r4, r5, r6, lr}
 80061b2:	fba1 5402 	umull	r5, r4, r1, r2
 80061b6:	b93c      	cbnz	r4, 80061c8 <_calloc_r+0x18>
 80061b8:	4629      	mov	r1, r5
 80061ba:	f7ff f997 	bl	80054ec <_malloc_r>
 80061be:	4606      	mov	r6, r0
 80061c0:	b928      	cbnz	r0, 80061ce <_calloc_r+0x1e>
 80061c2:	2600      	movs	r6, #0
 80061c4:	4630      	mov	r0, r6
 80061c6:	bd70      	pop	{r4, r5, r6, pc}
 80061c8:	220c      	movs	r2, #12
 80061ca:	6002      	str	r2, [r0, #0]
 80061cc:	e7f9      	b.n	80061c2 <_calloc_r+0x12>
 80061ce:	462a      	mov	r2, r5
 80061d0:	4621      	mov	r1, r4
 80061d2:	f7fe fa3a 	bl	800464a <memset>
 80061d6:	e7f5      	b.n	80061c4 <_calloc_r+0x14>

080061d8 <__ascii_mbtowc>:
 80061d8:	b082      	sub	sp, #8
 80061da:	b901      	cbnz	r1, 80061de <__ascii_mbtowc+0x6>
 80061dc:	a901      	add	r1, sp, #4
 80061de:	b142      	cbz	r2, 80061f2 <__ascii_mbtowc+0x1a>
 80061e0:	b14b      	cbz	r3, 80061f6 <__ascii_mbtowc+0x1e>
 80061e2:	7813      	ldrb	r3, [r2, #0]
 80061e4:	600b      	str	r3, [r1, #0]
 80061e6:	7812      	ldrb	r2, [r2, #0]
 80061e8:	1e10      	subs	r0, r2, #0
 80061ea:	bf18      	it	ne
 80061ec:	2001      	movne	r0, #1
 80061ee:	b002      	add	sp, #8
 80061f0:	4770      	bx	lr
 80061f2:	4610      	mov	r0, r2
 80061f4:	e7fb      	b.n	80061ee <__ascii_mbtowc+0x16>
 80061f6:	f06f 0001 	mvn.w	r0, #1
 80061fa:	e7f8      	b.n	80061ee <__ascii_mbtowc+0x16>

080061fc <_realloc_r>:
 80061fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006200:	4680      	mov	r8, r0
 8006202:	4615      	mov	r5, r2
 8006204:	460c      	mov	r4, r1
 8006206:	b921      	cbnz	r1, 8006212 <_realloc_r+0x16>
 8006208:	4611      	mov	r1, r2
 800620a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800620e:	f7ff b96d 	b.w	80054ec <_malloc_r>
 8006212:	b92a      	cbnz	r2, 8006220 <_realloc_r+0x24>
 8006214:	f7ff f8f8 	bl	8005408 <_free_r>
 8006218:	2400      	movs	r4, #0
 800621a:	4620      	mov	r0, r4
 800621c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006220:	f000 f841 	bl	80062a6 <_malloc_usable_size_r>
 8006224:	4285      	cmp	r5, r0
 8006226:	4606      	mov	r6, r0
 8006228:	d802      	bhi.n	8006230 <_realloc_r+0x34>
 800622a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800622e:	d8f4      	bhi.n	800621a <_realloc_r+0x1e>
 8006230:	4629      	mov	r1, r5
 8006232:	4640      	mov	r0, r8
 8006234:	f7ff f95a 	bl	80054ec <_malloc_r>
 8006238:	4607      	mov	r7, r0
 800623a:	2800      	cmp	r0, #0
 800623c:	d0ec      	beq.n	8006218 <_realloc_r+0x1c>
 800623e:	42b5      	cmp	r5, r6
 8006240:	462a      	mov	r2, r5
 8006242:	4621      	mov	r1, r4
 8006244:	bf28      	it	cs
 8006246:	4632      	movcs	r2, r6
 8006248:	f7ff ff86 	bl	8006158 <memcpy>
 800624c:	4621      	mov	r1, r4
 800624e:	4640      	mov	r0, r8
 8006250:	f7ff f8da 	bl	8005408 <_free_r>
 8006254:	463c      	mov	r4, r7
 8006256:	e7e0      	b.n	800621a <_realloc_r+0x1e>

08006258 <__ascii_wctomb>:
 8006258:	4603      	mov	r3, r0
 800625a:	4608      	mov	r0, r1
 800625c:	b141      	cbz	r1, 8006270 <__ascii_wctomb+0x18>
 800625e:	2aff      	cmp	r2, #255	@ 0xff
 8006260:	d904      	bls.n	800626c <__ascii_wctomb+0x14>
 8006262:	228a      	movs	r2, #138	@ 0x8a
 8006264:	f04f 30ff 	mov.w	r0, #4294967295
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	4770      	bx	lr
 800626c:	2001      	movs	r0, #1
 800626e:	700a      	strb	r2, [r1, #0]
 8006270:	4770      	bx	lr
	...

08006274 <fiprintf>:
 8006274:	b40e      	push	{r1, r2, r3}
 8006276:	b503      	push	{r0, r1, lr}
 8006278:	4601      	mov	r1, r0
 800627a:	ab03      	add	r3, sp, #12
 800627c:	4805      	ldr	r0, [pc, #20]	@ (8006294 <fiprintf+0x20>)
 800627e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006282:	6800      	ldr	r0, [r0, #0]
 8006284:	9301      	str	r3, [sp, #4]
 8006286:	f000 f83d 	bl	8006304 <_vfiprintf_r>
 800628a:	b002      	add	sp, #8
 800628c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006290:	b003      	add	sp, #12
 8006292:	4770      	bx	lr
 8006294:	2000001c 	.word	0x2000001c

08006298 <abort>:
 8006298:	2006      	movs	r0, #6
 800629a:	b508      	push	{r3, lr}
 800629c:	f000 fa06 	bl	80066ac <raise>
 80062a0:	2001      	movs	r0, #1
 80062a2:	f7fb fcd8 	bl	8001c56 <_exit>

080062a6 <_malloc_usable_size_r>:
 80062a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062aa:	1f18      	subs	r0, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	bfbc      	itt	lt
 80062b0:	580b      	ldrlt	r3, [r1, r0]
 80062b2:	18c0      	addlt	r0, r0, r3
 80062b4:	4770      	bx	lr

080062b6 <__sfputc_r>:
 80062b6:	6893      	ldr	r3, [r2, #8]
 80062b8:	b410      	push	{r4}
 80062ba:	3b01      	subs	r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	6093      	str	r3, [r2, #8]
 80062c0:	da07      	bge.n	80062d2 <__sfputc_r+0x1c>
 80062c2:	6994      	ldr	r4, [r2, #24]
 80062c4:	42a3      	cmp	r3, r4
 80062c6:	db01      	blt.n	80062cc <__sfputc_r+0x16>
 80062c8:	290a      	cmp	r1, #10
 80062ca:	d102      	bne.n	80062d2 <__sfputc_r+0x1c>
 80062cc:	bc10      	pop	{r4}
 80062ce:	f000 b931 	b.w	8006534 <__swbuf_r>
 80062d2:	6813      	ldr	r3, [r2, #0]
 80062d4:	1c58      	adds	r0, r3, #1
 80062d6:	6010      	str	r0, [r2, #0]
 80062d8:	7019      	strb	r1, [r3, #0]
 80062da:	4608      	mov	r0, r1
 80062dc:	bc10      	pop	{r4}
 80062de:	4770      	bx	lr

080062e0 <__sfputs_r>:
 80062e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e2:	4606      	mov	r6, r0
 80062e4:	460f      	mov	r7, r1
 80062e6:	4614      	mov	r4, r2
 80062e8:	18d5      	adds	r5, r2, r3
 80062ea:	42ac      	cmp	r4, r5
 80062ec:	d101      	bne.n	80062f2 <__sfputs_r+0x12>
 80062ee:	2000      	movs	r0, #0
 80062f0:	e007      	b.n	8006302 <__sfputs_r+0x22>
 80062f2:	463a      	mov	r2, r7
 80062f4:	4630      	mov	r0, r6
 80062f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062fa:	f7ff ffdc 	bl	80062b6 <__sfputc_r>
 80062fe:	1c43      	adds	r3, r0, #1
 8006300:	d1f3      	bne.n	80062ea <__sfputs_r+0xa>
 8006302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006304 <_vfiprintf_r>:
 8006304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006308:	460d      	mov	r5, r1
 800630a:	4614      	mov	r4, r2
 800630c:	4698      	mov	r8, r3
 800630e:	4606      	mov	r6, r0
 8006310:	b09d      	sub	sp, #116	@ 0x74
 8006312:	b118      	cbz	r0, 800631c <_vfiprintf_r+0x18>
 8006314:	6a03      	ldr	r3, [r0, #32]
 8006316:	b90b      	cbnz	r3, 800631c <_vfiprintf_r+0x18>
 8006318:	f7fe f8fe 	bl	8004518 <__sinit>
 800631c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800631e:	07d9      	lsls	r1, r3, #31
 8006320:	d405      	bmi.n	800632e <_vfiprintf_r+0x2a>
 8006322:	89ab      	ldrh	r3, [r5, #12]
 8006324:	059a      	lsls	r2, r3, #22
 8006326:	d402      	bmi.n	800632e <_vfiprintf_r+0x2a>
 8006328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800632a:	f7fe fa0c 	bl	8004746 <__retarget_lock_acquire_recursive>
 800632e:	89ab      	ldrh	r3, [r5, #12]
 8006330:	071b      	lsls	r3, r3, #28
 8006332:	d501      	bpl.n	8006338 <_vfiprintf_r+0x34>
 8006334:	692b      	ldr	r3, [r5, #16]
 8006336:	b99b      	cbnz	r3, 8006360 <_vfiprintf_r+0x5c>
 8006338:	4629      	mov	r1, r5
 800633a:	4630      	mov	r0, r6
 800633c:	f000 f938 	bl	80065b0 <__swsetup_r>
 8006340:	b170      	cbz	r0, 8006360 <_vfiprintf_r+0x5c>
 8006342:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006344:	07dc      	lsls	r4, r3, #31
 8006346:	d504      	bpl.n	8006352 <_vfiprintf_r+0x4e>
 8006348:	f04f 30ff 	mov.w	r0, #4294967295
 800634c:	b01d      	add	sp, #116	@ 0x74
 800634e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006352:	89ab      	ldrh	r3, [r5, #12]
 8006354:	0598      	lsls	r0, r3, #22
 8006356:	d4f7      	bmi.n	8006348 <_vfiprintf_r+0x44>
 8006358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800635a:	f7fe f9f5 	bl	8004748 <__retarget_lock_release_recursive>
 800635e:	e7f3      	b.n	8006348 <_vfiprintf_r+0x44>
 8006360:	2300      	movs	r3, #0
 8006362:	9309      	str	r3, [sp, #36]	@ 0x24
 8006364:	2320      	movs	r3, #32
 8006366:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800636a:	2330      	movs	r3, #48	@ 0x30
 800636c:	f04f 0901 	mov.w	r9, #1
 8006370:	f8cd 800c 	str.w	r8, [sp, #12]
 8006374:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006520 <_vfiprintf_r+0x21c>
 8006378:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800637c:	4623      	mov	r3, r4
 800637e:	469a      	mov	sl, r3
 8006380:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006384:	b10a      	cbz	r2, 800638a <_vfiprintf_r+0x86>
 8006386:	2a25      	cmp	r2, #37	@ 0x25
 8006388:	d1f9      	bne.n	800637e <_vfiprintf_r+0x7a>
 800638a:	ebba 0b04 	subs.w	fp, sl, r4
 800638e:	d00b      	beq.n	80063a8 <_vfiprintf_r+0xa4>
 8006390:	465b      	mov	r3, fp
 8006392:	4622      	mov	r2, r4
 8006394:	4629      	mov	r1, r5
 8006396:	4630      	mov	r0, r6
 8006398:	f7ff ffa2 	bl	80062e0 <__sfputs_r>
 800639c:	3001      	adds	r0, #1
 800639e:	f000 80a7 	beq.w	80064f0 <_vfiprintf_r+0x1ec>
 80063a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063a4:	445a      	add	r2, fp
 80063a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80063a8:	f89a 3000 	ldrb.w	r3, [sl]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 809f 	beq.w	80064f0 <_vfiprintf_r+0x1ec>
 80063b2:	2300      	movs	r3, #0
 80063b4:	f04f 32ff 	mov.w	r2, #4294967295
 80063b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063bc:	f10a 0a01 	add.w	sl, sl, #1
 80063c0:	9304      	str	r3, [sp, #16]
 80063c2:	9307      	str	r3, [sp, #28]
 80063c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80063c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80063ca:	4654      	mov	r4, sl
 80063cc:	2205      	movs	r2, #5
 80063ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d2:	4853      	ldr	r0, [pc, #332]	@ (8006520 <_vfiprintf_r+0x21c>)
 80063d4:	f7fe f9b9 	bl	800474a <memchr>
 80063d8:	9a04      	ldr	r2, [sp, #16]
 80063da:	b9d8      	cbnz	r0, 8006414 <_vfiprintf_r+0x110>
 80063dc:	06d1      	lsls	r1, r2, #27
 80063de:	bf44      	itt	mi
 80063e0:	2320      	movmi	r3, #32
 80063e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063e6:	0713      	lsls	r3, r2, #28
 80063e8:	bf44      	itt	mi
 80063ea:	232b      	movmi	r3, #43	@ 0x2b
 80063ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063f0:	f89a 3000 	ldrb.w	r3, [sl]
 80063f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80063f6:	d015      	beq.n	8006424 <_vfiprintf_r+0x120>
 80063f8:	4654      	mov	r4, sl
 80063fa:	2000      	movs	r0, #0
 80063fc:	f04f 0c0a 	mov.w	ip, #10
 8006400:	9a07      	ldr	r2, [sp, #28]
 8006402:	4621      	mov	r1, r4
 8006404:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006408:	3b30      	subs	r3, #48	@ 0x30
 800640a:	2b09      	cmp	r3, #9
 800640c:	d94b      	bls.n	80064a6 <_vfiprintf_r+0x1a2>
 800640e:	b1b0      	cbz	r0, 800643e <_vfiprintf_r+0x13a>
 8006410:	9207      	str	r2, [sp, #28]
 8006412:	e014      	b.n	800643e <_vfiprintf_r+0x13a>
 8006414:	eba0 0308 	sub.w	r3, r0, r8
 8006418:	fa09 f303 	lsl.w	r3, r9, r3
 800641c:	4313      	orrs	r3, r2
 800641e:	46a2      	mov	sl, r4
 8006420:	9304      	str	r3, [sp, #16]
 8006422:	e7d2      	b.n	80063ca <_vfiprintf_r+0xc6>
 8006424:	9b03      	ldr	r3, [sp, #12]
 8006426:	1d19      	adds	r1, r3, #4
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	9103      	str	r1, [sp, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	bfbb      	ittet	lt
 8006430:	425b      	neglt	r3, r3
 8006432:	f042 0202 	orrlt.w	r2, r2, #2
 8006436:	9307      	strge	r3, [sp, #28]
 8006438:	9307      	strlt	r3, [sp, #28]
 800643a:	bfb8      	it	lt
 800643c:	9204      	strlt	r2, [sp, #16]
 800643e:	7823      	ldrb	r3, [r4, #0]
 8006440:	2b2e      	cmp	r3, #46	@ 0x2e
 8006442:	d10a      	bne.n	800645a <_vfiprintf_r+0x156>
 8006444:	7863      	ldrb	r3, [r4, #1]
 8006446:	2b2a      	cmp	r3, #42	@ 0x2a
 8006448:	d132      	bne.n	80064b0 <_vfiprintf_r+0x1ac>
 800644a:	9b03      	ldr	r3, [sp, #12]
 800644c:	3402      	adds	r4, #2
 800644e:	1d1a      	adds	r2, r3, #4
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	9203      	str	r2, [sp, #12]
 8006454:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006458:	9305      	str	r3, [sp, #20]
 800645a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006524 <_vfiprintf_r+0x220>
 800645e:	2203      	movs	r2, #3
 8006460:	4650      	mov	r0, sl
 8006462:	7821      	ldrb	r1, [r4, #0]
 8006464:	f7fe f971 	bl	800474a <memchr>
 8006468:	b138      	cbz	r0, 800647a <_vfiprintf_r+0x176>
 800646a:	2240      	movs	r2, #64	@ 0x40
 800646c:	9b04      	ldr	r3, [sp, #16]
 800646e:	eba0 000a 	sub.w	r0, r0, sl
 8006472:	4082      	lsls	r2, r0
 8006474:	4313      	orrs	r3, r2
 8006476:	3401      	adds	r4, #1
 8006478:	9304      	str	r3, [sp, #16]
 800647a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800647e:	2206      	movs	r2, #6
 8006480:	4829      	ldr	r0, [pc, #164]	@ (8006528 <_vfiprintf_r+0x224>)
 8006482:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006486:	f7fe f960 	bl	800474a <memchr>
 800648a:	2800      	cmp	r0, #0
 800648c:	d03f      	beq.n	800650e <_vfiprintf_r+0x20a>
 800648e:	4b27      	ldr	r3, [pc, #156]	@ (800652c <_vfiprintf_r+0x228>)
 8006490:	bb1b      	cbnz	r3, 80064da <_vfiprintf_r+0x1d6>
 8006492:	9b03      	ldr	r3, [sp, #12]
 8006494:	3307      	adds	r3, #7
 8006496:	f023 0307 	bic.w	r3, r3, #7
 800649a:	3308      	adds	r3, #8
 800649c:	9303      	str	r3, [sp, #12]
 800649e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a0:	443b      	add	r3, r7
 80064a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80064a4:	e76a      	b.n	800637c <_vfiprintf_r+0x78>
 80064a6:	460c      	mov	r4, r1
 80064a8:	2001      	movs	r0, #1
 80064aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80064ae:	e7a8      	b.n	8006402 <_vfiprintf_r+0xfe>
 80064b0:	2300      	movs	r3, #0
 80064b2:	f04f 0c0a 	mov.w	ip, #10
 80064b6:	4619      	mov	r1, r3
 80064b8:	3401      	adds	r4, #1
 80064ba:	9305      	str	r3, [sp, #20]
 80064bc:	4620      	mov	r0, r4
 80064be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064c2:	3a30      	subs	r2, #48	@ 0x30
 80064c4:	2a09      	cmp	r2, #9
 80064c6:	d903      	bls.n	80064d0 <_vfiprintf_r+0x1cc>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0c6      	beq.n	800645a <_vfiprintf_r+0x156>
 80064cc:	9105      	str	r1, [sp, #20]
 80064ce:	e7c4      	b.n	800645a <_vfiprintf_r+0x156>
 80064d0:	4604      	mov	r4, r0
 80064d2:	2301      	movs	r3, #1
 80064d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80064d8:	e7f0      	b.n	80064bc <_vfiprintf_r+0x1b8>
 80064da:	ab03      	add	r3, sp, #12
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	462a      	mov	r2, r5
 80064e0:	4630      	mov	r0, r6
 80064e2:	4b13      	ldr	r3, [pc, #76]	@ (8006530 <_vfiprintf_r+0x22c>)
 80064e4:	a904      	add	r1, sp, #16
 80064e6:	f7fd fbcd 	bl	8003c84 <_printf_float>
 80064ea:	4607      	mov	r7, r0
 80064ec:	1c78      	adds	r0, r7, #1
 80064ee:	d1d6      	bne.n	800649e <_vfiprintf_r+0x19a>
 80064f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064f2:	07d9      	lsls	r1, r3, #31
 80064f4:	d405      	bmi.n	8006502 <_vfiprintf_r+0x1fe>
 80064f6:	89ab      	ldrh	r3, [r5, #12]
 80064f8:	059a      	lsls	r2, r3, #22
 80064fa:	d402      	bmi.n	8006502 <_vfiprintf_r+0x1fe>
 80064fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064fe:	f7fe f923 	bl	8004748 <__retarget_lock_release_recursive>
 8006502:	89ab      	ldrh	r3, [r5, #12]
 8006504:	065b      	lsls	r3, r3, #25
 8006506:	f53f af1f 	bmi.w	8006348 <_vfiprintf_r+0x44>
 800650a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800650c:	e71e      	b.n	800634c <_vfiprintf_r+0x48>
 800650e:	ab03      	add	r3, sp, #12
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	462a      	mov	r2, r5
 8006514:	4630      	mov	r0, r6
 8006516:	4b06      	ldr	r3, [pc, #24]	@ (8006530 <_vfiprintf_r+0x22c>)
 8006518:	a904      	add	r1, sp, #16
 800651a:	f7fd fe51 	bl	80041c0 <_printf_i>
 800651e:	e7e4      	b.n	80064ea <_vfiprintf_r+0x1e6>
 8006520:	08006b30 	.word	0x08006b30
 8006524:	08006b36 	.word	0x08006b36
 8006528:	08006b3a 	.word	0x08006b3a
 800652c:	08003c85 	.word	0x08003c85
 8006530:	080062e1 	.word	0x080062e1

08006534 <__swbuf_r>:
 8006534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006536:	460e      	mov	r6, r1
 8006538:	4614      	mov	r4, r2
 800653a:	4605      	mov	r5, r0
 800653c:	b118      	cbz	r0, 8006546 <__swbuf_r+0x12>
 800653e:	6a03      	ldr	r3, [r0, #32]
 8006540:	b90b      	cbnz	r3, 8006546 <__swbuf_r+0x12>
 8006542:	f7fd ffe9 	bl	8004518 <__sinit>
 8006546:	69a3      	ldr	r3, [r4, #24]
 8006548:	60a3      	str	r3, [r4, #8]
 800654a:	89a3      	ldrh	r3, [r4, #12]
 800654c:	071a      	lsls	r2, r3, #28
 800654e:	d501      	bpl.n	8006554 <__swbuf_r+0x20>
 8006550:	6923      	ldr	r3, [r4, #16]
 8006552:	b943      	cbnz	r3, 8006566 <__swbuf_r+0x32>
 8006554:	4621      	mov	r1, r4
 8006556:	4628      	mov	r0, r5
 8006558:	f000 f82a 	bl	80065b0 <__swsetup_r>
 800655c:	b118      	cbz	r0, 8006566 <__swbuf_r+0x32>
 800655e:	f04f 37ff 	mov.w	r7, #4294967295
 8006562:	4638      	mov	r0, r7
 8006564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	6922      	ldr	r2, [r4, #16]
 800656a:	b2f6      	uxtb	r6, r6
 800656c:	1a98      	subs	r0, r3, r2
 800656e:	6963      	ldr	r3, [r4, #20]
 8006570:	4637      	mov	r7, r6
 8006572:	4283      	cmp	r3, r0
 8006574:	dc05      	bgt.n	8006582 <__swbuf_r+0x4e>
 8006576:	4621      	mov	r1, r4
 8006578:	4628      	mov	r0, r5
 800657a:	f7ff fd9b 	bl	80060b4 <_fflush_r>
 800657e:	2800      	cmp	r0, #0
 8006580:	d1ed      	bne.n	800655e <__swbuf_r+0x2a>
 8006582:	68a3      	ldr	r3, [r4, #8]
 8006584:	3b01      	subs	r3, #1
 8006586:	60a3      	str	r3, [r4, #8]
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	6022      	str	r2, [r4, #0]
 800658e:	701e      	strb	r6, [r3, #0]
 8006590:	6962      	ldr	r2, [r4, #20]
 8006592:	1c43      	adds	r3, r0, #1
 8006594:	429a      	cmp	r2, r3
 8006596:	d004      	beq.n	80065a2 <__swbuf_r+0x6e>
 8006598:	89a3      	ldrh	r3, [r4, #12]
 800659a:	07db      	lsls	r3, r3, #31
 800659c:	d5e1      	bpl.n	8006562 <__swbuf_r+0x2e>
 800659e:	2e0a      	cmp	r6, #10
 80065a0:	d1df      	bne.n	8006562 <__swbuf_r+0x2e>
 80065a2:	4621      	mov	r1, r4
 80065a4:	4628      	mov	r0, r5
 80065a6:	f7ff fd85 	bl	80060b4 <_fflush_r>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d0d9      	beq.n	8006562 <__swbuf_r+0x2e>
 80065ae:	e7d6      	b.n	800655e <__swbuf_r+0x2a>

080065b0 <__swsetup_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4b29      	ldr	r3, [pc, #164]	@ (8006658 <__swsetup_r+0xa8>)
 80065b4:	4605      	mov	r5, r0
 80065b6:	6818      	ldr	r0, [r3, #0]
 80065b8:	460c      	mov	r4, r1
 80065ba:	b118      	cbz	r0, 80065c4 <__swsetup_r+0x14>
 80065bc:	6a03      	ldr	r3, [r0, #32]
 80065be:	b90b      	cbnz	r3, 80065c4 <__swsetup_r+0x14>
 80065c0:	f7fd ffaa 	bl	8004518 <__sinit>
 80065c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065c8:	0719      	lsls	r1, r3, #28
 80065ca:	d422      	bmi.n	8006612 <__swsetup_r+0x62>
 80065cc:	06da      	lsls	r2, r3, #27
 80065ce:	d407      	bmi.n	80065e0 <__swsetup_r+0x30>
 80065d0:	2209      	movs	r2, #9
 80065d2:	602a      	str	r2, [r5, #0]
 80065d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295
 80065dc:	81a3      	strh	r3, [r4, #12]
 80065de:	e033      	b.n	8006648 <__swsetup_r+0x98>
 80065e0:	0758      	lsls	r0, r3, #29
 80065e2:	d512      	bpl.n	800660a <__swsetup_r+0x5a>
 80065e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065e6:	b141      	cbz	r1, 80065fa <__swsetup_r+0x4a>
 80065e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065ec:	4299      	cmp	r1, r3
 80065ee:	d002      	beq.n	80065f6 <__swsetup_r+0x46>
 80065f0:	4628      	mov	r0, r5
 80065f2:	f7fe ff09 	bl	8005408 <_free_r>
 80065f6:	2300      	movs	r3, #0
 80065f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006600:	81a3      	strh	r3, [r4, #12]
 8006602:	2300      	movs	r3, #0
 8006604:	6063      	str	r3, [r4, #4]
 8006606:	6923      	ldr	r3, [r4, #16]
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	89a3      	ldrh	r3, [r4, #12]
 800660c:	f043 0308 	orr.w	r3, r3, #8
 8006610:	81a3      	strh	r3, [r4, #12]
 8006612:	6923      	ldr	r3, [r4, #16]
 8006614:	b94b      	cbnz	r3, 800662a <__swsetup_r+0x7a>
 8006616:	89a3      	ldrh	r3, [r4, #12]
 8006618:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800661c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006620:	d003      	beq.n	800662a <__swsetup_r+0x7a>
 8006622:	4621      	mov	r1, r4
 8006624:	4628      	mov	r0, r5
 8006626:	f000 f882 	bl	800672e <__smakebuf_r>
 800662a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800662e:	f013 0201 	ands.w	r2, r3, #1
 8006632:	d00a      	beq.n	800664a <__swsetup_r+0x9a>
 8006634:	2200      	movs	r2, #0
 8006636:	60a2      	str	r2, [r4, #8]
 8006638:	6962      	ldr	r2, [r4, #20]
 800663a:	4252      	negs	r2, r2
 800663c:	61a2      	str	r2, [r4, #24]
 800663e:	6922      	ldr	r2, [r4, #16]
 8006640:	b942      	cbnz	r2, 8006654 <__swsetup_r+0xa4>
 8006642:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006646:	d1c5      	bne.n	80065d4 <__swsetup_r+0x24>
 8006648:	bd38      	pop	{r3, r4, r5, pc}
 800664a:	0799      	lsls	r1, r3, #30
 800664c:	bf58      	it	pl
 800664e:	6962      	ldrpl	r2, [r4, #20]
 8006650:	60a2      	str	r2, [r4, #8]
 8006652:	e7f4      	b.n	800663e <__swsetup_r+0x8e>
 8006654:	2000      	movs	r0, #0
 8006656:	e7f7      	b.n	8006648 <__swsetup_r+0x98>
 8006658:	2000001c 	.word	0x2000001c

0800665c <_raise_r>:
 800665c:	291f      	cmp	r1, #31
 800665e:	b538      	push	{r3, r4, r5, lr}
 8006660:	4605      	mov	r5, r0
 8006662:	460c      	mov	r4, r1
 8006664:	d904      	bls.n	8006670 <_raise_r+0x14>
 8006666:	2316      	movs	r3, #22
 8006668:	6003      	str	r3, [r0, #0]
 800666a:	f04f 30ff 	mov.w	r0, #4294967295
 800666e:	bd38      	pop	{r3, r4, r5, pc}
 8006670:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006672:	b112      	cbz	r2, 800667a <_raise_r+0x1e>
 8006674:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006678:	b94b      	cbnz	r3, 800668e <_raise_r+0x32>
 800667a:	4628      	mov	r0, r5
 800667c:	f000 f830 	bl	80066e0 <_getpid_r>
 8006680:	4622      	mov	r2, r4
 8006682:	4601      	mov	r1, r0
 8006684:	4628      	mov	r0, r5
 8006686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800668a:	f000 b817 	b.w	80066bc <_kill_r>
 800668e:	2b01      	cmp	r3, #1
 8006690:	d00a      	beq.n	80066a8 <_raise_r+0x4c>
 8006692:	1c59      	adds	r1, r3, #1
 8006694:	d103      	bne.n	800669e <_raise_r+0x42>
 8006696:	2316      	movs	r3, #22
 8006698:	6003      	str	r3, [r0, #0]
 800669a:	2001      	movs	r0, #1
 800669c:	e7e7      	b.n	800666e <_raise_r+0x12>
 800669e:	2100      	movs	r1, #0
 80066a0:	4620      	mov	r0, r4
 80066a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80066a6:	4798      	blx	r3
 80066a8:	2000      	movs	r0, #0
 80066aa:	e7e0      	b.n	800666e <_raise_r+0x12>

080066ac <raise>:
 80066ac:	4b02      	ldr	r3, [pc, #8]	@ (80066b8 <raise+0xc>)
 80066ae:	4601      	mov	r1, r0
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	f7ff bfd3 	b.w	800665c <_raise_r>
 80066b6:	bf00      	nop
 80066b8:	2000001c 	.word	0x2000001c

080066bc <_kill_r>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	2300      	movs	r3, #0
 80066c0:	4d06      	ldr	r5, [pc, #24]	@ (80066dc <_kill_r+0x20>)
 80066c2:	4604      	mov	r4, r0
 80066c4:	4608      	mov	r0, r1
 80066c6:	4611      	mov	r1, r2
 80066c8:	602b      	str	r3, [r5, #0]
 80066ca:	f7fb fab4 	bl	8001c36 <_kill>
 80066ce:	1c43      	adds	r3, r0, #1
 80066d0:	d102      	bne.n	80066d8 <_kill_r+0x1c>
 80066d2:	682b      	ldr	r3, [r5, #0]
 80066d4:	b103      	cbz	r3, 80066d8 <_kill_r+0x1c>
 80066d6:	6023      	str	r3, [r4, #0]
 80066d8:	bd38      	pop	{r3, r4, r5, pc}
 80066da:	bf00      	nop
 80066dc:	200003d4 	.word	0x200003d4

080066e0 <_getpid_r>:
 80066e0:	f7fb baa2 	b.w	8001c28 <_getpid>

080066e4 <__swhatbuf_r>:
 80066e4:	b570      	push	{r4, r5, r6, lr}
 80066e6:	460c      	mov	r4, r1
 80066e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ec:	4615      	mov	r5, r2
 80066ee:	2900      	cmp	r1, #0
 80066f0:	461e      	mov	r6, r3
 80066f2:	b096      	sub	sp, #88	@ 0x58
 80066f4:	da0c      	bge.n	8006710 <__swhatbuf_r+0x2c>
 80066f6:	89a3      	ldrh	r3, [r4, #12]
 80066f8:	2100      	movs	r1, #0
 80066fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80066fe:	bf14      	ite	ne
 8006700:	2340      	movne	r3, #64	@ 0x40
 8006702:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006706:	2000      	movs	r0, #0
 8006708:	6031      	str	r1, [r6, #0]
 800670a:	602b      	str	r3, [r5, #0]
 800670c:	b016      	add	sp, #88	@ 0x58
 800670e:	bd70      	pop	{r4, r5, r6, pc}
 8006710:	466a      	mov	r2, sp
 8006712:	f000 f849 	bl	80067a8 <_fstat_r>
 8006716:	2800      	cmp	r0, #0
 8006718:	dbed      	blt.n	80066f6 <__swhatbuf_r+0x12>
 800671a:	9901      	ldr	r1, [sp, #4]
 800671c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006720:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006724:	4259      	negs	r1, r3
 8006726:	4159      	adcs	r1, r3
 8006728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800672c:	e7eb      	b.n	8006706 <__swhatbuf_r+0x22>

0800672e <__smakebuf_r>:
 800672e:	898b      	ldrh	r3, [r1, #12]
 8006730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006732:	079d      	lsls	r5, r3, #30
 8006734:	4606      	mov	r6, r0
 8006736:	460c      	mov	r4, r1
 8006738:	d507      	bpl.n	800674a <__smakebuf_r+0x1c>
 800673a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800673e:	6023      	str	r3, [r4, #0]
 8006740:	6123      	str	r3, [r4, #16]
 8006742:	2301      	movs	r3, #1
 8006744:	6163      	str	r3, [r4, #20]
 8006746:	b003      	add	sp, #12
 8006748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800674a:	466a      	mov	r2, sp
 800674c:	ab01      	add	r3, sp, #4
 800674e:	f7ff ffc9 	bl	80066e4 <__swhatbuf_r>
 8006752:	9f00      	ldr	r7, [sp, #0]
 8006754:	4605      	mov	r5, r0
 8006756:	4639      	mov	r1, r7
 8006758:	4630      	mov	r0, r6
 800675a:	f7fe fec7 	bl	80054ec <_malloc_r>
 800675e:	b948      	cbnz	r0, 8006774 <__smakebuf_r+0x46>
 8006760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006764:	059a      	lsls	r2, r3, #22
 8006766:	d4ee      	bmi.n	8006746 <__smakebuf_r+0x18>
 8006768:	f023 0303 	bic.w	r3, r3, #3
 800676c:	f043 0302 	orr.w	r3, r3, #2
 8006770:	81a3      	strh	r3, [r4, #12]
 8006772:	e7e2      	b.n	800673a <__smakebuf_r+0xc>
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800677a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800677e:	81a3      	strh	r3, [r4, #12]
 8006780:	9b01      	ldr	r3, [sp, #4]
 8006782:	6020      	str	r0, [r4, #0]
 8006784:	b15b      	cbz	r3, 800679e <__smakebuf_r+0x70>
 8006786:	4630      	mov	r0, r6
 8006788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800678c:	f000 f81e 	bl	80067cc <_isatty_r>
 8006790:	b128      	cbz	r0, 800679e <__smakebuf_r+0x70>
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	f023 0303 	bic.w	r3, r3, #3
 8006798:	f043 0301 	orr.w	r3, r3, #1
 800679c:	81a3      	strh	r3, [r4, #12]
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	431d      	orrs	r5, r3
 80067a2:	81a5      	strh	r5, [r4, #12]
 80067a4:	e7cf      	b.n	8006746 <__smakebuf_r+0x18>
	...

080067a8 <_fstat_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	2300      	movs	r3, #0
 80067ac:	4d06      	ldr	r5, [pc, #24]	@ (80067c8 <_fstat_r+0x20>)
 80067ae:	4604      	mov	r4, r0
 80067b0:	4608      	mov	r0, r1
 80067b2:	4611      	mov	r1, r2
 80067b4:	602b      	str	r3, [r5, #0]
 80067b6:	f7fb fa9d 	bl	8001cf4 <_fstat>
 80067ba:	1c43      	adds	r3, r0, #1
 80067bc:	d102      	bne.n	80067c4 <_fstat_r+0x1c>
 80067be:	682b      	ldr	r3, [r5, #0]
 80067c0:	b103      	cbz	r3, 80067c4 <_fstat_r+0x1c>
 80067c2:	6023      	str	r3, [r4, #0]
 80067c4:	bd38      	pop	{r3, r4, r5, pc}
 80067c6:	bf00      	nop
 80067c8:	200003d4 	.word	0x200003d4

080067cc <_isatty_r>:
 80067cc:	b538      	push	{r3, r4, r5, lr}
 80067ce:	2300      	movs	r3, #0
 80067d0:	4d05      	ldr	r5, [pc, #20]	@ (80067e8 <_isatty_r+0x1c>)
 80067d2:	4604      	mov	r4, r0
 80067d4:	4608      	mov	r0, r1
 80067d6:	602b      	str	r3, [r5, #0]
 80067d8:	f7fb fa9b 	bl	8001d12 <_isatty>
 80067dc:	1c43      	adds	r3, r0, #1
 80067de:	d102      	bne.n	80067e6 <_isatty_r+0x1a>
 80067e0:	682b      	ldr	r3, [r5, #0]
 80067e2:	b103      	cbz	r3, 80067e6 <_isatty_r+0x1a>
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	bd38      	pop	{r3, r4, r5, pc}
 80067e8:	200003d4 	.word	0x200003d4

080067ec <_init>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	bf00      	nop
 80067f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067f2:	bc08      	pop	{r3}
 80067f4:	469e      	mov	lr, r3
 80067f6:	4770      	bx	lr

080067f8 <_fini>:
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	bf00      	nop
 80067fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fe:	bc08      	pop	{r3}
 8006800:	469e      	mov	lr, r3
 8006802:	4770      	bx	lr
