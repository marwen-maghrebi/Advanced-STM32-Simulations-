
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ae4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08006bf8  08006bf8  00007bf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070d0  080070d0  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080070d0  080070d0  000080d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070d8  080070d8  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070d8  080070d8  000080d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070dc  080070dc  000080dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080070e0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  200001d4  080072b4  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  080072b4  000093e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000918d  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab0  00000000  00000000  0001238a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  00013e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000070f  00000000  00000000  00014788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017da7  00000000  00000000  00014e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a895  00000000  00000000  0002cc3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000840f5  00000000  00000000  000374d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb5c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003834  00000000  00000000  000bb60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000bee40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006bdc 	.word	0x08006bdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006bdc 	.word	0x08006bdc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <writeRegister8>:
/**
  * @brief Write an 8-bit value to the specified register.
  * @param addr Register address.
  * @param data Data to write.
*/
void writeRegister8(uint8_t addr, uint8_t data) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	460a      	mov	r2, r1
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	4613      	mov	r3, r2
 80010de:	71bb      	strb	r3, [r7, #6]
    addr |= 0x80; // MSB=1 for write, make sure top bit is set
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010e6:	71fb      	strb	r3, [r7, #7]

    uint8_t buffer[2] = {addr, data};
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	733b      	strb	r3, [r7, #12]
 80010ec:	79bb      	ldrb	r3, [r7, #6]
 80010ee:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2110      	movs	r1, #16
 80010f4:	4809      	ldr	r0, [pc, #36]	@ (800111c <writeRegister8+0x4c>)
 80010f6:	f001 fa3f 	bl	8002578 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi, buffer, 2, SPI_DELAY);
 80010fa:	f107 010c 	add.w	r1, r7, #12
 80010fe:	23ff      	movs	r3, #255	@ 0xff
 8001100:	2202      	movs	r2, #2
 8001102:	4807      	ldr	r0, [pc, #28]	@ (8001120 <writeRegister8+0x50>)
 8001104:	f001 fee4 	bl	8002ed0 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	2110      	movs	r1, #16
 800110c:	4803      	ldr	r0, [pc, #12]	@ (800111c <writeRegister8+0x4c>)
 800110e:	f001 fa33 	bl	8002578 <HAL_GPIO_WritePin>
}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40010800 	.word	0x40010800
 8001120:	200001f4 	.word	0x200001f4

08001124 <readRegisterN>:
  * @brief Read multiple bytes from the specified register.
  * @param addr Register address.
  * @param buffer Buffer to store the read data.
  * @param n Number of bytes to read.
*/
void readRegisterN(uint8_t addr, uint8_t buffer[], uint8_t n) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	4613      	mov	r3, r2
 8001132:	71bb      	strb	r3, [r7, #6]
    addr &= 0x7F; // MSB=0 for read, make sure top bit is not set
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800113a:	b2db      	uxtb	r3, r3
 800113c:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2110      	movs	r1, #16
 8001142:	480c      	ldr	r0, [pc, #48]	@ (8001174 <readRegisterN+0x50>)
 8001144:	f001 fa18 	bl	8002578 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi, &addr, 1, SPI_DELAY);
 8001148:	1df9      	adds	r1, r7, #7
 800114a:	23ff      	movs	r3, #255	@ 0xff
 800114c:	2201      	movs	r2, #1
 800114e:	480a      	ldr	r0, [pc, #40]	@ (8001178 <readRegisterN+0x54>)
 8001150:	f001 febe 	bl	8002ed0 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi, buffer, n, SPI_DELAY);
 8001154:	79bb      	ldrb	r3, [r7, #6]
 8001156:	b29a      	uxth	r2, r3
 8001158:	23ff      	movs	r3, #255	@ 0xff
 800115a:	6839      	ldr	r1, [r7, #0]
 800115c:	4806      	ldr	r0, [pc, #24]	@ (8001178 <readRegisterN+0x54>)
 800115e:	f001 fffb 	bl	8003158 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001162:	2201      	movs	r2, #1
 8001164:	2110      	movs	r1, #16
 8001166:	4803      	ldr	r0, [pc, #12]	@ (8001174 <readRegisterN+0x50>)
 8001168:	f001 fa06 	bl	8002578 <HAL_GPIO_WritePin>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40010800 	.word	0x40010800
 8001178:	200001f4 	.word	0x200001f4

0800117c <readRegister8>:

uint8_t readRegister8(uint8_t addr) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
    uint8_t ret = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
    readRegisterN(addr, &ret, 1);
 800118a:	f107 010f 	add.w	r1, r7, #15
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2201      	movs	r2, #1
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ffc6 	bl	8001124 <readRegisterN>
    return ret;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <readRegister16>:
/**
 * @brief Read a 16-bit value from the specified register.
 * @param addr Register address.
 * @return 16-bit value read from the register.
 */
uint16_t readRegister16(uint8_t addr) {
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[2] = {0, 0};
 80011ac:	2300      	movs	r3, #0
 80011ae:	81bb      	strh	r3, [r7, #12]
    readRegisterN(addr, buffer, 2);
 80011b0:	f107 010c 	add.w	r1, r7, #12
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	2202      	movs	r2, #2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ffb3 	bl	8001124 <readRegisterN>

    uint16_t ret = (uint16_t)buffer[0]; // Cast to uint16_t before left shift
 80011be:	7b3b      	ldrb	r3, [r7, #12]
 80011c0:	81fb      	strh	r3, [r7, #14]
    ret <<= 8;
 80011c2:	89fb      	ldrh	r3, [r7, #14]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	81fb      	strh	r3, [r7, #14]
    ret |= buffer[1];
 80011c8:	7b7b      	ldrb	r3, [r7, #13]
 80011ca:	461a      	mov	r2, r3
 80011cc:	89fb      	ldrh	r3, [r7, #14]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	81fb      	strh	r3, [r7, #14]

    return ret;
 80011d2:	89fb      	ldrh	r3, [r7, #14]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <setWires>:

/**
 * @brief Set the number of wires for the RTD configuration.
 * @param wires Number of wires configuration (2, 3, or 4-wire).
 */
void setWires(max31865_numwires_t wires) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
    uint8_t t = readRegister8(MAX31865_CONFIG_REG);  // Fixed: Removed extra 't'
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff ffc8 	bl	800117c <readRegister8>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
    if (wires == MAX31865_3WIRE) {  // Fixed: Changed MIRE to WIRE
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d104      	bne.n	8001200 <setWires+0x24>
        t |= MAX31865_CONFIG_3WIRE;  // Fixed: Changed != to |=
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	f043 0310 	orr.w	r3, r3, #16
 80011fc:	73fb      	strb	r3, [r7, #15]
 80011fe:	e003      	b.n	8001208 <setWires+0x2c>
    } else {
        t &= ~MAX31865_CONFIG_3WIRE;  // Fixed: Changed MIRE to WIRE
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	f023 0310 	bic.w	r3, r3, #16
 8001206:	73fb      	strb	r3, [r7, #15]
    }
    writeRegister8(MAX31865_CONFIG_REG, t);
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	4619      	mov	r1, r3
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff ff5f 	bl	80010d0 <writeRegister8>
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <enableBias>:

void enableBias(bool b) {
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	71fb      	strb	r3, [r7, #7]
    uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff ffa9 	bl	800117c <readRegister8>
 800122a:	4603      	mov	r3, r0
 800122c:	73fb      	strb	r3, [r7, #15]
    if (b) {
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d004      	beq.n	800123e <enableBias+0x24>
        t |= MAX31865_CONFIG_BIAS; // Enable bias
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800123a:	73fb      	strb	r3, [r7, #15]
 800123c:	e003      	b.n	8001246 <enableBias+0x2c>
    } else {
        t &= ~MAX31865_CONFIG_BIAS; // Disable bias
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001244:	73fb      	strb	r3, [r7, #15]
    }
    writeRegister8(MAX31865_CONFIG_REG, t);
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4619      	mov	r1, r3
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff ff40 	bl	80010d0 <writeRegister8>
}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <autoConvert>:

/**
 * @brief Enable or disable automatic conversion mode.
 * @param b True to enable, false to disable.
 */
void autoConvert(bool b) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
    uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff ff8a 	bl	800117c <readRegister8>
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]
    if (b) {
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d004      	beq.n	800127c <autoConvert+0x24>
        t |= MAX31865_CONFIG_MODEAUTO; // Enable auto convert
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001278:	73fb      	strb	r3, [r7, #15]
 800127a:	e003      	b.n	8001284 <autoConvert+0x2c>
    } else {
        t &= ~MAX31865_CONFIG_MODEAUTO; // Disable auto convert
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001282:	73fb      	strb	r3, [r7, #15]
    }
    writeRegister8(MAX31865_CONFIG_REG, t);
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	4619      	mov	r1, r3
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff ff21 	bl	80010d0 <writeRegister8>
}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <setThresholds>:
/**
 * @brief Set the high and low fault thresholds.
 * @param lower Lower threshold value.
 * @param upper Upper threshold value.
 */
void setThresholds(uint16_t lower, uint16_t upper) {
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	460a      	mov	r2, r1
 80012a0:	80fb      	strh	r3, [r7, #6]
 80012a2:	4613      	mov	r3, r2
 80012a4:	80bb      	strh	r3, [r7, #4]
    writeRegister8(MAX31865_LFAULTLSB_REG, lower & 0xFF);
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4619      	mov	r1, r3
 80012ac:	2006      	movs	r0, #6
 80012ae:	f7ff ff0f 	bl	80010d0 <writeRegister8>
    writeRegister8(MAX31865_LFAULTMSB_REG, lower >> 8);
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	4619      	mov	r1, r3
 80012bc:	2005      	movs	r0, #5
 80012be:	f7ff ff07 	bl	80010d0 <writeRegister8>
    writeRegister8(MAX31865_HFAULTLSB_REG, upper & 0xFF);
 80012c2:	88bb      	ldrh	r3, [r7, #4]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	4619      	mov	r1, r3
 80012c8:	2004      	movs	r0, #4
 80012ca:	f7ff ff01 	bl	80010d0 <writeRegister8>
    writeRegister8(MAX31865_HFAULTMSB_REG, upper >> 8);
 80012ce:	88bb      	ldrh	r3, [r7, #4]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4619      	mov	r1, r3
 80012d8:	2003      	movs	r0, #3
 80012da:	f7ff fef9 	bl	80010d0 <writeRegister8>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <begin>:
 */
uint16_t getUpperThreshold(void) {
    return readRegister16(MAX31865_HFAULTLSB_REG);
}

bool begin(max31865_numwires_t wires) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
    if (HAL_SPI_Init(&hspi) == HAL_OK) {
 80012f2:	4812      	ldr	r0, [pc, #72]	@ (800133c <begin+0x54>)
 80012f4:	f001 fd68 	bl	8002dc8 <HAL_SPI_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d103      	bne.n	8001306 <begin+0x1e>
        initialized = true;
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <begin+0x58>)
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
 8001304:	e002      	b.n	800130c <begin+0x24>
    } else {
        initialized = false;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <begin+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
    }

    setWires(wires);
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff64 	bl	80011dc <setWires>
    enableBias(false);
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff ff80 	bl	800121a <enableBias>
    autoConvert(false);
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff ff9c 	bl	8001258 <autoConvert>
    setThresholds(0, 0xFFFF);
 8001320:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff ffb6 	bl	8001296 <setThresholds>
    clearFault();
 800132a:	f000 f9d3 	bl	80016d4 <clearFault>

    return initialized;
 800132e:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <begin+0x58>)
 8001330:	781b      	ldrb	r3, [r3, #0]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200001f4 	.word	0x200001f4
 8001340:	200001f0 	.word	0x200001f0

08001344 <readRTD>:

/**
 * @brief Read the RTD resistance value.
 * @return Raw RTD resistance value.
 */
uint16_t readRTD(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
    clearFault();
 800134a:	f000 f9c3 	bl	80016d4 <clearFault>
    enableBias(true);
 800134e:	2001      	movs	r0, #1
 8001350:	f7ff ff63 	bl	800121a <enableBias>
    HAL_Delay(10);  // Allow bias to stabilize
 8001354:	200a      	movs	r0, #10
 8001356:	f000 fe8b 	bl	8002070 <HAL_Delay>

    // Trigger one-shot measurement
    uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff ff0e 	bl	800117c <readRegister8>
 8001360:	4603      	mov	r3, r0
 8001362:	71fb      	strb	r3, [r7, #7]
    t |= MAX31865_CONFIG_1SHOT;
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f043 0320 	orr.w	r3, r3, #32
 800136a:	71fb      	strb	r3, [r7, #7]
    writeRegister8(MAX31865_CONFIG_REG, t);
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4619      	mov	r1, r3
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff fead 	bl	80010d0 <writeRegister8>

    HAL_Delay(65);  // Wait for conversion (max 66ms per datasheet)
 8001376:	2041      	movs	r0, #65	@ 0x41
 8001378:	f000 fe7a 	bl	8002070 <HAL_Delay>

    // Read RTD value (MSB and LSB registers)
    uint16_t rtd = readRegister16(MAX31865_RTDMSB_REG);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff ff10 	bl	80011a2 <readRegister16>
 8001382:	4603      	mov	r3, r0
 8001384:	80bb      	strh	r3, [r7, #4]

    enableBias(false);  // Disable bias current to reduce self-heating
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff ff47 	bl	800121a <enableBias>
    rtd >>= 1;         // Remove fault bit (LSB)
 800138c:	88bb      	ldrh	r3, [r7, #4]
 800138e:	085b      	lsrs	r3, r3, #1
 8001390:	80bb      	strh	r3, [r7, #4]

    return rtd;
 8001392:	88bb      	ldrh	r3, [r7, #4]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <temperature>:
 * @brief Calculate temperature from RTD reading.
 * @param RTDnominal Nominal RTD resistance at 0°C (e.g., 100.0 for PT100).
 * @param refResistor Reference resistor value in ohms.
 * @return Calculated temperature in degrees Celsius.
 */
float temperature(float RTDnominal, float refResistor) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
    return calculateTemperature(readRTD(), RTDnominal, refResistor);
 80013a6:	f7ff ffcd 	bl	8001344 <readRTD>
 80013aa:	4603      	mov	r3, r0
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f805 	bl	80013c0 <calculateTemperature>
 80013b6:	4603      	mov	r3, r0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <calculateTemperature>:
 * @param RTDraw Raw RTD resistance value.
 * @param RTDnominal Nominal RTD resistance at 0°C (e.g., 100.0 for PT100).
 * @param refResistor Reference resistor value in ohms.
 * @return Calculated temperature in degrees Celsius.
 */
float calculateTemperature(uint16_t RTDraw, float RTDnominal, float refResistor) {
 80013c0:	b5b0      	push	{r4, r5, r7, lr}
 80013c2:	b08c      	sub	sp, #48	@ 0x30
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	81fb      	strh	r3, [r7, #14]
    float Z1, Z2, Z3, Z4, Rt, temp;

    // Convert raw ADC value to resistance
    Rt = RTDraw;
 80013ce:	89fb      	ldrh	r3, [r7, #14]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fc5f 	bl	8000c94 <__aeabi_ui2f>
 80013d6:	4603      	mov	r3, r0
 80013d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Rt /= 32768;        // Normalize to 0-1 range (15-bit ADC + 1 fault bit)
 80013da:	f04f 418e 	mov.w	r1, #1191182336	@ 0x47000000
 80013de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013e0:	f7ff fd64 	bl	8000eac <__aeabi_fdiv>
 80013e4:	4603      	mov	r3, r0
 80013e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Rt *= refResistor;  // Convert to ohms
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013ec:	f7ff fcaa 	bl	8000d44 <__aeabi_fmul>
 80013f0:	4603      	mov	r3, r0
 80013f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Calculate positive temperature coefficients
    Z1 = -RTD_A;
 80013f4:	4b90      	ldr	r3, [pc, #576]	@ (8001638 <calculateTemperature+0x278>)
 80013f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    Z2 = RTD_A * RTD_A - (4 * RTD_B);
 80013f8:	4b90      	ldr	r3, [pc, #576]	@ (800163c <calculateTemperature+0x27c>)
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
    Z3 = (4 * RTD_B) / RTDnominal;
 80013fc:	68b8      	ldr	r0, [r7, #8]
 80013fe:	f7ff f813 	bl	8000428 <__aeabi_f2d>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	a180      	add	r1, pc, #512	@ (adr r1, 8001608 <calculateTemperature+0x248>)
 8001408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800140c:	f7ff f98e 	bl	800072c <__aeabi_ddiv>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fb36 	bl	8000a88 <__aeabi_d2f>
 800141c:	4603      	mov	r3, r0
 800141e:	623b      	str	r3, [r7, #32]
    Z4 = 2 * RTD_B;
 8001420:	4b87      	ldr	r3, [pc, #540]	@ (8001640 <calculateTemperature+0x280>)
 8001422:	61fb      	str	r3, [r7, #28]

    temp = Z2 + (Z3 * Rt);
 8001424:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001426:	6a38      	ldr	r0, [r7, #32]
 8001428:	f7ff fc8c 	bl	8000d44 <__aeabi_fmul>
 800142c:	4603      	mov	r3, r0
 800142e:	4619      	mov	r1, r3
 8001430:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001432:	f7ff fb7f 	bl	8000b34 <__addsf3>
 8001436:	4603      	mov	r3, r0
 8001438:	61bb      	str	r3, [r7, #24]
    temp = (sqrt(temp) + Z1) / Z4;
 800143a:	69b8      	ldr	r0, [r7, #24]
 800143c:	f7fe fff4 	bl	8000428 <__aeabi_f2d>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f005 fad2 	bl	80069f0 <sqrt>
 800144c:	4604      	mov	r4, r0
 800144e:	460d      	mov	r5, r1
 8001450:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001452:	f7fe ffe9 	bl	8000428 <__aeabi_f2d>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4620      	mov	r0, r4
 800145c:	4629      	mov	r1, r5
 800145e:	f7fe fe85 	bl	800016c <__adddf3>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4614      	mov	r4, r2
 8001468:	461d      	mov	r5, r3
 800146a:	69f8      	ldr	r0, [r7, #28]
 800146c:	f7fe ffdc 	bl	8000428 <__aeabi_f2d>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7ff f958 	bl	800072c <__aeabi_ddiv>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fb00 	bl	8000a88 <__aeabi_d2f>
 8001488:	4603      	mov	r3, r0
 800148a:	61bb      	str	r3, [r7, #24]

    if (temp >= 0) return temp;
 800148c:	f04f 0100 	mov.w	r1, #0
 8001490:	69b8      	ldr	r0, [r7, #24]
 8001492:	f7ff fe09 	bl	80010a8 <__aeabi_fcmpge>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <calculateTemperature+0xe0>
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	e0af      	b.n	8001600 <calculateTemperature+0x240>

    // Negative temperature calculation (polynomial approximation)
    Rt /= RTDnominal;  // Normalize to nominal resistance
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80014a4:	f7ff fd02 	bl	8000eac <__aeabi_fdiv>
 80014a8:	4603      	mov	r3, r0
 80014aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Rt *= 100;        // Normalize to 100 ohms (PT100 standard)
 80014ac:	4965      	ldr	r1, [pc, #404]	@ (8001644 <calculateTemperature+0x284>)
 80014ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80014b0:	f7ff fc48 	bl	8000d44 <__aeabi_fmul>
 80014b4:	4603      	mov	r3, r0
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    float rpoly = Rt;
 80014b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ba:	617b      	str	r3, [r7, #20]

    temp = -242.02;
 80014bc:	4b62      	ldr	r3, [pc, #392]	@ (8001648 <calculateTemperature+0x288>)
 80014be:	61bb      	str	r3, [r7, #24]
    temp += 2.2228 * rpoly;
 80014c0:	69b8      	ldr	r0, [r7, #24]
 80014c2:	f7fe ffb1 	bl	8000428 <__aeabi_f2d>
 80014c6:	4604      	mov	r4, r0
 80014c8:	460d      	mov	r5, r1
 80014ca:	6978      	ldr	r0, [r7, #20]
 80014cc:	f7fe ffac 	bl	8000428 <__aeabi_f2d>
 80014d0:	a34f      	add	r3, pc, #316	@ (adr r3, 8001610 <calculateTemperature+0x250>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7fe ffff 	bl	80004d8 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4620      	mov	r0, r4
 80014e0:	4629      	mov	r1, r5
 80014e2:	f7fe fe43 	bl	800016c <__adddf3>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff facb 	bl	8000a88 <__aeabi_d2f>
 80014f2:	4603      	mov	r3, r0
 80014f4:	61bb      	str	r3, [r7, #24]
    rpoly *= Rt;  // r^2
 80014f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80014f8:	6978      	ldr	r0, [r7, #20]
 80014fa:	f7ff fc23 	bl	8000d44 <__aeabi_fmul>
 80014fe:	4603      	mov	r3, r0
 8001500:	617b      	str	r3, [r7, #20]
    temp += 2.5859e-3 * rpoly;
 8001502:	69b8      	ldr	r0, [r7, #24]
 8001504:	f7fe ff90 	bl	8000428 <__aeabi_f2d>
 8001508:	4604      	mov	r4, r0
 800150a:	460d      	mov	r5, r1
 800150c:	6978      	ldr	r0, [r7, #20]
 800150e:	f7fe ff8b 	bl	8000428 <__aeabi_f2d>
 8001512:	a341      	add	r3, pc, #260	@ (adr r3, 8001618 <calculateTemperature+0x258>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7fe ffde 	bl	80004d8 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4620      	mov	r0, r4
 8001522:	4629      	mov	r1, r5
 8001524:	f7fe fe22 	bl	800016c <__adddf3>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4610      	mov	r0, r2
 800152e:	4619      	mov	r1, r3
 8001530:	f7ff faaa 	bl	8000a88 <__aeabi_d2f>
 8001534:	4603      	mov	r3, r0
 8001536:	61bb      	str	r3, [r7, #24]
    rpoly *= Rt;  // r^3
 8001538:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff fc02 	bl	8000d44 <__aeabi_fmul>
 8001540:	4603      	mov	r3, r0
 8001542:	617b      	str	r3, [r7, #20]
    temp -= 4.8260e-6 * rpoly;
 8001544:	69b8      	ldr	r0, [r7, #24]
 8001546:	f7fe ff6f 	bl	8000428 <__aeabi_f2d>
 800154a:	4604      	mov	r4, r0
 800154c:	460d      	mov	r5, r1
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f7fe ff6a 	bl	8000428 <__aeabi_f2d>
 8001554:	a332      	add	r3, pc, #200	@ (adr r3, 8001620 <calculateTemperature+0x260>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7fe ffbd 	bl	80004d8 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f7fe fdff 	bl	8000168 <__aeabi_dsub>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fa89 	bl	8000a88 <__aeabi_d2f>
 8001576:	4603      	mov	r3, r0
 8001578:	61bb      	str	r3, [r7, #24]
    rpoly *= Rt;  // r^4
 800157a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800157c:	6978      	ldr	r0, [r7, #20]
 800157e:	f7ff fbe1 	bl	8000d44 <__aeabi_fmul>
 8001582:	4603      	mov	r3, r0
 8001584:	617b      	str	r3, [r7, #20]
    temp -= 2.8183e-8 * rpoly;
 8001586:	69b8      	ldr	r0, [r7, #24]
 8001588:	f7fe ff4e 	bl	8000428 <__aeabi_f2d>
 800158c:	4604      	mov	r4, r0
 800158e:	460d      	mov	r5, r1
 8001590:	6978      	ldr	r0, [r7, #20]
 8001592:	f7fe ff49 	bl	8000428 <__aeabi_f2d>
 8001596:	a324      	add	r3, pc, #144	@ (adr r3, 8001628 <calculateTemperature+0x268>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7fe ff9c 	bl	80004d8 <__aeabi_dmul>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4620      	mov	r0, r4
 80015a6:	4629      	mov	r1, r5
 80015a8:	f7fe fdde 	bl	8000168 <__aeabi_dsub>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f7ff fa68 	bl	8000a88 <__aeabi_d2f>
 80015b8:	4603      	mov	r3, r0
 80015ba:	61bb      	str	r3, [r7, #24]
    rpoly *= Rt;  // r^5
 80015bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80015be:	6978      	ldr	r0, [r7, #20]
 80015c0:	f7ff fbc0 	bl	8000d44 <__aeabi_fmul>
 80015c4:	4603      	mov	r3, r0
 80015c6:	617b      	str	r3, [r7, #20]
    temp += 1.5243e-10 * rpoly;
 80015c8:	69b8      	ldr	r0, [r7, #24]
 80015ca:	f7fe ff2d 	bl	8000428 <__aeabi_f2d>
 80015ce:	4604      	mov	r4, r0
 80015d0:	460d      	mov	r5, r1
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	f7fe ff28 	bl	8000428 <__aeabi_f2d>
 80015d8:	a315      	add	r3, pc, #84	@ (adr r3, 8001630 <calculateTemperature+0x270>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7fe ff7b 	bl	80004d8 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4620      	mov	r0, r4
 80015e8:	4629      	mov	r1, r5
 80015ea:	f7fe fdbf 	bl	800016c <__adddf3>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff fa47 	bl	8000a88 <__aeabi_d2f>
 80015fa:	4603      	mov	r3, r0
 80015fc:	61bb      	str	r3, [r7, #24]

    return temp;
 80015fe:	69bb      	ldr	r3, [r7, #24]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3730      	adds	r7, #48	@ 0x30
 8001604:	46bd      	mov	sp, r7
 8001606:	bdb0      	pop	{r4, r5, r7, pc}
 8001608:	ee19ce88 	.word	0xee19ce88
 800160c:	bec360af 	.word	0xbec360af
 8001610:	5dcc63f1 	.word	0x5dcc63f1
 8001614:	4001c84b 	.word	0x4001c84b
 8001618:	7dc882bb 	.word	0x7dc882bb
 800161c:	3f652f06 	.word	0x3f652f06
 8001620:	c766c293 	.word	0xc766c293
 8001624:	3ed43de0 	.word	0x3ed43de0
 8001628:	513156ce 	.word	0x513156ce
 800162c:	3e5e42e2 	.word	0x3e5e42e2
 8001630:	61e4fa3e 	.word	0x61e4fa3e
 8001634:	3de4f327 	.word	0x3de4f327
 8001638:	bb801132 	.word	0xbb801132
 800163c:	37938317 	.word	0x37938317
 8001640:	b59b057f 	.word	0xb59b057f
 8001644:	42c80000 	.word	0x42c80000
 8001648:	c372051f 	.word	0xc372051f

0800164c <readFault>:
/**
 * @brief Read fault status with optional fault detection cycle control
 * @param fault_cycle Type of fault detection cycle to perform
 * @return Fault status byte (bitmask of MAX31865_FAULT_* values)
 */
uint8_t readFault(max31865_fault_cycle_t fault_cycle) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
    if (fault_cycle) {
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d033      	beq.n	80016c4 <readFault+0x78>
        uint8_t cfg_reg = readRegister8(MAX31865_CONFIG_REG);
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff fd8d 	bl	800117c <readRegister8>
 8001662:	4603      	mov	r3, r0
 8001664:	73fb      	strb	r3, [r7, #15]
        cfg_reg &= 0x11; // Preserve wire and filter configuration bits
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	f003 0311 	and.w	r3, r3, #17
 800166c:	73fb      	strb	r3, [r7, #15]

        switch (fault_cycle) {
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d01c      	beq.n	80016ae <readFault+0x62>
 8001674:	2b03      	cmp	r3, #3
 8001676:	dc24      	bgt.n	80016c2 <readFault+0x76>
 8001678:	2b01      	cmp	r3, #1
 800167a:	d002      	beq.n	8001682 <readFault+0x36>
 800167c:	2b02      	cmp	r3, #2
 800167e:	d00c      	beq.n	800169a <readFault+0x4e>
                writeRegister8(MAX31865_CONFIG_REG, (cfg_reg | 0b10001100));
                return 0; // Return immediately for manual finish

            case MAX31865_FAULT_NONE:
            default:
                break;
 8001680:	e01f      	b.n	80016c2 <readFault+0x76>
                writeRegister8(MAX31865_CONFIG_REG, (cfg_reg | 0b10000100));
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	f063 037b 	orn	r3, r3, #123	@ 0x7b
 8001688:	b2db      	uxtb	r3, r3
 800168a:	4619      	mov	r1, r3
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff fd1f 	bl	80010d0 <writeRegister8>
                HAL_Delay(1); // Short delay for auto fault detection
 8001692:	2001      	movs	r0, #1
 8001694:	f000 fcec 	bl	8002070 <HAL_Delay>
                break;
 8001698:	e014      	b.n	80016c4 <readFault+0x78>
                writeRegister8(MAX31865_CONFIG_REG, (cfg_reg | 0b10001000));
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	f063 0377 	orn	r3, r3, #119	@ 0x77
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4619      	mov	r1, r3
 80016a4:	2000      	movs	r0, #0
 80016a6:	f7ff fd13 	bl	80010d0 <writeRegister8>
                return 0; // Return immediately for manual run
 80016aa:	2300      	movs	r3, #0
 80016ac:	e00e      	b.n	80016cc <readFault+0x80>
                writeRegister8(MAX31865_CONFIG_REG, (cfg_reg | 0b10001100));
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	f063 0373 	orn	r3, r3, #115	@ 0x73
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4619      	mov	r1, r3
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff fd09 	bl	80010d0 <writeRegister8>
                return 0; // Return immediately for manual finish
 80016be:	2300      	movs	r3, #0
 80016c0:	e004      	b.n	80016cc <readFault+0x80>
                break;
 80016c2:	bf00      	nop
        }
    }
    return readRegister8(MAX31865_FAULTSTAT_REG);
 80016c4:	2007      	movs	r0, #7
 80016c6:	f7ff fd59 	bl	800117c <readRegister8>
 80016ca:	4603      	mov	r3, r0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <clearFault>:
/**
 * @brief Clear fault status on the MAX31865.
 */
void clearFault(void) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
    uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff fd4e 	bl	800117c <readRegister8>
 80016e0:	4603      	mov	r3, r0
 80016e2:	71fb      	strb	r3, [r7, #7]
    t &= ~0x2C;  // Clear fault detection bits (bits 2, 3, and 5)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	f023 032c 	bic.w	r3, r3, #44	@ 0x2c
 80016ea:	71fb      	strb	r3, [r7, #7]
    t |= MAX31865_CONFIG_FAULTSTAT;  // Clear fault status
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	71fb      	strb	r3, [r7, #7]
    writeRegister8(MAX31865_CONFIG_REG, t);
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	4619      	mov	r1, r3
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff fce9 	bl	80010d0 <writeRegister8>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b098      	sub	sp, #96	@ 0x60
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint16_t rtd = 0;                       // Variable to store raw RTD value
 800170e:	2300      	movs	r3, #0
 8001710:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
	uint8_t fault;                          // Variable to store fault status
	max31865_fault_cycle_t fault_cycle = MAX31865_FAULT_AUTO;  // Default to auto fault detection
 8001714:	2301      	movs	r3, #1
 8001716:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800171a:	f000 fc47 	bl	8001fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800171e:	f000 f975 	bl	8001a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001722:	f000 fa0f 	bl	8001b44 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001726:	f000 f9ad 	bl	8001a84 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800172a:	f000 f9e1 	bl	8001af0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  begin(MAX31865_4WIRE);
 800172e:	2000      	movs	r0, #0
 8001730:	f7ff fdda 	bl	80012e8 <begin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rtd = readRTD();
 8001734:	f7ff fe06 	bl	8001344 <readRTD>
 8001738:	4603      	mov	r3, r0
 800173a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
	  ratio = rtd;
 800173e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff faa6 	bl	8000c94 <__aeabi_ui2f>
 8001748:	4603      	mov	r3, r0
 800174a:	65bb      	str	r3, [r7, #88]	@ 0x58
	  ratio /= 32768;  // Convert raw 15-bit value to ratio (0-1)
 800174c:	f04f 418e 	mov.w	r1, #1191182336	@ 0x47000000
 8001750:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001752:	f7ff fbab 	bl	8000eac <__aeabi_fdiv>
 8001756:	4603      	mov	r3, r0
 8001758:	65bb      	str	r3, [r7, #88]	@ 0x58

	  // Print raw RTD value
	  sprintf(MSG, "RTD value: %u", rtd);  // Changed %d to %u for unsigned
 800175a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800175e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001762:	4999      	ldr	r1, [pc, #612]	@ (80019c8 <main+0x2c0>)
 8001764:	4618      	mov	r0, r3
 8001766:	f003 f805 	bl	8004774 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), 100);
 800176a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fcee 	bl	8000150 <strlen>
 8001774:	4603      	mov	r3, r0
 8001776:	b29a      	uxth	r2, r3
 8001778:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800177c:	2364      	movs	r3, #100	@ 0x64
 800177e:	4893      	ldr	r0, [pc, #588]	@ (80019cc <main+0x2c4>)
 8001780:	f002 f907 	bl	8003992 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 10);  // Fixed case and line endings
 8001784:	230a      	movs	r3, #10
 8001786:	2202      	movs	r2, #2
 8001788:	4991      	ldr	r1, [pc, #580]	@ (80019d0 <main+0x2c8>)
 800178a:	4890      	ldr	r0, [pc, #576]	@ (80019cc <main+0x2c4>)
 800178c:	f002 f901 	bl	8003992 <HAL_UART_Transmit>

	  // Print ratio
	  sprintf(MSG, "Ratio = %.8f", ratio);
 8001790:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001792:	f7fe fe49 	bl	8000428 <__aeabi_f2d>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800179e:	498d      	ldr	r1, [pc, #564]	@ (80019d4 <main+0x2cc>)
 80017a0:	f002 ffe8 	bl	8004774 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), 100);
 80017a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fcd1 	bl	8000150 <strlen>
 80017ae:	4603      	mov	r3, r0
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80017b6:	2364      	movs	r3, #100	@ 0x64
 80017b8:	4884      	ldr	r0, [pc, #528]	@ (80019cc <main+0x2c4>)
 80017ba:	f002 f8ea 	bl	8003992 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 10);
 80017be:	230a      	movs	r3, #10
 80017c0:	2202      	movs	r2, #2
 80017c2:	4983      	ldr	r1, [pc, #524]	@ (80019d0 <main+0x2c8>)
 80017c4:	4881      	ldr	r0, [pc, #516]	@ (80019cc <main+0x2c4>)
 80017c6:	f002 f8e4 	bl	8003992 <HAL_UART_Transmit>

	  // Print calculated resistance
	  sprintf(MSG, "Resistance = %.2f ohms", PREF * ratio);  // Changed RREF to PREF
 80017ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80017cc:	f7fe fe2c 	bl	8000428 <__aeabi_f2d>
 80017d0:	a37b      	add	r3, pc, #492	@ (adr r3, 80019c0 <main+0x2b8>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	f7fe fe7f 	bl	80004d8 <__aeabi_dmul>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80017e2:	497d      	ldr	r1, [pc, #500]	@ (80019d8 <main+0x2d0>)
 80017e4:	f002 ffc6 	bl	8004774 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), 100);
 80017e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fcaf 	bl	8000150 <strlen>
 80017f2:	4603      	mov	r3, r0
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80017fa:	2364      	movs	r3, #100	@ 0x64
 80017fc:	4873      	ldr	r0, [pc, #460]	@ (80019cc <main+0x2c4>)
 80017fe:	f002 f8c8 	bl	8003992 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 10);
 8001802:	230a      	movs	r3, #10
 8001804:	2202      	movs	r2, #2
 8001806:	4972      	ldr	r1, [pc, #456]	@ (80019d0 <main+0x2c8>)
 8001808:	4870      	ldr	r0, [pc, #448]	@ (80019cc <main+0x2c4>)
 800180a:	f002 f8c2 	bl	8003992 <HAL_UART_Transmit>

	  // Print temperature with decorative borders
	  //sprintf(MSG, "Temperature = %.2f°C", temperature(RNOMINAL, PREF));
	  sprintf(MSG, "Temperature = %.2f\xB0""C", temperature(RNOMINAL, PREF));
 800180e:	4973      	ldr	r1, [pc, #460]	@ (80019dc <main+0x2d4>)
 8001810:	4873      	ldr	r0, [pc, #460]	@ (80019e0 <main+0x2d8>)
 8001812:	f7ff fdc3 	bl	800139c <temperature>
 8001816:	4603      	mov	r3, r0
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe05 	bl	8000428 <__aeabi_f2d>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001826:	496f      	ldr	r1, [pc, #444]	@ (80019e4 <main+0x2dc>)
 8001828:	f002 ffa4 	bl	8004774 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"**********", 10, 50);
 800182c:	2332      	movs	r3, #50	@ 0x32
 800182e:	220a      	movs	r2, #10
 8001830:	496d      	ldr	r1, [pc, #436]	@ (80019e8 <main+0x2e0>)
 8001832:	4866      	ldr	r0, [pc, #408]	@ (80019cc <main+0x2c4>)
 8001834:	f002 f8ad 	bl	8003992 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), 100);
 8001838:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fc87 	bl	8000150 <strlen>
 8001842:	4603      	mov	r3, r0
 8001844:	b29a      	uxth	r2, r3
 8001846:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800184a:	2364      	movs	r3, #100	@ 0x64
 800184c:	485f      	ldr	r0, [pc, #380]	@ (80019cc <main+0x2c4>)
 800184e:	f002 f8a0 	bl	8003992 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"**********", 10, 50);
 8001852:	2332      	movs	r3, #50	@ 0x32
 8001854:	220a      	movs	r2, #10
 8001856:	4964      	ldr	r1, [pc, #400]	@ (80019e8 <main+0x2e0>)
 8001858:	485c      	ldr	r0, [pc, #368]	@ (80019cc <main+0x2c4>)
 800185a:	f002 f89a 	bl	8003992 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n\r\n", 4, 10);
 800185e:	230a      	movs	r3, #10
 8001860:	2204      	movs	r2, #4
 8001862:	4962      	ldr	r1, [pc, #392]	@ (80019ec <main+0x2e4>)
 8001864:	4859      	ldr	r0, [pc, #356]	@ (80019cc <main+0x2c4>)
 8001866:	f002 f894 	bl	8003992 <HAL_UART_Transmit>

	  // Check for faults
	  fault = readFault(fault_cycle);
 800186a:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff feec 	bl	800164c <readFault>
 8001874:	4603      	mov	r3, r0
 8001876:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	  if (fault) {
 800187a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8099 	beq.w	80019b6 <main+0x2ae>
	      sprintf(buffer, "Fault 0x%02X\r\n", fault);  // Fixed format specifier
 8001884:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	4959      	ldr	r1, [pc, #356]	@ (80019f0 <main+0x2e8>)
 800188c:	4618      	mov	r0, r3
 800188e:	f002 ff71 	bl	8004774 <siprintf>
	      HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fc5b 	bl	8000150 <strlen>
 800189a:	4603      	mov	r3, r0
 800189c:	b29a      	uxth	r2, r3
 800189e:	1d39      	adds	r1, r7, #4
 80018a0:	2364      	movs	r3, #100	@ 0x64
 80018a2:	484a      	ldr	r0, [pc, #296]	@ (80019cc <main+0x2c4>)
 80018a4:	f002 f875 	bl	8003992 <HAL_UART_Transmit>

	      if (fault & MAX31865_FAULT_HIGHTHRESH) {
 80018a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	da0f      	bge.n	80018d0 <main+0x1c8>
	          sprintf(buffer, "RTD High Threshold\r\n");
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	4950      	ldr	r1, [pc, #320]	@ (80019f4 <main+0x2ec>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f002 ff5d 	bl	8004774 <siprintf>
	          HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fc47 	bl	8000150 <strlen>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	1d39      	adds	r1, r7, #4
 80018c8:	2364      	movs	r3, #100	@ 0x64
 80018ca:	4840      	ldr	r0, [pc, #256]	@ (80019cc <main+0x2c4>)
 80018cc:	f002 f861 	bl	8003992 <HAL_UART_Transmit>
	      }
	      if (fault & MAX31865_FAULT_LOWTHRESH) {
 80018d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80018d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00f      	beq.n	80018fc <main+0x1f4>
	          sprintf(buffer, "RTD Low Threshold\r\n");
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	4946      	ldr	r1, [pc, #280]	@ (80019f8 <main+0x2f0>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 ff47 	bl	8004774 <siprintf>
	          HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fc31 	bl	8000150 <strlen>
 80018ee:	4603      	mov	r3, r0
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	1d39      	adds	r1, r7, #4
 80018f4:	2364      	movs	r3, #100	@ 0x64
 80018f6:	4835      	ldr	r0, [pc, #212]	@ (80019cc <main+0x2c4>)
 80018f8:	f002 f84b 	bl	8003992 <HAL_UART_Transmit>
	      }
	      if (fault & MAX31865_FAULT_REFINLOW) {
 80018fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00f      	beq.n	8001928 <main+0x220>
	          sprintf(buffer, "REFIN- < 0.85 x Bias\r\n");
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	493c      	ldr	r1, [pc, #240]	@ (80019fc <main+0x2f4>)
 800190c:	4618      	mov	r0, r3
 800190e:	f002 ff31 	bl	8004774 <siprintf>
	          HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fc1b 	bl	8000150 <strlen>
 800191a:	4603      	mov	r3, r0
 800191c:	b29a      	uxth	r2, r3
 800191e:	1d39      	adds	r1, r7, #4
 8001920:	2364      	movs	r3, #100	@ 0x64
 8001922:	482a      	ldr	r0, [pc, #168]	@ (80019cc <main+0x2c4>)
 8001924:	f002 f835 	bl	8003992 <HAL_UART_Transmit>
	      }
	      if (fault & MAX31865_FAULT_REFINHIGH) {
 8001928:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	2b00      	cmp	r3, #0
 8001932:	d010      	beq.n	8001956 <main+0x24e>
	          sprintf(buffer, "REFIN+ > 0.85 x Bias - FORCE+ open\r\n");
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	4932      	ldr	r1, [pc, #200]	@ (8001a00 <main+0x2f8>)
 8001938:	4618      	mov	r0, r3
 800193a:	f002 ff1b 	bl	8004774 <siprintf>
	          HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fc05 	bl	8000150 <strlen>
 8001946:	4603      	mov	r3, r0
 8001948:	b29a      	uxth	r2, r3
 800194a:	1d39      	adds	r1, r7, #4
 800194c:	f04f 33ff 	mov.w	r3, #4294967295
 8001950:	481e      	ldr	r0, [pc, #120]	@ (80019cc <main+0x2c4>)
 8001952:	f002 f81e 	bl	8003992 <HAL_UART_Transmit>
	      }

	      if (fault & MAX31865_FAULT_RTDINLOW) {
 8001956:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d010      	beq.n	8001984 <main+0x27c>
	          sprintf(buffer, "RTDIN- < 0.85 x Bias - FORCE- open\r\n");
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4927      	ldr	r1, [pc, #156]	@ (8001a04 <main+0x2fc>)
 8001966:	4618      	mov	r0, r3
 8001968:	f002 ff04 	bl	8004774 <siprintf>
	          HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fbee 	bl	8000150 <strlen>
 8001974:	4603      	mov	r3, r0
 8001976:	b29a      	uxth	r2, r3
 8001978:	1d39      	adds	r1, r7, #4
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	4813      	ldr	r0, [pc, #76]	@ (80019cc <main+0x2c4>)
 8001980:	f002 f807 	bl	8003992 <HAL_UART_Transmit>
	      }

	      if (fault & MAX31865_FAULT_OVUV) {
 8001984:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d010      	beq.n	80019b2 <main+0x2aa>
	          sprintf(buffer, "Under/Over voltage\r\n");
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	491d      	ldr	r1, [pc, #116]	@ (8001a08 <main+0x300>)
 8001994:	4618      	mov	r0, r3
 8001996:	f002 feed 	bl	8004774 <siprintf>
	          HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fbd7 	bl	8000150 <strlen>
 80019a2:	4603      	mov	r3, r0
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	1d39      	adds	r1, r7, #4
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ac:	4807      	ldr	r0, [pc, #28]	@ (80019cc <main+0x2c4>)
 80019ae:	f001 fff0 	bl	8003992 <HAL_UART_Transmit>
	      }

	      clearFault();
 80019b2:	f7ff fe8f 	bl	80016d4 <clearFault>
	  }
      HAL_Delay(1000);  // Fixed delay function and reasonable delay time
 80019b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019ba:	f000 fb59 	bl	8002070 <HAL_Delay>
	  rtd = readRTD();
 80019be:	e6b9      	b.n	8001734 <main+0x2c>
 80019c0:	00000000 	.word	0x00000000
 80019c4:	407ae000 	.word	0x407ae000
 80019c8:	08006bf8 	.word	0x08006bf8
 80019cc:	2000024c 	.word	0x2000024c
 80019d0:	08006c08 	.word	0x08006c08
 80019d4:	08006c0c 	.word	0x08006c0c
 80019d8:	08006c1c 	.word	0x08006c1c
 80019dc:	43d70000 	.word	0x43d70000
 80019e0:	42c80000 	.word	0x42c80000
 80019e4:	08006c34 	.word	0x08006c34
 80019e8:	08006c4c 	.word	0x08006c4c
 80019ec:	08006c58 	.word	0x08006c58
 80019f0:	08006c60 	.word	0x08006c60
 80019f4:	08006c70 	.word	0x08006c70
 80019f8:	08006c88 	.word	0x08006c88
 80019fc:	08006c9c 	.word	0x08006c9c
 8001a00:	08006cb4 	.word	0x08006cb4
 8001a04:	08006cdc 	.word	0x08006cdc
 8001a08:	08006d04 	.word	0x08006d04

08001a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b090      	sub	sp, #64	@ 0x40
 8001a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a12:	f107 0318 	add.w	r3, r7, #24
 8001a16:	2228      	movs	r2, #40	@ 0x28
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 ff0f 	bl	800483e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a32:	2301      	movs	r3, #1
 8001a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a36:	2310      	movs	r3, #16
 8001a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a3e:	f107 0318 	add.w	r3, r7, #24
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fdb0 	bl	80025a8 <HAL_RCC_OscConfig>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001a4e:	f000 f8b7 	bl	8001bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a52:	230f      	movs	r3, #15
 8001a54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f001 f81e 	bl	8002aac <HAL_RCC_ClockConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001a76:	f000 f8a3 	bl	8001bc0 <Error_Handler>
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	3740      	adds	r7, #64	@ 0x40
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a88:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001a8a:	4a18      	ldr	r2, [pc, #96]	@ (8001aec <MX_SPI1_Init+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001a90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a96:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aa2:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001ab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ab4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac8:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001ad0:	220a      	movs	r2, #10
 8001ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ad4:	4804      	ldr	r0, [pc, #16]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001ad6:	f001 f977 	bl	8002dc8 <HAL_SPI_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ae0:	f000 f86e 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200001f4 	.word	0x200001f4
 8001aec:	40013000 	.word	0x40013000

08001af0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	@ (8001b40 <MX_USART1_UART_Init+0x50>)
 8001af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001afc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b14:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b16:	220c      	movs	r2, #12
 8001b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b20:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b26:	4805      	ldr	r0, [pc, #20]	@ (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b28:	f001 fee3 	bl	80038f2 <HAL_UART_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b32:	f000 f845 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000024c 	.word	0x2000024c
 8001b40:	40013800 	.word	0x40013800

08001b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b58:	4b17      	ldr	r3, [pc, #92]	@ (8001bb8 <MX_GPIO_Init+0x74>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a16      	ldr	r2, [pc, #88]	@ (8001bb8 <MX_GPIO_Init+0x74>)
 8001b5e:	f043 0304 	orr.w	r3, r3, #4
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b14      	ldr	r3, [pc, #80]	@ (8001bb8 <MX_GPIO_Init+0x74>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <MX_GPIO_Init+0x74>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a10      	ldr	r2, [pc, #64]	@ (8001bb8 <MX_GPIO_Init+0x74>)
 8001b76:	f043 0308 	orr.w	r3, r3, #8
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <MX_GPIO_Init+0x74>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	480b      	ldr	r0, [pc, #44]	@ (8001bbc <MX_GPIO_Init+0x78>)
 8001b8e:	f000 fcf3 	bl	8002578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001b92:	2310      	movs	r3, #16
 8001b94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4804      	ldr	r0, [pc, #16]	@ (8001bbc <MX_GPIO_Init+0x78>)
 8001baa:	f000 fb69 	bl	8002280 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010800 	.word	0x40010800

08001bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc4:	b672      	cpsid	i
}
 8001bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <Error_Handler+0x8>

08001bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd2:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <HAL_MspInit+0x5c>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	4a14      	ldr	r2, [pc, #80]	@ (8001c28 <HAL_MspInit+0x5c>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6193      	str	r3, [r2, #24]
 8001bde:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <HAL_MspInit+0x5c>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <HAL_MspInit+0x5c>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	4a0e      	ldr	r2, [pc, #56]	@ (8001c28 <HAL_MspInit+0x5c>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bf4:	61d3      	str	r3, [r2, #28]
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <HAL_MspInit+0x5c>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001c02:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <HAL_MspInit+0x60>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	4a04      	ldr	r2, [pc, #16]	@ (8001c2c <HAL_MspInit+0x60>)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010000 	.word	0x40010000

08001c30 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0310 	add.w	r3, r7, #16
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb8 <HAL_SPI_MspInit+0x88>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d12f      	bne.n	8001cb0 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c50:	4b1a      	ldr	r3, [pc, #104]	@ (8001cbc <HAL_SPI_MspInit+0x8c>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a19      	ldr	r2, [pc, #100]	@ (8001cbc <HAL_SPI_MspInit+0x8c>)
 8001c56:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <HAL_SPI_MspInit+0x8c>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c68:	4b14      	ldr	r3, [pc, #80]	@ (8001cbc <HAL_SPI_MspInit+0x8c>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a13      	ldr	r2, [pc, #76]	@ (8001cbc <HAL_SPI_MspInit+0x8c>)
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <HAL_SPI_MspInit+0x8c>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c80:	23a0      	movs	r3, #160	@ 0xa0
 8001c82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	f107 0310 	add.w	r3, r7, #16
 8001c90:	4619      	mov	r1, r3
 8001c92:	480b      	ldr	r0, [pc, #44]	@ (8001cc0 <HAL_SPI_MspInit+0x90>)
 8001c94:	f000 faf4 	bl	8002280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c98:	2340      	movs	r3, #64	@ 0x40
 8001c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4805      	ldr	r0, [pc, #20]	@ (8001cc0 <HAL_SPI_MspInit+0x90>)
 8001cac:	f000 fae8 	bl	8002280 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001cb0:	bf00      	nop
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40013000 	.word	0x40013000
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40010800 	.word	0x40010800

08001cc4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	@ 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a22      	ldr	r2, [pc, #136]	@ (8001d68 <HAL_UART_MspInit+0xa4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d13d      	bne.n	8001d60 <HAL_UART_MspInit+0x9c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ce4:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <HAL_UART_MspInit+0xa8>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	4a20      	ldr	r2, [pc, #128]	@ (8001d6c <HAL_UART_MspInit+0xa8>)
 8001cea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cee:	6193      	str	r3, [r2, #24]
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d6c <HAL_UART_MspInit+0xa8>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <HAL_UART_MspInit+0xa8>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4a1a      	ldr	r2, [pc, #104]	@ (8001d6c <HAL_UART_MspInit+0xa8>)
 8001d02:	f043 0308 	orr.w	r3, r3, #8
 8001d06:	6193      	str	r3, [r2, #24]
 8001d08:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <HAL_UART_MspInit+0xa8>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d14:	2340      	movs	r3, #64	@ 0x40
 8001d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	4619      	mov	r1, r3
 8001d26:	4812      	ldr	r0, [pc, #72]	@ (8001d70 <HAL_UART_MspInit+0xac>)
 8001d28:	f000 faaa 	bl	8002280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	480c      	ldr	r0, [pc, #48]	@ (8001d70 <HAL_UART_MspInit+0xac>)
 8001d40:	f000 fa9e 	bl	8002280 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001d44:	4b0b      	ldr	r3, [pc, #44]	@ (8001d74 <HAL_UART_MspInit+0xb0>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d5a:	4a06      	ldr	r2, [pc, #24]	@ (8001d74 <HAL_UART_MspInit+0xb0>)
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	6053      	str	r3, [r2, #4]

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d60:	bf00      	nop
 8001d62:	3728      	adds	r7, #40	@ 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40013800 	.word	0x40013800
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010c00 	.word	0x40010c00
 8001d74:	40010000 	.word	0x40010000

08001d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <NMI_Handler+0x4>

08001d80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <HardFault_Handler+0x4>

08001d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <MemManage_Handler+0x4>

08001d90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <BusFault_Handler+0x4>

08001d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <UsageFault_Handler+0x4>

08001da0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc8:	f000 f936 	bl	8002038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return 1;
 8001dd4:	2301      	movs	r3, #1
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <_kill>:

int _kill(int pid, int sig)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001de8:	f002 fd7c 	bl	80048e4 <__errno>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2216      	movs	r2, #22
 8001df0:	601a      	str	r2, [r3, #0]
  return -1;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_exit>:

void _exit (int status)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e06:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffe7 	bl	8001dde <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <_exit+0x12>

08001e14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	e00a      	b.n	8001e3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e26:	f3af 8000 	nop.w
 8001e2a:	4601      	mov	r1, r0
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	60ba      	str	r2, [r7, #8]
 8001e32:	b2ca      	uxtb	r2, r1
 8001e34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	dbf0      	blt.n	8001e26 <_read+0x12>
  }

  return len;
 8001e44:	687b      	ldr	r3, [r7, #4]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	e009      	b.n	8001e74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	60ba      	str	r2, [r7, #8]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	dbf1      	blt.n	8001e60 <_write+0x12>
  }
  return len;
 8001e7c:	687b      	ldr	r3, [r7, #4]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_close>:

int _close(int file)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eac:	605a      	str	r2, [r3, #4]
  return 0;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <_isatty>:

int _isatty(int file)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ec2:	2301      	movs	r3, #1
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr

08001ece <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b085      	sub	sp, #20
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
	...

08001ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef0:	4a14      	ldr	r2, [pc, #80]	@ (8001f44 <_sbrk+0x5c>)
 8001ef2:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <_sbrk+0x60>)
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001efc:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <_sbrk+0x64>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d102      	bne.n	8001f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f04:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <_sbrk+0x64>)
 8001f06:	4a12      	ldr	r2, [pc, #72]	@ (8001f50 <_sbrk+0x68>)
 8001f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d207      	bcs.n	8001f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f18:	f002 fce4 	bl	80048e4 <__errno>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	220c      	movs	r2, #12
 8001f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
 8001f26:	e009      	b.n	8001f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f28:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <_sbrk+0x64>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f2e:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <_sbrk+0x64>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	4a05      	ldr	r2, [pc, #20]	@ (8001f4c <_sbrk+0x64>)
 8001f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20002800 	.word	0x20002800
 8001f48:	00000400 	.word	0x00000400
 8001f4c:	20000294 	.word	0x20000294
 8001f50:	200003e8 	.word	0x200003e8

08001f54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f60:	f7ff fff8 	bl	8001f54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f64:	480b      	ldr	r0, [pc, #44]	@ (8001f94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f66:	490c      	ldr	r1, [pc, #48]	@ (8001f98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f68:	4a0c      	ldr	r2, [pc, #48]	@ (8001f9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f6c:	e002      	b.n	8001f74 <LoopCopyDataInit>

08001f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f72:	3304      	adds	r3, #4

08001f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f78:	d3f9      	bcc.n	8001f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7a:	4a09      	ldr	r2, [pc, #36]	@ (8001fa0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f7c:	4c09      	ldr	r4, [pc, #36]	@ (8001fa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f80:	e001      	b.n	8001f86 <LoopFillZerobss>

08001f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f84:	3204      	adds	r2, #4

08001f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f88:	d3fb      	bcc.n	8001f82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f8a:	f002 fcb1 	bl	80048f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f8e:	f7ff fbbb 	bl	8001708 <main>
  bx lr
 8001f92:	4770      	bx	lr
  ldr r0, =_sdata
 8001f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f98:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001f9c:	080070e0 	.word	0x080070e0
  ldr r2, =_sbss
 8001fa0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001fa4:	200003e8 	.word	0x200003e8

08001fa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fa8:	e7fe      	b.n	8001fa8 <ADC1_2_IRQHandler>
	...

08001fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <HAL_Init+0x28>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	@ (8001fd4 <HAL_Init+0x28>)
 8001fb6:	f043 0310 	orr.w	r3, r3, #16
 8001fba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 f92b 	bl	8002218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc2:	200f      	movs	r0, #15
 8001fc4:	f000 f808 	bl	8001fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc8:	f7ff fe00 	bl	8001bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40022000 	.word	0x40022000

08001fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe0:	4b12      	ldr	r3, [pc, #72]	@ (800202c <HAL_InitTick+0x54>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <HAL_InitTick+0x58>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f935 	bl	8002266 <HAL_SYSTICK_Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00e      	b.n	8002024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d80a      	bhi.n	8002022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200c:	2200      	movs	r2, #0
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f000 f90b 	bl	800222e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002018:	4a06      	ldr	r2, [pc, #24]	@ (8002034 <HAL_InitTick+0x5c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000000 	.word	0x20000000
 8002030:	20000008 	.word	0x20000008
 8002034:	20000004 	.word	0x20000004

08002038 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800203c:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <HAL_IncTick+0x1c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b05      	ldr	r3, [pc, #20]	@ (8002058 <HAL_IncTick+0x20>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a03      	ldr	r2, [pc, #12]	@ (8002058 <HAL_IncTick+0x20>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	20000008 	.word	0x20000008
 8002058:	20000298 	.word	0x20000298

0800205c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return uwTick;
 8002060:	4b02      	ldr	r3, [pc, #8]	@ (800206c <HAL_GetTick+0x10>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	20000298 	.word	0x20000298

08002070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002078:	f7ff fff0 	bl	800205c <HAL_GetTick>
 800207c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002088:	d005      	beq.n	8002096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800208a:	4b0a      	ldr	r3, [pc, #40]	@ (80020b4 <HAL_Delay+0x44>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4413      	add	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002096:	bf00      	nop
 8002098:	f7ff ffe0 	bl	800205c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d8f7      	bhi.n	8002098 <HAL_Delay+0x28>
  {
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000008 	.word	0x20000008

080020b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020d4:	4013      	ands	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ea:	4a04      	ldr	r2, [pc, #16]	@ (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	60d3      	str	r3, [r2, #12]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002104:	4b04      	ldr	r3, [pc, #16]	@ (8002118 <__NVIC_GetPriorityGrouping+0x18>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	0a1b      	lsrs	r3, r3, #8
 800210a:	f003 0307 	and.w	r3, r3, #7
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db0a      	blt.n	8002146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	490c      	ldr	r1, [pc, #48]	@ (8002168 <__NVIC_SetPriority+0x4c>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	440b      	add	r3, r1
 8002140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002144:	e00a      	b.n	800215c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4908      	ldr	r1, [pc, #32]	@ (800216c <__NVIC_SetPriority+0x50>)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	3b04      	subs	r3, #4
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	440b      	add	r3, r1
 800215a:	761a      	strb	r2, [r3, #24]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000e100 	.word	0xe000e100
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	@ 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f1c3 0307 	rsb	r3, r3, #7
 800218a:	2b04      	cmp	r3, #4
 800218c:	bf28      	it	cs
 800218e:	2304      	movcs	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3304      	adds	r3, #4
 8002196:	2b06      	cmp	r3, #6
 8002198:	d902      	bls.n	80021a0 <NVIC_EncodePriority+0x30>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b03      	subs	r3, #3
 800219e:	e000      	b.n	80021a2 <NVIC_EncodePriority+0x32>
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	4313      	orrs	r3, r2
         );
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	@ 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021e4:	d301      	bcc.n	80021ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00f      	b.n	800220a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002214 <SysTick_Config+0x40>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f2:	210f      	movs	r1, #15
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f7ff ff90 	bl	800211c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021fc:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <SysTick_Config+0x40>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002202:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <SysTick_Config+0x40>)
 8002204:	2207      	movs	r2, #7
 8002206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	e000e010 	.word	0xe000e010

08002218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff49 	bl	80020b8 <__NVIC_SetPriorityGrouping>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002240:	f7ff ff5e 	bl	8002100 <__NVIC_GetPriorityGrouping>
 8002244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f7ff ff90 	bl	8002170 <NVIC_EncodePriority>
 8002250:	4602      	mov	r2, r0
 8002252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff5f 	bl	800211c <__NVIC_SetPriority>
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff ffb0 	bl	80021d4 <SysTick_Config>
 8002274:	4603      	mov	r3, r0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b08b      	sub	sp, #44	@ 0x2c
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002292:	e161      	b.n	8002558 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002294:	2201      	movs	r2, #1
 8002296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	f040 8150 	bne.w	8002552 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4a97      	ldr	r2, [pc, #604]	@ (8002514 <HAL_GPIO_Init+0x294>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d05e      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022bc:	4a95      	ldr	r2, [pc, #596]	@ (8002514 <HAL_GPIO_Init+0x294>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d875      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022c2:	4a95      	ldr	r2, [pc, #596]	@ (8002518 <HAL_GPIO_Init+0x298>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d058      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022c8:	4a93      	ldr	r2, [pc, #588]	@ (8002518 <HAL_GPIO_Init+0x298>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d86f      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022ce:	4a93      	ldr	r2, [pc, #588]	@ (800251c <HAL_GPIO_Init+0x29c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d052      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022d4:	4a91      	ldr	r2, [pc, #580]	@ (800251c <HAL_GPIO_Init+0x29c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d869      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022da:	4a91      	ldr	r2, [pc, #580]	@ (8002520 <HAL_GPIO_Init+0x2a0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d04c      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022e0:	4a8f      	ldr	r2, [pc, #572]	@ (8002520 <HAL_GPIO_Init+0x2a0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d863      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022e6:	4a8f      	ldr	r2, [pc, #572]	@ (8002524 <HAL_GPIO_Init+0x2a4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d046      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022ec:	4a8d      	ldr	r2, [pc, #564]	@ (8002524 <HAL_GPIO_Init+0x2a4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d85d      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022f2:	2b12      	cmp	r3, #18
 80022f4:	d82a      	bhi.n	800234c <HAL_GPIO_Init+0xcc>
 80022f6:	2b12      	cmp	r3, #18
 80022f8:	d859      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002300 <HAL_GPIO_Init+0x80>)
 80022fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002300:	0800237b 	.word	0x0800237b
 8002304:	08002355 	.word	0x08002355
 8002308:	08002367 	.word	0x08002367
 800230c:	080023a9 	.word	0x080023a9
 8002310:	080023af 	.word	0x080023af
 8002314:	080023af 	.word	0x080023af
 8002318:	080023af 	.word	0x080023af
 800231c:	080023af 	.word	0x080023af
 8002320:	080023af 	.word	0x080023af
 8002324:	080023af 	.word	0x080023af
 8002328:	080023af 	.word	0x080023af
 800232c:	080023af 	.word	0x080023af
 8002330:	080023af 	.word	0x080023af
 8002334:	080023af 	.word	0x080023af
 8002338:	080023af 	.word	0x080023af
 800233c:	080023af 	.word	0x080023af
 8002340:	080023af 	.word	0x080023af
 8002344:	0800235d 	.word	0x0800235d
 8002348:	08002371 	.word	0x08002371
 800234c:	4a76      	ldr	r2, [pc, #472]	@ (8002528 <HAL_GPIO_Init+0x2a8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002352:	e02c      	b.n	80023ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	623b      	str	r3, [r7, #32]
          break;
 800235a:	e029      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	3304      	adds	r3, #4
 8002362:	623b      	str	r3, [r7, #32]
          break;
 8002364:	e024      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	3308      	adds	r3, #8
 800236c:	623b      	str	r3, [r7, #32]
          break;
 800236e:	e01f      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	330c      	adds	r3, #12
 8002376:	623b      	str	r3, [r7, #32]
          break;
 8002378:	e01a      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002382:	2304      	movs	r3, #4
 8002384:	623b      	str	r3, [r7, #32]
          break;
 8002386:	e013      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002390:	2308      	movs	r3, #8
 8002392:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	611a      	str	r2, [r3, #16]
          break;
 800239a:	e009      	b.n	80023b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800239c:	2308      	movs	r3, #8
 800239e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	615a      	str	r2, [r3, #20]
          break;
 80023a6:	e003      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023a8:	2300      	movs	r3, #0
 80023aa:	623b      	str	r3, [r7, #32]
          break;
 80023ac:	e000      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          break;
 80023ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2bff      	cmp	r3, #255	@ 0xff
 80023b4:	d801      	bhi.n	80023ba <HAL_GPIO_Init+0x13a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	e001      	b.n	80023be <HAL_GPIO_Init+0x13e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2bff      	cmp	r3, #255	@ 0xff
 80023c4:	d802      	bhi.n	80023cc <HAL_GPIO_Init+0x14c>
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	e002      	b.n	80023d2 <HAL_GPIO_Init+0x152>
 80023cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ce:	3b08      	subs	r3, #8
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	210f      	movs	r1, #15
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	401a      	ands	r2, r3
 80023e4:	6a39      	ldr	r1, [r7, #32]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	431a      	orrs	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 80a9 	beq.w	8002552 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002400:	4b4a      	ldr	r3, [pc, #296]	@ (800252c <HAL_GPIO_Init+0x2ac>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4a49      	ldr	r2, [pc, #292]	@ (800252c <HAL_GPIO_Init+0x2ac>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6193      	str	r3, [r2, #24]
 800240c:	4b47      	ldr	r3, [pc, #284]	@ (800252c <HAL_GPIO_Init+0x2ac>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002418:	4a45      	ldr	r2, [pc, #276]	@ (8002530 <HAL_GPIO_Init+0x2b0>)
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002424:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	220f      	movs	r2, #15
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a3d      	ldr	r2, [pc, #244]	@ (8002534 <HAL_GPIO_Init+0x2b4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d00d      	beq.n	8002460 <HAL_GPIO_Init+0x1e0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a3c      	ldr	r2, [pc, #240]	@ (8002538 <HAL_GPIO_Init+0x2b8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d007      	beq.n	800245c <HAL_GPIO_Init+0x1dc>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a3b      	ldr	r2, [pc, #236]	@ (800253c <HAL_GPIO_Init+0x2bc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d101      	bne.n	8002458 <HAL_GPIO_Init+0x1d8>
 8002454:	2302      	movs	r3, #2
 8002456:	e004      	b.n	8002462 <HAL_GPIO_Init+0x1e2>
 8002458:	2303      	movs	r3, #3
 800245a:	e002      	b.n	8002462 <HAL_GPIO_Init+0x1e2>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <HAL_GPIO_Init+0x1e2>
 8002460:	2300      	movs	r3, #0
 8002462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002464:	f002 0203 	and.w	r2, r2, #3
 8002468:	0092      	lsls	r2, r2, #2
 800246a:	4093      	lsls	r3, r2
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4313      	orrs	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002472:	492f      	ldr	r1, [pc, #188]	@ (8002530 <HAL_GPIO_Init+0x2b0>)
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	3302      	adds	r3, #2
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d006      	beq.n	800249a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800248c:	4b2c      	ldr	r3, [pc, #176]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	492b      	ldr	r1, [pc, #172]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]
 8002498:	e006      	b.n	80024a8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800249a:	4b29      	ldr	r3, [pc, #164]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	4927      	ldr	r1, [pc, #156]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024b4:	4b22      	ldr	r3, [pc, #136]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	4921      	ldr	r1, [pc, #132]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60cb      	str	r3, [r1, #12]
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	491d      	ldr	r1, [pc, #116]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024dc:	4b18      	ldr	r3, [pc, #96]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4917      	ldr	r1, [pc, #92]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
 80024e8:	e006      	b.n	80024f8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024ea:	4b15      	ldr	r3, [pc, #84]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	4913      	ldr	r1, [pc, #76]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01f      	beq.n	8002544 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002504:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	490d      	ldr	r1, [pc, #52]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	600b      	str	r3, [r1, #0]
 8002510:	e01f      	b.n	8002552 <HAL_GPIO_Init+0x2d2>
 8002512:	bf00      	nop
 8002514:	10320000 	.word	0x10320000
 8002518:	10310000 	.word	0x10310000
 800251c:	10220000 	.word	0x10220000
 8002520:	10210000 	.word	0x10210000
 8002524:	10120000 	.word	0x10120000
 8002528:	10110000 	.word	0x10110000
 800252c:	40021000 	.word	0x40021000
 8002530:	40010000 	.word	0x40010000
 8002534:	40010800 	.word	0x40010800
 8002538:	40010c00 	.word	0x40010c00
 800253c:	40011000 	.word	0x40011000
 8002540:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002544:	4b0b      	ldr	r3, [pc, #44]	@ (8002574 <HAL_GPIO_Init+0x2f4>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	43db      	mvns	r3, r3
 800254c:	4909      	ldr	r1, [pc, #36]	@ (8002574 <HAL_GPIO_Init+0x2f4>)
 800254e:	4013      	ands	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	3301      	adds	r3, #1
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	fa22 f303 	lsr.w	r3, r2, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	f47f ae96 	bne.w	8002294 <HAL_GPIO_Init+0x14>
  }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	372c      	adds	r7, #44	@ 0x2c
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	40010400 	.word	0x40010400

08002578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]
 8002584:	4613      	mov	r3, r2
 8002586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002588:	787b      	ldrb	r3, [r7, #1]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002594:	e003      	b.n	800259e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002596:	887b      	ldrh	r3, [r7, #2]
 8002598:	041a      	lsls	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	611a      	str	r2, [r3, #16]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e272      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8087 	beq.w	80026d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c8:	4b92      	ldr	r3, [pc, #584]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d00c      	beq.n	80025ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025d4:	4b8f      	ldr	r3, [pc, #572]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d112      	bne.n	8002606 <HAL_RCC_OscConfig+0x5e>
 80025e0:	4b8c      	ldr	r3, [pc, #560]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ec:	d10b      	bne.n	8002606 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ee:	4b89      	ldr	r3, [pc, #548]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d06c      	beq.n	80026d4 <HAL_RCC_OscConfig+0x12c>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d168      	bne.n	80026d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e24c      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x76>
 8002610:	4b80      	ldr	r3, [pc, #512]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a7f      	ldr	r2, [pc, #508]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	e02e      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x98>
 8002626:	4b7b      	ldr	r3, [pc, #492]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a7a      	ldr	r2, [pc, #488]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800262c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b78      	ldr	r3, [pc, #480]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a77      	ldr	r2, [pc, #476]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002638:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e01d      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0xbc>
 800264a:	4b72      	ldr	r3, [pc, #456]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a71      	ldr	r2, [pc, #452]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b6f      	ldr	r3, [pc, #444]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a6e      	ldr	r2, [pc, #440]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 8002664:	4b6b      	ldr	r3, [pc, #428]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a6a      	ldr	r2, [pc, #424]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b68      	ldr	r3, [pc, #416]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a67      	ldr	r2, [pc, #412]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800267a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7ff fcea 	bl	800205c <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff fce6 	bl	800205c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	@ 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e200      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b5d      	ldr	r3, [pc, #372]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0xe4>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7ff fcd6 	bl	800205c <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7ff fcd2 	bl	800205c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	@ 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1ec      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	4b53      	ldr	r3, [pc, #332]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x10c>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d063      	beq.n	80027aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026ee:	4b49      	ldr	r3, [pc, #292]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d11c      	bne.n	8002734 <HAL_RCC_OscConfig+0x18c>
 80026fa:	4b46      	ldr	r3, [pc, #280]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d116      	bne.n	8002734 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	4b43      	ldr	r3, [pc, #268]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x176>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e1c0      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	4b3d      	ldr	r3, [pc, #244]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4939      	ldr	r1, [pc, #228]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	e03a      	b.n	80027aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273c:	4b36      	ldr	r3, [pc, #216]	@ (8002818 <HAL_RCC_OscConfig+0x270>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002742:	f7ff fc8b 	bl	800205c <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274a:	f7ff fc87 	bl	800205c <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1a1      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275c:	4b2d      	ldr	r3, [pc, #180]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002768:	4b2a      	ldr	r3, [pc, #168]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4927      	ldr	r1, [pc, #156]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]
 800277c:	e015      	b.n	80027aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277e:	4b26      	ldr	r3, [pc, #152]	@ (8002818 <HAL_RCC_OscConfig+0x270>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7ff fc6a 	bl	800205c <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278c:	f7ff fc66 	bl	800205c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e180      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	4b1d      	ldr	r3, [pc, #116]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d03a      	beq.n	800282c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d019      	beq.n	80027f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027be:	4b17      	ldr	r3, [pc, #92]	@ (800281c <HAL_RCC_OscConfig+0x274>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c4:	f7ff fc4a 	bl	800205c <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027cc:	f7ff fc46 	bl	800205c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e160      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027ea:	2001      	movs	r0, #1
 80027ec:	f000 face 	bl	8002d8c <RCC_Delay>
 80027f0:	e01c      	b.n	800282c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f2:	4b0a      	ldr	r3, [pc, #40]	@ (800281c <HAL_RCC_OscConfig+0x274>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f8:	f7ff fc30 	bl	800205c <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fe:	e00f      	b.n	8002820 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002800:	f7ff fc2c 	bl	800205c <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d908      	bls.n	8002820 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e146      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	42420000 	.word	0x42420000
 800281c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002820:	4b92      	ldr	r3, [pc, #584]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e9      	bne.n	8002800 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a6 	beq.w	8002986 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283e:	4b8b      	ldr	r3, [pc, #556]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10d      	bne.n	8002866 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	4b88      	ldr	r3, [pc, #544]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	4a87      	ldr	r2, [pc, #540]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002854:	61d3      	str	r3, [r2, #28]
 8002856:	4b85      	ldr	r3, [pc, #532]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002862:	2301      	movs	r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002866:	4b82      	ldr	r3, [pc, #520]	@ (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286e:	2b00      	cmp	r3, #0
 8002870:	d118      	bne.n	80028a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002872:	4b7f      	ldr	r3, [pc, #508]	@ (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a7e      	ldr	r2, [pc, #504]	@ (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800287c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287e:	f7ff fbed 	bl	800205c <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002886:	f7ff fbe9 	bl	800205c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b64      	cmp	r3, #100	@ 0x64
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e103      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002898:	4b75      	ldr	r3, [pc, #468]	@ (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x312>
 80028ac:	4b6f      	ldr	r3, [pc, #444]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	4a6e      	ldr	r2, [pc, #440]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6213      	str	r3, [r2, #32]
 80028b8:	e02d      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x334>
 80028c2:	4b6a      	ldr	r3, [pc, #424]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4a69      	ldr	r2, [pc, #420]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	f023 0301 	bic.w	r3, r3, #1
 80028cc:	6213      	str	r3, [r2, #32]
 80028ce:	4b67      	ldr	r3, [pc, #412]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	4a66      	ldr	r2, [pc, #408]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	f023 0304 	bic.w	r3, r3, #4
 80028d8:	6213      	str	r3, [r2, #32]
 80028da:	e01c      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b05      	cmp	r3, #5
 80028e2:	d10c      	bne.n	80028fe <HAL_RCC_OscConfig+0x356>
 80028e4:	4b61      	ldr	r3, [pc, #388]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	4a60      	ldr	r2, [pc, #384]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	f043 0304 	orr.w	r3, r3, #4
 80028ee:	6213      	str	r3, [r2, #32]
 80028f0:	4b5e      	ldr	r3, [pc, #376]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	4a5d      	ldr	r2, [pc, #372]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6213      	str	r3, [r2, #32]
 80028fc:	e00b      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028fe:	4b5b      	ldr	r3, [pc, #364]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4a5a      	ldr	r2, [pc, #360]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	6213      	str	r3, [r2, #32]
 800290a:	4b58      	ldr	r3, [pc, #352]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	4a57      	ldr	r2, [pc, #348]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002910:	f023 0304 	bic.w	r3, r3, #4
 8002914:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d015      	beq.n	800294a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291e:	f7ff fb9d 	bl	800205c <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	e00a      	b.n	800293c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7ff fb99 	bl	800205c <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e0b1      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ee      	beq.n	8002926 <HAL_RCC_OscConfig+0x37e>
 8002948:	e014      	b.n	8002974 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294a:	f7ff fb87 	bl	800205c <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002950:	e00a      	b.n	8002968 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7ff fb83 	bl	800205c <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e09b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002968:	4b40      	ldr	r3, [pc, #256]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1ee      	bne.n	8002952 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d105      	bne.n	8002986 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4a3b      	ldr	r2, [pc, #236]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002980:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002984:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8087 	beq.w	8002a9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002990:	4b36      	ldr	r3, [pc, #216]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b08      	cmp	r3, #8
 800299a:	d061      	beq.n	8002a60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d146      	bne.n	8002a32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a4:	4b33      	ldr	r3, [pc, #204]	@ (8002a74 <HAL_RCC_OscConfig+0x4cc>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7ff fb57 	bl	800205c <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b2:	f7ff fb53 	bl	800205c <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e06d      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c4:	4b29      	ldr	r3, [pc, #164]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d8:	d108      	bne.n	80029ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029da:	4b24      	ldr	r3, [pc, #144]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	4921      	ldr	r1, [pc, #132]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ec:	4b1f      	ldr	r3, [pc, #124]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a19      	ldr	r1, [r3, #32]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	430b      	orrs	r3, r1
 80029fe:	491b      	ldr	r1, [pc, #108]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a04:	4b1b      	ldr	r3, [pc, #108]	@ (8002a74 <HAL_RCC_OscConfig+0x4cc>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7ff fb27 	bl	800205c <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a12:	f7ff fb23 	bl	800205c <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e03d      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a24:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x46a>
 8002a30:	e035      	b.n	8002a9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a32:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <HAL_RCC_OscConfig+0x4cc>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7ff fb10 	bl	800205c <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7ff fb0c 	bl	800205c <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e026      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a52:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x498>
 8002a5e:	e01e      	b.n	8002a9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e019      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40007000 	.word	0x40007000
 8002a74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a78:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <HAL_RCC_OscConfig+0x500>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000

08002aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0d0      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b6a      	ldr	r3, [pc, #424]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d910      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b67      	ldr	r3, [pc, #412]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 0207 	bic.w	r2, r3, #7
 8002ad6:	4965      	ldr	r1, [pc, #404]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b63      	ldr	r3, [pc, #396]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0b8      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b08:	4b59      	ldr	r3, [pc, #356]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4a58      	ldr	r2, [pc, #352]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b20:	4b53      	ldr	r3, [pc, #332]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a52      	ldr	r2, [pc, #328]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2c:	4b50      	ldr	r3, [pc, #320]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	494d      	ldr	r1, [pc, #308]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d040      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b47      	ldr	r3, [pc, #284]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d115      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e07f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6a:	4b41      	ldr	r3, [pc, #260]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e073      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e06b      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8a:	4b39      	ldr	r3, [pc, #228]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f023 0203 	bic.w	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4936      	ldr	r1, [pc, #216]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b9c:	f7ff fa5e 	bl	800205c <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba4:	f7ff fa5a 	bl	800205c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e053      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	4b2d      	ldr	r3, [pc, #180]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 020c 	and.w	r2, r3, #12
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d1eb      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b27      	ldr	r3, [pc, #156]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d210      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b24      	ldr	r3, [pc, #144]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 0207 	bic.w	r2, r3, #7
 8002be2:	4922      	ldr	r1, [pc, #136]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b20      	ldr	r3, [pc, #128]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e032      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c08:	4b19      	ldr	r3, [pc, #100]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4916      	ldr	r1, [pc, #88]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c26:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	490e      	ldr	r1, [pc, #56]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c3a:	f000 f821 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	4b0b      	ldr	r3, [pc, #44]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	490a      	ldr	r1, [pc, #40]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4c:	5ccb      	ldrb	r3, [r1, r3]
 8002c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c52:	4a09      	ldr	r2, [pc, #36]	@ (8002c78 <HAL_RCC_ClockConfig+0x1cc>)
 8002c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c56:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <HAL_RCC_ClockConfig+0x1d0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff f9bc 	bl	8001fd8 <HAL_InitTick>

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40022000 	.word	0x40022000
 8002c70:	40021000 	.word	0x40021000
 8002c74:	08006d1c 	.word	0x08006d1c
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	20000004 	.word	0x20000004

08002c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d002      	beq.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x30>
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d003      	beq.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x36>
 8002cae:	e027      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cb0:	4b19      	ldr	r3, [pc, #100]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cb2:	613b      	str	r3, [r7, #16]
      break;
 8002cb4:	e027      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	0c9b      	lsrs	r3, r3, #18
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	4a17      	ldr	r2, [pc, #92]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cc0:	5cd3      	ldrb	r3, [r2, r3]
 8002cc2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d010      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cce:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	0c5b      	lsrs	r3, r3, #17
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	4a11      	ldr	r2, [pc, #68]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ce2:	fb03 f202 	mul.w	r2, r3, r2
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e004      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cf4:	fb02 f303 	mul.w	r3, r2, r3
 8002cf8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	613b      	str	r3, [r7, #16]
      break;
 8002cfe:	e002      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d00:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d02:	613b      	str	r3, [r7, #16]
      break;
 8002d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d06:	693b      	ldr	r3, [r7, #16]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	007a1200 	.word	0x007a1200
 8002d1c:	08006d34 	.word	0x08006d34
 8002d20:	08006d44 	.word	0x08006d44
 8002d24:	003d0900 	.word	0x003d0900

08002d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d2c:	4b02      	ldr	r3, [pc, #8]	@ (8002d38 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr
 8002d38:	20000000 	.word	0x20000000

08002d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d40:	f7ff fff2 	bl	8002d28 <HAL_RCC_GetHCLKFreq>
 8002d44:	4602      	mov	r2, r0
 8002d46:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	4903      	ldr	r1, [pc, #12]	@ (8002d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d52:	5ccb      	ldrb	r3, [r1, r3]
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	08006d2c 	.word	0x08006d2c

08002d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d68:	f7ff ffde 	bl	8002d28 <HAL_RCC_GetHCLKFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	0adb      	lsrs	r3, r3, #11
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	4903      	ldr	r1, [pc, #12]	@ (8002d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	08006d2c 	.word	0x08006d2c

08002d8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d94:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc0 <RCC_Delay+0x34>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc4 <RCC_Delay+0x38>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	0a5b      	lsrs	r3, r3, #9
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002da8:	bf00      	nop
  }
  while (Delay --);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1e5a      	subs	r2, r3, #1
 8002dae:	60fa      	str	r2, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f9      	bne.n	8002da8 <RCC_Delay+0x1c>
}
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	10624dd3 	.word	0x10624dd3

08002dc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e076      	b.n	8002ec8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d108      	bne.n	8002df4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dea:	d009      	beq.n	8002e00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	61da      	str	r2, [r3, #28]
 8002df2:	e005      	b.n	8002e00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fe ff08 	bl	8001c30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e84:	ea42 0103 	orr.w	r1, r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	0c1a      	lsrs	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f002 0204 	and.w	r2, r2, #4
 8002ea6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69da      	ldr	r2, [r3, #28]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	4613      	mov	r3, r2
 8002ede:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ee0:	f7ff f8bc 	bl	800205c <HAL_GetTick>
 8002ee4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d001      	beq.n	8002efa <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e12a      	b.n	8003150 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <HAL_SPI_Transmit+0x36>
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e122      	b.n	8003150 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_SPI_Transmit+0x48>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e11b      	b.n	8003150 <HAL_SPI_Transmit+0x280>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2203      	movs	r2, #3
 8002f24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	88fa      	ldrh	r2, [r7, #6]
 8002f38:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	88fa      	ldrh	r2, [r7, #6]
 8002f3e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f66:	d10f      	bne.n	8002f88 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f92:	2b40      	cmp	r3, #64	@ 0x40
 8002f94:	d007      	beq.n	8002fa6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fa4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fae:	d152      	bne.n	8003056 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_SPI_Transmit+0xee>
 8002fb8:	8b7b      	ldrh	r3, [r7, #26]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d145      	bne.n	800304a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	881a      	ldrh	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	1c9a      	adds	r2, r3, #2
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fe2:	e032      	b.n	800304a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d112      	bne.n	8003018 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	881a      	ldrh	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003002:	1c9a      	adds	r2, r3, #2
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003016:	e018      	b.n	800304a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003018:	f7ff f820 	bl	800205c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d803      	bhi.n	8003030 <HAL_SPI_Transmit+0x160>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302e:	d102      	bne.n	8003036 <HAL_SPI_Transmit+0x166>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d109      	bne.n	800304a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e082      	b.n	8003150 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1c7      	bne.n	8002fe4 <HAL_SPI_Transmit+0x114>
 8003054:	e053      	b.n	80030fe <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SPI_Transmit+0x194>
 800305e:	8b7b      	ldrh	r3, [r7, #26]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d147      	bne.n	80030f4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	330c      	adds	r3, #12
 800306e:	7812      	ldrb	r2, [r2, #0]
 8003070:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003080:	b29b      	uxth	r3, r3
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800308a:	e033      	b.n	80030f4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b02      	cmp	r3, #2
 8003098:	d113      	bne.n	80030c2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	330c      	adds	r3, #12
 80030a4:	7812      	ldrb	r2, [r2, #0]
 80030a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80030c0:	e018      	b.n	80030f4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030c2:	f7fe ffcb 	bl	800205c <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d803      	bhi.n	80030da <HAL_SPI_Transmit+0x20a>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d102      	bne.n	80030e0 <HAL_SPI_Transmit+0x210>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d109      	bne.n	80030f4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e02d      	b.n	8003150 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1c6      	bne.n	800308c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	6839      	ldr	r1, [r7, #0]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fbc4 	bl	8003890 <SPI_EndRxTxTransaction>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2220      	movs	r2, #32
 8003112:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10a      	bne.n	8003132 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800314e:	2300      	movs	r3, #0
  }
}
 8003150:	4618      	mov	r0, r3
 8003152:	3720      	adds	r7, #32
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	4613      	mov	r3, r2
 8003166:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d001      	beq.n	8003178 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003174:	2302      	movs	r3, #2
 8003176:	e104      	b.n	8003382 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003180:	d112      	bne.n	80031a8 <HAL_SPI_Receive+0x50>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10e      	bne.n	80031a8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2204      	movs	r2, #4
 800318e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003192:	88fa      	ldrh	r2, [r7, #6]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	4613      	mov	r3, r2
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f8f3 	bl	800338a <HAL_SPI_TransmitReceive>
 80031a4:	4603      	mov	r3, r0
 80031a6:	e0ec      	b.n	8003382 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031a8:	f7fe ff58 	bl	800205c <HAL_GetTick>
 80031ac:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_SPI_Receive+0x62>
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e0e1      	b.n	8003382 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_SPI_Receive+0x74>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e0da      	b.n	8003382 <HAL_SPI_Receive+0x22a>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2204      	movs	r2, #4
 80031d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	88fa      	ldrh	r2, [r7, #6]
 80031ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	88fa      	ldrh	r2, [r7, #6]
 80031f2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800321a:	d10f      	bne.n	800323c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800322a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800323a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003246:	2b40      	cmp	r3, #64	@ 0x40
 8003248:	d007      	beq.n	800325a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003258:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d170      	bne.n	8003344 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003262:	e035      	b.n	80032d0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b01      	cmp	r3, #1
 8003270:	d115      	bne.n	800329e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f103 020c 	add.w	r2, r3, #12
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327e:	7812      	ldrb	r2, [r2, #0]
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800329c:	e018      	b.n	80032d0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800329e:	f7fe fedd 	bl	800205c <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d803      	bhi.n	80032b6 <HAL_SPI_Receive+0x15e>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d102      	bne.n	80032bc <HAL_SPI_Receive+0x164>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e058      	b.n	8003382 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1c4      	bne.n	8003264 <HAL_SPI_Receive+0x10c>
 80032da:	e038      	b.n	800334e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d113      	bne.n	8003312 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f4:	b292      	uxth	r2, r2
 80032f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fc:	1c9a      	adds	r2, r3, #2
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003310:	e018      	b.n	8003344 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003312:	f7fe fea3 	bl	800205c <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d803      	bhi.n	800332a <HAL_SPI_Receive+0x1d2>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d102      	bne.n	8003330 <HAL_SPI_Receive+0x1d8>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e01e      	b.n	8003382 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1c6      	bne.n	80032dc <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	6839      	ldr	r1, [r7, #0]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 fa4a 	bl	80037ec <SPI_EndRxTransaction>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003380:	2300      	movs	r3, #0
  }
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b08a      	sub	sp, #40	@ 0x28
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003398:	2301      	movs	r3, #1
 800339a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800339c:	f7fe fe5e 	bl	800205c <HAL_GetTick>
 80033a0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033a8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80033b0:	887b      	ldrh	r3, [r7, #2]
 80033b2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033b4:	7ffb      	ldrb	r3, [r7, #31]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d00c      	beq.n	80033d4 <HAL_SPI_TransmitReceive+0x4a>
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033c0:	d106      	bne.n	80033d0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d102      	bne.n	80033d0 <HAL_SPI_TransmitReceive+0x46>
 80033ca:	7ffb      	ldrb	r3, [r7, #31]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d001      	beq.n	80033d4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
 80033d2:	e17f      	b.n	80036d4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_SPI_TransmitReceive+0x5c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_SPI_TransmitReceive+0x5c>
 80033e0:	887b      	ldrh	r3, [r7, #2]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e174      	b.n	80036d4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_SPI_TransmitReceive+0x6e>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e16d      	b.n	80036d4 <HAL_SPI_TransmitReceive+0x34a>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b04      	cmp	r3, #4
 800340a:	d003      	beq.n	8003414 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2205      	movs	r2, #5
 8003410:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	887a      	ldrh	r2, [r7, #2]
 8003424:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	887a      	ldrh	r2, [r7, #2]
 800342a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	887a      	ldrh	r2, [r7, #2]
 8003436:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	887a      	ldrh	r2, [r7, #2]
 800343c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003454:	2b40      	cmp	r3, #64	@ 0x40
 8003456:	d007      	beq.n	8003468 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003466:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003470:	d17e      	bne.n	8003570 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_SPI_TransmitReceive+0xf6>
 800347a:	8afb      	ldrh	r3, [r7, #22]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d16c      	bne.n	800355a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003484:	881a      	ldrh	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003490:	1c9a      	adds	r2, r3, #2
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034a4:	e059      	b.n	800355a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d11b      	bne.n	80034ec <HAL_SPI_TransmitReceive+0x162>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d016      	beq.n	80034ec <HAL_SPI_TransmitReceive+0x162>
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d113      	bne.n	80034ec <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c8:	881a      	ldrh	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d4:	1c9a      	adds	r2, r3, #2
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d119      	bne.n	800352e <HAL_SPI_TransmitReceive+0x1a4>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d014      	beq.n	800352e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350e:	b292      	uxth	r2, r2
 8003510:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003516:	1c9a      	adds	r2, r3, #2
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800352a:	2301      	movs	r3, #1
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800352e:	f7fe fd95 	bl	800205c <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800353a:	429a      	cmp	r2, r3
 800353c:	d80d      	bhi.n	800355a <HAL_SPI_TransmitReceive+0x1d0>
 800353e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003544:	d009      	beq.n	800355a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e0bc      	b.n	80036d4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1a0      	bne.n	80034a6 <HAL_SPI_TransmitReceive+0x11c>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d19b      	bne.n	80034a6 <HAL_SPI_TransmitReceive+0x11c>
 800356e:	e082      	b.n	8003676 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_SPI_TransmitReceive+0x1f4>
 8003578:	8afb      	ldrh	r3, [r7, #22]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d171      	bne.n	8003662 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	330c      	adds	r3, #12
 8003588:	7812      	ldrb	r2, [r2, #0]
 800358a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a4:	e05d      	b.n	8003662 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d11c      	bne.n	80035ee <HAL_SPI_TransmitReceive+0x264>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d017      	beq.n	80035ee <HAL_SPI_TransmitReceive+0x264>
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d114      	bne.n	80035ee <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	7812      	ldrb	r2, [r2, #0]
 80035d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d119      	bne.n	8003630 <HAL_SPI_TransmitReceive+0x2a6>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d014      	beq.n	8003630 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800362c:	2301      	movs	r3, #1
 800362e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003630:	f7fe fd14 	bl	800205c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800363c:	429a      	cmp	r2, r3
 800363e:	d803      	bhi.n	8003648 <HAL_SPI_TransmitReceive+0x2be>
 8003640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003646:	d102      	bne.n	800364e <HAL_SPI_TransmitReceive+0x2c4>
 8003648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e038      	b.n	80036d4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d19c      	bne.n	80035a6 <HAL_SPI_TransmitReceive+0x21c>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d197      	bne.n	80035a6 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003676:	6a3a      	ldr	r2, [r7, #32]
 8003678:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f908 	bl	8003890 <SPI_EndRxTxTransaction>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d008      	beq.n	8003698 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e01d      	b.n	80036d4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10a      	bne.n	80036b6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036a0:	2300      	movs	r3, #0
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80036d2:	2300      	movs	r3, #0
  }
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3728      	adds	r7, #40	@ 0x28
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036ec:	f7fe fcb6 	bl	800205c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	4413      	add	r3, r2
 80036fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036fc:	f7fe fcae 	bl	800205c <HAL_GetTick>
 8003700:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003702:	4b39      	ldr	r3, [pc, #228]	@ (80037e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	015b      	lsls	r3, r3, #5
 8003708:	0d1b      	lsrs	r3, r3, #20
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	fb02 f303 	mul.w	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003712:	e054      	b.n	80037be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371a:	d050      	beq.n	80037be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800371c:	f7fe fc9e 	bl	800205c <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	429a      	cmp	r2, r3
 800372a:	d902      	bls.n	8003732 <SPI_WaitFlagStateUntilTimeout+0x56>
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d13d      	bne.n	80037ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003740:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800374a:	d111      	bne.n	8003770 <SPI_WaitFlagStateUntilTimeout+0x94>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003754:	d004      	beq.n	8003760 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800375e:	d107      	bne.n	8003770 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800376e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003778:	d10f      	bne.n	800379a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003798:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e017      	b.n	80037de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4013      	ands	r3, r2
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	bf0c      	ite	eq
 80037ce:	2301      	moveq	r3, #1
 80037d0:	2300      	movne	r3, #0
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d19b      	bne.n	8003714 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3720      	adds	r7, #32
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000000 	.word	0x20000000

080037ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003800:	d111      	bne.n	8003826 <SPI_EndRxTransaction+0x3a>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800380a:	d004      	beq.n	8003816 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003814:	d107      	bne.n	8003826 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003824:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800382e:	d117      	bne.n	8003860 <SPI_EndRxTransaction+0x74>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003838:	d112      	bne.n	8003860 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2200      	movs	r2, #0
 8003842:	2101      	movs	r1, #1
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f7ff ff49 	bl	80036dc <SPI_WaitFlagStateUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01a      	beq.n	8003886 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003854:	f043 0220 	orr.w	r2, r3, #32
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e013      	b.n	8003888 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2200      	movs	r2, #0
 8003868:	2180      	movs	r1, #128	@ 0x80
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f7ff ff36 	bl	80036dc <SPI_WaitFlagStateUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800387a:	f043 0220 	orr.w	r2, r3, #32
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e000      	b.n	8003888 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2201      	movs	r2, #1
 80038a4:	2102      	movs	r1, #2
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f7ff ff18 	bl	80036dc <SPI_WaitFlagStateUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b6:	f043 0220 	orr.w	r2, r3, #32
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e013      	b.n	80038ea <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2200      	movs	r2, #0
 80038ca:	2180      	movs	r1, #128	@ 0x80
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff ff05 	bl	80036dc <SPI_WaitFlagStateUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038dc:	f043 0220 	orr.w	r2, r3, #32
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e000      	b.n	80038ea <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e042      	b.n	800398a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d106      	bne.n	800391e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7fe f9d3 	bl	8001cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2224      	movs	r2, #36	@ 0x24
 8003922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003934:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f972 	bl	8003c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800394a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800395a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800396a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b08a      	sub	sp, #40	@ 0x28
 8003996:	af02      	add	r7, sp, #8
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	603b      	str	r3, [r7, #0]
 800399e:	4613      	mov	r3, r2
 80039a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d175      	bne.n	8003a9e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_UART_Transmit+0x2c>
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e06e      	b.n	8003aa0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2221      	movs	r2, #33	@ 0x21
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039d0:	f7fe fb44 	bl	800205c <HAL_GetTick>
 80039d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	88fa      	ldrh	r2, [r7, #6]
 80039da:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	88fa      	ldrh	r2, [r7, #6]
 80039e0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ea:	d108      	bne.n	80039fe <HAL_UART_Transmit+0x6c>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d104      	bne.n	80039fe <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	e003      	b.n	8003a06 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a06:	e02e      	b.n	8003a66 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2180      	movs	r1, #128	@ 0x80
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f848 	bl	8003aa8 <UART_WaitOnFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e03a      	b.n	8003aa0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10b      	bne.n	8003a48 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	461a      	mov	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a3e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	3302      	adds	r3, #2
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e007      	b.n	8003a58 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3301      	adds	r3, #1
 8003a56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1cb      	bne.n	8003a08 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2200      	movs	r2, #0
 8003a78:	2140      	movs	r1, #64	@ 0x40
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f814 	bl	8003aa8 <UART_WaitOnFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e006      	b.n	8003aa0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e000      	b.n	8003aa0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a9e:	2302      	movs	r3, #2
  }
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3720      	adds	r7, #32
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab8:	e03b      	b.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac0:	d037      	beq.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac2:	f7fe facb 	bl	800205c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	6a3a      	ldr	r2, [r7, #32]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d302      	bcc.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e03a      	b.n	8003b52 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d023      	beq.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b80      	cmp	r3, #128	@ 0x80
 8003aee:	d020      	beq.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b40      	cmp	r3, #64	@ 0x40
 8003af4:	d01d      	beq.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d116      	bne.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f81d 	bl	8003b5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2208      	movs	r2, #8
 8003b24:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e00f      	b.n	8003b52 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	bf0c      	ite	eq
 8003b42:	2301      	moveq	r3, #1
 8003b44:	2300      	movne	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d0b4      	beq.n	8003aba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b095      	sub	sp, #84	@ 0x54
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	330c      	adds	r3, #12
 8003b68:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b6c:	e853 3f00 	ldrex	r3, [r3]
 8003b70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	330c      	adds	r3, #12
 8003b80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b82:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b8a:	e841 2300 	strex	r3, r2, [r1]
 8003b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1e5      	bne.n	8003b62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3314      	adds	r3, #20
 8003b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	e853 3f00 	ldrex	r3, [r3]
 8003ba4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3314      	adds	r3, #20
 8003bb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1e5      	bne.n	8003b96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d119      	bne.n	8003c06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f023 0310 	bic.w	r3, r3, #16
 8003be8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	330c      	adds	r3, #12
 8003bf0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bf2:	61ba      	str	r2, [r7, #24]
 8003bf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	6979      	ldr	r1, [r7, #20]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	613b      	str	r3, [r7, #16]
   return(result);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e5      	bne.n	8003bd2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c14:	bf00      	nop
 8003c16:	3754      	adds	r7, #84	@ 0x54
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr
	...

08003c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003c5a:	f023 030c 	bic.w	r3, r3, #12
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	430b      	orrs	r3, r1
 8003c66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a2c      	ldr	r2, [pc, #176]	@ (8003d34 <UART_SetConfig+0x114>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d103      	bne.n	8003c90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c88:	f7ff f86c 	bl	8002d64 <HAL_RCC_GetPCLK2Freq>
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	e002      	b.n	8003c96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c90:	f7ff f854 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 8003c94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009a      	lsls	r2, r3, #2
 8003ca0:	441a      	add	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cac:	4a22      	ldr	r2, [pc, #136]	@ (8003d38 <UART_SetConfig+0x118>)
 8003cae:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	0119      	lsls	r1, r3, #4
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009a      	lsls	r2, r3, #2
 8003cc0:	441a      	add	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8003d38 <UART_SetConfig+0x118>)
 8003cce:	fba3 0302 	umull	r0, r3, r3, r2
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	2064      	movs	r0, #100	@ 0x64
 8003cd6:	fb00 f303 	mul.w	r3, r0, r3
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	3332      	adds	r3, #50	@ 0x32
 8003ce0:	4a15      	ldr	r2, [pc, #84]	@ (8003d38 <UART_SetConfig+0x118>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cec:	4419      	add	r1, r3
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009a      	lsls	r2, r3, #2
 8003cf8:	441a      	add	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d04:	4b0c      	ldr	r3, [pc, #48]	@ (8003d38 <UART_SetConfig+0x118>)
 8003d06:	fba3 0302 	umull	r0, r3, r3, r2
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2064      	movs	r0, #100	@ 0x64
 8003d0e:	fb00 f303 	mul.w	r3, r0, r3
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	3332      	adds	r3, #50	@ 0x32
 8003d18:	4a07      	ldr	r2, [pc, #28]	@ (8003d38 <UART_SetConfig+0x118>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	f003 020f 	and.w	r2, r3, #15
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	440a      	add	r2, r1
 8003d2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40013800 	.word	0x40013800
 8003d38:	51eb851f 	.word	0x51eb851f

08003d3c <__cvt>:
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d42:	461d      	mov	r5, r3
 8003d44:	bfbb      	ittet	lt
 8003d46:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003d4a:	461d      	movlt	r5, r3
 8003d4c:	2300      	movge	r3, #0
 8003d4e:	232d      	movlt	r3, #45	@ 0x2d
 8003d50:	b088      	sub	sp, #32
 8003d52:	4614      	mov	r4, r2
 8003d54:	bfb8      	it	lt
 8003d56:	4614      	movlt	r4, r2
 8003d58:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003d5a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003d5c:	7013      	strb	r3, [r2, #0]
 8003d5e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003d60:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003d64:	f023 0820 	bic.w	r8, r3, #32
 8003d68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003d6c:	d005      	beq.n	8003d7a <__cvt+0x3e>
 8003d6e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003d72:	d100      	bne.n	8003d76 <__cvt+0x3a>
 8003d74:	3601      	adds	r6, #1
 8003d76:	2302      	movs	r3, #2
 8003d78:	e000      	b.n	8003d7c <__cvt+0x40>
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	aa07      	add	r2, sp, #28
 8003d7e:	9204      	str	r2, [sp, #16]
 8003d80:	aa06      	add	r2, sp, #24
 8003d82:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003d86:	e9cd 3600 	strd	r3, r6, [sp]
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	462b      	mov	r3, r5
 8003d8e:	f000 fe6f 	bl	8004a70 <_dtoa_r>
 8003d92:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003d96:	4607      	mov	r7, r0
 8003d98:	d119      	bne.n	8003dce <__cvt+0x92>
 8003d9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003d9c:	07db      	lsls	r3, r3, #31
 8003d9e:	d50e      	bpl.n	8003dbe <__cvt+0x82>
 8003da0:	eb00 0906 	add.w	r9, r0, r6
 8003da4:	2200      	movs	r2, #0
 8003da6:	2300      	movs	r3, #0
 8003da8:	4620      	mov	r0, r4
 8003daa:	4629      	mov	r1, r5
 8003dac:	f7fc fdfc 	bl	80009a8 <__aeabi_dcmpeq>
 8003db0:	b108      	cbz	r0, 8003db6 <__cvt+0x7a>
 8003db2:	f8cd 901c 	str.w	r9, [sp, #28]
 8003db6:	2230      	movs	r2, #48	@ 0x30
 8003db8:	9b07      	ldr	r3, [sp, #28]
 8003dba:	454b      	cmp	r3, r9
 8003dbc:	d31e      	bcc.n	8003dfc <__cvt+0xc0>
 8003dbe:	4638      	mov	r0, r7
 8003dc0:	9b07      	ldr	r3, [sp, #28]
 8003dc2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003dc4:	1bdb      	subs	r3, r3, r7
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	b008      	add	sp, #32
 8003dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dce:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003dd2:	eb00 0906 	add.w	r9, r0, r6
 8003dd6:	d1e5      	bne.n	8003da4 <__cvt+0x68>
 8003dd8:	7803      	ldrb	r3, [r0, #0]
 8003dda:	2b30      	cmp	r3, #48	@ 0x30
 8003ddc:	d10a      	bne.n	8003df4 <__cvt+0xb8>
 8003dde:	2200      	movs	r2, #0
 8003de0:	2300      	movs	r3, #0
 8003de2:	4620      	mov	r0, r4
 8003de4:	4629      	mov	r1, r5
 8003de6:	f7fc fddf 	bl	80009a8 <__aeabi_dcmpeq>
 8003dea:	b918      	cbnz	r0, 8003df4 <__cvt+0xb8>
 8003dec:	f1c6 0601 	rsb	r6, r6, #1
 8003df0:	f8ca 6000 	str.w	r6, [sl]
 8003df4:	f8da 3000 	ldr.w	r3, [sl]
 8003df8:	4499      	add	r9, r3
 8003dfa:	e7d3      	b.n	8003da4 <__cvt+0x68>
 8003dfc:	1c59      	adds	r1, r3, #1
 8003dfe:	9107      	str	r1, [sp, #28]
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	e7d9      	b.n	8003db8 <__cvt+0x7c>

08003e04 <__exponent>:
 8003e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e06:	2900      	cmp	r1, #0
 8003e08:	bfb6      	itet	lt
 8003e0a:	232d      	movlt	r3, #45	@ 0x2d
 8003e0c:	232b      	movge	r3, #43	@ 0x2b
 8003e0e:	4249      	neglt	r1, r1
 8003e10:	2909      	cmp	r1, #9
 8003e12:	7002      	strb	r2, [r0, #0]
 8003e14:	7043      	strb	r3, [r0, #1]
 8003e16:	dd29      	ble.n	8003e6c <__exponent+0x68>
 8003e18:	f10d 0307 	add.w	r3, sp, #7
 8003e1c:	461d      	mov	r5, r3
 8003e1e:	270a      	movs	r7, #10
 8003e20:	fbb1 f6f7 	udiv	r6, r1, r7
 8003e24:	461a      	mov	r2, r3
 8003e26:	fb07 1416 	mls	r4, r7, r6, r1
 8003e2a:	3430      	adds	r4, #48	@ 0x30
 8003e2c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003e30:	460c      	mov	r4, r1
 8003e32:	2c63      	cmp	r4, #99	@ 0x63
 8003e34:	4631      	mov	r1, r6
 8003e36:	f103 33ff 	add.w	r3, r3, #4294967295
 8003e3a:	dcf1      	bgt.n	8003e20 <__exponent+0x1c>
 8003e3c:	3130      	adds	r1, #48	@ 0x30
 8003e3e:	1e94      	subs	r4, r2, #2
 8003e40:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003e44:	4623      	mov	r3, r4
 8003e46:	1c41      	adds	r1, r0, #1
 8003e48:	42ab      	cmp	r3, r5
 8003e4a:	d30a      	bcc.n	8003e62 <__exponent+0x5e>
 8003e4c:	f10d 0309 	add.w	r3, sp, #9
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	42ac      	cmp	r4, r5
 8003e54:	bf88      	it	hi
 8003e56:	2300      	movhi	r3, #0
 8003e58:	3302      	adds	r3, #2
 8003e5a:	4403      	add	r3, r0
 8003e5c:	1a18      	subs	r0, r3, r0
 8003e5e:	b003      	add	sp, #12
 8003e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e62:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003e66:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003e6a:	e7ed      	b.n	8003e48 <__exponent+0x44>
 8003e6c:	2330      	movs	r3, #48	@ 0x30
 8003e6e:	3130      	adds	r1, #48	@ 0x30
 8003e70:	7083      	strb	r3, [r0, #2]
 8003e72:	70c1      	strb	r1, [r0, #3]
 8003e74:	1d03      	adds	r3, r0, #4
 8003e76:	e7f1      	b.n	8003e5c <__exponent+0x58>

08003e78 <_printf_float>:
 8003e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e7c:	b091      	sub	sp, #68	@ 0x44
 8003e7e:	460c      	mov	r4, r1
 8003e80:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003e84:	4616      	mov	r6, r2
 8003e86:	461f      	mov	r7, r3
 8003e88:	4605      	mov	r5, r0
 8003e8a:	f000 fce1 	bl	8004850 <_localeconv_r>
 8003e8e:	6803      	ldr	r3, [r0, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	9308      	str	r3, [sp, #32]
 8003e94:	f7fc f95c 	bl	8000150 <strlen>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	930e      	str	r3, [sp, #56]	@ 0x38
 8003e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003ea0:	9009      	str	r0, [sp, #36]	@ 0x24
 8003ea2:	3307      	adds	r3, #7
 8003ea4:	f023 0307 	bic.w	r3, r3, #7
 8003ea8:	f103 0208 	add.w	r2, r3, #8
 8003eac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003eb0:	f8d4 b000 	ldr.w	fp, [r4]
 8003eb4:	f8c8 2000 	str.w	r2, [r8]
 8003eb8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003ebc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003ec0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ec2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003ece:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003ed2:	4b9c      	ldr	r3, [pc, #624]	@ (8004144 <_printf_float+0x2cc>)
 8003ed4:	f7fc fd9a 	bl	8000a0c <__aeabi_dcmpun>
 8003ed8:	bb70      	cbnz	r0, 8003f38 <_printf_float+0xc0>
 8003eda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003ede:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee2:	4b98      	ldr	r3, [pc, #608]	@ (8004144 <_printf_float+0x2cc>)
 8003ee4:	f7fc fd74 	bl	80009d0 <__aeabi_dcmple>
 8003ee8:	bb30      	cbnz	r0, 8003f38 <_printf_float+0xc0>
 8003eea:	2200      	movs	r2, #0
 8003eec:	2300      	movs	r3, #0
 8003eee:	4640      	mov	r0, r8
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	f7fc fd63 	bl	80009bc <__aeabi_dcmplt>
 8003ef6:	b110      	cbz	r0, 8003efe <_printf_float+0x86>
 8003ef8:	232d      	movs	r3, #45	@ 0x2d
 8003efa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003efe:	4a92      	ldr	r2, [pc, #584]	@ (8004148 <_printf_float+0x2d0>)
 8003f00:	4b92      	ldr	r3, [pc, #584]	@ (800414c <_printf_float+0x2d4>)
 8003f02:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003f06:	bf8c      	ite	hi
 8003f08:	4690      	movhi	r8, r2
 8003f0a:	4698      	movls	r8, r3
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	f04f 0900 	mov.w	r9, #0
 8003f12:	6123      	str	r3, [r4, #16]
 8003f14:	f02b 0304 	bic.w	r3, fp, #4
 8003f18:	6023      	str	r3, [r4, #0]
 8003f1a:	4633      	mov	r3, r6
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	4628      	mov	r0, r5
 8003f20:	9700      	str	r7, [sp, #0]
 8003f22:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003f24:	f000 f9d4 	bl	80042d0 <_printf_common>
 8003f28:	3001      	adds	r0, #1
 8003f2a:	f040 8090 	bne.w	800404e <_printf_float+0x1d6>
 8003f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f32:	b011      	add	sp, #68	@ 0x44
 8003f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f38:	4642      	mov	r2, r8
 8003f3a:	464b      	mov	r3, r9
 8003f3c:	4640      	mov	r0, r8
 8003f3e:	4649      	mov	r1, r9
 8003f40:	f7fc fd64 	bl	8000a0c <__aeabi_dcmpun>
 8003f44:	b148      	cbz	r0, 8003f5a <_printf_float+0xe2>
 8003f46:	464b      	mov	r3, r9
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bfb8      	it	lt
 8003f4c:	232d      	movlt	r3, #45	@ 0x2d
 8003f4e:	4a80      	ldr	r2, [pc, #512]	@ (8004150 <_printf_float+0x2d8>)
 8003f50:	bfb8      	it	lt
 8003f52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003f56:	4b7f      	ldr	r3, [pc, #508]	@ (8004154 <_printf_float+0x2dc>)
 8003f58:	e7d3      	b.n	8003f02 <_printf_float+0x8a>
 8003f5a:	6863      	ldr	r3, [r4, #4]
 8003f5c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	d13f      	bne.n	8003fe4 <_printf_float+0x16c>
 8003f64:	2306      	movs	r3, #6
 8003f66:	6063      	str	r3, [r4, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003f6e:	6023      	str	r3, [r4, #0]
 8003f70:	9206      	str	r2, [sp, #24]
 8003f72:	aa0e      	add	r2, sp, #56	@ 0x38
 8003f74:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003f78:	aa0d      	add	r2, sp, #52	@ 0x34
 8003f7a:	9203      	str	r2, [sp, #12]
 8003f7c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003f80:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003f84:	6863      	ldr	r3, [r4, #4]
 8003f86:	4642      	mov	r2, r8
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	464b      	mov	r3, r9
 8003f8e:	910a      	str	r1, [sp, #40]	@ 0x28
 8003f90:	f7ff fed4 	bl	8003d3c <__cvt>
 8003f94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003f96:	4680      	mov	r8, r0
 8003f98:	2947      	cmp	r1, #71	@ 0x47
 8003f9a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003f9c:	d128      	bne.n	8003ff0 <_printf_float+0x178>
 8003f9e:	1cc8      	adds	r0, r1, #3
 8003fa0:	db02      	blt.n	8003fa8 <_printf_float+0x130>
 8003fa2:	6863      	ldr	r3, [r4, #4]
 8003fa4:	4299      	cmp	r1, r3
 8003fa6:	dd40      	ble.n	800402a <_printf_float+0x1b2>
 8003fa8:	f1aa 0a02 	sub.w	sl, sl, #2
 8003fac:	fa5f fa8a 	uxtb.w	sl, sl
 8003fb0:	4652      	mov	r2, sl
 8003fb2:	3901      	subs	r1, #1
 8003fb4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003fb8:	910d      	str	r1, [sp, #52]	@ 0x34
 8003fba:	f7ff ff23 	bl	8003e04 <__exponent>
 8003fbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003fc0:	4681      	mov	r9, r0
 8003fc2:	1813      	adds	r3, r2, r0
 8003fc4:	2a01      	cmp	r2, #1
 8003fc6:	6123      	str	r3, [r4, #16]
 8003fc8:	dc02      	bgt.n	8003fd0 <_printf_float+0x158>
 8003fca:	6822      	ldr	r2, [r4, #0]
 8003fcc:	07d2      	lsls	r2, r2, #31
 8003fce:	d501      	bpl.n	8003fd4 <_printf_float+0x15c>
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	6123      	str	r3, [r4, #16]
 8003fd4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d09e      	beq.n	8003f1a <_printf_float+0xa2>
 8003fdc:	232d      	movs	r3, #45	@ 0x2d
 8003fde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fe2:	e79a      	b.n	8003f1a <_printf_float+0xa2>
 8003fe4:	2947      	cmp	r1, #71	@ 0x47
 8003fe6:	d1bf      	bne.n	8003f68 <_printf_float+0xf0>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1bd      	bne.n	8003f68 <_printf_float+0xf0>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e7ba      	b.n	8003f66 <_printf_float+0xee>
 8003ff0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ff4:	d9dc      	bls.n	8003fb0 <_printf_float+0x138>
 8003ff6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003ffa:	d118      	bne.n	800402e <_printf_float+0x1b6>
 8003ffc:	2900      	cmp	r1, #0
 8003ffe:	6863      	ldr	r3, [r4, #4]
 8004000:	dd0b      	ble.n	800401a <_printf_float+0x1a2>
 8004002:	6121      	str	r1, [r4, #16]
 8004004:	b913      	cbnz	r3, 800400c <_printf_float+0x194>
 8004006:	6822      	ldr	r2, [r4, #0]
 8004008:	07d0      	lsls	r0, r2, #31
 800400a:	d502      	bpl.n	8004012 <_printf_float+0x19a>
 800400c:	3301      	adds	r3, #1
 800400e:	440b      	add	r3, r1
 8004010:	6123      	str	r3, [r4, #16]
 8004012:	f04f 0900 	mov.w	r9, #0
 8004016:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004018:	e7dc      	b.n	8003fd4 <_printf_float+0x15c>
 800401a:	b913      	cbnz	r3, 8004022 <_printf_float+0x1aa>
 800401c:	6822      	ldr	r2, [r4, #0]
 800401e:	07d2      	lsls	r2, r2, #31
 8004020:	d501      	bpl.n	8004026 <_printf_float+0x1ae>
 8004022:	3302      	adds	r3, #2
 8004024:	e7f4      	b.n	8004010 <_printf_float+0x198>
 8004026:	2301      	movs	r3, #1
 8004028:	e7f2      	b.n	8004010 <_printf_float+0x198>
 800402a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800402e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004030:	4299      	cmp	r1, r3
 8004032:	db05      	blt.n	8004040 <_printf_float+0x1c8>
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	6121      	str	r1, [r4, #16]
 8004038:	07d8      	lsls	r0, r3, #31
 800403a:	d5ea      	bpl.n	8004012 <_printf_float+0x19a>
 800403c:	1c4b      	adds	r3, r1, #1
 800403e:	e7e7      	b.n	8004010 <_printf_float+0x198>
 8004040:	2900      	cmp	r1, #0
 8004042:	bfcc      	ite	gt
 8004044:	2201      	movgt	r2, #1
 8004046:	f1c1 0202 	rsble	r2, r1, #2
 800404a:	4413      	add	r3, r2
 800404c:	e7e0      	b.n	8004010 <_printf_float+0x198>
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	055a      	lsls	r2, r3, #21
 8004052:	d407      	bmi.n	8004064 <_printf_float+0x1ec>
 8004054:	6923      	ldr	r3, [r4, #16]
 8004056:	4642      	mov	r2, r8
 8004058:	4631      	mov	r1, r6
 800405a:	4628      	mov	r0, r5
 800405c:	47b8      	blx	r7
 800405e:	3001      	adds	r0, #1
 8004060:	d12b      	bne.n	80040ba <_printf_float+0x242>
 8004062:	e764      	b.n	8003f2e <_printf_float+0xb6>
 8004064:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004068:	f240 80dc 	bls.w	8004224 <_printf_float+0x3ac>
 800406c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004070:	2200      	movs	r2, #0
 8004072:	2300      	movs	r3, #0
 8004074:	f7fc fc98 	bl	80009a8 <__aeabi_dcmpeq>
 8004078:	2800      	cmp	r0, #0
 800407a:	d033      	beq.n	80040e4 <_printf_float+0x26c>
 800407c:	2301      	movs	r3, #1
 800407e:	4631      	mov	r1, r6
 8004080:	4628      	mov	r0, r5
 8004082:	4a35      	ldr	r2, [pc, #212]	@ (8004158 <_printf_float+0x2e0>)
 8004084:	47b8      	blx	r7
 8004086:	3001      	adds	r0, #1
 8004088:	f43f af51 	beq.w	8003f2e <_printf_float+0xb6>
 800408c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004090:	4543      	cmp	r3, r8
 8004092:	db02      	blt.n	800409a <_printf_float+0x222>
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	07d8      	lsls	r0, r3, #31
 8004098:	d50f      	bpl.n	80040ba <_printf_float+0x242>
 800409a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800409e:	4631      	mov	r1, r6
 80040a0:	4628      	mov	r0, r5
 80040a2:	47b8      	blx	r7
 80040a4:	3001      	adds	r0, #1
 80040a6:	f43f af42 	beq.w	8003f2e <_printf_float+0xb6>
 80040aa:	f04f 0900 	mov.w	r9, #0
 80040ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80040b2:	f104 0a1a 	add.w	sl, r4, #26
 80040b6:	45c8      	cmp	r8, r9
 80040b8:	dc09      	bgt.n	80040ce <_printf_float+0x256>
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	079b      	lsls	r3, r3, #30
 80040be:	f100 8102 	bmi.w	80042c6 <_printf_float+0x44e>
 80040c2:	68e0      	ldr	r0, [r4, #12]
 80040c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80040c6:	4298      	cmp	r0, r3
 80040c8:	bfb8      	it	lt
 80040ca:	4618      	movlt	r0, r3
 80040cc:	e731      	b.n	8003f32 <_printf_float+0xba>
 80040ce:	2301      	movs	r3, #1
 80040d0:	4652      	mov	r2, sl
 80040d2:	4631      	mov	r1, r6
 80040d4:	4628      	mov	r0, r5
 80040d6:	47b8      	blx	r7
 80040d8:	3001      	adds	r0, #1
 80040da:	f43f af28 	beq.w	8003f2e <_printf_float+0xb6>
 80040de:	f109 0901 	add.w	r9, r9, #1
 80040e2:	e7e8      	b.n	80040b6 <_printf_float+0x23e>
 80040e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	dc38      	bgt.n	800415c <_printf_float+0x2e4>
 80040ea:	2301      	movs	r3, #1
 80040ec:	4631      	mov	r1, r6
 80040ee:	4628      	mov	r0, r5
 80040f0:	4a19      	ldr	r2, [pc, #100]	@ (8004158 <_printf_float+0x2e0>)
 80040f2:	47b8      	blx	r7
 80040f4:	3001      	adds	r0, #1
 80040f6:	f43f af1a 	beq.w	8003f2e <_printf_float+0xb6>
 80040fa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80040fe:	ea59 0303 	orrs.w	r3, r9, r3
 8004102:	d102      	bne.n	800410a <_printf_float+0x292>
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	07d9      	lsls	r1, r3, #31
 8004108:	d5d7      	bpl.n	80040ba <_printf_float+0x242>
 800410a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800410e:	4631      	mov	r1, r6
 8004110:	4628      	mov	r0, r5
 8004112:	47b8      	blx	r7
 8004114:	3001      	adds	r0, #1
 8004116:	f43f af0a 	beq.w	8003f2e <_printf_float+0xb6>
 800411a:	f04f 0a00 	mov.w	sl, #0
 800411e:	f104 0b1a 	add.w	fp, r4, #26
 8004122:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004124:	425b      	negs	r3, r3
 8004126:	4553      	cmp	r3, sl
 8004128:	dc01      	bgt.n	800412e <_printf_float+0x2b6>
 800412a:	464b      	mov	r3, r9
 800412c:	e793      	b.n	8004056 <_printf_float+0x1de>
 800412e:	2301      	movs	r3, #1
 8004130:	465a      	mov	r2, fp
 8004132:	4631      	mov	r1, r6
 8004134:	4628      	mov	r0, r5
 8004136:	47b8      	blx	r7
 8004138:	3001      	adds	r0, #1
 800413a:	f43f aef8 	beq.w	8003f2e <_printf_float+0xb6>
 800413e:	f10a 0a01 	add.w	sl, sl, #1
 8004142:	e7ee      	b.n	8004122 <_printf_float+0x2aa>
 8004144:	7fefffff 	.word	0x7fefffff
 8004148:	08006d4a 	.word	0x08006d4a
 800414c:	08006d46 	.word	0x08006d46
 8004150:	08006d52 	.word	0x08006d52
 8004154:	08006d4e 	.word	0x08006d4e
 8004158:	08006d56 	.word	0x08006d56
 800415c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800415e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004162:	4553      	cmp	r3, sl
 8004164:	bfa8      	it	ge
 8004166:	4653      	movge	r3, sl
 8004168:	2b00      	cmp	r3, #0
 800416a:	4699      	mov	r9, r3
 800416c:	dc36      	bgt.n	80041dc <_printf_float+0x364>
 800416e:	f04f 0b00 	mov.w	fp, #0
 8004172:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004176:	f104 021a 	add.w	r2, r4, #26
 800417a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800417c:	930a      	str	r3, [sp, #40]	@ 0x28
 800417e:	eba3 0309 	sub.w	r3, r3, r9
 8004182:	455b      	cmp	r3, fp
 8004184:	dc31      	bgt.n	80041ea <_printf_float+0x372>
 8004186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004188:	459a      	cmp	sl, r3
 800418a:	dc3a      	bgt.n	8004202 <_printf_float+0x38a>
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	07da      	lsls	r2, r3, #31
 8004190:	d437      	bmi.n	8004202 <_printf_float+0x38a>
 8004192:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004194:	ebaa 0903 	sub.w	r9, sl, r3
 8004198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800419a:	ebaa 0303 	sub.w	r3, sl, r3
 800419e:	4599      	cmp	r9, r3
 80041a0:	bfa8      	it	ge
 80041a2:	4699      	movge	r9, r3
 80041a4:	f1b9 0f00 	cmp.w	r9, #0
 80041a8:	dc33      	bgt.n	8004212 <_printf_float+0x39a>
 80041aa:	f04f 0800 	mov.w	r8, #0
 80041ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041b2:	f104 0b1a 	add.w	fp, r4, #26
 80041b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80041b8:	ebaa 0303 	sub.w	r3, sl, r3
 80041bc:	eba3 0309 	sub.w	r3, r3, r9
 80041c0:	4543      	cmp	r3, r8
 80041c2:	f77f af7a 	ble.w	80040ba <_printf_float+0x242>
 80041c6:	2301      	movs	r3, #1
 80041c8:	465a      	mov	r2, fp
 80041ca:	4631      	mov	r1, r6
 80041cc:	4628      	mov	r0, r5
 80041ce:	47b8      	blx	r7
 80041d0:	3001      	adds	r0, #1
 80041d2:	f43f aeac 	beq.w	8003f2e <_printf_float+0xb6>
 80041d6:	f108 0801 	add.w	r8, r8, #1
 80041da:	e7ec      	b.n	80041b6 <_printf_float+0x33e>
 80041dc:	4642      	mov	r2, r8
 80041de:	4631      	mov	r1, r6
 80041e0:	4628      	mov	r0, r5
 80041e2:	47b8      	blx	r7
 80041e4:	3001      	adds	r0, #1
 80041e6:	d1c2      	bne.n	800416e <_printf_float+0x2f6>
 80041e8:	e6a1      	b.n	8003f2e <_printf_float+0xb6>
 80041ea:	2301      	movs	r3, #1
 80041ec:	4631      	mov	r1, r6
 80041ee:	4628      	mov	r0, r5
 80041f0:	920a      	str	r2, [sp, #40]	@ 0x28
 80041f2:	47b8      	blx	r7
 80041f4:	3001      	adds	r0, #1
 80041f6:	f43f ae9a 	beq.w	8003f2e <_printf_float+0xb6>
 80041fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80041fc:	f10b 0b01 	add.w	fp, fp, #1
 8004200:	e7bb      	b.n	800417a <_printf_float+0x302>
 8004202:	4631      	mov	r1, r6
 8004204:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004208:	4628      	mov	r0, r5
 800420a:	47b8      	blx	r7
 800420c:	3001      	adds	r0, #1
 800420e:	d1c0      	bne.n	8004192 <_printf_float+0x31a>
 8004210:	e68d      	b.n	8003f2e <_printf_float+0xb6>
 8004212:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004214:	464b      	mov	r3, r9
 8004216:	4631      	mov	r1, r6
 8004218:	4628      	mov	r0, r5
 800421a:	4442      	add	r2, r8
 800421c:	47b8      	blx	r7
 800421e:	3001      	adds	r0, #1
 8004220:	d1c3      	bne.n	80041aa <_printf_float+0x332>
 8004222:	e684      	b.n	8003f2e <_printf_float+0xb6>
 8004224:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004228:	f1ba 0f01 	cmp.w	sl, #1
 800422c:	dc01      	bgt.n	8004232 <_printf_float+0x3ba>
 800422e:	07db      	lsls	r3, r3, #31
 8004230:	d536      	bpl.n	80042a0 <_printf_float+0x428>
 8004232:	2301      	movs	r3, #1
 8004234:	4642      	mov	r2, r8
 8004236:	4631      	mov	r1, r6
 8004238:	4628      	mov	r0, r5
 800423a:	47b8      	blx	r7
 800423c:	3001      	adds	r0, #1
 800423e:	f43f ae76 	beq.w	8003f2e <_printf_float+0xb6>
 8004242:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004246:	4631      	mov	r1, r6
 8004248:	4628      	mov	r0, r5
 800424a:	47b8      	blx	r7
 800424c:	3001      	adds	r0, #1
 800424e:	f43f ae6e 	beq.w	8003f2e <_printf_float+0xb6>
 8004252:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004256:	2200      	movs	r2, #0
 8004258:	2300      	movs	r3, #0
 800425a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800425e:	f7fc fba3 	bl	80009a8 <__aeabi_dcmpeq>
 8004262:	b9c0      	cbnz	r0, 8004296 <_printf_float+0x41e>
 8004264:	4653      	mov	r3, sl
 8004266:	f108 0201 	add.w	r2, r8, #1
 800426a:	4631      	mov	r1, r6
 800426c:	4628      	mov	r0, r5
 800426e:	47b8      	blx	r7
 8004270:	3001      	adds	r0, #1
 8004272:	d10c      	bne.n	800428e <_printf_float+0x416>
 8004274:	e65b      	b.n	8003f2e <_printf_float+0xb6>
 8004276:	2301      	movs	r3, #1
 8004278:	465a      	mov	r2, fp
 800427a:	4631      	mov	r1, r6
 800427c:	4628      	mov	r0, r5
 800427e:	47b8      	blx	r7
 8004280:	3001      	adds	r0, #1
 8004282:	f43f ae54 	beq.w	8003f2e <_printf_float+0xb6>
 8004286:	f108 0801 	add.w	r8, r8, #1
 800428a:	45d0      	cmp	r8, sl
 800428c:	dbf3      	blt.n	8004276 <_printf_float+0x3fe>
 800428e:	464b      	mov	r3, r9
 8004290:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004294:	e6e0      	b.n	8004058 <_printf_float+0x1e0>
 8004296:	f04f 0800 	mov.w	r8, #0
 800429a:	f104 0b1a 	add.w	fp, r4, #26
 800429e:	e7f4      	b.n	800428a <_printf_float+0x412>
 80042a0:	2301      	movs	r3, #1
 80042a2:	4642      	mov	r2, r8
 80042a4:	e7e1      	b.n	800426a <_printf_float+0x3f2>
 80042a6:	2301      	movs	r3, #1
 80042a8:	464a      	mov	r2, r9
 80042aa:	4631      	mov	r1, r6
 80042ac:	4628      	mov	r0, r5
 80042ae:	47b8      	blx	r7
 80042b0:	3001      	adds	r0, #1
 80042b2:	f43f ae3c 	beq.w	8003f2e <_printf_float+0xb6>
 80042b6:	f108 0801 	add.w	r8, r8, #1
 80042ba:	68e3      	ldr	r3, [r4, #12]
 80042bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80042be:	1a5b      	subs	r3, r3, r1
 80042c0:	4543      	cmp	r3, r8
 80042c2:	dcf0      	bgt.n	80042a6 <_printf_float+0x42e>
 80042c4:	e6fd      	b.n	80040c2 <_printf_float+0x24a>
 80042c6:	f04f 0800 	mov.w	r8, #0
 80042ca:	f104 0919 	add.w	r9, r4, #25
 80042ce:	e7f4      	b.n	80042ba <_printf_float+0x442>

080042d0 <_printf_common>:
 80042d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d4:	4616      	mov	r6, r2
 80042d6:	4698      	mov	r8, r3
 80042d8:	688a      	ldr	r2, [r1, #8]
 80042da:	690b      	ldr	r3, [r1, #16]
 80042dc:	4607      	mov	r7, r0
 80042de:	4293      	cmp	r3, r2
 80042e0:	bfb8      	it	lt
 80042e2:	4613      	movlt	r3, r2
 80042e4:	6033      	str	r3, [r6, #0]
 80042e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80042ea:	460c      	mov	r4, r1
 80042ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80042f0:	b10a      	cbz	r2, 80042f6 <_printf_common+0x26>
 80042f2:	3301      	adds	r3, #1
 80042f4:	6033      	str	r3, [r6, #0]
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	0699      	lsls	r1, r3, #26
 80042fa:	bf42      	ittt	mi
 80042fc:	6833      	ldrmi	r3, [r6, #0]
 80042fe:	3302      	addmi	r3, #2
 8004300:	6033      	strmi	r3, [r6, #0]
 8004302:	6825      	ldr	r5, [r4, #0]
 8004304:	f015 0506 	ands.w	r5, r5, #6
 8004308:	d106      	bne.n	8004318 <_printf_common+0x48>
 800430a:	f104 0a19 	add.w	sl, r4, #25
 800430e:	68e3      	ldr	r3, [r4, #12]
 8004310:	6832      	ldr	r2, [r6, #0]
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	42ab      	cmp	r3, r5
 8004316:	dc2b      	bgt.n	8004370 <_printf_common+0xa0>
 8004318:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800431c:	6822      	ldr	r2, [r4, #0]
 800431e:	3b00      	subs	r3, #0
 8004320:	bf18      	it	ne
 8004322:	2301      	movne	r3, #1
 8004324:	0692      	lsls	r2, r2, #26
 8004326:	d430      	bmi.n	800438a <_printf_common+0xba>
 8004328:	4641      	mov	r1, r8
 800432a:	4638      	mov	r0, r7
 800432c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004330:	47c8      	blx	r9
 8004332:	3001      	adds	r0, #1
 8004334:	d023      	beq.n	800437e <_printf_common+0xae>
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	6922      	ldr	r2, [r4, #16]
 800433a:	f003 0306 	and.w	r3, r3, #6
 800433e:	2b04      	cmp	r3, #4
 8004340:	bf14      	ite	ne
 8004342:	2500      	movne	r5, #0
 8004344:	6833      	ldreq	r3, [r6, #0]
 8004346:	f04f 0600 	mov.w	r6, #0
 800434a:	bf08      	it	eq
 800434c:	68e5      	ldreq	r5, [r4, #12]
 800434e:	f104 041a 	add.w	r4, r4, #26
 8004352:	bf08      	it	eq
 8004354:	1aed      	subeq	r5, r5, r3
 8004356:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800435a:	bf08      	it	eq
 800435c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004360:	4293      	cmp	r3, r2
 8004362:	bfc4      	itt	gt
 8004364:	1a9b      	subgt	r3, r3, r2
 8004366:	18ed      	addgt	r5, r5, r3
 8004368:	42b5      	cmp	r5, r6
 800436a:	d11a      	bne.n	80043a2 <_printf_common+0xd2>
 800436c:	2000      	movs	r0, #0
 800436e:	e008      	b.n	8004382 <_printf_common+0xb2>
 8004370:	2301      	movs	r3, #1
 8004372:	4652      	mov	r2, sl
 8004374:	4641      	mov	r1, r8
 8004376:	4638      	mov	r0, r7
 8004378:	47c8      	blx	r9
 800437a:	3001      	adds	r0, #1
 800437c:	d103      	bne.n	8004386 <_printf_common+0xb6>
 800437e:	f04f 30ff 	mov.w	r0, #4294967295
 8004382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004386:	3501      	adds	r5, #1
 8004388:	e7c1      	b.n	800430e <_printf_common+0x3e>
 800438a:	2030      	movs	r0, #48	@ 0x30
 800438c:	18e1      	adds	r1, r4, r3
 800438e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004398:	4422      	add	r2, r4
 800439a:	3302      	adds	r3, #2
 800439c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043a0:	e7c2      	b.n	8004328 <_printf_common+0x58>
 80043a2:	2301      	movs	r3, #1
 80043a4:	4622      	mov	r2, r4
 80043a6:	4641      	mov	r1, r8
 80043a8:	4638      	mov	r0, r7
 80043aa:	47c8      	blx	r9
 80043ac:	3001      	adds	r0, #1
 80043ae:	d0e6      	beq.n	800437e <_printf_common+0xae>
 80043b0:	3601      	adds	r6, #1
 80043b2:	e7d9      	b.n	8004368 <_printf_common+0x98>

080043b4 <_printf_i>:
 80043b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043b8:	7e0f      	ldrb	r7, [r1, #24]
 80043ba:	4691      	mov	r9, r2
 80043bc:	2f78      	cmp	r7, #120	@ 0x78
 80043be:	4680      	mov	r8, r0
 80043c0:	460c      	mov	r4, r1
 80043c2:	469a      	mov	sl, r3
 80043c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80043c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80043ca:	d807      	bhi.n	80043dc <_printf_i+0x28>
 80043cc:	2f62      	cmp	r7, #98	@ 0x62
 80043ce:	d80a      	bhi.n	80043e6 <_printf_i+0x32>
 80043d0:	2f00      	cmp	r7, #0
 80043d2:	f000 80d1 	beq.w	8004578 <_printf_i+0x1c4>
 80043d6:	2f58      	cmp	r7, #88	@ 0x58
 80043d8:	f000 80b8 	beq.w	800454c <_printf_i+0x198>
 80043dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80043e4:	e03a      	b.n	800445c <_printf_i+0xa8>
 80043e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80043ea:	2b15      	cmp	r3, #21
 80043ec:	d8f6      	bhi.n	80043dc <_printf_i+0x28>
 80043ee:	a101      	add	r1, pc, #4	@ (adr r1, 80043f4 <_printf_i+0x40>)
 80043f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043f4:	0800444d 	.word	0x0800444d
 80043f8:	08004461 	.word	0x08004461
 80043fc:	080043dd 	.word	0x080043dd
 8004400:	080043dd 	.word	0x080043dd
 8004404:	080043dd 	.word	0x080043dd
 8004408:	080043dd 	.word	0x080043dd
 800440c:	08004461 	.word	0x08004461
 8004410:	080043dd 	.word	0x080043dd
 8004414:	080043dd 	.word	0x080043dd
 8004418:	080043dd 	.word	0x080043dd
 800441c:	080043dd 	.word	0x080043dd
 8004420:	0800455f 	.word	0x0800455f
 8004424:	0800448b 	.word	0x0800448b
 8004428:	08004519 	.word	0x08004519
 800442c:	080043dd 	.word	0x080043dd
 8004430:	080043dd 	.word	0x080043dd
 8004434:	08004581 	.word	0x08004581
 8004438:	080043dd 	.word	0x080043dd
 800443c:	0800448b 	.word	0x0800448b
 8004440:	080043dd 	.word	0x080043dd
 8004444:	080043dd 	.word	0x080043dd
 8004448:	08004521 	.word	0x08004521
 800444c:	6833      	ldr	r3, [r6, #0]
 800444e:	1d1a      	adds	r2, r3, #4
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6032      	str	r2, [r6, #0]
 8004454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004458:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800445c:	2301      	movs	r3, #1
 800445e:	e09c      	b.n	800459a <_printf_i+0x1e6>
 8004460:	6833      	ldr	r3, [r6, #0]
 8004462:	6820      	ldr	r0, [r4, #0]
 8004464:	1d19      	adds	r1, r3, #4
 8004466:	6031      	str	r1, [r6, #0]
 8004468:	0606      	lsls	r6, r0, #24
 800446a:	d501      	bpl.n	8004470 <_printf_i+0xbc>
 800446c:	681d      	ldr	r5, [r3, #0]
 800446e:	e003      	b.n	8004478 <_printf_i+0xc4>
 8004470:	0645      	lsls	r5, r0, #25
 8004472:	d5fb      	bpl.n	800446c <_printf_i+0xb8>
 8004474:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004478:	2d00      	cmp	r5, #0
 800447a:	da03      	bge.n	8004484 <_printf_i+0xd0>
 800447c:	232d      	movs	r3, #45	@ 0x2d
 800447e:	426d      	negs	r5, r5
 8004480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004484:	230a      	movs	r3, #10
 8004486:	4858      	ldr	r0, [pc, #352]	@ (80045e8 <_printf_i+0x234>)
 8004488:	e011      	b.n	80044ae <_printf_i+0xfa>
 800448a:	6821      	ldr	r1, [r4, #0]
 800448c:	6833      	ldr	r3, [r6, #0]
 800448e:	0608      	lsls	r0, r1, #24
 8004490:	f853 5b04 	ldr.w	r5, [r3], #4
 8004494:	d402      	bmi.n	800449c <_printf_i+0xe8>
 8004496:	0649      	lsls	r1, r1, #25
 8004498:	bf48      	it	mi
 800449a:	b2ad      	uxthmi	r5, r5
 800449c:	2f6f      	cmp	r7, #111	@ 0x6f
 800449e:	6033      	str	r3, [r6, #0]
 80044a0:	bf14      	ite	ne
 80044a2:	230a      	movne	r3, #10
 80044a4:	2308      	moveq	r3, #8
 80044a6:	4850      	ldr	r0, [pc, #320]	@ (80045e8 <_printf_i+0x234>)
 80044a8:	2100      	movs	r1, #0
 80044aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044ae:	6866      	ldr	r6, [r4, #4]
 80044b0:	2e00      	cmp	r6, #0
 80044b2:	60a6      	str	r6, [r4, #8]
 80044b4:	db05      	blt.n	80044c2 <_printf_i+0x10e>
 80044b6:	6821      	ldr	r1, [r4, #0]
 80044b8:	432e      	orrs	r6, r5
 80044ba:	f021 0104 	bic.w	r1, r1, #4
 80044be:	6021      	str	r1, [r4, #0]
 80044c0:	d04b      	beq.n	800455a <_printf_i+0x1a6>
 80044c2:	4616      	mov	r6, r2
 80044c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80044c8:	fb03 5711 	mls	r7, r3, r1, r5
 80044cc:	5dc7      	ldrb	r7, [r0, r7]
 80044ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044d2:	462f      	mov	r7, r5
 80044d4:	42bb      	cmp	r3, r7
 80044d6:	460d      	mov	r5, r1
 80044d8:	d9f4      	bls.n	80044c4 <_printf_i+0x110>
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d10b      	bne.n	80044f6 <_printf_i+0x142>
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	07df      	lsls	r7, r3, #31
 80044e2:	d508      	bpl.n	80044f6 <_printf_i+0x142>
 80044e4:	6923      	ldr	r3, [r4, #16]
 80044e6:	6861      	ldr	r1, [r4, #4]
 80044e8:	4299      	cmp	r1, r3
 80044ea:	bfde      	ittt	le
 80044ec:	2330      	movle	r3, #48	@ 0x30
 80044ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044f6:	1b92      	subs	r2, r2, r6
 80044f8:	6122      	str	r2, [r4, #16]
 80044fa:	464b      	mov	r3, r9
 80044fc:	4621      	mov	r1, r4
 80044fe:	4640      	mov	r0, r8
 8004500:	f8cd a000 	str.w	sl, [sp]
 8004504:	aa03      	add	r2, sp, #12
 8004506:	f7ff fee3 	bl	80042d0 <_printf_common>
 800450a:	3001      	adds	r0, #1
 800450c:	d14a      	bne.n	80045a4 <_printf_i+0x1f0>
 800450e:	f04f 30ff 	mov.w	r0, #4294967295
 8004512:	b004      	add	sp, #16
 8004514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	f043 0320 	orr.w	r3, r3, #32
 800451e:	6023      	str	r3, [r4, #0]
 8004520:	2778      	movs	r7, #120	@ 0x78
 8004522:	4832      	ldr	r0, [pc, #200]	@ (80045ec <_printf_i+0x238>)
 8004524:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	6831      	ldr	r1, [r6, #0]
 800452c:	061f      	lsls	r7, r3, #24
 800452e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004532:	d402      	bmi.n	800453a <_printf_i+0x186>
 8004534:	065f      	lsls	r7, r3, #25
 8004536:	bf48      	it	mi
 8004538:	b2ad      	uxthmi	r5, r5
 800453a:	6031      	str	r1, [r6, #0]
 800453c:	07d9      	lsls	r1, r3, #31
 800453e:	bf44      	itt	mi
 8004540:	f043 0320 	orrmi.w	r3, r3, #32
 8004544:	6023      	strmi	r3, [r4, #0]
 8004546:	b11d      	cbz	r5, 8004550 <_printf_i+0x19c>
 8004548:	2310      	movs	r3, #16
 800454a:	e7ad      	b.n	80044a8 <_printf_i+0xf4>
 800454c:	4826      	ldr	r0, [pc, #152]	@ (80045e8 <_printf_i+0x234>)
 800454e:	e7e9      	b.n	8004524 <_printf_i+0x170>
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	f023 0320 	bic.w	r3, r3, #32
 8004556:	6023      	str	r3, [r4, #0]
 8004558:	e7f6      	b.n	8004548 <_printf_i+0x194>
 800455a:	4616      	mov	r6, r2
 800455c:	e7bd      	b.n	80044da <_printf_i+0x126>
 800455e:	6833      	ldr	r3, [r6, #0]
 8004560:	6825      	ldr	r5, [r4, #0]
 8004562:	1d18      	adds	r0, r3, #4
 8004564:	6961      	ldr	r1, [r4, #20]
 8004566:	6030      	str	r0, [r6, #0]
 8004568:	062e      	lsls	r6, r5, #24
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	d501      	bpl.n	8004572 <_printf_i+0x1be>
 800456e:	6019      	str	r1, [r3, #0]
 8004570:	e002      	b.n	8004578 <_printf_i+0x1c4>
 8004572:	0668      	lsls	r0, r5, #25
 8004574:	d5fb      	bpl.n	800456e <_printf_i+0x1ba>
 8004576:	8019      	strh	r1, [r3, #0]
 8004578:	2300      	movs	r3, #0
 800457a:	4616      	mov	r6, r2
 800457c:	6123      	str	r3, [r4, #16]
 800457e:	e7bc      	b.n	80044fa <_printf_i+0x146>
 8004580:	6833      	ldr	r3, [r6, #0]
 8004582:	2100      	movs	r1, #0
 8004584:	1d1a      	adds	r2, r3, #4
 8004586:	6032      	str	r2, [r6, #0]
 8004588:	681e      	ldr	r6, [r3, #0]
 800458a:	6862      	ldr	r2, [r4, #4]
 800458c:	4630      	mov	r0, r6
 800458e:	f000 f9d6 	bl	800493e <memchr>
 8004592:	b108      	cbz	r0, 8004598 <_printf_i+0x1e4>
 8004594:	1b80      	subs	r0, r0, r6
 8004596:	6060      	str	r0, [r4, #4]
 8004598:	6863      	ldr	r3, [r4, #4]
 800459a:	6123      	str	r3, [r4, #16]
 800459c:	2300      	movs	r3, #0
 800459e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045a2:	e7aa      	b.n	80044fa <_printf_i+0x146>
 80045a4:	4632      	mov	r2, r6
 80045a6:	4649      	mov	r1, r9
 80045a8:	4640      	mov	r0, r8
 80045aa:	6923      	ldr	r3, [r4, #16]
 80045ac:	47d0      	blx	sl
 80045ae:	3001      	adds	r0, #1
 80045b0:	d0ad      	beq.n	800450e <_printf_i+0x15a>
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	079b      	lsls	r3, r3, #30
 80045b6:	d413      	bmi.n	80045e0 <_printf_i+0x22c>
 80045b8:	68e0      	ldr	r0, [r4, #12]
 80045ba:	9b03      	ldr	r3, [sp, #12]
 80045bc:	4298      	cmp	r0, r3
 80045be:	bfb8      	it	lt
 80045c0:	4618      	movlt	r0, r3
 80045c2:	e7a6      	b.n	8004512 <_printf_i+0x15e>
 80045c4:	2301      	movs	r3, #1
 80045c6:	4632      	mov	r2, r6
 80045c8:	4649      	mov	r1, r9
 80045ca:	4640      	mov	r0, r8
 80045cc:	47d0      	blx	sl
 80045ce:	3001      	adds	r0, #1
 80045d0:	d09d      	beq.n	800450e <_printf_i+0x15a>
 80045d2:	3501      	adds	r5, #1
 80045d4:	68e3      	ldr	r3, [r4, #12]
 80045d6:	9903      	ldr	r1, [sp, #12]
 80045d8:	1a5b      	subs	r3, r3, r1
 80045da:	42ab      	cmp	r3, r5
 80045dc:	dcf2      	bgt.n	80045c4 <_printf_i+0x210>
 80045de:	e7eb      	b.n	80045b8 <_printf_i+0x204>
 80045e0:	2500      	movs	r5, #0
 80045e2:	f104 0619 	add.w	r6, r4, #25
 80045e6:	e7f5      	b.n	80045d4 <_printf_i+0x220>
 80045e8:	08006d58 	.word	0x08006d58
 80045ec:	08006d69 	.word	0x08006d69

080045f0 <std>:
 80045f0:	2300      	movs	r3, #0
 80045f2:	b510      	push	{r4, lr}
 80045f4:	4604      	mov	r4, r0
 80045f6:	e9c0 3300 	strd	r3, r3, [r0]
 80045fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045fe:	6083      	str	r3, [r0, #8]
 8004600:	8181      	strh	r1, [r0, #12]
 8004602:	6643      	str	r3, [r0, #100]	@ 0x64
 8004604:	81c2      	strh	r2, [r0, #14]
 8004606:	6183      	str	r3, [r0, #24]
 8004608:	4619      	mov	r1, r3
 800460a:	2208      	movs	r2, #8
 800460c:	305c      	adds	r0, #92	@ 0x5c
 800460e:	f000 f916 	bl	800483e <memset>
 8004612:	4b0d      	ldr	r3, [pc, #52]	@ (8004648 <std+0x58>)
 8004614:	6224      	str	r4, [r4, #32]
 8004616:	6263      	str	r3, [r4, #36]	@ 0x24
 8004618:	4b0c      	ldr	r3, [pc, #48]	@ (800464c <std+0x5c>)
 800461a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800461c:	4b0c      	ldr	r3, [pc, #48]	@ (8004650 <std+0x60>)
 800461e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004620:	4b0c      	ldr	r3, [pc, #48]	@ (8004654 <std+0x64>)
 8004622:	6323      	str	r3, [r4, #48]	@ 0x30
 8004624:	4b0c      	ldr	r3, [pc, #48]	@ (8004658 <std+0x68>)
 8004626:	429c      	cmp	r4, r3
 8004628:	d006      	beq.n	8004638 <std+0x48>
 800462a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800462e:	4294      	cmp	r4, r2
 8004630:	d002      	beq.n	8004638 <std+0x48>
 8004632:	33d0      	adds	r3, #208	@ 0xd0
 8004634:	429c      	cmp	r4, r3
 8004636:	d105      	bne.n	8004644 <std+0x54>
 8004638:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800463c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004640:	f000 b97a 	b.w	8004938 <__retarget_lock_init_recursive>
 8004644:	bd10      	pop	{r4, pc}
 8004646:	bf00      	nop
 8004648:	080047b9 	.word	0x080047b9
 800464c:	080047db 	.word	0x080047db
 8004650:	08004813 	.word	0x08004813
 8004654:	08004837 	.word	0x08004837
 8004658:	2000029c 	.word	0x2000029c

0800465c <stdio_exit_handler>:
 800465c:	4a02      	ldr	r2, [pc, #8]	@ (8004668 <stdio_exit_handler+0xc>)
 800465e:	4903      	ldr	r1, [pc, #12]	@ (800466c <stdio_exit_handler+0x10>)
 8004660:	4803      	ldr	r0, [pc, #12]	@ (8004670 <stdio_exit_handler+0x14>)
 8004662:	f000 b869 	b.w	8004738 <_fwalk_sglue>
 8004666:	bf00      	nop
 8004668:	2000000c 	.word	0x2000000c
 800466c:	080062b9 	.word	0x080062b9
 8004670:	2000001c 	.word	0x2000001c

08004674 <cleanup_stdio>:
 8004674:	6841      	ldr	r1, [r0, #4]
 8004676:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <cleanup_stdio+0x34>)
 8004678:	b510      	push	{r4, lr}
 800467a:	4299      	cmp	r1, r3
 800467c:	4604      	mov	r4, r0
 800467e:	d001      	beq.n	8004684 <cleanup_stdio+0x10>
 8004680:	f001 fe1a 	bl	80062b8 <_fflush_r>
 8004684:	68a1      	ldr	r1, [r4, #8]
 8004686:	4b09      	ldr	r3, [pc, #36]	@ (80046ac <cleanup_stdio+0x38>)
 8004688:	4299      	cmp	r1, r3
 800468a:	d002      	beq.n	8004692 <cleanup_stdio+0x1e>
 800468c:	4620      	mov	r0, r4
 800468e:	f001 fe13 	bl	80062b8 <_fflush_r>
 8004692:	68e1      	ldr	r1, [r4, #12]
 8004694:	4b06      	ldr	r3, [pc, #24]	@ (80046b0 <cleanup_stdio+0x3c>)
 8004696:	4299      	cmp	r1, r3
 8004698:	d004      	beq.n	80046a4 <cleanup_stdio+0x30>
 800469a:	4620      	mov	r0, r4
 800469c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046a0:	f001 be0a 	b.w	80062b8 <_fflush_r>
 80046a4:	bd10      	pop	{r4, pc}
 80046a6:	bf00      	nop
 80046a8:	2000029c 	.word	0x2000029c
 80046ac:	20000304 	.word	0x20000304
 80046b0:	2000036c 	.word	0x2000036c

080046b4 <global_stdio_init.part.0>:
 80046b4:	b510      	push	{r4, lr}
 80046b6:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <global_stdio_init.part.0+0x30>)
 80046b8:	4c0b      	ldr	r4, [pc, #44]	@ (80046e8 <global_stdio_init.part.0+0x34>)
 80046ba:	4a0c      	ldr	r2, [pc, #48]	@ (80046ec <global_stdio_init.part.0+0x38>)
 80046bc:	4620      	mov	r0, r4
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	2104      	movs	r1, #4
 80046c2:	2200      	movs	r2, #0
 80046c4:	f7ff ff94 	bl	80045f0 <std>
 80046c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80046cc:	2201      	movs	r2, #1
 80046ce:	2109      	movs	r1, #9
 80046d0:	f7ff ff8e 	bl	80045f0 <std>
 80046d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80046d8:	2202      	movs	r2, #2
 80046da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046de:	2112      	movs	r1, #18
 80046e0:	f7ff bf86 	b.w	80045f0 <std>
 80046e4:	200003d4 	.word	0x200003d4
 80046e8:	2000029c 	.word	0x2000029c
 80046ec:	0800465d 	.word	0x0800465d

080046f0 <__sfp_lock_acquire>:
 80046f0:	4801      	ldr	r0, [pc, #4]	@ (80046f8 <__sfp_lock_acquire+0x8>)
 80046f2:	f000 b922 	b.w	800493a <__retarget_lock_acquire_recursive>
 80046f6:	bf00      	nop
 80046f8:	200003dd 	.word	0x200003dd

080046fc <__sfp_lock_release>:
 80046fc:	4801      	ldr	r0, [pc, #4]	@ (8004704 <__sfp_lock_release+0x8>)
 80046fe:	f000 b91d 	b.w	800493c <__retarget_lock_release_recursive>
 8004702:	bf00      	nop
 8004704:	200003dd 	.word	0x200003dd

08004708 <__sinit>:
 8004708:	b510      	push	{r4, lr}
 800470a:	4604      	mov	r4, r0
 800470c:	f7ff fff0 	bl	80046f0 <__sfp_lock_acquire>
 8004710:	6a23      	ldr	r3, [r4, #32]
 8004712:	b11b      	cbz	r3, 800471c <__sinit+0x14>
 8004714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004718:	f7ff bff0 	b.w	80046fc <__sfp_lock_release>
 800471c:	4b04      	ldr	r3, [pc, #16]	@ (8004730 <__sinit+0x28>)
 800471e:	6223      	str	r3, [r4, #32]
 8004720:	4b04      	ldr	r3, [pc, #16]	@ (8004734 <__sinit+0x2c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f5      	bne.n	8004714 <__sinit+0xc>
 8004728:	f7ff ffc4 	bl	80046b4 <global_stdio_init.part.0>
 800472c:	e7f2      	b.n	8004714 <__sinit+0xc>
 800472e:	bf00      	nop
 8004730:	08004675 	.word	0x08004675
 8004734:	200003d4 	.word	0x200003d4

08004738 <_fwalk_sglue>:
 8004738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800473c:	4607      	mov	r7, r0
 800473e:	4688      	mov	r8, r1
 8004740:	4614      	mov	r4, r2
 8004742:	2600      	movs	r6, #0
 8004744:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004748:	f1b9 0901 	subs.w	r9, r9, #1
 800474c:	d505      	bpl.n	800475a <_fwalk_sglue+0x22>
 800474e:	6824      	ldr	r4, [r4, #0]
 8004750:	2c00      	cmp	r4, #0
 8004752:	d1f7      	bne.n	8004744 <_fwalk_sglue+0xc>
 8004754:	4630      	mov	r0, r6
 8004756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800475a:	89ab      	ldrh	r3, [r5, #12]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d907      	bls.n	8004770 <_fwalk_sglue+0x38>
 8004760:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004764:	3301      	adds	r3, #1
 8004766:	d003      	beq.n	8004770 <_fwalk_sglue+0x38>
 8004768:	4629      	mov	r1, r5
 800476a:	4638      	mov	r0, r7
 800476c:	47c0      	blx	r8
 800476e:	4306      	orrs	r6, r0
 8004770:	3568      	adds	r5, #104	@ 0x68
 8004772:	e7e9      	b.n	8004748 <_fwalk_sglue+0x10>

08004774 <siprintf>:
 8004774:	b40e      	push	{r1, r2, r3}
 8004776:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800477a:	b510      	push	{r4, lr}
 800477c:	2400      	movs	r4, #0
 800477e:	b09d      	sub	sp, #116	@ 0x74
 8004780:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004782:	9002      	str	r0, [sp, #8]
 8004784:	9006      	str	r0, [sp, #24]
 8004786:	9107      	str	r1, [sp, #28]
 8004788:	9104      	str	r1, [sp, #16]
 800478a:	4809      	ldr	r0, [pc, #36]	@ (80047b0 <siprintf+0x3c>)
 800478c:	4909      	ldr	r1, [pc, #36]	@ (80047b4 <siprintf+0x40>)
 800478e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004792:	9105      	str	r1, [sp, #20]
 8004794:	6800      	ldr	r0, [r0, #0]
 8004796:	a902      	add	r1, sp, #8
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800479c:	f001 fc10 	bl	8005fc0 <_svfiprintf_r>
 80047a0:	9b02      	ldr	r3, [sp, #8]
 80047a2:	701c      	strb	r4, [r3, #0]
 80047a4:	b01d      	add	sp, #116	@ 0x74
 80047a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047aa:	b003      	add	sp, #12
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	20000018 	.word	0x20000018
 80047b4:	ffff0208 	.word	0xffff0208

080047b8 <__sread>:
 80047b8:	b510      	push	{r4, lr}
 80047ba:	460c      	mov	r4, r1
 80047bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047c0:	f000 f86c 	bl	800489c <_read_r>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	bfab      	itete	ge
 80047c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80047ca:	89a3      	ldrhlt	r3, [r4, #12]
 80047cc:	181b      	addge	r3, r3, r0
 80047ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80047d2:	bfac      	ite	ge
 80047d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80047d6:	81a3      	strhlt	r3, [r4, #12]
 80047d8:	bd10      	pop	{r4, pc}

080047da <__swrite>:
 80047da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047de:	461f      	mov	r7, r3
 80047e0:	898b      	ldrh	r3, [r1, #12]
 80047e2:	4605      	mov	r5, r0
 80047e4:	05db      	lsls	r3, r3, #23
 80047e6:	460c      	mov	r4, r1
 80047e8:	4616      	mov	r6, r2
 80047ea:	d505      	bpl.n	80047f8 <__swrite+0x1e>
 80047ec:	2302      	movs	r3, #2
 80047ee:	2200      	movs	r2, #0
 80047f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f4:	f000 f840 	bl	8004878 <_lseek_r>
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	4632      	mov	r2, r6
 80047fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004800:	81a3      	strh	r3, [r4, #12]
 8004802:	4628      	mov	r0, r5
 8004804:	463b      	mov	r3, r7
 8004806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800480a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800480e:	f000 b857 	b.w	80048c0 <_write_r>

08004812 <__sseek>:
 8004812:	b510      	push	{r4, lr}
 8004814:	460c      	mov	r4, r1
 8004816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800481a:	f000 f82d 	bl	8004878 <_lseek_r>
 800481e:	1c43      	adds	r3, r0, #1
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	bf15      	itete	ne
 8004824:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004826:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800482a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800482e:	81a3      	strheq	r3, [r4, #12]
 8004830:	bf18      	it	ne
 8004832:	81a3      	strhne	r3, [r4, #12]
 8004834:	bd10      	pop	{r4, pc}

08004836 <__sclose>:
 8004836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800483a:	f000 b80d 	b.w	8004858 <_close_r>

0800483e <memset>:
 800483e:	4603      	mov	r3, r0
 8004840:	4402      	add	r2, r0
 8004842:	4293      	cmp	r3, r2
 8004844:	d100      	bne.n	8004848 <memset+0xa>
 8004846:	4770      	bx	lr
 8004848:	f803 1b01 	strb.w	r1, [r3], #1
 800484c:	e7f9      	b.n	8004842 <memset+0x4>
	...

08004850 <_localeconv_r>:
 8004850:	4800      	ldr	r0, [pc, #0]	@ (8004854 <_localeconv_r+0x4>)
 8004852:	4770      	bx	lr
 8004854:	20000158 	.word	0x20000158

08004858 <_close_r>:
 8004858:	b538      	push	{r3, r4, r5, lr}
 800485a:	2300      	movs	r3, #0
 800485c:	4d05      	ldr	r5, [pc, #20]	@ (8004874 <_close_r+0x1c>)
 800485e:	4604      	mov	r4, r0
 8004860:	4608      	mov	r0, r1
 8004862:	602b      	str	r3, [r5, #0]
 8004864:	f7fd fb0f 	bl	8001e86 <_close>
 8004868:	1c43      	adds	r3, r0, #1
 800486a:	d102      	bne.n	8004872 <_close_r+0x1a>
 800486c:	682b      	ldr	r3, [r5, #0]
 800486e:	b103      	cbz	r3, 8004872 <_close_r+0x1a>
 8004870:	6023      	str	r3, [r4, #0]
 8004872:	bd38      	pop	{r3, r4, r5, pc}
 8004874:	200003d8 	.word	0x200003d8

08004878 <_lseek_r>:
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	4604      	mov	r4, r0
 800487c:	4608      	mov	r0, r1
 800487e:	4611      	mov	r1, r2
 8004880:	2200      	movs	r2, #0
 8004882:	4d05      	ldr	r5, [pc, #20]	@ (8004898 <_lseek_r+0x20>)
 8004884:	602a      	str	r2, [r5, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	f7fd fb21 	bl	8001ece <_lseek>
 800488c:	1c43      	adds	r3, r0, #1
 800488e:	d102      	bne.n	8004896 <_lseek_r+0x1e>
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	b103      	cbz	r3, 8004896 <_lseek_r+0x1e>
 8004894:	6023      	str	r3, [r4, #0]
 8004896:	bd38      	pop	{r3, r4, r5, pc}
 8004898:	200003d8 	.word	0x200003d8

0800489c <_read_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	4604      	mov	r4, r0
 80048a0:	4608      	mov	r0, r1
 80048a2:	4611      	mov	r1, r2
 80048a4:	2200      	movs	r2, #0
 80048a6:	4d05      	ldr	r5, [pc, #20]	@ (80048bc <_read_r+0x20>)
 80048a8:	602a      	str	r2, [r5, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	f7fd fab2 	bl	8001e14 <_read>
 80048b0:	1c43      	adds	r3, r0, #1
 80048b2:	d102      	bne.n	80048ba <_read_r+0x1e>
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	b103      	cbz	r3, 80048ba <_read_r+0x1e>
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
 80048bc:	200003d8 	.word	0x200003d8

080048c0 <_write_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	4604      	mov	r4, r0
 80048c4:	4608      	mov	r0, r1
 80048c6:	4611      	mov	r1, r2
 80048c8:	2200      	movs	r2, #0
 80048ca:	4d05      	ldr	r5, [pc, #20]	@ (80048e0 <_write_r+0x20>)
 80048cc:	602a      	str	r2, [r5, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	f7fd fabd 	bl	8001e4e <_write>
 80048d4:	1c43      	adds	r3, r0, #1
 80048d6:	d102      	bne.n	80048de <_write_r+0x1e>
 80048d8:	682b      	ldr	r3, [r5, #0]
 80048da:	b103      	cbz	r3, 80048de <_write_r+0x1e>
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	bd38      	pop	{r3, r4, r5, pc}
 80048e0:	200003d8 	.word	0x200003d8

080048e4 <__errno>:
 80048e4:	4b01      	ldr	r3, [pc, #4]	@ (80048ec <__errno+0x8>)
 80048e6:	6818      	ldr	r0, [r3, #0]
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20000018 	.word	0x20000018

080048f0 <__libc_init_array>:
 80048f0:	b570      	push	{r4, r5, r6, lr}
 80048f2:	2600      	movs	r6, #0
 80048f4:	4d0c      	ldr	r5, [pc, #48]	@ (8004928 <__libc_init_array+0x38>)
 80048f6:	4c0d      	ldr	r4, [pc, #52]	@ (800492c <__libc_init_array+0x3c>)
 80048f8:	1b64      	subs	r4, r4, r5
 80048fa:	10a4      	asrs	r4, r4, #2
 80048fc:	42a6      	cmp	r6, r4
 80048fe:	d109      	bne.n	8004914 <__libc_init_array+0x24>
 8004900:	f002 f96c 	bl	8006bdc <_init>
 8004904:	2600      	movs	r6, #0
 8004906:	4d0a      	ldr	r5, [pc, #40]	@ (8004930 <__libc_init_array+0x40>)
 8004908:	4c0a      	ldr	r4, [pc, #40]	@ (8004934 <__libc_init_array+0x44>)
 800490a:	1b64      	subs	r4, r4, r5
 800490c:	10a4      	asrs	r4, r4, #2
 800490e:	42a6      	cmp	r6, r4
 8004910:	d105      	bne.n	800491e <__libc_init_array+0x2e>
 8004912:	bd70      	pop	{r4, r5, r6, pc}
 8004914:	f855 3b04 	ldr.w	r3, [r5], #4
 8004918:	4798      	blx	r3
 800491a:	3601      	adds	r6, #1
 800491c:	e7ee      	b.n	80048fc <__libc_init_array+0xc>
 800491e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004922:	4798      	blx	r3
 8004924:	3601      	adds	r6, #1
 8004926:	e7f2      	b.n	800490e <__libc_init_array+0x1e>
 8004928:	080070d8 	.word	0x080070d8
 800492c:	080070d8 	.word	0x080070d8
 8004930:	080070d8 	.word	0x080070d8
 8004934:	080070dc 	.word	0x080070dc

08004938 <__retarget_lock_init_recursive>:
 8004938:	4770      	bx	lr

0800493a <__retarget_lock_acquire_recursive>:
 800493a:	4770      	bx	lr

0800493c <__retarget_lock_release_recursive>:
 800493c:	4770      	bx	lr

0800493e <memchr>:
 800493e:	4603      	mov	r3, r0
 8004940:	b510      	push	{r4, lr}
 8004942:	b2c9      	uxtb	r1, r1
 8004944:	4402      	add	r2, r0
 8004946:	4293      	cmp	r3, r2
 8004948:	4618      	mov	r0, r3
 800494a:	d101      	bne.n	8004950 <memchr+0x12>
 800494c:	2000      	movs	r0, #0
 800494e:	e003      	b.n	8004958 <memchr+0x1a>
 8004950:	7804      	ldrb	r4, [r0, #0]
 8004952:	3301      	adds	r3, #1
 8004954:	428c      	cmp	r4, r1
 8004956:	d1f6      	bne.n	8004946 <memchr+0x8>
 8004958:	bd10      	pop	{r4, pc}

0800495a <quorem>:
 800495a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495e:	6903      	ldr	r3, [r0, #16]
 8004960:	690c      	ldr	r4, [r1, #16]
 8004962:	4607      	mov	r7, r0
 8004964:	42a3      	cmp	r3, r4
 8004966:	db7e      	blt.n	8004a66 <quorem+0x10c>
 8004968:	3c01      	subs	r4, #1
 800496a:	00a3      	lsls	r3, r4, #2
 800496c:	f100 0514 	add.w	r5, r0, #20
 8004970:	f101 0814 	add.w	r8, r1, #20
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800497a:	9301      	str	r3, [sp, #4]
 800497c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004980:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004984:	3301      	adds	r3, #1
 8004986:	429a      	cmp	r2, r3
 8004988:	fbb2 f6f3 	udiv	r6, r2, r3
 800498c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004990:	d32e      	bcc.n	80049f0 <quorem+0x96>
 8004992:	f04f 0a00 	mov.w	sl, #0
 8004996:	46c4      	mov	ip, r8
 8004998:	46ae      	mov	lr, r5
 800499a:	46d3      	mov	fp, sl
 800499c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80049a0:	b298      	uxth	r0, r3
 80049a2:	fb06 a000 	mla	r0, r6, r0, sl
 80049a6:	0c1b      	lsrs	r3, r3, #16
 80049a8:	0c02      	lsrs	r2, r0, #16
 80049aa:	fb06 2303 	mla	r3, r6, r3, r2
 80049ae:	f8de 2000 	ldr.w	r2, [lr]
 80049b2:	b280      	uxth	r0, r0
 80049b4:	b292      	uxth	r2, r2
 80049b6:	1a12      	subs	r2, r2, r0
 80049b8:	445a      	add	r2, fp
 80049ba:	f8de 0000 	ldr.w	r0, [lr]
 80049be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80049c8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80049cc:	b292      	uxth	r2, r2
 80049ce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80049d2:	45e1      	cmp	r9, ip
 80049d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80049d8:	f84e 2b04 	str.w	r2, [lr], #4
 80049dc:	d2de      	bcs.n	800499c <quorem+0x42>
 80049de:	9b00      	ldr	r3, [sp, #0]
 80049e0:	58eb      	ldr	r3, [r5, r3]
 80049e2:	b92b      	cbnz	r3, 80049f0 <quorem+0x96>
 80049e4:	9b01      	ldr	r3, [sp, #4]
 80049e6:	3b04      	subs	r3, #4
 80049e8:	429d      	cmp	r5, r3
 80049ea:	461a      	mov	r2, r3
 80049ec:	d32f      	bcc.n	8004a4e <quorem+0xf4>
 80049ee:	613c      	str	r4, [r7, #16]
 80049f0:	4638      	mov	r0, r7
 80049f2:	f001 f981 	bl	8005cf8 <__mcmp>
 80049f6:	2800      	cmp	r0, #0
 80049f8:	db25      	blt.n	8004a46 <quorem+0xec>
 80049fa:	4629      	mov	r1, r5
 80049fc:	2000      	movs	r0, #0
 80049fe:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a02:	f8d1 c000 	ldr.w	ip, [r1]
 8004a06:	fa1f fe82 	uxth.w	lr, r2
 8004a0a:	fa1f f38c 	uxth.w	r3, ip
 8004a0e:	eba3 030e 	sub.w	r3, r3, lr
 8004a12:	4403      	add	r3, r0
 8004a14:	0c12      	lsrs	r2, r2, #16
 8004a16:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004a1a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a24:	45c1      	cmp	r9, r8
 8004a26:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004a2a:	f841 3b04 	str.w	r3, [r1], #4
 8004a2e:	d2e6      	bcs.n	80049fe <quorem+0xa4>
 8004a30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a38:	b922      	cbnz	r2, 8004a44 <quorem+0xea>
 8004a3a:	3b04      	subs	r3, #4
 8004a3c:	429d      	cmp	r5, r3
 8004a3e:	461a      	mov	r2, r3
 8004a40:	d30b      	bcc.n	8004a5a <quorem+0x100>
 8004a42:	613c      	str	r4, [r7, #16]
 8004a44:	3601      	adds	r6, #1
 8004a46:	4630      	mov	r0, r6
 8004a48:	b003      	add	sp, #12
 8004a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	3b04      	subs	r3, #4
 8004a52:	2a00      	cmp	r2, #0
 8004a54:	d1cb      	bne.n	80049ee <quorem+0x94>
 8004a56:	3c01      	subs	r4, #1
 8004a58:	e7c6      	b.n	80049e8 <quorem+0x8e>
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	3b04      	subs	r3, #4
 8004a5e:	2a00      	cmp	r2, #0
 8004a60:	d1ef      	bne.n	8004a42 <quorem+0xe8>
 8004a62:	3c01      	subs	r4, #1
 8004a64:	e7ea      	b.n	8004a3c <quorem+0xe2>
 8004a66:	2000      	movs	r0, #0
 8004a68:	e7ee      	b.n	8004a48 <quorem+0xee>
 8004a6a:	0000      	movs	r0, r0
 8004a6c:	0000      	movs	r0, r0
	...

08004a70 <_dtoa_r>:
 8004a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a74:	4614      	mov	r4, r2
 8004a76:	461d      	mov	r5, r3
 8004a78:	69c7      	ldr	r7, [r0, #28]
 8004a7a:	b097      	sub	sp, #92	@ 0x5c
 8004a7c:	4681      	mov	r9, r0
 8004a7e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004a82:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004a84:	b97f      	cbnz	r7, 8004aa6 <_dtoa_r+0x36>
 8004a86:	2010      	movs	r0, #16
 8004a88:	f000 fe0e 	bl	80056a8 <malloc>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	f8c9 001c 	str.w	r0, [r9, #28]
 8004a92:	b920      	cbnz	r0, 8004a9e <_dtoa_r+0x2e>
 8004a94:	21ef      	movs	r1, #239	@ 0xef
 8004a96:	4bac      	ldr	r3, [pc, #688]	@ (8004d48 <_dtoa_r+0x2d8>)
 8004a98:	48ac      	ldr	r0, [pc, #688]	@ (8004d4c <_dtoa_r+0x2dc>)
 8004a9a:	f001 fc6d 	bl	8006378 <__assert_func>
 8004a9e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004aa2:	6007      	str	r7, [r0, #0]
 8004aa4:	60c7      	str	r7, [r0, #12]
 8004aa6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004aaa:	6819      	ldr	r1, [r3, #0]
 8004aac:	b159      	cbz	r1, 8004ac6 <_dtoa_r+0x56>
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	4093      	lsls	r3, r2
 8004ab4:	604a      	str	r2, [r1, #4]
 8004ab6:	608b      	str	r3, [r1, #8]
 8004ab8:	4648      	mov	r0, r9
 8004aba:	f000 feeb 	bl	8005894 <_Bfree>
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	1e2b      	subs	r3, r5, #0
 8004ac8:	bfaf      	iteee	ge
 8004aca:	2300      	movge	r3, #0
 8004acc:	2201      	movlt	r2, #1
 8004ace:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004ad2:	9307      	strlt	r3, [sp, #28]
 8004ad4:	bfa8      	it	ge
 8004ad6:	6033      	strge	r3, [r6, #0]
 8004ad8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004adc:	4b9c      	ldr	r3, [pc, #624]	@ (8004d50 <_dtoa_r+0x2e0>)
 8004ade:	bfb8      	it	lt
 8004ae0:	6032      	strlt	r2, [r6, #0]
 8004ae2:	ea33 0308 	bics.w	r3, r3, r8
 8004ae6:	d112      	bne.n	8004b0e <_dtoa_r+0x9e>
 8004ae8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004aec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004af4:	4323      	orrs	r3, r4
 8004af6:	f000 855e 	beq.w	80055b6 <_dtoa_r+0xb46>
 8004afa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004afc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004d54 <_dtoa_r+0x2e4>
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 8560 	beq.w	80055c6 <_dtoa_r+0xb56>
 8004b06:	f10a 0303 	add.w	r3, sl, #3
 8004b0a:	f000 bd5a 	b.w	80055c2 <_dtoa_r+0xb52>
 8004b0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b12:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004b16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f7fb ff43 	bl	80009a8 <__aeabi_dcmpeq>
 8004b22:	4607      	mov	r7, r0
 8004b24:	b158      	cbz	r0, 8004b3e <_dtoa_r+0xce>
 8004b26:	2301      	movs	r3, #1
 8004b28:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004b2e:	b113      	cbz	r3, 8004b36 <_dtoa_r+0xc6>
 8004b30:	4b89      	ldr	r3, [pc, #548]	@ (8004d58 <_dtoa_r+0x2e8>)
 8004b32:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8004d5c <_dtoa_r+0x2ec>
 8004b3a:	f000 bd44 	b.w	80055c6 <_dtoa_r+0xb56>
 8004b3e:	ab14      	add	r3, sp, #80	@ 0x50
 8004b40:	9301      	str	r3, [sp, #4]
 8004b42:	ab15      	add	r3, sp, #84	@ 0x54
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	4648      	mov	r0, r9
 8004b48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004b4c:	f001 f984 	bl	8005e58 <__d2b>
 8004b50:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004b54:	9003      	str	r0, [sp, #12]
 8004b56:	2e00      	cmp	r6, #0
 8004b58:	d078      	beq.n	8004c4c <_dtoa_r+0x1dc>
 8004b5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b60:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b68:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004b6c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004b70:	9712      	str	r7, [sp, #72]	@ 0x48
 8004b72:	4619      	mov	r1, r3
 8004b74:	2200      	movs	r2, #0
 8004b76:	4b7a      	ldr	r3, [pc, #488]	@ (8004d60 <_dtoa_r+0x2f0>)
 8004b78:	f7fb faf6 	bl	8000168 <__aeabi_dsub>
 8004b7c:	a36c      	add	r3, pc, #432	@ (adr r3, 8004d30 <_dtoa_r+0x2c0>)
 8004b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b82:	f7fb fca9 	bl	80004d8 <__aeabi_dmul>
 8004b86:	a36c      	add	r3, pc, #432	@ (adr r3, 8004d38 <_dtoa_r+0x2c8>)
 8004b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8c:	f7fb faee 	bl	800016c <__adddf3>
 8004b90:	4604      	mov	r4, r0
 8004b92:	4630      	mov	r0, r6
 8004b94:	460d      	mov	r5, r1
 8004b96:	f7fb fc35 	bl	8000404 <__aeabi_i2d>
 8004b9a:	a369      	add	r3, pc, #420	@ (adr r3, 8004d40 <_dtoa_r+0x2d0>)
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	f7fb fc9a 	bl	80004d8 <__aeabi_dmul>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4620      	mov	r0, r4
 8004baa:	4629      	mov	r1, r5
 8004bac:	f7fb fade 	bl	800016c <__adddf3>
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	460d      	mov	r5, r1
 8004bb4:	f7fb ff40 	bl	8000a38 <__aeabi_d2iz>
 8004bb8:	2200      	movs	r2, #0
 8004bba:	4607      	mov	r7, r0
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	f7fb fefb 	bl	80009bc <__aeabi_dcmplt>
 8004bc6:	b140      	cbz	r0, 8004bda <_dtoa_r+0x16a>
 8004bc8:	4638      	mov	r0, r7
 8004bca:	f7fb fc1b 	bl	8000404 <__aeabi_i2d>
 8004bce:	4622      	mov	r2, r4
 8004bd0:	462b      	mov	r3, r5
 8004bd2:	f7fb fee9 	bl	80009a8 <__aeabi_dcmpeq>
 8004bd6:	b900      	cbnz	r0, 8004bda <_dtoa_r+0x16a>
 8004bd8:	3f01      	subs	r7, #1
 8004bda:	2f16      	cmp	r7, #22
 8004bdc:	d854      	bhi.n	8004c88 <_dtoa_r+0x218>
 8004bde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004be2:	4b60      	ldr	r3, [pc, #384]	@ (8004d64 <_dtoa_r+0x2f4>)
 8004be4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	f7fb fee6 	bl	80009bc <__aeabi_dcmplt>
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	d04b      	beq.n	8004c8c <_dtoa_r+0x21c>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	3f01      	subs	r7, #1
 8004bf8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004bfa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004bfc:	1b9b      	subs	r3, r3, r6
 8004bfe:	1e5a      	subs	r2, r3, #1
 8004c00:	bf49      	itett	mi
 8004c02:	f1c3 0301 	rsbmi	r3, r3, #1
 8004c06:	2300      	movpl	r3, #0
 8004c08:	9304      	strmi	r3, [sp, #16]
 8004c0a:	2300      	movmi	r3, #0
 8004c0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c0e:	bf54      	ite	pl
 8004c10:	9304      	strpl	r3, [sp, #16]
 8004c12:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004c14:	2f00      	cmp	r7, #0
 8004c16:	db3b      	blt.n	8004c90 <_dtoa_r+0x220>
 8004c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c1a:	970e      	str	r7, [sp, #56]	@ 0x38
 8004c1c:	443b      	add	r3, r7
 8004c1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c20:	2300      	movs	r3, #0
 8004c22:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c24:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c26:	2b09      	cmp	r3, #9
 8004c28:	d865      	bhi.n	8004cf6 <_dtoa_r+0x286>
 8004c2a:	2b05      	cmp	r3, #5
 8004c2c:	bfc4      	itt	gt
 8004c2e:	3b04      	subgt	r3, #4
 8004c30:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004c32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c34:	bfc8      	it	gt
 8004c36:	2400      	movgt	r4, #0
 8004c38:	f1a3 0302 	sub.w	r3, r3, #2
 8004c3c:	bfd8      	it	le
 8004c3e:	2401      	movle	r4, #1
 8004c40:	2b03      	cmp	r3, #3
 8004c42:	d864      	bhi.n	8004d0e <_dtoa_r+0x29e>
 8004c44:	e8df f003 	tbb	[pc, r3]
 8004c48:	2c385553 	.word	0x2c385553
 8004c4c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004c50:	441e      	add	r6, r3
 8004c52:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	bfc1      	itttt	gt
 8004c5a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004c5e:	fa08 f803 	lslgt.w	r8, r8, r3
 8004c62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004c66:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004c6a:	bfd6      	itet	le
 8004c6c:	f1c3 0320 	rsble	r3, r3, #32
 8004c70:	ea48 0003 	orrgt.w	r0, r8, r3
 8004c74:	fa04 f003 	lslle.w	r0, r4, r3
 8004c78:	f7fb fbb4 	bl	80003e4 <__aeabi_ui2d>
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004c82:	3e01      	subs	r6, #1
 8004c84:	9212      	str	r2, [sp, #72]	@ 0x48
 8004c86:	e774      	b.n	8004b72 <_dtoa_r+0x102>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e7b5      	b.n	8004bf8 <_dtoa_r+0x188>
 8004c8c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004c8e:	e7b4      	b.n	8004bfa <_dtoa_r+0x18a>
 8004c90:	9b04      	ldr	r3, [sp, #16]
 8004c92:	1bdb      	subs	r3, r3, r7
 8004c94:	9304      	str	r3, [sp, #16]
 8004c96:	427b      	negs	r3, r7
 8004c98:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	930e      	str	r3, [sp, #56]	@ 0x38
 8004c9e:	e7c1      	b.n	8004c24 <_dtoa_r+0x1b4>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ca4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ca6:	eb07 0b03 	add.w	fp, r7, r3
 8004caa:	f10b 0301 	add.w	r3, fp, #1
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	9308      	str	r3, [sp, #32]
 8004cb2:	bfb8      	it	lt
 8004cb4:	2301      	movlt	r3, #1
 8004cb6:	e006      	b.n	8004cc6 <_dtoa_r+0x256>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004cbc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	dd28      	ble.n	8004d14 <_dtoa_r+0x2a4>
 8004cc2:	469b      	mov	fp, r3
 8004cc4:	9308      	str	r3, [sp, #32]
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	2204      	movs	r2, #4
 8004cca:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004cce:	f102 0514 	add.w	r5, r2, #20
 8004cd2:	429d      	cmp	r5, r3
 8004cd4:	d926      	bls.n	8004d24 <_dtoa_r+0x2b4>
 8004cd6:	6041      	str	r1, [r0, #4]
 8004cd8:	4648      	mov	r0, r9
 8004cda:	f000 fd9b 	bl	8005814 <_Balloc>
 8004cde:	4682      	mov	sl, r0
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	d143      	bne.n	8004d6c <_dtoa_r+0x2fc>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	f240 11af 	movw	r1, #431	@ 0x1af
 8004cea:	4b1f      	ldr	r3, [pc, #124]	@ (8004d68 <_dtoa_r+0x2f8>)
 8004cec:	e6d4      	b.n	8004a98 <_dtoa_r+0x28>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e7e3      	b.n	8004cba <_dtoa_r+0x24a>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	e7d5      	b.n	8004ca2 <_dtoa_r+0x232>
 8004cf6:	2401      	movs	r4, #1
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004cfc:	9320      	str	r3, [sp, #128]	@ 0x80
 8004cfe:	f04f 3bff 	mov.w	fp, #4294967295
 8004d02:	2200      	movs	r2, #0
 8004d04:	2312      	movs	r3, #18
 8004d06:	f8cd b020 	str.w	fp, [sp, #32]
 8004d0a:	9221      	str	r2, [sp, #132]	@ 0x84
 8004d0c:	e7db      	b.n	8004cc6 <_dtoa_r+0x256>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d12:	e7f4      	b.n	8004cfe <_dtoa_r+0x28e>
 8004d14:	f04f 0b01 	mov.w	fp, #1
 8004d18:	465b      	mov	r3, fp
 8004d1a:	f8cd b020 	str.w	fp, [sp, #32]
 8004d1e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8004d22:	e7d0      	b.n	8004cc6 <_dtoa_r+0x256>
 8004d24:	3101      	adds	r1, #1
 8004d26:	0052      	lsls	r2, r2, #1
 8004d28:	e7d1      	b.n	8004cce <_dtoa_r+0x25e>
 8004d2a:	bf00      	nop
 8004d2c:	f3af 8000 	nop.w
 8004d30:	636f4361 	.word	0x636f4361
 8004d34:	3fd287a7 	.word	0x3fd287a7
 8004d38:	8b60c8b3 	.word	0x8b60c8b3
 8004d3c:	3fc68a28 	.word	0x3fc68a28
 8004d40:	509f79fb 	.word	0x509f79fb
 8004d44:	3fd34413 	.word	0x3fd34413
 8004d48:	08006d87 	.word	0x08006d87
 8004d4c:	08006d9e 	.word	0x08006d9e
 8004d50:	7ff00000 	.word	0x7ff00000
 8004d54:	08006d83 	.word	0x08006d83
 8004d58:	08006d57 	.word	0x08006d57
 8004d5c:	08006d56 	.word	0x08006d56
 8004d60:	3ff80000 	.word	0x3ff80000
 8004d64:	08006ef0 	.word	0x08006ef0
 8004d68:	08006df6 	.word	0x08006df6
 8004d6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004d70:	6018      	str	r0, [r3, #0]
 8004d72:	9b08      	ldr	r3, [sp, #32]
 8004d74:	2b0e      	cmp	r3, #14
 8004d76:	f200 80a1 	bhi.w	8004ebc <_dtoa_r+0x44c>
 8004d7a:	2c00      	cmp	r4, #0
 8004d7c:	f000 809e 	beq.w	8004ebc <_dtoa_r+0x44c>
 8004d80:	2f00      	cmp	r7, #0
 8004d82:	dd33      	ble.n	8004dec <_dtoa_r+0x37c>
 8004d84:	4b9c      	ldr	r3, [pc, #624]	@ (8004ff8 <_dtoa_r+0x588>)
 8004d86:	f007 020f 	and.w	r2, r7, #15
 8004d8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d8e:	05f8      	lsls	r0, r7, #23
 8004d90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d94:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004d98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004d9c:	d516      	bpl.n	8004dcc <_dtoa_r+0x35c>
 8004d9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004da2:	4b96      	ldr	r3, [pc, #600]	@ (8004ffc <_dtoa_r+0x58c>)
 8004da4:	2603      	movs	r6, #3
 8004da6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004daa:	f7fb fcbf 	bl	800072c <__aeabi_ddiv>
 8004dae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004db2:	f004 040f 	and.w	r4, r4, #15
 8004db6:	4d91      	ldr	r5, [pc, #580]	@ (8004ffc <_dtoa_r+0x58c>)
 8004db8:	b954      	cbnz	r4, 8004dd0 <_dtoa_r+0x360>
 8004dba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004dbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dc2:	f7fb fcb3 	bl	800072c <__aeabi_ddiv>
 8004dc6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004dca:	e028      	b.n	8004e1e <_dtoa_r+0x3ae>
 8004dcc:	2602      	movs	r6, #2
 8004dce:	e7f2      	b.n	8004db6 <_dtoa_r+0x346>
 8004dd0:	07e1      	lsls	r1, r4, #31
 8004dd2:	d508      	bpl.n	8004de6 <_dtoa_r+0x376>
 8004dd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004dd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ddc:	f7fb fb7c 	bl	80004d8 <__aeabi_dmul>
 8004de0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004de4:	3601      	adds	r6, #1
 8004de6:	1064      	asrs	r4, r4, #1
 8004de8:	3508      	adds	r5, #8
 8004dea:	e7e5      	b.n	8004db8 <_dtoa_r+0x348>
 8004dec:	f000 80af 	beq.w	8004f4e <_dtoa_r+0x4de>
 8004df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004df4:	427c      	negs	r4, r7
 8004df6:	4b80      	ldr	r3, [pc, #512]	@ (8004ff8 <_dtoa_r+0x588>)
 8004df8:	f004 020f 	and.w	r2, r4, #15
 8004dfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	f7fb fb68 	bl	80004d8 <__aeabi_dmul>
 8004e08:	2602      	movs	r6, #2
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e10:	4d7a      	ldr	r5, [pc, #488]	@ (8004ffc <_dtoa_r+0x58c>)
 8004e12:	1124      	asrs	r4, r4, #4
 8004e14:	2c00      	cmp	r4, #0
 8004e16:	f040 808f 	bne.w	8004f38 <_dtoa_r+0x4c8>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1d3      	bne.n	8004dc6 <_dtoa_r+0x356>
 8004e1e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004e22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8094 	beq.w	8004f52 <_dtoa_r+0x4e2>
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	4629      	mov	r1, r5
 8004e30:	4b73      	ldr	r3, [pc, #460]	@ (8005000 <_dtoa_r+0x590>)
 8004e32:	f7fb fdc3 	bl	80009bc <__aeabi_dcmplt>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	f000 808b 	beq.w	8004f52 <_dtoa_r+0x4e2>
 8004e3c:	9b08      	ldr	r3, [sp, #32]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 8087 	beq.w	8004f52 <_dtoa_r+0x4e2>
 8004e44:	f1bb 0f00 	cmp.w	fp, #0
 8004e48:	dd34      	ble.n	8004eb4 <_dtoa_r+0x444>
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	4629      	mov	r1, r5
 8004e50:	4b6c      	ldr	r3, [pc, #432]	@ (8005004 <_dtoa_r+0x594>)
 8004e52:	f7fb fb41 	bl	80004d8 <__aeabi_dmul>
 8004e56:	465c      	mov	r4, fp
 8004e58:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e5c:	f107 38ff 	add.w	r8, r7, #4294967295
 8004e60:	3601      	adds	r6, #1
 8004e62:	4630      	mov	r0, r6
 8004e64:	f7fb face 	bl	8000404 <__aeabi_i2d>
 8004e68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e6c:	f7fb fb34 	bl	80004d8 <__aeabi_dmul>
 8004e70:	2200      	movs	r2, #0
 8004e72:	4b65      	ldr	r3, [pc, #404]	@ (8005008 <_dtoa_r+0x598>)
 8004e74:	f7fb f97a 	bl	800016c <__adddf3>
 8004e78:	4605      	mov	r5, r0
 8004e7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004e7e:	2c00      	cmp	r4, #0
 8004e80:	d16a      	bne.n	8004f58 <_dtoa_r+0x4e8>
 8004e82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e86:	2200      	movs	r2, #0
 8004e88:	4b60      	ldr	r3, [pc, #384]	@ (800500c <_dtoa_r+0x59c>)
 8004e8a:	f7fb f96d 	bl	8000168 <__aeabi_dsub>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004e96:	462a      	mov	r2, r5
 8004e98:	4633      	mov	r3, r6
 8004e9a:	f7fb fdad 	bl	80009f8 <__aeabi_dcmpgt>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	f040 8298 	bne.w	80053d4 <_dtoa_r+0x964>
 8004ea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ea8:	462a      	mov	r2, r5
 8004eaa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004eae:	f7fb fd85 	bl	80009bc <__aeabi_dcmplt>
 8004eb2:	bb38      	cbnz	r0, 8004f04 <_dtoa_r+0x494>
 8004eb4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004eb8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004ebc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f2c0 8157 	blt.w	8005172 <_dtoa_r+0x702>
 8004ec4:	2f0e      	cmp	r7, #14
 8004ec6:	f300 8154 	bgt.w	8005172 <_dtoa_r+0x702>
 8004eca:	4b4b      	ldr	r3, [pc, #300]	@ (8004ff8 <_dtoa_r+0x588>)
 8004ecc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004ed0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ed4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004ed8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f280 80e5 	bge.w	80050aa <_dtoa_r+0x63a>
 8004ee0:	9b08      	ldr	r3, [sp, #32]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f300 80e1 	bgt.w	80050aa <_dtoa_r+0x63a>
 8004ee8:	d10c      	bne.n	8004f04 <_dtoa_r+0x494>
 8004eea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	4b46      	ldr	r3, [pc, #280]	@ (800500c <_dtoa_r+0x59c>)
 8004ef2:	f7fb faf1 	bl	80004d8 <__aeabi_dmul>
 8004ef6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004efa:	f7fb fd73 	bl	80009e4 <__aeabi_dcmpge>
 8004efe:	2800      	cmp	r0, #0
 8004f00:	f000 8266 	beq.w	80053d0 <_dtoa_r+0x960>
 8004f04:	2400      	movs	r4, #0
 8004f06:	4625      	mov	r5, r4
 8004f08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f0a:	4656      	mov	r6, sl
 8004f0c:	ea6f 0803 	mvn.w	r8, r3
 8004f10:	2700      	movs	r7, #0
 8004f12:	4621      	mov	r1, r4
 8004f14:	4648      	mov	r0, r9
 8004f16:	f000 fcbd 	bl	8005894 <_Bfree>
 8004f1a:	2d00      	cmp	r5, #0
 8004f1c:	f000 80bd 	beq.w	800509a <_dtoa_r+0x62a>
 8004f20:	b12f      	cbz	r7, 8004f2e <_dtoa_r+0x4be>
 8004f22:	42af      	cmp	r7, r5
 8004f24:	d003      	beq.n	8004f2e <_dtoa_r+0x4be>
 8004f26:	4639      	mov	r1, r7
 8004f28:	4648      	mov	r0, r9
 8004f2a:	f000 fcb3 	bl	8005894 <_Bfree>
 8004f2e:	4629      	mov	r1, r5
 8004f30:	4648      	mov	r0, r9
 8004f32:	f000 fcaf 	bl	8005894 <_Bfree>
 8004f36:	e0b0      	b.n	800509a <_dtoa_r+0x62a>
 8004f38:	07e2      	lsls	r2, r4, #31
 8004f3a:	d505      	bpl.n	8004f48 <_dtoa_r+0x4d8>
 8004f3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f40:	f7fb faca 	bl	80004d8 <__aeabi_dmul>
 8004f44:	2301      	movs	r3, #1
 8004f46:	3601      	adds	r6, #1
 8004f48:	1064      	asrs	r4, r4, #1
 8004f4a:	3508      	adds	r5, #8
 8004f4c:	e762      	b.n	8004e14 <_dtoa_r+0x3a4>
 8004f4e:	2602      	movs	r6, #2
 8004f50:	e765      	b.n	8004e1e <_dtoa_r+0x3ae>
 8004f52:	46b8      	mov	r8, r7
 8004f54:	9c08      	ldr	r4, [sp, #32]
 8004f56:	e784      	b.n	8004e62 <_dtoa_r+0x3f2>
 8004f58:	4b27      	ldr	r3, [pc, #156]	@ (8004ff8 <_dtoa_r+0x588>)
 8004f5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004f5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f64:	4454      	add	r4, sl
 8004f66:	2900      	cmp	r1, #0
 8004f68:	d054      	beq.n	8005014 <_dtoa_r+0x5a4>
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	4928      	ldr	r1, [pc, #160]	@ (8005010 <_dtoa_r+0x5a0>)
 8004f6e:	f7fb fbdd 	bl	800072c <__aeabi_ddiv>
 8004f72:	4633      	mov	r3, r6
 8004f74:	462a      	mov	r2, r5
 8004f76:	f7fb f8f7 	bl	8000168 <__aeabi_dsub>
 8004f7a:	4656      	mov	r6, sl
 8004f7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004f80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f84:	f7fb fd58 	bl	8000a38 <__aeabi_d2iz>
 8004f88:	4605      	mov	r5, r0
 8004f8a:	f7fb fa3b 	bl	8000404 <__aeabi_i2d>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f96:	f7fb f8e7 	bl	8000168 <__aeabi_dsub>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	3530      	adds	r5, #48	@ 0x30
 8004fa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004fa4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004fa8:	f806 5b01 	strb.w	r5, [r6], #1
 8004fac:	f7fb fd06 	bl	80009bc <__aeabi_dcmplt>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	d172      	bne.n	800509a <_dtoa_r+0x62a>
 8004fb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004fb8:	2000      	movs	r0, #0
 8004fba:	4911      	ldr	r1, [pc, #68]	@ (8005000 <_dtoa_r+0x590>)
 8004fbc:	f7fb f8d4 	bl	8000168 <__aeabi_dsub>
 8004fc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004fc4:	f7fb fcfa 	bl	80009bc <__aeabi_dcmplt>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	f040 80b4 	bne.w	8005136 <_dtoa_r+0x6c6>
 8004fce:	42a6      	cmp	r6, r4
 8004fd0:	f43f af70 	beq.w	8004eb4 <_dtoa_r+0x444>
 8004fd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004fd8:	2200      	movs	r2, #0
 8004fda:	4b0a      	ldr	r3, [pc, #40]	@ (8005004 <_dtoa_r+0x594>)
 8004fdc:	f7fb fa7c 	bl	80004d8 <__aeabi_dmul>
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004fe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fea:	4b06      	ldr	r3, [pc, #24]	@ (8005004 <_dtoa_r+0x594>)
 8004fec:	f7fb fa74 	bl	80004d8 <__aeabi_dmul>
 8004ff0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004ff4:	e7c4      	b.n	8004f80 <_dtoa_r+0x510>
 8004ff6:	bf00      	nop
 8004ff8:	08006ef0 	.word	0x08006ef0
 8004ffc:	08006ec8 	.word	0x08006ec8
 8005000:	3ff00000 	.word	0x3ff00000
 8005004:	40240000 	.word	0x40240000
 8005008:	401c0000 	.word	0x401c0000
 800500c:	40140000 	.word	0x40140000
 8005010:	3fe00000 	.word	0x3fe00000
 8005014:	4631      	mov	r1, r6
 8005016:	4628      	mov	r0, r5
 8005018:	f7fb fa5e 	bl	80004d8 <__aeabi_dmul>
 800501c:	4656      	mov	r6, sl
 800501e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005022:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005024:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005028:	f7fb fd06 	bl	8000a38 <__aeabi_d2iz>
 800502c:	4605      	mov	r5, r0
 800502e:	f7fb f9e9 	bl	8000404 <__aeabi_i2d>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800503a:	f7fb f895 	bl	8000168 <__aeabi_dsub>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	3530      	adds	r5, #48	@ 0x30
 8005044:	f806 5b01 	strb.w	r5, [r6], #1
 8005048:	42a6      	cmp	r6, r4
 800504a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	d124      	bne.n	800509e <_dtoa_r+0x62e>
 8005054:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005058:	4bae      	ldr	r3, [pc, #696]	@ (8005314 <_dtoa_r+0x8a4>)
 800505a:	f7fb f887 	bl	800016c <__adddf3>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005066:	f7fb fcc7 	bl	80009f8 <__aeabi_dcmpgt>
 800506a:	2800      	cmp	r0, #0
 800506c:	d163      	bne.n	8005136 <_dtoa_r+0x6c6>
 800506e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005072:	2000      	movs	r0, #0
 8005074:	49a7      	ldr	r1, [pc, #668]	@ (8005314 <_dtoa_r+0x8a4>)
 8005076:	f7fb f877 	bl	8000168 <__aeabi_dsub>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005082:	f7fb fc9b 	bl	80009bc <__aeabi_dcmplt>
 8005086:	2800      	cmp	r0, #0
 8005088:	f43f af14 	beq.w	8004eb4 <_dtoa_r+0x444>
 800508c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800508e:	1e73      	subs	r3, r6, #1
 8005090:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005092:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005096:	2b30      	cmp	r3, #48	@ 0x30
 8005098:	d0f8      	beq.n	800508c <_dtoa_r+0x61c>
 800509a:	4647      	mov	r7, r8
 800509c:	e03b      	b.n	8005116 <_dtoa_r+0x6a6>
 800509e:	4b9e      	ldr	r3, [pc, #632]	@ (8005318 <_dtoa_r+0x8a8>)
 80050a0:	f7fb fa1a 	bl	80004d8 <__aeabi_dmul>
 80050a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80050a8:	e7bc      	b.n	8005024 <_dtoa_r+0x5b4>
 80050aa:	4656      	mov	r6, sl
 80050ac:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80050b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050b4:	4620      	mov	r0, r4
 80050b6:	4629      	mov	r1, r5
 80050b8:	f7fb fb38 	bl	800072c <__aeabi_ddiv>
 80050bc:	f7fb fcbc 	bl	8000a38 <__aeabi_d2iz>
 80050c0:	4680      	mov	r8, r0
 80050c2:	f7fb f99f 	bl	8000404 <__aeabi_i2d>
 80050c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050ca:	f7fb fa05 	bl	80004d8 <__aeabi_dmul>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	4620      	mov	r0, r4
 80050d4:	4629      	mov	r1, r5
 80050d6:	f7fb f847 	bl	8000168 <__aeabi_dsub>
 80050da:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80050de:	9d08      	ldr	r5, [sp, #32]
 80050e0:	f806 4b01 	strb.w	r4, [r6], #1
 80050e4:	eba6 040a 	sub.w	r4, r6, sl
 80050e8:	42a5      	cmp	r5, r4
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	d133      	bne.n	8005158 <_dtoa_r+0x6e8>
 80050f0:	f7fb f83c 	bl	800016c <__adddf3>
 80050f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050f8:	4604      	mov	r4, r0
 80050fa:	460d      	mov	r5, r1
 80050fc:	f7fb fc7c 	bl	80009f8 <__aeabi_dcmpgt>
 8005100:	b9c0      	cbnz	r0, 8005134 <_dtoa_r+0x6c4>
 8005102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005106:	4620      	mov	r0, r4
 8005108:	4629      	mov	r1, r5
 800510a:	f7fb fc4d 	bl	80009a8 <__aeabi_dcmpeq>
 800510e:	b110      	cbz	r0, 8005116 <_dtoa_r+0x6a6>
 8005110:	f018 0f01 	tst.w	r8, #1
 8005114:	d10e      	bne.n	8005134 <_dtoa_r+0x6c4>
 8005116:	4648      	mov	r0, r9
 8005118:	9903      	ldr	r1, [sp, #12]
 800511a:	f000 fbbb 	bl	8005894 <_Bfree>
 800511e:	2300      	movs	r3, #0
 8005120:	7033      	strb	r3, [r6, #0]
 8005122:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005124:	3701      	adds	r7, #1
 8005126:	601f      	str	r7, [r3, #0]
 8005128:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 824b 	beq.w	80055c6 <_dtoa_r+0xb56>
 8005130:	601e      	str	r6, [r3, #0]
 8005132:	e248      	b.n	80055c6 <_dtoa_r+0xb56>
 8005134:	46b8      	mov	r8, r7
 8005136:	4633      	mov	r3, r6
 8005138:	461e      	mov	r6, r3
 800513a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800513e:	2a39      	cmp	r2, #57	@ 0x39
 8005140:	d106      	bne.n	8005150 <_dtoa_r+0x6e0>
 8005142:	459a      	cmp	sl, r3
 8005144:	d1f8      	bne.n	8005138 <_dtoa_r+0x6c8>
 8005146:	2230      	movs	r2, #48	@ 0x30
 8005148:	f108 0801 	add.w	r8, r8, #1
 800514c:	f88a 2000 	strb.w	r2, [sl]
 8005150:	781a      	ldrb	r2, [r3, #0]
 8005152:	3201      	adds	r2, #1
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	e7a0      	b.n	800509a <_dtoa_r+0x62a>
 8005158:	2200      	movs	r2, #0
 800515a:	4b6f      	ldr	r3, [pc, #444]	@ (8005318 <_dtoa_r+0x8a8>)
 800515c:	f7fb f9bc 	bl	80004d8 <__aeabi_dmul>
 8005160:	2200      	movs	r2, #0
 8005162:	2300      	movs	r3, #0
 8005164:	4604      	mov	r4, r0
 8005166:	460d      	mov	r5, r1
 8005168:	f7fb fc1e 	bl	80009a8 <__aeabi_dcmpeq>
 800516c:	2800      	cmp	r0, #0
 800516e:	d09f      	beq.n	80050b0 <_dtoa_r+0x640>
 8005170:	e7d1      	b.n	8005116 <_dtoa_r+0x6a6>
 8005172:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005174:	2a00      	cmp	r2, #0
 8005176:	f000 80ea 	beq.w	800534e <_dtoa_r+0x8de>
 800517a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800517c:	2a01      	cmp	r2, #1
 800517e:	f300 80cd 	bgt.w	800531c <_dtoa_r+0x8ac>
 8005182:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005184:	2a00      	cmp	r2, #0
 8005186:	f000 80c1 	beq.w	800530c <_dtoa_r+0x89c>
 800518a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800518e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005190:	9e04      	ldr	r6, [sp, #16]
 8005192:	9a04      	ldr	r2, [sp, #16]
 8005194:	2101      	movs	r1, #1
 8005196:	441a      	add	r2, r3
 8005198:	9204      	str	r2, [sp, #16]
 800519a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800519c:	4648      	mov	r0, r9
 800519e:	441a      	add	r2, r3
 80051a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80051a2:	f000 fc2b 	bl	80059fc <__i2b>
 80051a6:	4605      	mov	r5, r0
 80051a8:	b166      	cbz	r6, 80051c4 <_dtoa_r+0x754>
 80051aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	dd09      	ble.n	80051c4 <_dtoa_r+0x754>
 80051b0:	42b3      	cmp	r3, r6
 80051b2:	bfa8      	it	ge
 80051b4:	4633      	movge	r3, r6
 80051b6:	9a04      	ldr	r2, [sp, #16]
 80051b8:	1af6      	subs	r6, r6, r3
 80051ba:	1ad2      	subs	r2, r2, r3
 80051bc:	9204      	str	r2, [sp, #16]
 80051be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80051c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051c6:	b30b      	cbz	r3, 800520c <_dtoa_r+0x79c>
 80051c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 80c6 	beq.w	800535c <_dtoa_r+0x8ec>
 80051d0:	2c00      	cmp	r4, #0
 80051d2:	f000 80c0 	beq.w	8005356 <_dtoa_r+0x8e6>
 80051d6:	4629      	mov	r1, r5
 80051d8:	4622      	mov	r2, r4
 80051da:	4648      	mov	r0, r9
 80051dc:	f000 fcc6 	bl	8005b6c <__pow5mult>
 80051e0:	9a03      	ldr	r2, [sp, #12]
 80051e2:	4601      	mov	r1, r0
 80051e4:	4605      	mov	r5, r0
 80051e6:	4648      	mov	r0, r9
 80051e8:	f000 fc1e 	bl	8005a28 <__multiply>
 80051ec:	9903      	ldr	r1, [sp, #12]
 80051ee:	4680      	mov	r8, r0
 80051f0:	4648      	mov	r0, r9
 80051f2:	f000 fb4f 	bl	8005894 <_Bfree>
 80051f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051f8:	1b1b      	subs	r3, r3, r4
 80051fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80051fc:	f000 80b1 	beq.w	8005362 <_dtoa_r+0x8f2>
 8005200:	4641      	mov	r1, r8
 8005202:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005204:	4648      	mov	r0, r9
 8005206:	f000 fcb1 	bl	8005b6c <__pow5mult>
 800520a:	9003      	str	r0, [sp, #12]
 800520c:	2101      	movs	r1, #1
 800520e:	4648      	mov	r0, r9
 8005210:	f000 fbf4 	bl	80059fc <__i2b>
 8005214:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005216:	4604      	mov	r4, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 81d8 	beq.w	80055ce <_dtoa_r+0xb5e>
 800521e:	461a      	mov	r2, r3
 8005220:	4601      	mov	r1, r0
 8005222:	4648      	mov	r0, r9
 8005224:	f000 fca2 	bl	8005b6c <__pow5mult>
 8005228:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800522a:	4604      	mov	r4, r0
 800522c:	2b01      	cmp	r3, #1
 800522e:	f300 809f 	bgt.w	8005370 <_dtoa_r+0x900>
 8005232:	9b06      	ldr	r3, [sp, #24]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f040 8097 	bne.w	8005368 <_dtoa_r+0x8f8>
 800523a:	9b07      	ldr	r3, [sp, #28]
 800523c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005240:	2b00      	cmp	r3, #0
 8005242:	f040 8093 	bne.w	800536c <_dtoa_r+0x8fc>
 8005246:	9b07      	ldr	r3, [sp, #28]
 8005248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800524c:	0d1b      	lsrs	r3, r3, #20
 800524e:	051b      	lsls	r3, r3, #20
 8005250:	b133      	cbz	r3, 8005260 <_dtoa_r+0x7f0>
 8005252:	9b04      	ldr	r3, [sp, #16]
 8005254:	3301      	adds	r3, #1
 8005256:	9304      	str	r3, [sp, #16]
 8005258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800525a:	3301      	adds	r3, #1
 800525c:	9309      	str	r3, [sp, #36]	@ 0x24
 800525e:	2301      	movs	r3, #1
 8005260:	930a      	str	r3, [sp, #40]	@ 0x28
 8005262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 81b8 	beq.w	80055da <_dtoa_r+0xb6a>
 800526a:	6923      	ldr	r3, [r4, #16]
 800526c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005270:	6918      	ldr	r0, [r3, #16]
 8005272:	f000 fb77 	bl	8005964 <__hi0bits>
 8005276:	f1c0 0020 	rsb	r0, r0, #32
 800527a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800527c:	4418      	add	r0, r3
 800527e:	f010 001f 	ands.w	r0, r0, #31
 8005282:	f000 8082 	beq.w	800538a <_dtoa_r+0x91a>
 8005286:	f1c0 0320 	rsb	r3, r0, #32
 800528a:	2b04      	cmp	r3, #4
 800528c:	dd73      	ble.n	8005376 <_dtoa_r+0x906>
 800528e:	9b04      	ldr	r3, [sp, #16]
 8005290:	f1c0 001c 	rsb	r0, r0, #28
 8005294:	4403      	add	r3, r0
 8005296:	9304      	str	r3, [sp, #16]
 8005298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800529a:	4406      	add	r6, r0
 800529c:	4403      	add	r3, r0
 800529e:	9309      	str	r3, [sp, #36]	@ 0x24
 80052a0:	9b04      	ldr	r3, [sp, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	dd05      	ble.n	80052b2 <_dtoa_r+0x842>
 80052a6:	461a      	mov	r2, r3
 80052a8:	4648      	mov	r0, r9
 80052aa:	9903      	ldr	r1, [sp, #12]
 80052ac:	f000 fcb8 	bl	8005c20 <__lshift>
 80052b0:	9003      	str	r0, [sp, #12]
 80052b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	dd05      	ble.n	80052c4 <_dtoa_r+0x854>
 80052b8:	4621      	mov	r1, r4
 80052ba:	461a      	mov	r2, r3
 80052bc:	4648      	mov	r0, r9
 80052be:	f000 fcaf 	bl	8005c20 <__lshift>
 80052c2:	4604      	mov	r4, r0
 80052c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d061      	beq.n	800538e <_dtoa_r+0x91e>
 80052ca:	4621      	mov	r1, r4
 80052cc:	9803      	ldr	r0, [sp, #12]
 80052ce:	f000 fd13 	bl	8005cf8 <__mcmp>
 80052d2:	2800      	cmp	r0, #0
 80052d4:	da5b      	bge.n	800538e <_dtoa_r+0x91e>
 80052d6:	2300      	movs	r3, #0
 80052d8:	220a      	movs	r2, #10
 80052da:	4648      	mov	r0, r9
 80052dc:	9903      	ldr	r1, [sp, #12]
 80052de:	f000 fafb 	bl	80058d8 <__multadd>
 80052e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052e4:	f107 38ff 	add.w	r8, r7, #4294967295
 80052e8:	9003      	str	r0, [sp, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 8177 	beq.w	80055de <_dtoa_r+0xb6e>
 80052f0:	4629      	mov	r1, r5
 80052f2:	2300      	movs	r3, #0
 80052f4:	220a      	movs	r2, #10
 80052f6:	4648      	mov	r0, r9
 80052f8:	f000 faee 	bl	80058d8 <__multadd>
 80052fc:	f1bb 0f00 	cmp.w	fp, #0
 8005300:	4605      	mov	r5, r0
 8005302:	dc6f      	bgt.n	80053e4 <_dtoa_r+0x974>
 8005304:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005306:	2b02      	cmp	r3, #2
 8005308:	dc49      	bgt.n	800539e <_dtoa_r+0x92e>
 800530a:	e06b      	b.n	80053e4 <_dtoa_r+0x974>
 800530c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800530e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005312:	e73c      	b.n	800518e <_dtoa_r+0x71e>
 8005314:	3fe00000 	.word	0x3fe00000
 8005318:	40240000 	.word	0x40240000
 800531c:	9b08      	ldr	r3, [sp, #32]
 800531e:	1e5c      	subs	r4, r3, #1
 8005320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005322:	42a3      	cmp	r3, r4
 8005324:	db09      	blt.n	800533a <_dtoa_r+0x8ca>
 8005326:	1b1c      	subs	r4, r3, r4
 8005328:	9b08      	ldr	r3, [sp, #32]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f6bf af30 	bge.w	8005190 <_dtoa_r+0x720>
 8005330:	9b04      	ldr	r3, [sp, #16]
 8005332:	9a08      	ldr	r2, [sp, #32]
 8005334:	1a9e      	subs	r6, r3, r2
 8005336:	2300      	movs	r3, #0
 8005338:	e72b      	b.n	8005192 <_dtoa_r+0x722>
 800533a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800533c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800533e:	1ae3      	subs	r3, r4, r3
 8005340:	441a      	add	r2, r3
 8005342:	940a      	str	r4, [sp, #40]	@ 0x28
 8005344:	9e04      	ldr	r6, [sp, #16]
 8005346:	2400      	movs	r4, #0
 8005348:	9b08      	ldr	r3, [sp, #32]
 800534a:	920e      	str	r2, [sp, #56]	@ 0x38
 800534c:	e721      	b.n	8005192 <_dtoa_r+0x722>
 800534e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005350:	9e04      	ldr	r6, [sp, #16]
 8005352:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005354:	e728      	b.n	80051a8 <_dtoa_r+0x738>
 8005356:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800535a:	e751      	b.n	8005200 <_dtoa_r+0x790>
 800535c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800535e:	9903      	ldr	r1, [sp, #12]
 8005360:	e750      	b.n	8005204 <_dtoa_r+0x794>
 8005362:	f8cd 800c 	str.w	r8, [sp, #12]
 8005366:	e751      	b.n	800520c <_dtoa_r+0x79c>
 8005368:	2300      	movs	r3, #0
 800536a:	e779      	b.n	8005260 <_dtoa_r+0x7f0>
 800536c:	9b06      	ldr	r3, [sp, #24]
 800536e:	e777      	b.n	8005260 <_dtoa_r+0x7f0>
 8005370:	2300      	movs	r3, #0
 8005372:	930a      	str	r3, [sp, #40]	@ 0x28
 8005374:	e779      	b.n	800526a <_dtoa_r+0x7fa>
 8005376:	d093      	beq.n	80052a0 <_dtoa_r+0x830>
 8005378:	9a04      	ldr	r2, [sp, #16]
 800537a:	331c      	adds	r3, #28
 800537c:	441a      	add	r2, r3
 800537e:	9204      	str	r2, [sp, #16]
 8005380:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005382:	441e      	add	r6, r3
 8005384:	441a      	add	r2, r3
 8005386:	9209      	str	r2, [sp, #36]	@ 0x24
 8005388:	e78a      	b.n	80052a0 <_dtoa_r+0x830>
 800538a:	4603      	mov	r3, r0
 800538c:	e7f4      	b.n	8005378 <_dtoa_r+0x908>
 800538e:	9b08      	ldr	r3, [sp, #32]
 8005390:	46b8      	mov	r8, r7
 8005392:	2b00      	cmp	r3, #0
 8005394:	dc20      	bgt.n	80053d8 <_dtoa_r+0x968>
 8005396:	469b      	mov	fp, r3
 8005398:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800539a:	2b02      	cmp	r3, #2
 800539c:	dd1e      	ble.n	80053dc <_dtoa_r+0x96c>
 800539e:	f1bb 0f00 	cmp.w	fp, #0
 80053a2:	f47f adb1 	bne.w	8004f08 <_dtoa_r+0x498>
 80053a6:	4621      	mov	r1, r4
 80053a8:	465b      	mov	r3, fp
 80053aa:	2205      	movs	r2, #5
 80053ac:	4648      	mov	r0, r9
 80053ae:	f000 fa93 	bl	80058d8 <__multadd>
 80053b2:	4601      	mov	r1, r0
 80053b4:	4604      	mov	r4, r0
 80053b6:	9803      	ldr	r0, [sp, #12]
 80053b8:	f000 fc9e 	bl	8005cf8 <__mcmp>
 80053bc:	2800      	cmp	r0, #0
 80053be:	f77f ada3 	ble.w	8004f08 <_dtoa_r+0x498>
 80053c2:	4656      	mov	r6, sl
 80053c4:	2331      	movs	r3, #49	@ 0x31
 80053c6:	f108 0801 	add.w	r8, r8, #1
 80053ca:	f806 3b01 	strb.w	r3, [r6], #1
 80053ce:	e59f      	b.n	8004f10 <_dtoa_r+0x4a0>
 80053d0:	46b8      	mov	r8, r7
 80053d2:	9c08      	ldr	r4, [sp, #32]
 80053d4:	4625      	mov	r5, r4
 80053d6:	e7f4      	b.n	80053c2 <_dtoa_r+0x952>
 80053d8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80053dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 8101 	beq.w	80055e6 <_dtoa_r+0xb76>
 80053e4:	2e00      	cmp	r6, #0
 80053e6:	dd05      	ble.n	80053f4 <_dtoa_r+0x984>
 80053e8:	4629      	mov	r1, r5
 80053ea:	4632      	mov	r2, r6
 80053ec:	4648      	mov	r0, r9
 80053ee:	f000 fc17 	bl	8005c20 <__lshift>
 80053f2:	4605      	mov	r5, r0
 80053f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d05c      	beq.n	80054b4 <_dtoa_r+0xa44>
 80053fa:	4648      	mov	r0, r9
 80053fc:	6869      	ldr	r1, [r5, #4]
 80053fe:	f000 fa09 	bl	8005814 <_Balloc>
 8005402:	4606      	mov	r6, r0
 8005404:	b928      	cbnz	r0, 8005412 <_dtoa_r+0x9a2>
 8005406:	4602      	mov	r2, r0
 8005408:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800540c:	4b80      	ldr	r3, [pc, #512]	@ (8005610 <_dtoa_r+0xba0>)
 800540e:	f7ff bb43 	b.w	8004a98 <_dtoa_r+0x28>
 8005412:	692a      	ldr	r2, [r5, #16]
 8005414:	f105 010c 	add.w	r1, r5, #12
 8005418:	3202      	adds	r2, #2
 800541a:	0092      	lsls	r2, r2, #2
 800541c:	300c      	adds	r0, #12
 800541e:	f000 ff9d 	bl	800635c <memcpy>
 8005422:	2201      	movs	r2, #1
 8005424:	4631      	mov	r1, r6
 8005426:	4648      	mov	r0, r9
 8005428:	f000 fbfa 	bl	8005c20 <__lshift>
 800542c:	462f      	mov	r7, r5
 800542e:	4605      	mov	r5, r0
 8005430:	f10a 0301 	add.w	r3, sl, #1
 8005434:	9304      	str	r3, [sp, #16]
 8005436:	eb0a 030b 	add.w	r3, sl, fp
 800543a:	930a      	str	r3, [sp, #40]	@ 0x28
 800543c:	9b06      	ldr	r3, [sp, #24]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	9309      	str	r3, [sp, #36]	@ 0x24
 8005444:	9b04      	ldr	r3, [sp, #16]
 8005446:	4621      	mov	r1, r4
 8005448:	9803      	ldr	r0, [sp, #12]
 800544a:	f103 3bff 	add.w	fp, r3, #4294967295
 800544e:	f7ff fa84 	bl	800495a <quorem>
 8005452:	4603      	mov	r3, r0
 8005454:	4639      	mov	r1, r7
 8005456:	3330      	adds	r3, #48	@ 0x30
 8005458:	9006      	str	r0, [sp, #24]
 800545a:	9803      	ldr	r0, [sp, #12]
 800545c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800545e:	f000 fc4b 	bl	8005cf8 <__mcmp>
 8005462:	462a      	mov	r2, r5
 8005464:	9008      	str	r0, [sp, #32]
 8005466:	4621      	mov	r1, r4
 8005468:	4648      	mov	r0, r9
 800546a:	f000 fc61 	bl	8005d30 <__mdiff>
 800546e:	68c2      	ldr	r2, [r0, #12]
 8005470:	4606      	mov	r6, r0
 8005472:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005474:	bb02      	cbnz	r2, 80054b8 <_dtoa_r+0xa48>
 8005476:	4601      	mov	r1, r0
 8005478:	9803      	ldr	r0, [sp, #12]
 800547a:	f000 fc3d 	bl	8005cf8 <__mcmp>
 800547e:	4602      	mov	r2, r0
 8005480:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005482:	4631      	mov	r1, r6
 8005484:	4648      	mov	r0, r9
 8005486:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800548a:	f000 fa03 	bl	8005894 <_Bfree>
 800548e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005490:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005492:	9e04      	ldr	r6, [sp, #16]
 8005494:	ea42 0103 	orr.w	r1, r2, r3
 8005498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800549a:	4319      	orrs	r1, r3
 800549c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800549e:	d10d      	bne.n	80054bc <_dtoa_r+0xa4c>
 80054a0:	2b39      	cmp	r3, #57	@ 0x39
 80054a2:	d027      	beq.n	80054f4 <_dtoa_r+0xa84>
 80054a4:	9a08      	ldr	r2, [sp, #32]
 80054a6:	2a00      	cmp	r2, #0
 80054a8:	dd01      	ble.n	80054ae <_dtoa_r+0xa3e>
 80054aa:	9b06      	ldr	r3, [sp, #24]
 80054ac:	3331      	adds	r3, #49	@ 0x31
 80054ae:	f88b 3000 	strb.w	r3, [fp]
 80054b2:	e52e      	b.n	8004f12 <_dtoa_r+0x4a2>
 80054b4:	4628      	mov	r0, r5
 80054b6:	e7b9      	b.n	800542c <_dtoa_r+0x9bc>
 80054b8:	2201      	movs	r2, #1
 80054ba:	e7e2      	b.n	8005482 <_dtoa_r+0xa12>
 80054bc:	9908      	ldr	r1, [sp, #32]
 80054be:	2900      	cmp	r1, #0
 80054c0:	db04      	blt.n	80054cc <_dtoa_r+0xa5c>
 80054c2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80054c4:	4301      	orrs	r1, r0
 80054c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054c8:	4301      	orrs	r1, r0
 80054ca:	d120      	bne.n	800550e <_dtoa_r+0xa9e>
 80054cc:	2a00      	cmp	r2, #0
 80054ce:	ddee      	ble.n	80054ae <_dtoa_r+0xa3e>
 80054d0:	2201      	movs	r2, #1
 80054d2:	9903      	ldr	r1, [sp, #12]
 80054d4:	4648      	mov	r0, r9
 80054d6:	9304      	str	r3, [sp, #16]
 80054d8:	f000 fba2 	bl	8005c20 <__lshift>
 80054dc:	4621      	mov	r1, r4
 80054de:	9003      	str	r0, [sp, #12]
 80054e0:	f000 fc0a 	bl	8005cf8 <__mcmp>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	9b04      	ldr	r3, [sp, #16]
 80054e8:	dc02      	bgt.n	80054f0 <_dtoa_r+0xa80>
 80054ea:	d1e0      	bne.n	80054ae <_dtoa_r+0xa3e>
 80054ec:	07da      	lsls	r2, r3, #31
 80054ee:	d5de      	bpl.n	80054ae <_dtoa_r+0xa3e>
 80054f0:	2b39      	cmp	r3, #57	@ 0x39
 80054f2:	d1da      	bne.n	80054aa <_dtoa_r+0xa3a>
 80054f4:	2339      	movs	r3, #57	@ 0x39
 80054f6:	f88b 3000 	strb.w	r3, [fp]
 80054fa:	4633      	mov	r3, r6
 80054fc:	461e      	mov	r6, r3
 80054fe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005502:	3b01      	subs	r3, #1
 8005504:	2a39      	cmp	r2, #57	@ 0x39
 8005506:	d04e      	beq.n	80055a6 <_dtoa_r+0xb36>
 8005508:	3201      	adds	r2, #1
 800550a:	701a      	strb	r2, [r3, #0]
 800550c:	e501      	b.n	8004f12 <_dtoa_r+0x4a2>
 800550e:	2a00      	cmp	r2, #0
 8005510:	dd03      	ble.n	800551a <_dtoa_r+0xaaa>
 8005512:	2b39      	cmp	r3, #57	@ 0x39
 8005514:	d0ee      	beq.n	80054f4 <_dtoa_r+0xa84>
 8005516:	3301      	adds	r3, #1
 8005518:	e7c9      	b.n	80054ae <_dtoa_r+0xa3e>
 800551a:	9a04      	ldr	r2, [sp, #16]
 800551c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800551e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005522:	428a      	cmp	r2, r1
 8005524:	d028      	beq.n	8005578 <_dtoa_r+0xb08>
 8005526:	2300      	movs	r3, #0
 8005528:	220a      	movs	r2, #10
 800552a:	9903      	ldr	r1, [sp, #12]
 800552c:	4648      	mov	r0, r9
 800552e:	f000 f9d3 	bl	80058d8 <__multadd>
 8005532:	42af      	cmp	r7, r5
 8005534:	9003      	str	r0, [sp, #12]
 8005536:	f04f 0300 	mov.w	r3, #0
 800553a:	f04f 020a 	mov.w	r2, #10
 800553e:	4639      	mov	r1, r7
 8005540:	4648      	mov	r0, r9
 8005542:	d107      	bne.n	8005554 <_dtoa_r+0xae4>
 8005544:	f000 f9c8 	bl	80058d8 <__multadd>
 8005548:	4607      	mov	r7, r0
 800554a:	4605      	mov	r5, r0
 800554c:	9b04      	ldr	r3, [sp, #16]
 800554e:	3301      	adds	r3, #1
 8005550:	9304      	str	r3, [sp, #16]
 8005552:	e777      	b.n	8005444 <_dtoa_r+0x9d4>
 8005554:	f000 f9c0 	bl	80058d8 <__multadd>
 8005558:	4629      	mov	r1, r5
 800555a:	4607      	mov	r7, r0
 800555c:	2300      	movs	r3, #0
 800555e:	220a      	movs	r2, #10
 8005560:	4648      	mov	r0, r9
 8005562:	f000 f9b9 	bl	80058d8 <__multadd>
 8005566:	4605      	mov	r5, r0
 8005568:	e7f0      	b.n	800554c <_dtoa_r+0xadc>
 800556a:	f1bb 0f00 	cmp.w	fp, #0
 800556e:	bfcc      	ite	gt
 8005570:	465e      	movgt	r6, fp
 8005572:	2601      	movle	r6, #1
 8005574:	2700      	movs	r7, #0
 8005576:	4456      	add	r6, sl
 8005578:	2201      	movs	r2, #1
 800557a:	9903      	ldr	r1, [sp, #12]
 800557c:	4648      	mov	r0, r9
 800557e:	9304      	str	r3, [sp, #16]
 8005580:	f000 fb4e 	bl	8005c20 <__lshift>
 8005584:	4621      	mov	r1, r4
 8005586:	9003      	str	r0, [sp, #12]
 8005588:	f000 fbb6 	bl	8005cf8 <__mcmp>
 800558c:	2800      	cmp	r0, #0
 800558e:	dcb4      	bgt.n	80054fa <_dtoa_r+0xa8a>
 8005590:	d102      	bne.n	8005598 <_dtoa_r+0xb28>
 8005592:	9b04      	ldr	r3, [sp, #16]
 8005594:	07db      	lsls	r3, r3, #31
 8005596:	d4b0      	bmi.n	80054fa <_dtoa_r+0xa8a>
 8005598:	4633      	mov	r3, r6
 800559a:	461e      	mov	r6, r3
 800559c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055a0:	2a30      	cmp	r2, #48	@ 0x30
 80055a2:	d0fa      	beq.n	800559a <_dtoa_r+0xb2a>
 80055a4:	e4b5      	b.n	8004f12 <_dtoa_r+0x4a2>
 80055a6:	459a      	cmp	sl, r3
 80055a8:	d1a8      	bne.n	80054fc <_dtoa_r+0xa8c>
 80055aa:	2331      	movs	r3, #49	@ 0x31
 80055ac:	f108 0801 	add.w	r8, r8, #1
 80055b0:	f88a 3000 	strb.w	r3, [sl]
 80055b4:	e4ad      	b.n	8004f12 <_dtoa_r+0x4a2>
 80055b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80055b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005614 <_dtoa_r+0xba4>
 80055bc:	b11b      	cbz	r3, 80055c6 <_dtoa_r+0xb56>
 80055be:	f10a 0308 	add.w	r3, sl, #8
 80055c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	4650      	mov	r0, sl
 80055c8:	b017      	add	sp, #92	@ 0x5c
 80055ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	f77f ae2e 	ble.w	8005232 <_dtoa_r+0x7c2>
 80055d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80055da:	2001      	movs	r0, #1
 80055dc:	e64d      	b.n	800527a <_dtoa_r+0x80a>
 80055de:	f1bb 0f00 	cmp.w	fp, #0
 80055e2:	f77f aed9 	ble.w	8005398 <_dtoa_r+0x928>
 80055e6:	4656      	mov	r6, sl
 80055e8:	4621      	mov	r1, r4
 80055ea:	9803      	ldr	r0, [sp, #12]
 80055ec:	f7ff f9b5 	bl	800495a <quorem>
 80055f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80055f4:	f806 3b01 	strb.w	r3, [r6], #1
 80055f8:	eba6 020a 	sub.w	r2, r6, sl
 80055fc:	4593      	cmp	fp, r2
 80055fe:	ddb4      	ble.n	800556a <_dtoa_r+0xafa>
 8005600:	2300      	movs	r3, #0
 8005602:	220a      	movs	r2, #10
 8005604:	4648      	mov	r0, r9
 8005606:	9903      	ldr	r1, [sp, #12]
 8005608:	f000 f966 	bl	80058d8 <__multadd>
 800560c:	9003      	str	r0, [sp, #12]
 800560e:	e7eb      	b.n	80055e8 <_dtoa_r+0xb78>
 8005610:	08006df6 	.word	0x08006df6
 8005614:	08006d7a 	.word	0x08006d7a

08005618 <_free_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4605      	mov	r5, r0
 800561c:	2900      	cmp	r1, #0
 800561e:	d040      	beq.n	80056a2 <_free_r+0x8a>
 8005620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005624:	1f0c      	subs	r4, r1, #4
 8005626:	2b00      	cmp	r3, #0
 8005628:	bfb8      	it	lt
 800562a:	18e4      	addlt	r4, r4, r3
 800562c:	f000 f8e6 	bl	80057fc <__malloc_lock>
 8005630:	4a1c      	ldr	r2, [pc, #112]	@ (80056a4 <_free_r+0x8c>)
 8005632:	6813      	ldr	r3, [r2, #0]
 8005634:	b933      	cbnz	r3, 8005644 <_free_r+0x2c>
 8005636:	6063      	str	r3, [r4, #4]
 8005638:	6014      	str	r4, [r2, #0]
 800563a:	4628      	mov	r0, r5
 800563c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005640:	f000 b8e2 	b.w	8005808 <__malloc_unlock>
 8005644:	42a3      	cmp	r3, r4
 8005646:	d908      	bls.n	800565a <_free_r+0x42>
 8005648:	6820      	ldr	r0, [r4, #0]
 800564a:	1821      	adds	r1, r4, r0
 800564c:	428b      	cmp	r3, r1
 800564e:	bf01      	itttt	eq
 8005650:	6819      	ldreq	r1, [r3, #0]
 8005652:	685b      	ldreq	r3, [r3, #4]
 8005654:	1809      	addeq	r1, r1, r0
 8005656:	6021      	streq	r1, [r4, #0]
 8005658:	e7ed      	b.n	8005636 <_free_r+0x1e>
 800565a:	461a      	mov	r2, r3
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	b10b      	cbz	r3, 8005664 <_free_r+0x4c>
 8005660:	42a3      	cmp	r3, r4
 8005662:	d9fa      	bls.n	800565a <_free_r+0x42>
 8005664:	6811      	ldr	r1, [r2, #0]
 8005666:	1850      	adds	r0, r2, r1
 8005668:	42a0      	cmp	r0, r4
 800566a:	d10b      	bne.n	8005684 <_free_r+0x6c>
 800566c:	6820      	ldr	r0, [r4, #0]
 800566e:	4401      	add	r1, r0
 8005670:	1850      	adds	r0, r2, r1
 8005672:	4283      	cmp	r3, r0
 8005674:	6011      	str	r1, [r2, #0]
 8005676:	d1e0      	bne.n	800563a <_free_r+0x22>
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	4408      	add	r0, r1
 800567e:	6010      	str	r0, [r2, #0]
 8005680:	6053      	str	r3, [r2, #4]
 8005682:	e7da      	b.n	800563a <_free_r+0x22>
 8005684:	d902      	bls.n	800568c <_free_r+0x74>
 8005686:	230c      	movs	r3, #12
 8005688:	602b      	str	r3, [r5, #0]
 800568a:	e7d6      	b.n	800563a <_free_r+0x22>
 800568c:	6820      	ldr	r0, [r4, #0]
 800568e:	1821      	adds	r1, r4, r0
 8005690:	428b      	cmp	r3, r1
 8005692:	bf01      	itttt	eq
 8005694:	6819      	ldreq	r1, [r3, #0]
 8005696:	685b      	ldreq	r3, [r3, #4]
 8005698:	1809      	addeq	r1, r1, r0
 800569a:	6021      	streq	r1, [r4, #0]
 800569c:	6063      	str	r3, [r4, #4]
 800569e:	6054      	str	r4, [r2, #4]
 80056a0:	e7cb      	b.n	800563a <_free_r+0x22>
 80056a2:	bd38      	pop	{r3, r4, r5, pc}
 80056a4:	200003e4 	.word	0x200003e4

080056a8 <malloc>:
 80056a8:	4b02      	ldr	r3, [pc, #8]	@ (80056b4 <malloc+0xc>)
 80056aa:	4601      	mov	r1, r0
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	f000 b825 	b.w	80056fc <_malloc_r>
 80056b2:	bf00      	nop
 80056b4:	20000018 	.word	0x20000018

080056b8 <sbrk_aligned>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	4e0f      	ldr	r6, [pc, #60]	@ (80056f8 <sbrk_aligned+0x40>)
 80056bc:	460c      	mov	r4, r1
 80056be:	6831      	ldr	r1, [r6, #0]
 80056c0:	4605      	mov	r5, r0
 80056c2:	b911      	cbnz	r1, 80056ca <sbrk_aligned+0x12>
 80056c4:	f000 fe3a 	bl	800633c <_sbrk_r>
 80056c8:	6030      	str	r0, [r6, #0]
 80056ca:	4621      	mov	r1, r4
 80056cc:	4628      	mov	r0, r5
 80056ce:	f000 fe35 	bl	800633c <_sbrk_r>
 80056d2:	1c43      	adds	r3, r0, #1
 80056d4:	d103      	bne.n	80056de <sbrk_aligned+0x26>
 80056d6:	f04f 34ff 	mov.w	r4, #4294967295
 80056da:	4620      	mov	r0, r4
 80056dc:	bd70      	pop	{r4, r5, r6, pc}
 80056de:	1cc4      	adds	r4, r0, #3
 80056e0:	f024 0403 	bic.w	r4, r4, #3
 80056e4:	42a0      	cmp	r0, r4
 80056e6:	d0f8      	beq.n	80056da <sbrk_aligned+0x22>
 80056e8:	1a21      	subs	r1, r4, r0
 80056ea:	4628      	mov	r0, r5
 80056ec:	f000 fe26 	bl	800633c <_sbrk_r>
 80056f0:	3001      	adds	r0, #1
 80056f2:	d1f2      	bne.n	80056da <sbrk_aligned+0x22>
 80056f4:	e7ef      	b.n	80056d6 <sbrk_aligned+0x1e>
 80056f6:	bf00      	nop
 80056f8:	200003e0 	.word	0x200003e0

080056fc <_malloc_r>:
 80056fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005700:	1ccd      	adds	r5, r1, #3
 8005702:	f025 0503 	bic.w	r5, r5, #3
 8005706:	3508      	adds	r5, #8
 8005708:	2d0c      	cmp	r5, #12
 800570a:	bf38      	it	cc
 800570c:	250c      	movcc	r5, #12
 800570e:	2d00      	cmp	r5, #0
 8005710:	4606      	mov	r6, r0
 8005712:	db01      	blt.n	8005718 <_malloc_r+0x1c>
 8005714:	42a9      	cmp	r1, r5
 8005716:	d904      	bls.n	8005722 <_malloc_r+0x26>
 8005718:	230c      	movs	r3, #12
 800571a:	6033      	str	r3, [r6, #0]
 800571c:	2000      	movs	r0, #0
 800571e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005722:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057f8 <_malloc_r+0xfc>
 8005726:	f000 f869 	bl	80057fc <__malloc_lock>
 800572a:	f8d8 3000 	ldr.w	r3, [r8]
 800572e:	461c      	mov	r4, r3
 8005730:	bb44      	cbnz	r4, 8005784 <_malloc_r+0x88>
 8005732:	4629      	mov	r1, r5
 8005734:	4630      	mov	r0, r6
 8005736:	f7ff ffbf 	bl	80056b8 <sbrk_aligned>
 800573a:	1c43      	adds	r3, r0, #1
 800573c:	4604      	mov	r4, r0
 800573e:	d158      	bne.n	80057f2 <_malloc_r+0xf6>
 8005740:	f8d8 4000 	ldr.w	r4, [r8]
 8005744:	4627      	mov	r7, r4
 8005746:	2f00      	cmp	r7, #0
 8005748:	d143      	bne.n	80057d2 <_malloc_r+0xd6>
 800574a:	2c00      	cmp	r4, #0
 800574c:	d04b      	beq.n	80057e6 <_malloc_r+0xea>
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	4639      	mov	r1, r7
 8005752:	4630      	mov	r0, r6
 8005754:	eb04 0903 	add.w	r9, r4, r3
 8005758:	f000 fdf0 	bl	800633c <_sbrk_r>
 800575c:	4581      	cmp	r9, r0
 800575e:	d142      	bne.n	80057e6 <_malloc_r+0xea>
 8005760:	6821      	ldr	r1, [r4, #0]
 8005762:	4630      	mov	r0, r6
 8005764:	1a6d      	subs	r5, r5, r1
 8005766:	4629      	mov	r1, r5
 8005768:	f7ff ffa6 	bl	80056b8 <sbrk_aligned>
 800576c:	3001      	adds	r0, #1
 800576e:	d03a      	beq.n	80057e6 <_malloc_r+0xea>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	442b      	add	r3, r5
 8005774:	6023      	str	r3, [r4, #0]
 8005776:	f8d8 3000 	ldr.w	r3, [r8]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	bb62      	cbnz	r2, 80057d8 <_malloc_r+0xdc>
 800577e:	f8c8 7000 	str.w	r7, [r8]
 8005782:	e00f      	b.n	80057a4 <_malloc_r+0xa8>
 8005784:	6822      	ldr	r2, [r4, #0]
 8005786:	1b52      	subs	r2, r2, r5
 8005788:	d420      	bmi.n	80057cc <_malloc_r+0xd0>
 800578a:	2a0b      	cmp	r2, #11
 800578c:	d917      	bls.n	80057be <_malloc_r+0xc2>
 800578e:	1961      	adds	r1, r4, r5
 8005790:	42a3      	cmp	r3, r4
 8005792:	6025      	str	r5, [r4, #0]
 8005794:	bf18      	it	ne
 8005796:	6059      	strne	r1, [r3, #4]
 8005798:	6863      	ldr	r3, [r4, #4]
 800579a:	bf08      	it	eq
 800579c:	f8c8 1000 	streq.w	r1, [r8]
 80057a0:	5162      	str	r2, [r4, r5]
 80057a2:	604b      	str	r3, [r1, #4]
 80057a4:	4630      	mov	r0, r6
 80057a6:	f000 f82f 	bl	8005808 <__malloc_unlock>
 80057aa:	f104 000b 	add.w	r0, r4, #11
 80057ae:	1d23      	adds	r3, r4, #4
 80057b0:	f020 0007 	bic.w	r0, r0, #7
 80057b4:	1ac2      	subs	r2, r0, r3
 80057b6:	bf1c      	itt	ne
 80057b8:	1a1b      	subne	r3, r3, r0
 80057ba:	50a3      	strne	r3, [r4, r2]
 80057bc:	e7af      	b.n	800571e <_malloc_r+0x22>
 80057be:	6862      	ldr	r2, [r4, #4]
 80057c0:	42a3      	cmp	r3, r4
 80057c2:	bf0c      	ite	eq
 80057c4:	f8c8 2000 	streq.w	r2, [r8]
 80057c8:	605a      	strne	r2, [r3, #4]
 80057ca:	e7eb      	b.n	80057a4 <_malloc_r+0xa8>
 80057cc:	4623      	mov	r3, r4
 80057ce:	6864      	ldr	r4, [r4, #4]
 80057d0:	e7ae      	b.n	8005730 <_malloc_r+0x34>
 80057d2:	463c      	mov	r4, r7
 80057d4:	687f      	ldr	r7, [r7, #4]
 80057d6:	e7b6      	b.n	8005746 <_malloc_r+0x4a>
 80057d8:	461a      	mov	r2, r3
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	42a3      	cmp	r3, r4
 80057de:	d1fb      	bne.n	80057d8 <_malloc_r+0xdc>
 80057e0:	2300      	movs	r3, #0
 80057e2:	6053      	str	r3, [r2, #4]
 80057e4:	e7de      	b.n	80057a4 <_malloc_r+0xa8>
 80057e6:	230c      	movs	r3, #12
 80057e8:	4630      	mov	r0, r6
 80057ea:	6033      	str	r3, [r6, #0]
 80057ec:	f000 f80c 	bl	8005808 <__malloc_unlock>
 80057f0:	e794      	b.n	800571c <_malloc_r+0x20>
 80057f2:	6005      	str	r5, [r0, #0]
 80057f4:	e7d6      	b.n	80057a4 <_malloc_r+0xa8>
 80057f6:	bf00      	nop
 80057f8:	200003e4 	.word	0x200003e4

080057fc <__malloc_lock>:
 80057fc:	4801      	ldr	r0, [pc, #4]	@ (8005804 <__malloc_lock+0x8>)
 80057fe:	f7ff b89c 	b.w	800493a <__retarget_lock_acquire_recursive>
 8005802:	bf00      	nop
 8005804:	200003dc 	.word	0x200003dc

08005808 <__malloc_unlock>:
 8005808:	4801      	ldr	r0, [pc, #4]	@ (8005810 <__malloc_unlock+0x8>)
 800580a:	f7ff b897 	b.w	800493c <__retarget_lock_release_recursive>
 800580e:	bf00      	nop
 8005810:	200003dc 	.word	0x200003dc

08005814 <_Balloc>:
 8005814:	b570      	push	{r4, r5, r6, lr}
 8005816:	69c6      	ldr	r6, [r0, #28]
 8005818:	4604      	mov	r4, r0
 800581a:	460d      	mov	r5, r1
 800581c:	b976      	cbnz	r6, 800583c <_Balloc+0x28>
 800581e:	2010      	movs	r0, #16
 8005820:	f7ff ff42 	bl	80056a8 <malloc>
 8005824:	4602      	mov	r2, r0
 8005826:	61e0      	str	r0, [r4, #28]
 8005828:	b920      	cbnz	r0, 8005834 <_Balloc+0x20>
 800582a:	216b      	movs	r1, #107	@ 0x6b
 800582c:	4b17      	ldr	r3, [pc, #92]	@ (800588c <_Balloc+0x78>)
 800582e:	4818      	ldr	r0, [pc, #96]	@ (8005890 <_Balloc+0x7c>)
 8005830:	f000 fda2 	bl	8006378 <__assert_func>
 8005834:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005838:	6006      	str	r6, [r0, #0]
 800583a:	60c6      	str	r6, [r0, #12]
 800583c:	69e6      	ldr	r6, [r4, #28]
 800583e:	68f3      	ldr	r3, [r6, #12]
 8005840:	b183      	cbz	r3, 8005864 <_Balloc+0x50>
 8005842:	69e3      	ldr	r3, [r4, #28]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800584a:	b9b8      	cbnz	r0, 800587c <_Balloc+0x68>
 800584c:	2101      	movs	r1, #1
 800584e:	fa01 f605 	lsl.w	r6, r1, r5
 8005852:	1d72      	adds	r2, r6, #5
 8005854:	4620      	mov	r0, r4
 8005856:	0092      	lsls	r2, r2, #2
 8005858:	f000 fdac 	bl	80063b4 <_calloc_r>
 800585c:	b160      	cbz	r0, 8005878 <_Balloc+0x64>
 800585e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005862:	e00e      	b.n	8005882 <_Balloc+0x6e>
 8005864:	2221      	movs	r2, #33	@ 0x21
 8005866:	2104      	movs	r1, #4
 8005868:	4620      	mov	r0, r4
 800586a:	f000 fda3 	bl	80063b4 <_calloc_r>
 800586e:	69e3      	ldr	r3, [r4, #28]
 8005870:	60f0      	str	r0, [r6, #12]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e4      	bne.n	8005842 <_Balloc+0x2e>
 8005878:	2000      	movs	r0, #0
 800587a:	bd70      	pop	{r4, r5, r6, pc}
 800587c:	6802      	ldr	r2, [r0, #0]
 800587e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005882:	2300      	movs	r3, #0
 8005884:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005888:	e7f7      	b.n	800587a <_Balloc+0x66>
 800588a:	bf00      	nop
 800588c:	08006d87 	.word	0x08006d87
 8005890:	08006e07 	.word	0x08006e07

08005894 <_Bfree>:
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	69c6      	ldr	r6, [r0, #28]
 8005898:	4605      	mov	r5, r0
 800589a:	460c      	mov	r4, r1
 800589c:	b976      	cbnz	r6, 80058bc <_Bfree+0x28>
 800589e:	2010      	movs	r0, #16
 80058a0:	f7ff ff02 	bl	80056a8 <malloc>
 80058a4:	4602      	mov	r2, r0
 80058a6:	61e8      	str	r0, [r5, #28]
 80058a8:	b920      	cbnz	r0, 80058b4 <_Bfree+0x20>
 80058aa:	218f      	movs	r1, #143	@ 0x8f
 80058ac:	4b08      	ldr	r3, [pc, #32]	@ (80058d0 <_Bfree+0x3c>)
 80058ae:	4809      	ldr	r0, [pc, #36]	@ (80058d4 <_Bfree+0x40>)
 80058b0:	f000 fd62 	bl	8006378 <__assert_func>
 80058b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058b8:	6006      	str	r6, [r0, #0]
 80058ba:	60c6      	str	r6, [r0, #12]
 80058bc:	b13c      	cbz	r4, 80058ce <_Bfree+0x3a>
 80058be:	69eb      	ldr	r3, [r5, #28]
 80058c0:	6862      	ldr	r2, [r4, #4]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058c8:	6021      	str	r1, [r4, #0]
 80058ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80058ce:	bd70      	pop	{r4, r5, r6, pc}
 80058d0:	08006d87 	.word	0x08006d87
 80058d4:	08006e07 	.word	0x08006e07

080058d8 <__multadd>:
 80058d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058dc:	4607      	mov	r7, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	461e      	mov	r6, r3
 80058e2:	2000      	movs	r0, #0
 80058e4:	690d      	ldr	r5, [r1, #16]
 80058e6:	f101 0c14 	add.w	ip, r1, #20
 80058ea:	f8dc 3000 	ldr.w	r3, [ip]
 80058ee:	3001      	adds	r0, #1
 80058f0:	b299      	uxth	r1, r3
 80058f2:	fb02 6101 	mla	r1, r2, r1, r6
 80058f6:	0c1e      	lsrs	r6, r3, #16
 80058f8:	0c0b      	lsrs	r3, r1, #16
 80058fa:	fb02 3306 	mla	r3, r2, r6, r3
 80058fe:	b289      	uxth	r1, r1
 8005900:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005904:	4285      	cmp	r5, r0
 8005906:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800590a:	f84c 1b04 	str.w	r1, [ip], #4
 800590e:	dcec      	bgt.n	80058ea <__multadd+0x12>
 8005910:	b30e      	cbz	r6, 8005956 <__multadd+0x7e>
 8005912:	68a3      	ldr	r3, [r4, #8]
 8005914:	42ab      	cmp	r3, r5
 8005916:	dc19      	bgt.n	800594c <__multadd+0x74>
 8005918:	6861      	ldr	r1, [r4, #4]
 800591a:	4638      	mov	r0, r7
 800591c:	3101      	adds	r1, #1
 800591e:	f7ff ff79 	bl	8005814 <_Balloc>
 8005922:	4680      	mov	r8, r0
 8005924:	b928      	cbnz	r0, 8005932 <__multadd+0x5a>
 8005926:	4602      	mov	r2, r0
 8005928:	21ba      	movs	r1, #186	@ 0xba
 800592a:	4b0c      	ldr	r3, [pc, #48]	@ (800595c <__multadd+0x84>)
 800592c:	480c      	ldr	r0, [pc, #48]	@ (8005960 <__multadd+0x88>)
 800592e:	f000 fd23 	bl	8006378 <__assert_func>
 8005932:	6922      	ldr	r2, [r4, #16]
 8005934:	f104 010c 	add.w	r1, r4, #12
 8005938:	3202      	adds	r2, #2
 800593a:	0092      	lsls	r2, r2, #2
 800593c:	300c      	adds	r0, #12
 800593e:	f000 fd0d 	bl	800635c <memcpy>
 8005942:	4621      	mov	r1, r4
 8005944:	4638      	mov	r0, r7
 8005946:	f7ff ffa5 	bl	8005894 <_Bfree>
 800594a:	4644      	mov	r4, r8
 800594c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005950:	3501      	adds	r5, #1
 8005952:	615e      	str	r6, [r3, #20]
 8005954:	6125      	str	r5, [r4, #16]
 8005956:	4620      	mov	r0, r4
 8005958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800595c:	08006df6 	.word	0x08006df6
 8005960:	08006e07 	.word	0x08006e07

08005964 <__hi0bits>:
 8005964:	4603      	mov	r3, r0
 8005966:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800596a:	bf3a      	itte	cc
 800596c:	0403      	lslcc	r3, r0, #16
 800596e:	2010      	movcc	r0, #16
 8005970:	2000      	movcs	r0, #0
 8005972:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005976:	bf3c      	itt	cc
 8005978:	021b      	lslcc	r3, r3, #8
 800597a:	3008      	addcc	r0, #8
 800597c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005980:	bf3c      	itt	cc
 8005982:	011b      	lslcc	r3, r3, #4
 8005984:	3004      	addcc	r0, #4
 8005986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800598a:	bf3c      	itt	cc
 800598c:	009b      	lslcc	r3, r3, #2
 800598e:	3002      	addcc	r0, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	db05      	blt.n	80059a0 <__hi0bits+0x3c>
 8005994:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005998:	f100 0001 	add.w	r0, r0, #1
 800599c:	bf08      	it	eq
 800599e:	2020      	moveq	r0, #32
 80059a0:	4770      	bx	lr

080059a2 <__lo0bits>:
 80059a2:	6803      	ldr	r3, [r0, #0]
 80059a4:	4602      	mov	r2, r0
 80059a6:	f013 0007 	ands.w	r0, r3, #7
 80059aa:	d00b      	beq.n	80059c4 <__lo0bits+0x22>
 80059ac:	07d9      	lsls	r1, r3, #31
 80059ae:	d421      	bmi.n	80059f4 <__lo0bits+0x52>
 80059b0:	0798      	lsls	r0, r3, #30
 80059b2:	bf49      	itett	mi
 80059b4:	085b      	lsrmi	r3, r3, #1
 80059b6:	089b      	lsrpl	r3, r3, #2
 80059b8:	2001      	movmi	r0, #1
 80059ba:	6013      	strmi	r3, [r2, #0]
 80059bc:	bf5c      	itt	pl
 80059be:	2002      	movpl	r0, #2
 80059c0:	6013      	strpl	r3, [r2, #0]
 80059c2:	4770      	bx	lr
 80059c4:	b299      	uxth	r1, r3
 80059c6:	b909      	cbnz	r1, 80059cc <__lo0bits+0x2a>
 80059c8:	2010      	movs	r0, #16
 80059ca:	0c1b      	lsrs	r3, r3, #16
 80059cc:	b2d9      	uxtb	r1, r3
 80059ce:	b909      	cbnz	r1, 80059d4 <__lo0bits+0x32>
 80059d0:	3008      	adds	r0, #8
 80059d2:	0a1b      	lsrs	r3, r3, #8
 80059d4:	0719      	lsls	r1, r3, #28
 80059d6:	bf04      	itt	eq
 80059d8:	091b      	lsreq	r3, r3, #4
 80059da:	3004      	addeq	r0, #4
 80059dc:	0799      	lsls	r1, r3, #30
 80059de:	bf04      	itt	eq
 80059e0:	089b      	lsreq	r3, r3, #2
 80059e2:	3002      	addeq	r0, #2
 80059e4:	07d9      	lsls	r1, r3, #31
 80059e6:	d403      	bmi.n	80059f0 <__lo0bits+0x4e>
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	f100 0001 	add.w	r0, r0, #1
 80059ee:	d003      	beq.n	80059f8 <__lo0bits+0x56>
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	4770      	bx	lr
 80059f4:	2000      	movs	r0, #0
 80059f6:	4770      	bx	lr
 80059f8:	2020      	movs	r0, #32
 80059fa:	4770      	bx	lr

080059fc <__i2b>:
 80059fc:	b510      	push	{r4, lr}
 80059fe:	460c      	mov	r4, r1
 8005a00:	2101      	movs	r1, #1
 8005a02:	f7ff ff07 	bl	8005814 <_Balloc>
 8005a06:	4602      	mov	r2, r0
 8005a08:	b928      	cbnz	r0, 8005a16 <__i2b+0x1a>
 8005a0a:	f240 1145 	movw	r1, #325	@ 0x145
 8005a0e:	4b04      	ldr	r3, [pc, #16]	@ (8005a20 <__i2b+0x24>)
 8005a10:	4804      	ldr	r0, [pc, #16]	@ (8005a24 <__i2b+0x28>)
 8005a12:	f000 fcb1 	bl	8006378 <__assert_func>
 8005a16:	2301      	movs	r3, #1
 8005a18:	6144      	str	r4, [r0, #20]
 8005a1a:	6103      	str	r3, [r0, #16]
 8005a1c:	bd10      	pop	{r4, pc}
 8005a1e:	bf00      	nop
 8005a20:	08006df6 	.word	0x08006df6
 8005a24:	08006e07 	.word	0x08006e07

08005a28 <__multiply>:
 8005a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	4617      	mov	r7, r2
 8005a2e:	690a      	ldr	r2, [r1, #16]
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	4689      	mov	r9, r1
 8005a34:	429a      	cmp	r2, r3
 8005a36:	bfa2      	ittt	ge
 8005a38:	463b      	movge	r3, r7
 8005a3a:	460f      	movge	r7, r1
 8005a3c:	4699      	movge	r9, r3
 8005a3e:	693d      	ldr	r5, [r7, #16]
 8005a40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	eb05 060a 	add.w	r6, r5, sl
 8005a4c:	42b3      	cmp	r3, r6
 8005a4e:	b085      	sub	sp, #20
 8005a50:	bfb8      	it	lt
 8005a52:	3101      	addlt	r1, #1
 8005a54:	f7ff fede 	bl	8005814 <_Balloc>
 8005a58:	b930      	cbnz	r0, 8005a68 <__multiply+0x40>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005a60:	4b40      	ldr	r3, [pc, #256]	@ (8005b64 <__multiply+0x13c>)
 8005a62:	4841      	ldr	r0, [pc, #260]	@ (8005b68 <__multiply+0x140>)
 8005a64:	f000 fc88 	bl	8006378 <__assert_func>
 8005a68:	f100 0414 	add.w	r4, r0, #20
 8005a6c:	4623      	mov	r3, r4
 8005a6e:	2200      	movs	r2, #0
 8005a70:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005a74:	4573      	cmp	r3, lr
 8005a76:	d320      	bcc.n	8005aba <__multiply+0x92>
 8005a78:	f107 0814 	add.w	r8, r7, #20
 8005a7c:	f109 0114 	add.w	r1, r9, #20
 8005a80:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005a84:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005a88:	9302      	str	r3, [sp, #8]
 8005a8a:	1beb      	subs	r3, r5, r7
 8005a8c:	3b15      	subs	r3, #21
 8005a8e:	f023 0303 	bic.w	r3, r3, #3
 8005a92:	3304      	adds	r3, #4
 8005a94:	3715      	adds	r7, #21
 8005a96:	42bd      	cmp	r5, r7
 8005a98:	bf38      	it	cc
 8005a9a:	2304      	movcc	r3, #4
 8005a9c:	9301      	str	r3, [sp, #4]
 8005a9e:	9b02      	ldr	r3, [sp, #8]
 8005aa0:	9103      	str	r1, [sp, #12]
 8005aa2:	428b      	cmp	r3, r1
 8005aa4:	d80c      	bhi.n	8005ac0 <__multiply+0x98>
 8005aa6:	2e00      	cmp	r6, #0
 8005aa8:	dd03      	ble.n	8005ab2 <__multiply+0x8a>
 8005aaa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d055      	beq.n	8005b5e <__multiply+0x136>
 8005ab2:	6106      	str	r6, [r0, #16]
 8005ab4:	b005      	add	sp, #20
 8005ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aba:	f843 2b04 	str.w	r2, [r3], #4
 8005abe:	e7d9      	b.n	8005a74 <__multiply+0x4c>
 8005ac0:	f8b1 a000 	ldrh.w	sl, [r1]
 8005ac4:	f1ba 0f00 	cmp.w	sl, #0
 8005ac8:	d01f      	beq.n	8005b0a <__multiply+0xe2>
 8005aca:	46c4      	mov	ip, r8
 8005acc:	46a1      	mov	r9, r4
 8005ace:	2700      	movs	r7, #0
 8005ad0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005ad4:	f8d9 3000 	ldr.w	r3, [r9]
 8005ad8:	fa1f fb82 	uxth.w	fp, r2
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	fb0a 330b 	mla	r3, sl, fp, r3
 8005ae2:	443b      	add	r3, r7
 8005ae4:	f8d9 7000 	ldr.w	r7, [r9]
 8005ae8:	0c12      	lsrs	r2, r2, #16
 8005aea:	0c3f      	lsrs	r7, r7, #16
 8005aec:	fb0a 7202 	mla	r2, sl, r2, r7
 8005af0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005afa:	4565      	cmp	r5, ip
 8005afc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005b00:	f849 3b04 	str.w	r3, [r9], #4
 8005b04:	d8e4      	bhi.n	8005ad0 <__multiply+0xa8>
 8005b06:	9b01      	ldr	r3, [sp, #4]
 8005b08:	50e7      	str	r7, [r4, r3]
 8005b0a:	9b03      	ldr	r3, [sp, #12]
 8005b0c:	3104      	adds	r1, #4
 8005b0e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005b12:	f1b9 0f00 	cmp.w	r9, #0
 8005b16:	d020      	beq.n	8005b5a <__multiply+0x132>
 8005b18:	4647      	mov	r7, r8
 8005b1a:	46a4      	mov	ip, r4
 8005b1c:	f04f 0a00 	mov.w	sl, #0
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	f8b7 b000 	ldrh.w	fp, [r7]
 8005b26:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	fb09 220b 	mla	r2, r9, fp, r2
 8005b30:	4452      	add	r2, sl
 8005b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b36:	f84c 3b04 	str.w	r3, [ip], #4
 8005b3a:	f857 3b04 	ldr.w	r3, [r7], #4
 8005b3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b42:	f8bc 3000 	ldrh.w	r3, [ip]
 8005b46:	42bd      	cmp	r5, r7
 8005b48:	fb09 330a 	mla	r3, r9, sl, r3
 8005b4c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005b50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b54:	d8e5      	bhi.n	8005b22 <__multiply+0xfa>
 8005b56:	9a01      	ldr	r2, [sp, #4]
 8005b58:	50a3      	str	r3, [r4, r2]
 8005b5a:	3404      	adds	r4, #4
 8005b5c:	e79f      	b.n	8005a9e <__multiply+0x76>
 8005b5e:	3e01      	subs	r6, #1
 8005b60:	e7a1      	b.n	8005aa6 <__multiply+0x7e>
 8005b62:	bf00      	nop
 8005b64:	08006df6 	.word	0x08006df6
 8005b68:	08006e07 	.word	0x08006e07

08005b6c <__pow5mult>:
 8005b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b70:	4615      	mov	r5, r2
 8005b72:	f012 0203 	ands.w	r2, r2, #3
 8005b76:	4607      	mov	r7, r0
 8005b78:	460e      	mov	r6, r1
 8005b7a:	d007      	beq.n	8005b8c <__pow5mult+0x20>
 8005b7c:	4c25      	ldr	r4, [pc, #148]	@ (8005c14 <__pow5mult+0xa8>)
 8005b7e:	3a01      	subs	r2, #1
 8005b80:	2300      	movs	r3, #0
 8005b82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b86:	f7ff fea7 	bl	80058d8 <__multadd>
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	10ad      	asrs	r5, r5, #2
 8005b8e:	d03d      	beq.n	8005c0c <__pow5mult+0xa0>
 8005b90:	69fc      	ldr	r4, [r7, #28]
 8005b92:	b97c      	cbnz	r4, 8005bb4 <__pow5mult+0x48>
 8005b94:	2010      	movs	r0, #16
 8005b96:	f7ff fd87 	bl	80056a8 <malloc>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	61f8      	str	r0, [r7, #28]
 8005b9e:	b928      	cbnz	r0, 8005bac <__pow5mult+0x40>
 8005ba0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8005c18 <__pow5mult+0xac>)
 8005ba6:	481d      	ldr	r0, [pc, #116]	@ (8005c1c <__pow5mult+0xb0>)
 8005ba8:	f000 fbe6 	bl	8006378 <__assert_func>
 8005bac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bb0:	6004      	str	r4, [r0, #0]
 8005bb2:	60c4      	str	r4, [r0, #12]
 8005bb4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005bb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005bbc:	b94c      	cbnz	r4, 8005bd2 <__pow5mult+0x66>
 8005bbe:	f240 2171 	movw	r1, #625	@ 0x271
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	f7ff ff1a 	bl	80059fc <__i2b>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	4604      	mov	r4, r0
 8005bcc:	f8c8 0008 	str.w	r0, [r8, #8]
 8005bd0:	6003      	str	r3, [r0, #0]
 8005bd2:	f04f 0900 	mov.w	r9, #0
 8005bd6:	07eb      	lsls	r3, r5, #31
 8005bd8:	d50a      	bpl.n	8005bf0 <__pow5mult+0x84>
 8005bda:	4631      	mov	r1, r6
 8005bdc:	4622      	mov	r2, r4
 8005bde:	4638      	mov	r0, r7
 8005be0:	f7ff ff22 	bl	8005a28 <__multiply>
 8005be4:	4680      	mov	r8, r0
 8005be6:	4631      	mov	r1, r6
 8005be8:	4638      	mov	r0, r7
 8005bea:	f7ff fe53 	bl	8005894 <_Bfree>
 8005bee:	4646      	mov	r6, r8
 8005bf0:	106d      	asrs	r5, r5, #1
 8005bf2:	d00b      	beq.n	8005c0c <__pow5mult+0xa0>
 8005bf4:	6820      	ldr	r0, [r4, #0]
 8005bf6:	b938      	cbnz	r0, 8005c08 <__pow5mult+0x9c>
 8005bf8:	4622      	mov	r2, r4
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	4638      	mov	r0, r7
 8005bfe:	f7ff ff13 	bl	8005a28 <__multiply>
 8005c02:	6020      	str	r0, [r4, #0]
 8005c04:	f8c0 9000 	str.w	r9, [r0]
 8005c08:	4604      	mov	r4, r0
 8005c0a:	e7e4      	b.n	8005bd6 <__pow5mult+0x6a>
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c12:	bf00      	nop
 8005c14:	08006eb8 	.word	0x08006eb8
 8005c18:	08006d87 	.word	0x08006d87
 8005c1c:	08006e07 	.word	0x08006e07

08005c20 <__lshift>:
 8005c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c24:	460c      	mov	r4, r1
 8005c26:	4607      	mov	r7, r0
 8005c28:	4691      	mov	r9, r2
 8005c2a:	6923      	ldr	r3, [r4, #16]
 8005c2c:	6849      	ldr	r1, [r1, #4]
 8005c2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c32:	68a3      	ldr	r3, [r4, #8]
 8005c34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c38:	f108 0601 	add.w	r6, r8, #1
 8005c3c:	42b3      	cmp	r3, r6
 8005c3e:	db0b      	blt.n	8005c58 <__lshift+0x38>
 8005c40:	4638      	mov	r0, r7
 8005c42:	f7ff fde7 	bl	8005814 <_Balloc>
 8005c46:	4605      	mov	r5, r0
 8005c48:	b948      	cbnz	r0, 8005c5e <__lshift+0x3e>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005c50:	4b27      	ldr	r3, [pc, #156]	@ (8005cf0 <__lshift+0xd0>)
 8005c52:	4828      	ldr	r0, [pc, #160]	@ (8005cf4 <__lshift+0xd4>)
 8005c54:	f000 fb90 	bl	8006378 <__assert_func>
 8005c58:	3101      	adds	r1, #1
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	e7ee      	b.n	8005c3c <__lshift+0x1c>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f100 0114 	add.w	r1, r0, #20
 8005c64:	f100 0210 	add.w	r2, r0, #16
 8005c68:	4618      	mov	r0, r3
 8005c6a:	4553      	cmp	r3, sl
 8005c6c:	db33      	blt.n	8005cd6 <__lshift+0xb6>
 8005c6e:	6920      	ldr	r0, [r4, #16]
 8005c70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c74:	f104 0314 	add.w	r3, r4, #20
 8005c78:	f019 091f 	ands.w	r9, r9, #31
 8005c7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005c84:	d02b      	beq.n	8005cde <__lshift+0xbe>
 8005c86:	468a      	mov	sl, r1
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f1c9 0e20 	rsb	lr, r9, #32
 8005c8e:	6818      	ldr	r0, [r3, #0]
 8005c90:	fa00 f009 	lsl.w	r0, r0, r9
 8005c94:	4310      	orrs	r0, r2
 8005c96:	f84a 0b04 	str.w	r0, [sl], #4
 8005c9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c9e:	459c      	cmp	ip, r3
 8005ca0:	fa22 f20e 	lsr.w	r2, r2, lr
 8005ca4:	d8f3      	bhi.n	8005c8e <__lshift+0x6e>
 8005ca6:	ebac 0304 	sub.w	r3, ip, r4
 8005caa:	3b15      	subs	r3, #21
 8005cac:	f023 0303 	bic.w	r3, r3, #3
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	f104 0015 	add.w	r0, r4, #21
 8005cb6:	4560      	cmp	r0, ip
 8005cb8:	bf88      	it	hi
 8005cba:	2304      	movhi	r3, #4
 8005cbc:	50ca      	str	r2, [r1, r3]
 8005cbe:	b10a      	cbz	r2, 8005cc4 <__lshift+0xa4>
 8005cc0:	f108 0602 	add.w	r6, r8, #2
 8005cc4:	3e01      	subs	r6, #1
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	4621      	mov	r1, r4
 8005cca:	612e      	str	r6, [r5, #16]
 8005ccc:	f7ff fde2 	bl	8005894 <_Bfree>
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005cda:	3301      	adds	r3, #1
 8005cdc:	e7c5      	b.n	8005c6a <__lshift+0x4a>
 8005cde:	3904      	subs	r1, #4
 8005ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ce4:	459c      	cmp	ip, r3
 8005ce6:	f841 2f04 	str.w	r2, [r1, #4]!
 8005cea:	d8f9      	bhi.n	8005ce0 <__lshift+0xc0>
 8005cec:	e7ea      	b.n	8005cc4 <__lshift+0xa4>
 8005cee:	bf00      	nop
 8005cf0:	08006df6 	.word	0x08006df6
 8005cf4:	08006e07 	.word	0x08006e07

08005cf8 <__mcmp>:
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	690a      	ldr	r2, [r1, #16]
 8005cfc:	6900      	ldr	r0, [r0, #16]
 8005cfe:	b530      	push	{r4, r5, lr}
 8005d00:	1a80      	subs	r0, r0, r2
 8005d02:	d10e      	bne.n	8005d22 <__mcmp+0x2a>
 8005d04:	3314      	adds	r3, #20
 8005d06:	3114      	adds	r1, #20
 8005d08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005d10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d18:	4295      	cmp	r5, r2
 8005d1a:	d003      	beq.n	8005d24 <__mcmp+0x2c>
 8005d1c:	d205      	bcs.n	8005d2a <__mcmp+0x32>
 8005d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d22:	bd30      	pop	{r4, r5, pc}
 8005d24:	42a3      	cmp	r3, r4
 8005d26:	d3f3      	bcc.n	8005d10 <__mcmp+0x18>
 8005d28:	e7fb      	b.n	8005d22 <__mcmp+0x2a>
 8005d2a:	2001      	movs	r0, #1
 8005d2c:	e7f9      	b.n	8005d22 <__mcmp+0x2a>
	...

08005d30 <__mdiff>:
 8005d30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d34:	4689      	mov	r9, r1
 8005d36:	4606      	mov	r6, r0
 8005d38:	4611      	mov	r1, r2
 8005d3a:	4648      	mov	r0, r9
 8005d3c:	4614      	mov	r4, r2
 8005d3e:	f7ff ffdb 	bl	8005cf8 <__mcmp>
 8005d42:	1e05      	subs	r5, r0, #0
 8005d44:	d112      	bne.n	8005d6c <__mdiff+0x3c>
 8005d46:	4629      	mov	r1, r5
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f7ff fd63 	bl	8005814 <_Balloc>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	b928      	cbnz	r0, 8005d5e <__mdiff+0x2e>
 8005d52:	f240 2137 	movw	r1, #567	@ 0x237
 8005d56:	4b3e      	ldr	r3, [pc, #248]	@ (8005e50 <__mdiff+0x120>)
 8005d58:	483e      	ldr	r0, [pc, #248]	@ (8005e54 <__mdiff+0x124>)
 8005d5a:	f000 fb0d 	bl	8006378 <__assert_func>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005d64:	4610      	mov	r0, r2
 8005d66:	b003      	add	sp, #12
 8005d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6c:	bfbc      	itt	lt
 8005d6e:	464b      	movlt	r3, r9
 8005d70:	46a1      	movlt	r9, r4
 8005d72:	4630      	mov	r0, r6
 8005d74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005d78:	bfba      	itte	lt
 8005d7a:	461c      	movlt	r4, r3
 8005d7c:	2501      	movlt	r5, #1
 8005d7e:	2500      	movge	r5, #0
 8005d80:	f7ff fd48 	bl	8005814 <_Balloc>
 8005d84:	4602      	mov	r2, r0
 8005d86:	b918      	cbnz	r0, 8005d90 <__mdiff+0x60>
 8005d88:	f240 2145 	movw	r1, #581	@ 0x245
 8005d8c:	4b30      	ldr	r3, [pc, #192]	@ (8005e50 <__mdiff+0x120>)
 8005d8e:	e7e3      	b.n	8005d58 <__mdiff+0x28>
 8005d90:	f100 0b14 	add.w	fp, r0, #20
 8005d94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005d98:	f109 0310 	add.w	r3, r9, #16
 8005d9c:	60c5      	str	r5, [r0, #12]
 8005d9e:	f04f 0c00 	mov.w	ip, #0
 8005da2:	f109 0514 	add.w	r5, r9, #20
 8005da6:	46d9      	mov	r9, fp
 8005da8:	6926      	ldr	r6, [r4, #16]
 8005daa:	f104 0e14 	add.w	lr, r4, #20
 8005dae:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005db2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005db6:	9301      	str	r3, [sp, #4]
 8005db8:	9b01      	ldr	r3, [sp, #4]
 8005dba:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005dbe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005dc2:	b281      	uxth	r1, r0
 8005dc4:	9301      	str	r3, [sp, #4]
 8005dc6:	fa1f f38a 	uxth.w	r3, sl
 8005dca:	1a5b      	subs	r3, r3, r1
 8005dcc:	0c00      	lsrs	r0, r0, #16
 8005dce:	4463      	add	r3, ip
 8005dd0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005dd4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005dde:	4576      	cmp	r6, lr
 8005de0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005de4:	f849 3b04 	str.w	r3, [r9], #4
 8005de8:	d8e6      	bhi.n	8005db8 <__mdiff+0x88>
 8005dea:	1b33      	subs	r3, r6, r4
 8005dec:	3b15      	subs	r3, #21
 8005dee:	f023 0303 	bic.w	r3, r3, #3
 8005df2:	3415      	adds	r4, #21
 8005df4:	3304      	adds	r3, #4
 8005df6:	42a6      	cmp	r6, r4
 8005df8:	bf38      	it	cc
 8005dfa:	2304      	movcc	r3, #4
 8005dfc:	441d      	add	r5, r3
 8005dfe:	445b      	add	r3, fp
 8005e00:	461e      	mov	r6, r3
 8005e02:	462c      	mov	r4, r5
 8005e04:	4544      	cmp	r4, r8
 8005e06:	d30e      	bcc.n	8005e26 <__mdiff+0xf6>
 8005e08:	f108 0103 	add.w	r1, r8, #3
 8005e0c:	1b49      	subs	r1, r1, r5
 8005e0e:	f021 0103 	bic.w	r1, r1, #3
 8005e12:	3d03      	subs	r5, #3
 8005e14:	45a8      	cmp	r8, r5
 8005e16:	bf38      	it	cc
 8005e18:	2100      	movcc	r1, #0
 8005e1a:	440b      	add	r3, r1
 8005e1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005e20:	b199      	cbz	r1, 8005e4a <__mdiff+0x11a>
 8005e22:	6117      	str	r7, [r2, #16]
 8005e24:	e79e      	b.n	8005d64 <__mdiff+0x34>
 8005e26:	46e6      	mov	lr, ip
 8005e28:	f854 1b04 	ldr.w	r1, [r4], #4
 8005e2c:	fa1f fc81 	uxth.w	ip, r1
 8005e30:	44f4      	add	ip, lr
 8005e32:	0c08      	lsrs	r0, r1, #16
 8005e34:	4471      	add	r1, lr
 8005e36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005e3a:	b289      	uxth	r1, r1
 8005e3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005e40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005e44:	f846 1b04 	str.w	r1, [r6], #4
 8005e48:	e7dc      	b.n	8005e04 <__mdiff+0xd4>
 8005e4a:	3f01      	subs	r7, #1
 8005e4c:	e7e6      	b.n	8005e1c <__mdiff+0xec>
 8005e4e:	bf00      	nop
 8005e50:	08006df6 	.word	0x08006df6
 8005e54:	08006e07 	.word	0x08006e07

08005e58 <__d2b>:
 8005e58:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	4690      	mov	r8, r2
 8005e60:	4699      	mov	r9, r3
 8005e62:	9e08      	ldr	r6, [sp, #32]
 8005e64:	f7ff fcd6 	bl	8005814 <_Balloc>
 8005e68:	4604      	mov	r4, r0
 8005e6a:	b930      	cbnz	r0, 8005e7a <__d2b+0x22>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	f240 310f 	movw	r1, #783	@ 0x30f
 8005e72:	4b23      	ldr	r3, [pc, #140]	@ (8005f00 <__d2b+0xa8>)
 8005e74:	4823      	ldr	r0, [pc, #140]	@ (8005f04 <__d2b+0xac>)
 8005e76:	f000 fa7f 	bl	8006378 <__assert_func>
 8005e7a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005e7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e82:	b10d      	cbz	r5, 8005e88 <__d2b+0x30>
 8005e84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e88:	9301      	str	r3, [sp, #4]
 8005e8a:	f1b8 0300 	subs.w	r3, r8, #0
 8005e8e:	d024      	beq.n	8005eda <__d2b+0x82>
 8005e90:	4668      	mov	r0, sp
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	f7ff fd85 	bl	80059a2 <__lo0bits>
 8005e98:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005e9c:	b1d8      	cbz	r0, 8005ed6 <__d2b+0x7e>
 8005e9e:	f1c0 0320 	rsb	r3, r0, #32
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	430b      	orrs	r3, r1
 8005ea8:	40c2      	lsrs	r2, r0
 8005eaa:	6163      	str	r3, [r4, #20]
 8005eac:	9201      	str	r2, [sp, #4]
 8005eae:	9b01      	ldr	r3, [sp, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	bf0c      	ite	eq
 8005eb4:	2201      	moveq	r2, #1
 8005eb6:	2202      	movne	r2, #2
 8005eb8:	61a3      	str	r3, [r4, #24]
 8005eba:	6122      	str	r2, [r4, #16]
 8005ebc:	b1ad      	cbz	r5, 8005eea <__d2b+0x92>
 8005ebe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005ec2:	4405      	add	r5, r0
 8005ec4:	6035      	str	r5, [r6, #0]
 8005ec6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ecc:	6018      	str	r0, [r3, #0]
 8005ece:	4620      	mov	r0, r4
 8005ed0:	b002      	add	sp, #8
 8005ed2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005ed6:	6161      	str	r1, [r4, #20]
 8005ed8:	e7e9      	b.n	8005eae <__d2b+0x56>
 8005eda:	a801      	add	r0, sp, #4
 8005edc:	f7ff fd61 	bl	80059a2 <__lo0bits>
 8005ee0:	9b01      	ldr	r3, [sp, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	6163      	str	r3, [r4, #20]
 8005ee6:	3020      	adds	r0, #32
 8005ee8:	e7e7      	b.n	8005eba <__d2b+0x62>
 8005eea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005eee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005ef2:	6030      	str	r0, [r6, #0]
 8005ef4:	6918      	ldr	r0, [r3, #16]
 8005ef6:	f7ff fd35 	bl	8005964 <__hi0bits>
 8005efa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005efe:	e7e4      	b.n	8005eca <__d2b+0x72>
 8005f00:	08006df6 	.word	0x08006df6
 8005f04:	08006e07 	.word	0x08006e07

08005f08 <__ssputs_r>:
 8005f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f0c:	461f      	mov	r7, r3
 8005f0e:	688e      	ldr	r6, [r1, #8]
 8005f10:	4682      	mov	sl, r0
 8005f12:	42be      	cmp	r6, r7
 8005f14:	460c      	mov	r4, r1
 8005f16:	4690      	mov	r8, r2
 8005f18:	680b      	ldr	r3, [r1, #0]
 8005f1a:	d82d      	bhi.n	8005f78 <__ssputs_r+0x70>
 8005f1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005f24:	d026      	beq.n	8005f74 <__ssputs_r+0x6c>
 8005f26:	6965      	ldr	r5, [r4, #20]
 8005f28:	6909      	ldr	r1, [r1, #16]
 8005f2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f2e:	eba3 0901 	sub.w	r9, r3, r1
 8005f32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f36:	1c7b      	adds	r3, r7, #1
 8005f38:	444b      	add	r3, r9
 8005f3a:	106d      	asrs	r5, r5, #1
 8005f3c:	429d      	cmp	r5, r3
 8005f3e:	bf38      	it	cc
 8005f40:	461d      	movcc	r5, r3
 8005f42:	0553      	lsls	r3, r2, #21
 8005f44:	d527      	bpl.n	8005f96 <__ssputs_r+0x8e>
 8005f46:	4629      	mov	r1, r5
 8005f48:	f7ff fbd8 	bl	80056fc <_malloc_r>
 8005f4c:	4606      	mov	r6, r0
 8005f4e:	b360      	cbz	r0, 8005faa <__ssputs_r+0xa2>
 8005f50:	464a      	mov	r2, r9
 8005f52:	6921      	ldr	r1, [r4, #16]
 8005f54:	f000 fa02 	bl	800635c <memcpy>
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f62:	81a3      	strh	r3, [r4, #12]
 8005f64:	6126      	str	r6, [r4, #16]
 8005f66:	444e      	add	r6, r9
 8005f68:	6026      	str	r6, [r4, #0]
 8005f6a:	463e      	mov	r6, r7
 8005f6c:	6165      	str	r5, [r4, #20]
 8005f6e:	eba5 0509 	sub.w	r5, r5, r9
 8005f72:	60a5      	str	r5, [r4, #8]
 8005f74:	42be      	cmp	r6, r7
 8005f76:	d900      	bls.n	8005f7a <__ssputs_r+0x72>
 8005f78:	463e      	mov	r6, r7
 8005f7a:	4632      	mov	r2, r6
 8005f7c:	4641      	mov	r1, r8
 8005f7e:	6820      	ldr	r0, [r4, #0]
 8005f80:	f000 f9c2 	bl	8006308 <memmove>
 8005f84:	2000      	movs	r0, #0
 8005f86:	68a3      	ldr	r3, [r4, #8]
 8005f88:	1b9b      	subs	r3, r3, r6
 8005f8a:	60a3      	str	r3, [r4, #8]
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	4433      	add	r3, r6
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f96:	462a      	mov	r2, r5
 8005f98:	f000 fa32 	bl	8006400 <_realloc_r>
 8005f9c:	4606      	mov	r6, r0
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	d1e0      	bne.n	8005f64 <__ssputs_r+0x5c>
 8005fa2:	4650      	mov	r0, sl
 8005fa4:	6921      	ldr	r1, [r4, #16]
 8005fa6:	f7ff fb37 	bl	8005618 <_free_r>
 8005faa:	230c      	movs	r3, #12
 8005fac:	f8ca 3000 	str.w	r3, [sl]
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fba:	81a3      	strh	r3, [r4, #12]
 8005fbc:	e7e9      	b.n	8005f92 <__ssputs_r+0x8a>
	...

08005fc0 <_svfiprintf_r>:
 8005fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc4:	4698      	mov	r8, r3
 8005fc6:	898b      	ldrh	r3, [r1, #12]
 8005fc8:	4607      	mov	r7, r0
 8005fca:	061b      	lsls	r3, r3, #24
 8005fcc:	460d      	mov	r5, r1
 8005fce:	4614      	mov	r4, r2
 8005fd0:	b09d      	sub	sp, #116	@ 0x74
 8005fd2:	d510      	bpl.n	8005ff6 <_svfiprintf_r+0x36>
 8005fd4:	690b      	ldr	r3, [r1, #16]
 8005fd6:	b973      	cbnz	r3, 8005ff6 <_svfiprintf_r+0x36>
 8005fd8:	2140      	movs	r1, #64	@ 0x40
 8005fda:	f7ff fb8f 	bl	80056fc <_malloc_r>
 8005fde:	6028      	str	r0, [r5, #0]
 8005fe0:	6128      	str	r0, [r5, #16]
 8005fe2:	b930      	cbnz	r0, 8005ff2 <_svfiprintf_r+0x32>
 8005fe4:	230c      	movs	r3, #12
 8005fe6:	603b      	str	r3, [r7, #0]
 8005fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fec:	b01d      	add	sp, #116	@ 0x74
 8005fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff2:	2340      	movs	r3, #64	@ 0x40
 8005ff4:	616b      	str	r3, [r5, #20]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ffa:	2320      	movs	r3, #32
 8005ffc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006000:	2330      	movs	r3, #48	@ 0x30
 8006002:	f04f 0901 	mov.w	r9, #1
 8006006:	f8cd 800c 	str.w	r8, [sp, #12]
 800600a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80061a4 <_svfiprintf_r+0x1e4>
 800600e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006012:	4623      	mov	r3, r4
 8006014:	469a      	mov	sl, r3
 8006016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800601a:	b10a      	cbz	r2, 8006020 <_svfiprintf_r+0x60>
 800601c:	2a25      	cmp	r2, #37	@ 0x25
 800601e:	d1f9      	bne.n	8006014 <_svfiprintf_r+0x54>
 8006020:	ebba 0b04 	subs.w	fp, sl, r4
 8006024:	d00b      	beq.n	800603e <_svfiprintf_r+0x7e>
 8006026:	465b      	mov	r3, fp
 8006028:	4622      	mov	r2, r4
 800602a:	4629      	mov	r1, r5
 800602c:	4638      	mov	r0, r7
 800602e:	f7ff ff6b 	bl	8005f08 <__ssputs_r>
 8006032:	3001      	adds	r0, #1
 8006034:	f000 80a7 	beq.w	8006186 <_svfiprintf_r+0x1c6>
 8006038:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800603a:	445a      	add	r2, fp
 800603c:	9209      	str	r2, [sp, #36]	@ 0x24
 800603e:	f89a 3000 	ldrb.w	r3, [sl]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 809f 	beq.w	8006186 <_svfiprintf_r+0x1c6>
 8006048:	2300      	movs	r3, #0
 800604a:	f04f 32ff 	mov.w	r2, #4294967295
 800604e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006052:	f10a 0a01 	add.w	sl, sl, #1
 8006056:	9304      	str	r3, [sp, #16]
 8006058:	9307      	str	r3, [sp, #28]
 800605a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800605e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006060:	4654      	mov	r4, sl
 8006062:	2205      	movs	r2, #5
 8006064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006068:	484e      	ldr	r0, [pc, #312]	@ (80061a4 <_svfiprintf_r+0x1e4>)
 800606a:	f7fe fc68 	bl	800493e <memchr>
 800606e:	9a04      	ldr	r2, [sp, #16]
 8006070:	b9d8      	cbnz	r0, 80060aa <_svfiprintf_r+0xea>
 8006072:	06d0      	lsls	r0, r2, #27
 8006074:	bf44      	itt	mi
 8006076:	2320      	movmi	r3, #32
 8006078:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800607c:	0711      	lsls	r1, r2, #28
 800607e:	bf44      	itt	mi
 8006080:	232b      	movmi	r3, #43	@ 0x2b
 8006082:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006086:	f89a 3000 	ldrb.w	r3, [sl]
 800608a:	2b2a      	cmp	r3, #42	@ 0x2a
 800608c:	d015      	beq.n	80060ba <_svfiprintf_r+0xfa>
 800608e:	4654      	mov	r4, sl
 8006090:	2000      	movs	r0, #0
 8006092:	f04f 0c0a 	mov.w	ip, #10
 8006096:	9a07      	ldr	r2, [sp, #28]
 8006098:	4621      	mov	r1, r4
 800609a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800609e:	3b30      	subs	r3, #48	@ 0x30
 80060a0:	2b09      	cmp	r3, #9
 80060a2:	d94b      	bls.n	800613c <_svfiprintf_r+0x17c>
 80060a4:	b1b0      	cbz	r0, 80060d4 <_svfiprintf_r+0x114>
 80060a6:	9207      	str	r2, [sp, #28]
 80060a8:	e014      	b.n	80060d4 <_svfiprintf_r+0x114>
 80060aa:	eba0 0308 	sub.w	r3, r0, r8
 80060ae:	fa09 f303 	lsl.w	r3, r9, r3
 80060b2:	4313      	orrs	r3, r2
 80060b4:	46a2      	mov	sl, r4
 80060b6:	9304      	str	r3, [sp, #16]
 80060b8:	e7d2      	b.n	8006060 <_svfiprintf_r+0xa0>
 80060ba:	9b03      	ldr	r3, [sp, #12]
 80060bc:	1d19      	adds	r1, r3, #4
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	9103      	str	r1, [sp, #12]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	bfbb      	ittet	lt
 80060c6:	425b      	neglt	r3, r3
 80060c8:	f042 0202 	orrlt.w	r2, r2, #2
 80060cc:	9307      	strge	r3, [sp, #28]
 80060ce:	9307      	strlt	r3, [sp, #28]
 80060d0:	bfb8      	it	lt
 80060d2:	9204      	strlt	r2, [sp, #16]
 80060d4:	7823      	ldrb	r3, [r4, #0]
 80060d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80060d8:	d10a      	bne.n	80060f0 <_svfiprintf_r+0x130>
 80060da:	7863      	ldrb	r3, [r4, #1]
 80060dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80060de:	d132      	bne.n	8006146 <_svfiprintf_r+0x186>
 80060e0:	9b03      	ldr	r3, [sp, #12]
 80060e2:	3402      	adds	r4, #2
 80060e4:	1d1a      	adds	r2, r3, #4
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	9203      	str	r2, [sp, #12]
 80060ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060ee:	9305      	str	r3, [sp, #20]
 80060f0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80061a8 <_svfiprintf_r+0x1e8>
 80060f4:	2203      	movs	r2, #3
 80060f6:	4650      	mov	r0, sl
 80060f8:	7821      	ldrb	r1, [r4, #0]
 80060fa:	f7fe fc20 	bl	800493e <memchr>
 80060fe:	b138      	cbz	r0, 8006110 <_svfiprintf_r+0x150>
 8006100:	2240      	movs	r2, #64	@ 0x40
 8006102:	9b04      	ldr	r3, [sp, #16]
 8006104:	eba0 000a 	sub.w	r0, r0, sl
 8006108:	4082      	lsls	r2, r0
 800610a:	4313      	orrs	r3, r2
 800610c:	3401      	adds	r4, #1
 800610e:	9304      	str	r3, [sp, #16]
 8006110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006114:	2206      	movs	r2, #6
 8006116:	4825      	ldr	r0, [pc, #148]	@ (80061ac <_svfiprintf_r+0x1ec>)
 8006118:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800611c:	f7fe fc0f 	bl	800493e <memchr>
 8006120:	2800      	cmp	r0, #0
 8006122:	d036      	beq.n	8006192 <_svfiprintf_r+0x1d2>
 8006124:	4b22      	ldr	r3, [pc, #136]	@ (80061b0 <_svfiprintf_r+0x1f0>)
 8006126:	bb1b      	cbnz	r3, 8006170 <_svfiprintf_r+0x1b0>
 8006128:	9b03      	ldr	r3, [sp, #12]
 800612a:	3307      	adds	r3, #7
 800612c:	f023 0307 	bic.w	r3, r3, #7
 8006130:	3308      	adds	r3, #8
 8006132:	9303      	str	r3, [sp, #12]
 8006134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006136:	4433      	add	r3, r6
 8006138:	9309      	str	r3, [sp, #36]	@ 0x24
 800613a:	e76a      	b.n	8006012 <_svfiprintf_r+0x52>
 800613c:	460c      	mov	r4, r1
 800613e:	2001      	movs	r0, #1
 8006140:	fb0c 3202 	mla	r2, ip, r2, r3
 8006144:	e7a8      	b.n	8006098 <_svfiprintf_r+0xd8>
 8006146:	2300      	movs	r3, #0
 8006148:	f04f 0c0a 	mov.w	ip, #10
 800614c:	4619      	mov	r1, r3
 800614e:	3401      	adds	r4, #1
 8006150:	9305      	str	r3, [sp, #20]
 8006152:	4620      	mov	r0, r4
 8006154:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006158:	3a30      	subs	r2, #48	@ 0x30
 800615a:	2a09      	cmp	r2, #9
 800615c:	d903      	bls.n	8006166 <_svfiprintf_r+0x1a6>
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0c6      	beq.n	80060f0 <_svfiprintf_r+0x130>
 8006162:	9105      	str	r1, [sp, #20]
 8006164:	e7c4      	b.n	80060f0 <_svfiprintf_r+0x130>
 8006166:	4604      	mov	r4, r0
 8006168:	2301      	movs	r3, #1
 800616a:	fb0c 2101 	mla	r1, ip, r1, r2
 800616e:	e7f0      	b.n	8006152 <_svfiprintf_r+0x192>
 8006170:	ab03      	add	r3, sp, #12
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	462a      	mov	r2, r5
 8006176:	4638      	mov	r0, r7
 8006178:	4b0e      	ldr	r3, [pc, #56]	@ (80061b4 <_svfiprintf_r+0x1f4>)
 800617a:	a904      	add	r1, sp, #16
 800617c:	f7fd fe7c 	bl	8003e78 <_printf_float>
 8006180:	1c42      	adds	r2, r0, #1
 8006182:	4606      	mov	r6, r0
 8006184:	d1d6      	bne.n	8006134 <_svfiprintf_r+0x174>
 8006186:	89ab      	ldrh	r3, [r5, #12]
 8006188:	065b      	lsls	r3, r3, #25
 800618a:	f53f af2d 	bmi.w	8005fe8 <_svfiprintf_r+0x28>
 800618e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006190:	e72c      	b.n	8005fec <_svfiprintf_r+0x2c>
 8006192:	ab03      	add	r3, sp, #12
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	462a      	mov	r2, r5
 8006198:	4638      	mov	r0, r7
 800619a:	4b06      	ldr	r3, [pc, #24]	@ (80061b4 <_svfiprintf_r+0x1f4>)
 800619c:	a904      	add	r1, sp, #16
 800619e:	f7fe f909 	bl	80043b4 <_printf_i>
 80061a2:	e7ed      	b.n	8006180 <_svfiprintf_r+0x1c0>
 80061a4:	08006e60 	.word	0x08006e60
 80061a8:	08006e66 	.word	0x08006e66
 80061ac:	08006e6a 	.word	0x08006e6a
 80061b0:	08003e79 	.word	0x08003e79
 80061b4:	08005f09 	.word	0x08005f09

080061b8 <__sflush_r>:
 80061b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061be:	0716      	lsls	r6, r2, #28
 80061c0:	4605      	mov	r5, r0
 80061c2:	460c      	mov	r4, r1
 80061c4:	d454      	bmi.n	8006270 <__sflush_r+0xb8>
 80061c6:	684b      	ldr	r3, [r1, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	dc02      	bgt.n	80061d2 <__sflush_r+0x1a>
 80061cc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	dd48      	ble.n	8006264 <__sflush_r+0xac>
 80061d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061d4:	2e00      	cmp	r6, #0
 80061d6:	d045      	beq.n	8006264 <__sflush_r+0xac>
 80061d8:	2300      	movs	r3, #0
 80061da:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061de:	682f      	ldr	r7, [r5, #0]
 80061e0:	6a21      	ldr	r1, [r4, #32]
 80061e2:	602b      	str	r3, [r5, #0]
 80061e4:	d030      	beq.n	8006248 <__sflush_r+0x90>
 80061e6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	0759      	lsls	r1, r3, #29
 80061ec:	d505      	bpl.n	80061fa <__sflush_r+0x42>
 80061ee:	6863      	ldr	r3, [r4, #4]
 80061f0:	1ad2      	subs	r2, r2, r3
 80061f2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061f4:	b10b      	cbz	r3, 80061fa <__sflush_r+0x42>
 80061f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061f8:	1ad2      	subs	r2, r2, r3
 80061fa:	2300      	movs	r3, #0
 80061fc:	4628      	mov	r0, r5
 80061fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006200:	6a21      	ldr	r1, [r4, #32]
 8006202:	47b0      	blx	r6
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	89a3      	ldrh	r3, [r4, #12]
 8006208:	d106      	bne.n	8006218 <__sflush_r+0x60>
 800620a:	6829      	ldr	r1, [r5, #0]
 800620c:	291d      	cmp	r1, #29
 800620e:	d82b      	bhi.n	8006268 <__sflush_r+0xb0>
 8006210:	4a28      	ldr	r2, [pc, #160]	@ (80062b4 <__sflush_r+0xfc>)
 8006212:	40ca      	lsrs	r2, r1
 8006214:	07d6      	lsls	r6, r2, #31
 8006216:	d527      	bpl.n	8006268 <__sflush_r+0xb0>
 8006218:	2200      	movs	r2, #0
 800621a:	6062      	str	r2, [r4, #4]
 800621c:	6922      	ldr	r2, [r4, #16]
 800621e:	04d9      	lsls	r1, r3, #19
 8006220:	6022      	str	r2, [r4, #0]
 8006222:	d504      	bpl.n	800622e <__sflush_r+0x76>
 8006224:	1c42      	adds	r2, r0, #1
 8006226:	d101      	bne.n	800622c <__sflush_r+0x74>
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	b903      	cbnz	r3, 800622e <__sflush_r+0x76>
 800622c:	6560      	str	r0, [r4, #84]	@ 0x54
 800622e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006230:	602f      	str	r7, [r5, #0]
 8006232:	b1b9      	cbz	r1, 8006264 <__sflush_r+0xac>
 8006234:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006238:	4299      	cmp	r1, r3
 800623a:	d002      	beq.n	8006242 <__sflush_r+0x8a>
 800623c:	4628      	mov	r0, r5
 800623e:	f7ff f9eb 	bl	8005618 <_free_r>
 8006242:	2300      	movs	r3, #0
 8006244:	6363      	str	r3, [r4, #52]	@ 0x34
 8006246:	e00d      	b.n	8006264 <__sflush_r+0xac>
 8006248:	2301      	movs	r3, #1
 800624a:	4628      	mov	r0, r5
 800624c:	47b0      	blx	r6
 800624e:	4602      	mov	r2, r0
 8006250:	1c50      	adds	r0, r2, #1
 8006252:	d1c9      	bne.n	80061e8 <__sflush_r+0x30>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0c6      	beq.n	80061e8 <__sflush_r+0x30>
 800625a:	2b1d      	cmp	r3, #29
 800625c:	d001      	beq.n	8006262 <__sflush_r+0xaa>
 800625e:	2b16      	cmp	r3, #22
 8006260:	d11d      	bne.n	800629e <__sflush_r+0xe6>
 8006262:	602f      	str	r7, [r5, #0]
 8006264:	2000      	movs	r0, #0
 8006266:	e021      	b.n	80062ac <__sflush_r+0xf4>
 8006268:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800626c:	b21b      	sxth	r3, r3
 800626e:	e01a      	b.n	80062a6 <__sflush_r+0xee>
 8006270:	690f      	ldr	r7, [r1, #16]
 8006272:	2f00      	cmp	r7, #0
 8006274:	d0f6      	beq.n	8006264 <__sflush_r+0xac>
 8006276:	0793      	lsls	r3, r2, #30
 8006278:	bf18      	it	ne
 800627a:	2300      	movne	r3, #0
 800627c:	680e      	ldr	r6, [r1, #0]
 800627e:	bf08      	it	eq
 8006280:	694b      	ldreq	r3, [r1, #20]
 8006282:	1bf6      	subs	r6, r6, r7
 8006284:	600f      	str	r7, [r1, #0]
 8006286:	608b      	str	r3, [r1, #8]
 8006288:	2e00      	cmp	r6, #0
 800628a:	ddeb      	ble.n	8006264 <__sflush_r+0xac>
 800628c:	4633      	mov	r3, r6
 800628e:	463a      	mov	r2, r7
 8006290:	4628      	mov	r0, r5
 8006292:	6a21      	ldr	r1, [r4, #32]
 8006294:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006298:	47e0      	blx	ip
 800629a:	2800      	cmp	r0, #0
 800629c:	dc07      	bgt.n	80062ae <__sflush_r+0xf6>
 800629e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062a6:	f04f 30ff 	mov.w	r0, #4294967295
 80062aa:	81a3      	strh	r3, [r4, #12]
 80062ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062ae:	4407      	add	r7, r0
 80062b0:	1a36      	subs	r6, r6, r0
 80062b2:	e7e9      	b.n	8006288 <__sflush_r+0xd0>
 80062b4:	20400001 	.word	0x20400001

080062b8 <_fflush_r>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	690b      	ldr	r3, [r1, #16]
 80062bc:	4605      	mov	r5, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	b913      	cbnz	r3, 80062c8 <_fflush_r+0x10>
 80062c2:	2500      	movs	r5, #0
 80062c4:	4628      	mov	r0, r5
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	b118      	cbz	r0, 80062d2 <_fflush_r+0x1a>
 80062ca:	6a03      	ldr	r3, [r0, #32]
 80062cc:	b90b      	cbnz	r3, 80062d2 <_fflush_r+0x1a>
 80062ce:	f7fe fa1b 	bl	8004708 <__sinit>
 80062d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0f3      	beq.n	80062c2 <_fflush_r+0xa>
 80062da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062dc:	07d0      	lsls	r0, r2, #31
 80062de:	d404      	bmi.n	80062ea <_fflush_r+0x32>
 80062e0:	0599      	lsls	r1, r3, #22
 80062e2:	d402      	bmi.n	80062ea <_fflush_r+0x32>
 80062e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062e6:	f7fe fb28 	bl	800493a <__retarget_lock_acquire_recursive>
 80062ea:	4628      	mov	r0, r5
 80062ec:	4621      	mov	r1, r4
 80062ee:	f7ff ff63 	bl	80061b8 <__sflush_r>
 80062f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062f4:	4605      	mov	r5, r0
 80062f6:	07da      	lsls	r2, r3, #31
 80062f8:	d4e4      	bmi.n	80062c4 <_fflush_r+0xc>
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	059b      	lsls	r3, r3, #22
 80062fe:	d4e1      	bmi.n	80062c4 <_fflush_r+0xc>
 8006300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006302:	f7fe fb1b 	bl	800493c <__retarget_lock_release_recursive>
 8006306:	e7dd      	b.n	80062c4 <_fflush_r+0xc>

08006308 <memmove>:
 8006308:	4288      	cmp	r0, r1
 800630a:	b510      	push	{r4, lr}
 800630c:	eb01 0402 	add.w	r4, r1, r2
 8006310:	d902      	bls.n	8006318 <memmove+0x10>
 8006312:	4284      	cmp	r4, r0
 8006314:	4623      	mov	r3, r4
 8006316:	d807      	bhi.n	8006328 <memmove+0x20>
 8006318:	1e43      	subs	r3, r0, #1
 800631a:	42a1      	cmp	r1, r4
 800631c:	d008      	beq.n	8006330 <memmove+0x28>
 800631e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006322:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006326:	e7f8      	b.n	800631a <memmove+0x12>
 8006328:	4601      	mov	r1, r0
 800632a:	4402      	add	r2, r0
 800632c:	428a      	cmp	r2, r1
 800632e:	d100      	bne.n	8006332 <memmove+0x2a>
 8006330:	bd10      	pop	{r4, pc}
 8006332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800633a:	e7f7      	b.n	800632c <memmove+0x24>

0800633c <_sbrk_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	2300      	movs	r3, #0
 8006340:	4d05      	ldr	r5, [pc, #20]	@ (8006358 <_sbrk_r+0x1c>)
 8006342:	4604      	mov	r4, r0
 8006344:	4608      	mov	r0, r1
 8006346:	602b      	str	r3, [r5, #0]
 8006348:	f7fb fdce 	bl	8001ee8 <_sbrk>
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	d102      	bne.n	8006356 <_sbrk_r+0x1a>
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	b103      	cbz	r3, 8006356 <_sbrk_r+0x1a>
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	bd38      	pop	{r3, r4, r5, pc}
 8006358:	200003d8 	.word	0x200003d8

0800635c <memcpy>:
 800635c:	440a      	add	r2, r1
 800635e:	4291      	cmp	r1, r2
 8006360:	f100 33ff 	add.w	r3, r0, #4294967295
 8006364:	d100      	bne.n	8006368 <memcpy+0xc>
 8006366:	4770      	bx	lr
 8006368:	b510      	push	{r4, lr}
 800636a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800636e:	4291      	cmp	r1, r2
 8006370:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006374:	d1f9      	bne.n	800636a <memcpy+0xe>
 8006376:	bd10      	pop	{r4, pc}

08006378 <__assert_func>:
 8006378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800637a:	4614      	mov	r4, r2
 800637c:	461a      	mov	r2, r3
 800637e:	4b09      	ldr	r3, [pc, #36]	@ (80063a4 <__assert_func+0x2c>)
 8006380:	4605      	mov	r5, r0
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68d8      	ldr	r0, [r3, #12]
 8006386:	b14c      	cbz	r4, 800639c <__assert_func+0x24>
 8006388:	4b07      	ldr	r3, [pc, #28]	@ (80063a8 <__assert_func+0x30>)
 800638a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800638e:	9100      	str	r1, [sp, #0]
 8006390:	462b      	mov	r3, r5
 8006392:	4906      	ldr	r1, [pc, #24]	@ (80063ac <__assert_func+0x34>)
 8006394:	f000 f870 	bl	8006478 <fiprintf>
 8006398:	f000 f880 	bl	800649c <abort>
 800639c:	4b04      	ldr	r3, [pc, #16]	@ (80063b0 <__assert_func+0x38>)
 800639e:	461c      	mov	r4, r3
 80063a0:	e7f3      	b.n	800638a <__assert_func+0x12>
 80063a2:	bf00      	nop
 80063a4:	20000018 	.word	0x20000018
 80063a8:	08006e7b 	.word	0x08006e7b
 80063ac:	08006e88 	.word	0x08006e88
 80063b0:	08006eb6 	.word	0x08006eb6

080063b4 <_calloc_r>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	fba1 5402 	umull	r5, r4, r1, r2
 80063ba:	b934      	cbnz	r4, 80063ca <_calloc_r+0x16>
 80063bc:	4629      	mov	r1, r5
 80063be:	f7ff f99d 	bl	80056fc <_malloc_r>
 80063c2:	4606      	mov	r6, r0
 80063c4:	b928      	cbnz	r0, 80063d2 <_calloc_r+0x1e>
 80063c6:	4630      	mov	r0, r6
 80063c8:	bd70      	pop	{r4, r5, r6, pc}
 80063ca:	220c      	movs	r2, #12
 80063cc:	2600      	movs	r6, #0
 80063ce:	6002      	str	r2, [r0, #0]
 80063d0:	e7f9      	b.n	80063c6 <_calloc_r+0x12>
 80063d2:	462a      	mov	r2, r5
 80063d4:	4621      	mov	r1, r4
 80063d6:	f7fe fa32 	bl	800483e <memset>
 80063da:	e7f4      	b.n	80063c6 <_calloc_r+0x12>

080063dc <__ascii_mbtowc>:
 80063dc:	b082      	sub	sp, #8
 80063de:	b901      	cbnz	r1, 80063e2 <__ascii_mbtowc+0x6>
 80063e0:	a901      	add	r1, sp, #4
 80063e2:	b142      	cbz	r2, 80063f6 <__ascii_mbtowc+0x1a>
 80063e4:	b14b      	cbz	r3, 80063fa <__ascii_mbtowc+0x1e>
 80063e6:	7813      	ldrb	r3, [r2, #0]
 80063e8:	600b      	str	r3, [r1, #0]
 80063ea:	7812      	ldrb	r2, [r2, #0]
 80063ec:	1e10      	subs	r0, r2, #0
 80063ee:	bf18      	it	ne
 80063f0:	2001      	movne	r0, #1
 80063f2:	b002      	add	sp, #8
 80063f4:	4770      	bx	lr
 80063f6:	4610      	mov	r0, r2
 80063f8:	e7fb      	b.n	80063f2 <__ascii_mbtowc+0x16>
 80063fa:	f06f 0001 	mvn.w	r0, #1
 80063fe:	e7f8      	b.n	80063f2 <__ascii_mbtowc+0x16>

08006400 <_realloc_r>:
 8006400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006404:	4607      	mov	r7, r0
 8006406:	4614      	mov	r4, r2
 8006408:	460d      	mov	r5, r1
 800640a:	b921      	cbnz	r1, 8006416 <_realloc_r+0x16>
 800640c:	4611      	mov	r1, r2
 800640e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006412:	f7ff b973 	b.w	80056fc <_malloc_r>
 8006416:	b92a      	cbnz	r2, 8006424 <_realloc_r+0x24>
 8006418:	f7ff f8fe 	bl	8005618 <_free_r>
 800641c:	4625      	mov	r5, r4
 800641e:	4628      	mov	r0, r5
 8006420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006424:	f000 f841 	bl	80064aa <_malloc_usable_size_r>
 8006428:	4284      	cmp	r4, r0
 800642a:	4606      	mov	r6, r0
 800642c:	d802      	bhi.n	8006434 <_realloc_r+0x34>
 800642e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006432:	d8f4      	bhi.n	800641e <_realloc_r+0x1e>
 8006434:	4621      	mov	r1, r4
 8006436:	4638      	mov	r0, r7
 8006438:	f7ff f960 	bl	80056fc <_malloc_r>
 800643c:	4680      	mov	r8, r0
 800643e:	b908      	cbnz	r0, 8006444 <_realloc_r+0x44>
 8006440:	4645      	mov	r5, r8
 8006442:	e7ec      	b.n	800641e <_realloc_r+0x1e>
 8006444:	42b4      	cmp	r4, r6
 8006446:	4622      	mov	r2, r4
 8006448:	4629      	mov	r1, r5
 800644a:	bf28      	it	cs
 800644c:	4632      	movcs	r2, r6
 800644e:	f7ff ff85 	bl	800635c <memcpy>
 8006452:	4629      	mov	r1, r5
 8006454:	4638      	mov	r0, r7
 8006456:	f7ff f8df 	bl	8005618 <_free_r>
 800645a:	e7f1      	b.n	8006440 <_realloc_r+0x40>

0800645c <__ascii_wctomb>:
 800645c:	4603      	mov	r3, r0
 800645e:	4608      	mov	r0, r1
 8006460:	b141      	cbz	r1, 8006474 <__ascii_wctomb+0x18>
 8006462:	2aff      	cmp	r2, #255	@ 0xff
 8006464:	d904      	bls.n	8006470 <__ascii_wctomb+0x14>
 8006466:	228a      	movs	r2, #138	@ 0x8a
 8006468:	f04f 30ff 	mov.w	r0, #4294967295
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	4770      	bx	lr
 8006470:	2001      	movs	r0, #1
 8006472:	700a      	strb	r2, [r1, #0]
 8006474:	4770      	bx	lr
	...

08006478 <fiprintf>:
 8006478:	b40e      	push	{r1, r2, r3}
 800647a:	b503      	push	{r0, r1, lr}
 800647c:	4601      	mov	r1, r0
 800647e:	ab03      	add	r3, sp, #12
 8006480:	4805      	ldr	r0, [pc, #20]	@ (8006498 <fiprintf+0x20>)
 8006482:	f853 2b04 	ldr.w	r2, [r3], #4
 8006486:	6800      	ldr	r0, [r0, #0]
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	f000 f83d 	bl	8006508 <_vfiprintf_r>
 800648e:	b002      	add	sp, #8
 8006490:	f85d eb04 	ldr.w	lr, [sp], #4
 8006494:	b003      	add	sp, #12
 8006496:	4770      	bx	lr
 8006498:	20000018 	.word	0x20000018

0800649c <abort>:
 800649c:	2006      	movs	r0, #6
 800649e:	b508      	push	{r3, lr}
 80064a0:	f000 fa06 	bl	80068b0 <raise>
 80064a4:	2001      	movs	r0, #1
 80064a6:	f7fb fcaa 	bl	8001dfe <_exit>

080064aa <_malloc_usable_size_r>:
 80064aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064ae:	1f18      	subs	r0, r3, #4
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	bfbc      	itt	lt
 80064b4:	580b      	ldrlt	r3, [r1, r0]
 80064b6:	18c0      	addlt	r0, r0, r3
 80064b8:	4770      	bx	lr

080064ba <__sfputc_r>:
 80064ba:	6893      	ldr	r3, [r2, #8]
 80064bc:	b410      	push	{r4}
 80064be:	3b01      	subs	r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	6093      	str	r3, [r2, #8]
 80064c4:	da07      	bge.n	80064d6 <__sfputc_r+0x1c>
 80064c6:	6994      	ldr	r4, [r2, #24]
 80064c8:	42a3      	cmp	r3, r4
 80064ca:	db01      	blt.n	80064d0 <__sfputc_r+0x16>
 80064cc:	290a      	cmp	r1, #10
 80064ce:	d102      	bne.n	80064d6 <__sfputc_r+0x1c>
 80064d0:	bc10      	pop	{r4}
 80064d2:	f000 b931 	b.w	8006738 <__swbuf_r>
 80064d6:	6813      	ldr	r3, [r2, #0]
 80064d8:	1c58      	adds	r0, r3, #1
 80064da:	6010      	str	r0, [r2, #0]
 80064dc:	7019      	strb	r1, [r3, #0]
 80064de:	4608      	mov	r0, r1
 80064e0:	bc10      	pop	{r4}
 80064e2:	4770      	bx	lr

080064e4 <__sfputs_r>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	4606      	mov	r6, r0
 80064e8:	460f      	mov	r7, r1
 80064ea:	4614      	mov	r4, r2
 80064ec:	18d5      	adds	r5, r2, r3
 80064ee:	42ac      	cmp	r4, r5
 80064f0:	d101      	bne.n	80064f6 <__sfputs_r+0x12>
 80064f2:	2000      	movs	r0, #0
 80064f4:	e007      	b.n	8006506 <__sfputs_r+0x22>
 80064f6:	463a      	mov	r2, r7
 80064f8:	4630      	mov	r0, r6
 80064fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064fe:	f7ff ffdc 	bl	80064ba <__sfputc_r>
 8006502:	1c43      	adds	r3, r0, #1
 8006504:	d1f3      	bne.n	80064ee <__sfputs_r+0xa>
 8006506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006508 <_vfiprintf_r>:
 8006508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650c:	460d      	mov	r5, r1
 800650e:	4614      	mov	r4, r2
 8006510:	4698      	mov	r8, r3
 8006512:	4606      	mov	r6, r0
 8006514:	b09d      	sub	sp, #116	@ 0x74
 8006516:	b118      	cbz	r0, 8006520 <_vfiprintf_r+0x18>
 8006518:	6a03      	ldr	r3, [r0, #32]
 800651a:	b90b      	cbnz	r3, 8006520 <_vfiprintf_r+0x18>
 800651c:	f7fe f8f4 	bl	8004708 <__sinit>
 8006520:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006522:	07d9      	lsls	r1, r3, #31
 8006524:	d405      	bmi.n	8006532 <_vfiprintf_r+0x2a>
 8006526:	89ab      	ldrh	r3, [r5, #12]
 8006528:	059a      	lsls	r2, r3, #22
 800652a:	d402      	bmi.n	8006532 <_vfiprintf_r+0x2a>
 800652c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800652e:	f7fe fa04 	bl	800493a <__retarget_lock_acquire_recursive>
 8006532:	89ab      	ldrh	r3, [r5, #12]
 8006534:	071b      	lsls	r3, r3, #28
 8006536:	d501      	bpl.n	800653c <_vfiprintf_r+0x34>
 8006538:	692b      	ldr	r3, [r5, #16]
 800653a:	b99b      	cbnz	r3, 8006564 <_vfiprintf_r+0x5c>
 800653c:	4629      	mov	r1, r5
 800653e:	4630      	mov	r0, r6
 8006540:	f000 f938 	bl	80067b4 <__swsetup_r>
 8006544:	b170      	cbz	r0, 8006564 <_vfiprintf_r+0x5c>
 8006546:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006548:	07dc      	lsls	r4, r3, #31
 800654a:	d504      	bpl.n	8006556 <_vfiprintf_r+0x4e>
 800654c:	f04f 30ff 	mov.w	r0, #4294967295
 8006550:	b01d      	add	sp, #116	@ 0x74
 8006552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006556:	89ab      	ldrh	r3, [r5, #12]
 8006558:	0598      	lsls	r0, r3, #22
 800655a:	d4f7      	bmi.n	800654c <_vfiprintf_r+0x44>
 800655c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800655e:	f7fe f9ed 	bl	800493c <__retarget_lock_release_recursive>
 8006562:	e7f3      	b.n	800654c <_vfiprintf_r+0x44>
 8006564:	2300      	movs	r3, #0
 8006566:	9309      	str	r3, [sp, #36]	@ 0x24
 8006568:	2320      	movs	r3, #32
 800656a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800656e:	2330      	movs	r3, #48	@ 0x30
 8006570:	f04f 0901 	mov.w	r9, #1
 8006574:	f8cd 800c 	str.w	r8, [sp, #12]
 8006578:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006724 <_vfiprintf_r+0x21c>
 800657c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006580:	4623      	mov	r3, r4
 8006582:	469a      	mov	sl, r3
 8006584:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006588:	b10a      	cbz	r2, 800658e <_vfiprintf_r+0x86>
 800658a:	2a25      	cmp	r2, #37	@ 0x25
 800658c:	d1f9      	bne.n	8006582 <_vfiprintf_r+0x7a>
 800658e:	ebba 0b04 	subs.w	fp, sl, r4
 8006592:	d00b      	beq.n	80065ac <_vfiprintf_r+0xa4>
 8006594:	465b      	mov	r3, fp
 8006596:	4622      	mov	r2, r4
 8006598:	4629      	mov	r1, r5
 800659a:	4630      	mov	r0, r6
 800659c:	f7ff ffa2 	bl	80064e4 <__sfputs_r>
 80065a0:	3001      	adds	r0, #1
 80065a2:	f000 80a7 	beq.w	80066f4 <_vfiprintf_r+0x1ec>
 80065a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065a8:	445a      	add	r2, fp
 80065aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80065ac:	f89a 3000 	ldrb.w	r3, [sl]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 809f 	beq.w	80066f4 <_vfiprintf_r+0x1ec>
 80065b6:	2300      	movs	r3, #0
 80065b8:	f04f 32ff 	mov.w	r2, #4294967295
 80065bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065c0:	f10a 0a01 	add.w	sl, sl, #1
 80065c4:	9304      	str	r3, [sp, #16]
 80065c6:	9307      	str	r3, [sp, #28]
 80065c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80065ce:	4654      	mov	r4, sl
 80065d0:	2205      	movs	r2, #5
 80065d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d6:	4853      	ldr	r0, [pc, #332]	@ (8006724 <_vfiprintf_r+0x21c>)
 80065d8:	f7fe f9b1 	bl	800493e <memchr>
 80065dc:	9a04      	ldr	r2, [sp, #16]
 80065de:	b9d8      	cbnz	r0, 8006618 <_vfiprintf_r+0x110>
 80065e0:	06d1      	lsls	r1, r2, #27
 80065e2:	bf44      	itt	mi
 80065e4:	2320      	movmi	r3, #32
 80065e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065ea:	0713      	lsls	r3, r2, #28
 80065ec:	bf44      	itt	mi
 80065ee:	232b      	movmi	r3, #43	@ 0x2b
 80065f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065f4:	f89a 3000 	ldrb.w	r3, [sl]
 80065f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80065fa:	d015      	beq.n	8006628 <_vfiprintf_r+0x120>
 80065fc:	4654      	mov	r4, sl
 80065fe:	2000      	movs	r0, #0
 8006600:	f04f 0c0a 	mov.w	ip, #10
 8006604:	9a07      	ldr	r2, [sp, #28]
 8006606:	4621      	mov	r1, r4
 8006608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800660c:	3b30      	subs	r3, #48	@ 0x30
 800660e:	2b09      	cmp	r3, #9
 8006610:	d94b      	bls.n	80066aa <_vfiprintf_r+0x1a2>
 8006612:	b1b0      	cbz	r0, 8006642 <_vfiprintf_r+0x13a>
 8006614:	9207      	str	r2, [sp, #28]
 8006616:	e014      	b.n	8006642 <_vfiprintf_r+0x13a>
 8006618:	eba0 0308 	sub.w	r3, r0, r8
 800661c:	fa09 f303 	lsl.w	r3, r9, r3
 8006620:	4313      	orrs	r3, r2
 8006622:	46a2      	mov	sl, r4
 8006624:	9304      	str	r3, [sp, #16]
 8006626:	e7d2      	b.n	80065ce <_vfiprintf_r+0xc6>
 8006628:	9b03      	ldr	r3, [sp, #12]
 800662a:	1d19      	adds	r1, r3, #4
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	9103      	str	r1, [sp, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	bfbb      	ittet	lt
 8006634:	425b      	neglt	r3, r3
 8006636:	f042 0202 	orrlt.w	r2, r2, #2
 800663a:	9307      	strge	r3, [sp, #28]
 800663c:	9307      	strlt	r3, [sp, #28]
 800663e:	bfb8      	it	lt
 8006640:	9204      	strlt	r2, [sp, #16]
 8006642:	7823      	ldrb	r3, [r4, #0]
 8006644:	2b2e      	cmp	r3, #46	@ 0x2e
 8006646:	d10a      	bne.n	800665e <_vfiprintf_r+0x156>
 8006648:	7863      	ldrb	r3, [r4, #1]
 800664a:	2b2a      	cmp	r3, #42	@ 0x2a
 800664c:	d132      	bne.n	80066b4 <_vfiprintf_r+0x1ac>
 800664e:	9b03      	ldr	r3, [sp, #12]
 8006650:	3402      	adds	r4, #2
 8006652:	1d1a      	adds	r2, r3, #4
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	9203      	str	r2, [sp, #12]
 8006658:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800665c:	9305      	str	r3, [sp, #20]
 800665e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006728 <_vfiprintf_r+0x220>
 8006662:	2203      	movs	r2, #3
 8006664:	4650      	mov	r0, sl
 8006666:	7821      	ldrb	r1, [r4, #0]
 8006668:	f7fe f969 	bl	800493e <memchr>
 800666c:	b138      	cbz	r0, 800667e <_vfiprintf_r+0x176>
 800666e:	2240      	movs	r2, #64	@ 0x40
 8006670:	9b04      	ldr	r3, [sp, #16]
 8006672:	eba0 000a 	sub.w	r0, r0, sl
 8006676:	4082      	lsls	r2, r0
 8006678:	4313      	orrs	r3, r2
 800667a:	3401      	adds	r4, #1
 800667c:	9304      	str	r3, [sp, #16]
 800667e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006682:	2206      	movs	r2, #6
 8006684:	4829      	ldr	r0, [pc, #164]	@ (800672c <_vfiprintf_r+0x224>)
 8006686:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800668a:	f7fe f958 	bl	800493e <memchr>
 800668e:	2800      	cmp	r0, #0
 8006690:	d03f      	beq.n	8006712 <_vfiprintf_r+0x20a>
 8006692:	4b27      	ldr	r3, [pc, #156]	@ (8006730 <_vfiprintf_r+0x228>)
 8006694:	bb1b      	cbnz	r3, 80066de <_vfiprintf_r+0x1d6>
 8006696:	9b03      	ldr	r3, [sp, #12]
 8006698:	3307      	adds	r3, #7
 800669a:	f023 0307 	bic.w	r3, r3, #7
 800669e:	3308      	adds	r3, #8
 80066a0:	9303      	str	r3, [sp, #12]
 80066a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066a4:	443b      	add	r3, r7
 80066a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80066a8:	e76a      	b.n	8006580 <_vfiprintf_r+0x78>
 80066aa:	460c      	mov	r4, r1
 80066ac:	2001      	movs	r0, #1
 80066ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80066b2:	e7a8      	b.n	8006606 <_vfiprintf_r+0xfe>
 80066b4:	2300      	movs	r3, #0
 80066b6:	f04f 0c0a 	mov.w	ip, #10
 80066ba:	4619      	mov	r1, r3
 80066bc:	3401      	adds	r4, #1
 80066be:	9305      	str	r3, [sp, #20]
 80066c0:	4620      	mov	r0, r4
 80066c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066c6:	3a30      	subs	r2, #48	@ 0x30
 80066c8:	2a09      	cmp	r2, #9
 80066ca:	d903      	bls.n	80066d4 <_vfiprintf_r+0x1cc>
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0c6      	beq.n	800665e <_vfiprintf_r+0x156>
 80066d0:	9105      	str	r1, [sp, #20]
 80066d2:	e7c4      	b.n	800665e <_vfiprintf_r+0x156>
 80066d4:	4604      	mov	r4, r0
 80066d6:	2301      	movs	r3, #1
 80066d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80066dc:	e7f0      	b.n	80066c0 <_vfiprintf_r+0x1b8>
 80066de:	ab03      	add	r3, sp, #12
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	462a      	mov	r2, r5
 80066e4:	4630      	mov	r0, r6
 80066e6:	4b13      	ldr	r3, [pc, #76]	@ (8006734 <_vfiprintf_r+0x22c>)
 80066e8:	a904      	add	r1, sp, #16
 80066ea:	f7fd fbc5 	bl	8003e78 <_printf_float>
 80066ee:	4607      	mov	r7, r0
 80066f0:	1c78      	adds	r0, r7, #1
 80066f2:	d1d6      	bne.n	80066a2 <_vfiprintf_r+0x19a>
 80066f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066f6:	07d9      	lsls	r1, r3, #31
 80066f8:	d405      	bmi.n	8006706 <_vfiprintf_r+0x1fe>
 80066fa:	89ab      	ldrh	r3, [r5, #12]
 80066fc:	059a      	lsls	r2, r3, #22
 80066fe:	d402      	bmi.n	8006706 <_vfiprintf_r+0x1fe>
 8006700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006702:	f7fe f91b 	bl	800493c <__retarget_lock_release_recursive>
 8006706:	89ab      	ldrh	r3, [r5, #12]
 8006708:	065b      	lsls	r3, r3, #25
 800670a:	f53f af1f 	bmi.w	800654c <_vfiprintf_r+0x44>
 800670e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006710:	e71e      	b.n	8006550 <_vfiprintf_r+0x48>
 8006712:	ab03      	add	r3, sp, #12
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	462a      	mov	r2, r5
 8006718:	4630      	mov	r0, r6
 800671a:	4b06      	ldr	r3, [pc, #24]	@ (8006734 <_vfiprintf_r+0x22c>)
 800671c:	a904      	add	r1, sp, #16
 800671e:	f7fd fe49 	bl	80043b4 <_printf_i>
 8006722:	e7e4      	b.n	80066ee <_vfiprintf_r+0x1e6>
 8006724:	08006e60 	.word	0x08006e60
 8006728:	08006e66 	.word	0x08006e66
 800672c:	08006e6a 	.word	0x08006e6a
 8006730:	08003e79 	.word	0x08003e79
 8006734:	080064e5 	.word	0x080064e5

08006738 <__swbuf_r>:
 8006738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673a:	460e      	mov	r6, r1
 800673c:	4614      	mov	r4, r2
 800673e:	4605      	mov	r5, r0
 8006740:	b118      	cbz	r0, 800674a <__swbuf_r+0x12>
 8006742:	6a03      	ldr	r3, [r0, #32]
 8006744:	b90b      	cbnz	r3, 800674a <__swbuf_r+0x12>
 8006746:	f7fd ffdf 	bl	8004708 <__sinit>
 800674a:	69a3      	ldr	r3, [r4, #24]
 800674c:	60a3      	str	r3, [r4, #8]
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	071a      	lsls	r2, r3, #28
 8006752:	d501      	bpl.n	8006758 <__swbuf_r+0x20>
 8006754:	6923      	ldr	r3, [r4, #16]
 8006756:	b943      	cbnz	r3, 800676a <__swbuf_r+0x32>
 8006758:	4621      	mov	r1, r4
 800675a:	4628      	mov	r0, r5
 800675c:	f000 f82a 	bl	80067b4 <__swsetup_r>
 8006760:	b118      	cbz	r0, 800676a <__swbuf_r+0x32>
 8006762:	f04f 37ff 	mov.w	r7, #4294967295
 8006766:	4638      	mov	r0, r7
 8006768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	6922      	ldr	r2, [r4, #16]
 800676e:	b2f6      	uxtb	r6, r6
 8006770:	1a98      	subs	r0, r3, r2
 8006772:	6963      	ldr	r3, [r4, #20]
 8006774:	4637      	mov	r7, r6
 8006776:	4283      	cmp	r3, r0
 8006778:	dc05      	bgt.n	8006786 <__swbuf_r+0x4e>
 800677a:	4621      	mov	r1, r4
 800677c:	4628      	mov	r0, r5
 800677e:	f7ff fd9b 	bl	80062b8 <_fflush_r>
 8006782:	2800      	cmp	r0, #0
 8006784:	d1ed      	bne.n	8006762 <__swbuf_r+0x2a>
 8006786:	68a3      	ldr	r3, [r4, #8]
 8006788:	3b01      	subs	r3, #1
 800678a:	60a3      	str	r3, [r4, #8]
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	6022      	str	r2, [r4, #0]
 8006792:	701e      	strb	r6, [r3, #0]
 8006794:	6962      	ldr	r2, [r4, #20]
 8006796:	1c43      	adds	r3, r0, #1
 8006798:	429a      	cmp	r2, r3
 800679a:	d004      	beq.n	80067a6 <__swbuf_r+0x6e>
 800679c:	89a3      	ldrh	r3, [r4, #12]
 800679e:	07db      	lsls	r3, r3, #31
 80067a0:	d5e1      	bpl.n	8006766 <__swbuf_r+0x2e>
 80067a2:	2e0a      	cmp	r6, #10
 80067a4:	d1df      	bne.n	8006766 <__swbuf_r+0x2e>
 80067a6:	4621      	mov	r1, r4
 80067a8:	4628      	mov	r0, r5
 80067aa:	f7ff fd85 	bl	80062b8 <_fflush_r>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d0d9      	beq.n	8006766 <__swbuf_r+0x2e>
 80067b2:	e7d6      	b.n	8006762 <__swbuf_r+0x2a>

080067b4 <__swsetup_r>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	4b29      	ldr	r3, [pc, #164]	@ (800685c <__swsetup_r+0xa8>)
 80067b8:	4605      	mov	r5, r0
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	460c      	mov	r4, r1
 80067be:	b118      	cbz	r0, 80067c8 <__swsetup_r+0x14>
 80067c0:	6a03      	ldr	r3, [r0, #32]
 80067c2:	b90b      	cbnz	r3, 80067c8 <__swsetup_r+0x14>
 80067c4:	f7fd ffa0 	bl	8004708 <__sinit>
 80067c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067cc:	0719      	lsls	r1, r3, #28
 80067ce:	d422      	bmi.n	8006816 <__swsetup_r+0x62>
 80067d0:	06da      	lsls	r2, r3, #27
 80067d2:	d407      	bmi.n	80067e4 <__swsetup_r+0x30>
 80067d4:	2209      	movs	r2, #9
 80067d6:	602a      	str	r2, [r5, #0]
 80067d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067dc:	f04f 30ff 	mov.w	r0, #4294967295
 80067e0:	81a3      	strh	r3, [r4, #12]
 80067e2:	e033      	b.n	800684c <__swsetup_r+0x98>
 80067e4:	0758      	lsls	r0, r3, #29
 80067e6:	d512      	bpl.n	800680e <__swsetup_r+0x5a>
 80067e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067ea:	b141      	cbz	r1, 80067fe <__swsetup_r+0x4a>
 80067ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067f0:	4299      	cmp	r1, r3
 80067f2:	d002      	beq.n	80067fa <__swsetup_r+0x46>
 80067f4:	4628      	mov	r0, r5
 80067f6:	f7fe ff0f 	bl	8005618 <_free_r>
 80067fa:	2300      	movs	r3, #0
 80067fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006804:	81a3      	strh	r3, [r4, #12]
 8006806:	2300      	movs	r3, #0
 8006808:	6063      	str	r3, [r4, #4]
 800680a:	6923      	ldr	r3, [r4, #16]
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	f043 0308 	orr.w	r3, r3, #8
 8006814:	81a3      	strh	r3, [r4, #12]
 8006816:	6923      	ldr	r3, [r4, #16]
 8006818:	b94b      	cbnz	r3, 800682e <__swsetup_r+0x7a>
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006824:	d003      	beq.n	800682e <__swsetup_r+0x7a>
 8006826:	4621      	mov	r1, r4
 8006828:	4628      	mov	r0, r5
 800682a:	f000 f882 	bl	8006932 <__smakebuf_r>
 800682e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006832:	f013 0201 	ands.w	r2, r3, #1
 8006836:	d00a      	beq.n	800684e <__swsetup_r+0x9a>
 8006838:	2200      	movs	r2, #0
 800683a:	60a2      	str	r2, [r4, #8]
 800683c:	6962      	ldr	r2, [r4, #20]
 800683e:	4252      	negs	r2, r2
 8006840:	61a2      	str	r2, [r4, #24]
 8006842:	6922      	ldr	r2, [r4, #16]
 8006844:	b942      	cbnz	r2, 8006858 <__swsetup_r+0xa4>
 8006846:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800684a:	d1c5      	bne.n	80067d8 <__swsetup_r+0x24>
 800684c:	bd38      	pop	{r3, r4, r5, pc}
 800684e:	0799      	lsls	r1, r3, #30
 8006850:	bf58      	it	pl
 8006852:	6962      	ldrpl	r2, [r4, #20]
 8006854:	60a2      	str	r2, [r4, #8]
 8006856:	e7f4      	b.n	8006842 <__swsetup_r+0x8e>
 8006858:	2000      	movs	r0, #0
 800685a:	e7f7      	b.n	800684c <__swsetup_r+0x98>
 800685c:	20000018 	.word	0x20000018

08006860 <_raise_r>:
 8006860:	291f      	cmp	r1, #31
 8006862:	b538      	push	{r3, r4, r5, lr}
 8006864:	4605      	mov	r5, r0
 8006866:	460c      	mov	r4, r1
 8006868:	d904      	bls.n	8006874 <_raise_r+0x14>
 800686a:	2316      	movs	r3, #22
 800686c:	6003      	str	r3, [r0, #0]
 800686e:	f04f 30ff 	mov.w	r0, #4294967295
 8006872:	bd38      	pop	{r3, r4, r5, pc}
 8006874:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006876:	b112      	cbz	r2, 800687e <_raise_r+0x1e>
 8006878:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800687c:	b94b      	cbnz	r3, 8006892 <_raise_r+0x32>
 800687e:	4628      	mov	r0, r5
 8006880:	f000 f830 	bl	80068e4 <_getpid_r>
 8006884:	4622      	mov	r2, r4
 8006886:	4601      	mov	r1, r0
 8006888:	4628      	mov	r0, r5
 800688a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800688e:	f000 b817 	b.w	80068c0 <_kill_r>
 8006892:	2b01      	cmp	r3, #1
 8006894:	d00a      	beq.n	80068ac <_raise_r+0x4c>
 8006896:	1c59      	adds	r1, r3, #1
 8006898:	d103      	bne.n	80068a2 <_raise_r+0x42>
 800689a:	2316      	movs	r3, #22
 800689c:	6003      	str	r3, [r0, #0]
 800689e:	2001      	movs	r0, #1
 80068a0:	e7e7      	b.n	8006872 <_raise_r+0x12>
 80068a2:	2100      	movs	r1, #0
 80068a4:	4620      	mov	r0, r4
 80068a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80068aa:	4798      	blx	r3
 80068ac:	2000      	movs	r0, #0
 80068ae:	e7e0      	b.n	8006872 <_raise_r+0x12>

080068b0 <raise>:
 80068b0:	4b02      	ldr	r3, [pc, #8]	@ (80068bc <raise+0xc>)
 80068b2:	4601      	mov	r1, r0
 80068b4:	6818      	ldr	r0, [r3, #0]
 80068b6:	f7ff bfd3 	b.w	8006860 <_raise_r>
 80068ba:	bf00      	nop
 80068bc:	20000018 	.word	0x20000018

080068c0 <_kill_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	2300      	movs	r3, #0
 80068c4:	4d06      	ldr	r5, [pc, #24]	@ (80068e0 <_kill_r+0x20>)
 80068c6:	4604      	mov	r4, r0
 80068c8:	4608      	mov	r0, r1
 80068ca:	4611      	mov	r1, r2
 80068cc:	602b      	str	r3, [r5, #0]
 80068ce:	f7fb fa86 	bl	8001dde <_kill>
 80068d2:	1c43      	adds	r3, r0, #1
 80068d4:	d102      	bne.n	80068dc <_kill_r+0x1c>
 80068d6:	682b      	ldr	r3, [r5, #0]
 80068d8:	b103      	cbz	r3, 80068dc <_kill_r+0x1c>
 80068da:	6023      	str	r3, [r4, #0]
 80068dc:	bd38      	pop	{r3, r4, r5, pc}
 80068de:	bf00      	nop
 80068e0:	200003d8 	.word	0x200003d8

080068e4 <_getpid_r>:
 80068e4:	f7fb ba74 	b.w	8001dd0 <_getpid>

080068e8 <__swhatbuf_r>:
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	460c      	mov	r4, r1
 80068ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f0:	4615      	mov	r5, r2
 80068f2:	2900      	cmp	r1, #0
 80068f4:	461e      	mov	r6, r3
 80068f6:	b096      	sub	sp, #88	@ 0x58
 80068f8:	da0c      	bge.n	8006914 <__swhatbuf_r+0x2c>
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	2100      	movs	r1, #0
 80068fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006902:	bf14      	ite	ne
 8006904:	2340      	movne	r3, #64	@ 0x40
 8006906:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800690a:	2000      	movs	r0, #0
 800690c:	6031      	str	r1, [r6, #0]
 800690e:	602b      	str	r3, [r5, #0]
 8006910:	b016      	add	sp, #88	@ 0x58
 8006912:	bd70      	pop	{r4, r5, r6, pc}
 8006914:	466a      	mov	r2, sp
 8006916:	f000 f849 	bl	80069ac <_fstat_r>
 800691a:	2800      	cmp	r0, #0
 800691c:	dbed      	blt.n	80068fa <__swhatbuf_r+0x12>
 800691e:	9901      	ldr	r1, [sp, #4]
 8006920:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006924:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006928:	4259      	negs	r1, r3
 800692a:	4159      	adcs	r1, r3
 800692c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006930:	e7eb      	b.n	800690a <__swhatbuf_r+0x22>

08006932 <__smakebuf_r>:
 8006932:	898b      	ldrh	r3, [r1, #12]
 8006934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006936:	079d      	lsls	r5, r3, #30
 8006938:	4606      	mov	r6, r0
 800693a:	460c      	mov	r4, r1
 800693c:	d507      	bpl.n	800694e <__smakebuf_r+0x1c>
 800693e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006942:	6023      	str	r3, [r4, #0]
 8006944:	6123      	str	r3, [r4, #16]
 8006946:	2301      	movs	r3, #1
 8006948:	6163      	str	r3, [r4, #20]
 800694a:	b003      	add	sp, #12
 800694c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800694e:	466a      	mov	r2, sp
 8006950:	ab01      	add	r3, sp, #4
 8006952:	f7ff ffc9 	bl	80068e8 <__swhatbuf_r>
 8006956:	9f00      	ldr	r7, [sp, #0]
 8006958:	4605      	mov	r5, r0
 800695a:	4639      	mov	r1, r7
 800695c:	4630      	mov	r0, r6
 800695e:	f7fe fecd 	bl	80056fc <_malloc_r>
 8006962:	b948      	cbnz	r0, 8006978 <__smakebuf_r+0x46>
 8006964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006968:	059a      	lsls	r2, r3, #22
 800696a:	d4ee      	bmi.n	800694a <__smakebuf_r+0x18>
 800696c:	f023 0303 	bic.w	r3, r3, #3
 8006970:	f043 0302 	orr.w	r3, r3, #2
 8006974:	81a3      	strh	r3, [r4, #12]
 8006976:	e7e2      	b.n	800693e <__smakebuf_r+0xc>
 8006978:	89a3      	ldrh	r3, [r4, #12]
 800697a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800697e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006982:	81a3      	strh	r3, [r4, #12]
 8006984:	9b01      	ldr	r3, [sp, #4]
 8006986:	6020      	str	r0, [r4, #0]
 8006988:	b15b      	cbz	r3, 80069a2 <__smakebuf_r+0x70>
 800698a:	4630      	mov	r0, r6
 800698c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006990:	f000 f81e 	bl	80069d0 <_isatty_r>
 8006994:	b128      	cbz	r0, 80069a2 <__smakebuf_r+0x70>
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	f023 0303 	bic.w	r3, r3, #3
 800699c:	f043 0301 	orr.w	r3, r3, #1
 80069a0:	81a3      	strh	r3, [r4, #12]
 80069a2:	89a3      	ldrh	r3, [r4, #12]
 80069a4:	431d      	orrs	r5, r3
 80069a6:	81a5      	strh	r5, [r4, #12]
 80069a8:	e7cf      	b.n	800694a <__smakebuf_r+0x18>
	...

080069ac <_fstat_r>:
 80069ac:	b538      	push	{r3, r4, r5, lr}
 80069ae:	2300      	movs	r3, #0
 80069b0:	4d06      	ldr	r5, [pc, #24]	@ (80069cc <_fstat_r+0x20>)
 80069b2:	4604      	mov	r4, r0
 80069b4:	4608      	mov	r0, r1
 80069b6:	4611      	mov	r1, r2
 80069b8:	602b      	str	r3, [r5, #0]
 80069ba:	f7fb fa6f 	bl	8001e9c <_fstat>
 80069be:	1c43      	adds	r3, r0, #1
 80069c0:	d102      	bne.n	80069c8 <_fstat_r+0x1c>
 80069c2:	682b      	ldr	r3, [r5, #0]
 80069c4:	b103      	cbz	r3, 80069c8 <_fstat_r+0x1c>
 80069c6:	6023      	str	r3, [r4, #0]
 80069c8:	bd38      	pop	{r3, r4, r5, pc}
 80069ca:	bf00      	nop
 80069cc:	200003d8 	.word	0x200003d8

080069d0 <_isatty_r>:
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	2300      	movs	r3, #0
 80069d4:	4d05      	ldr	r5, [pc, #20]	@ (80069ec <_isatty_r+0x1c>)
 80069d6:	4604      	mov	r4, r0
 80069d8:	4608      	mov	r0, r1
 80069da:	602b      	str	r3, [r5, #0]
 80069dc:	f7fb fa6d 	bl	8001eba <_isatty>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	d102      	bne.n	80069ea <_isatty_r+0x1a>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	b103      	cbz	r3, 80069ea <_isatty_r+0x1a>
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	bd38      	pop	{r3, r4, r5, pc}
 80069ec:	200003d8 	.word	0x200003d8

080069f0 <sqrt>:
 80069f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f2:	4606      	mov	r6, r0
 80069f4:	460f      	mov	r7, r1
 80069f6:	f000 f81f 	bl	8006a38 <__ieee754_sqrt>
 80069fa:	4632      	mov	r2, r6
 80069fc:	4604      	mov	r4, r0
 80069fe:	460d      	mov	r5, r1
 8006a00:	463b      	mov	r3, r7
 8006a02:	4630      	mov	r0, r6
 8006a04:	4639      	mov	r1, r7
 8006a06:	f7fa f801 	bl	8000a0c <__aeabi_dcmpun>
 8006a0a:	b990      	cbnz	r0, 8006a32 <sqrt+0x42>
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2300      	movs	r3, #0
 8006a10:	4630      	mov	r0, r6
 8006a12:	4639      	mov	r1, r7
 8006a14:	f7f9 ffd2 	bl	80009bc <__aeabi_dcmplt>
 8006a18:	b158      	cbz	r0, 8006a32 <sqrt+0x42>
 8006a1a:	f7fd ff63 	bl	80048e4 <__errno>
 8006a1e:	2321      	movs	r3, #33	@ 0x21
 8006a20:	2200      	movs	r2, #0
 8006a22:	6003      	str	r3, [r0, #0]
 8006a24:	2300      	movs	r3, #0
 8006a26:	4610      	mov	r0, r2
 8006a28:	4619      	mov	r1, r3
 8006a2a:	f7f9 fe7f 	bl	800072c <__aeabi_ddiv>
 8006a2e:	4604      	mov	r4, r0
 8006a30:	460d      	mov	r5, r1
 8006a32:	4620      	mov	r0, r4
 8006a34:	4629      	mov	r1, r5
 8006a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a38 <__ieee754_sqrt>:
 8006a38:	4a65      	ldr	r2, [pc, #404]	@ (8006bd0 <__ieee754_sqrt+0x198>)
 8006a3a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3e:	438a      	bics	r2, r1
 8006a40:	4606      	mov	r6, r0
 8006a42:	460f      	mov	r7, r1
 8006a44:	460b      	mov	r3, r1
 8006a46:	4604      	mov	r4, r0
 8006a48:	d10e      	bne.n	8006a68 <__ieee754_sqrt+0x30>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	f7f9 fd44 	bl	80004d8 <__aeabi_dmul>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	4630      	mov	r0, r6
 8006a56:	4639      	mov	r1, r7
 8006a58:	f7f9 fb88 	bl	800016c <__adddf3>
 8006a5c:	4606      	mov	r6, r0
 8006a5e:	460f      	mov	r7, r1
 8006a60:	4630      	mov	r0, r6
 8006a62:	4639      	mov	r1, r7
 8006a64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	dc0c      	bgt.n	8006a86 <__ieee754_sqrt+0x4e>
 8006a6c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8006a70:	4302      	orrs	r2, r0
 8006a72:	d0f5      	beq.n	8006a60 <__ieee754_sqrt+0x28>
 8006a74:	b189      	cbz	r1, 8006a9a <__ieee754_sqrt+0x62>
 8006a76:	4602      	mov	r2, r0
 8006a78:	f7f9 fb76 	bl	8000168 <__aeabi_dsub>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	f7f9 fe54 	bl	800072c <__aeabi_ddiv>
 8006a84:	e7ea      	b.n	8006a5c <__ieee754_sqrt+0x24>
 8006a86:	150a      	asrs	r2, r1, #20
 8006a88:	d115      	bne.n	8006ab6 <__ieee754_sqrt+0x7e>
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	e009      	b.n	8006aa2 <__ieee754_sqrt+0x6a>
 8006a8e:	0ae3      	lsrs	r3, r4, #11
 8006a90:	3a15      	subs	r2, #21
 8006a92:	0564      	lsls	r4, r4, #21
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d0fa      	beq.n	8006a8e <__ieee754_sqrt+0x56>
 8006a98:	e7f7      	b.n	8006a8a <__ieee754_sqrt+0x52>
 8006a9a:	460a      	mov	r2, r1
 8006a9c:	e7fa      	b.n	8006a94 <__ieee754_sqrt+0x5c>
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	3101      	adds	r1, #1
 8006aa2:	02d8      	lsls	r0, r3, #11
 8006aa4:	d5fb      	bpl.n	8006a9e <__ieee754_sqrt+0x66>
 8006aa6:	1e48      	subs	r0, r1, #1
 8006aa8:	1a12      	subs	r2, r2, r0
 8006aaa:	f1c1 0020 	rsb	r0, r1, #32
 8006aae:	fa24 f000 	lsr.w	r0, r4, r0
 8006ab2:	4303      	orrs	r3, r0
 8006ab4:	408c      	lsls	r4, r1
 8006ab6:	2700      	movs	r7, #0
 8006ab8:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8006abc:	2116      	movs	r1, #22
 8006abe:	07d2      	lsls	r2, r2, #31
 8006ac0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006ac4:	463a      	mov	r2, r7
 8006ac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ace:	bf5c      	itt	pl
 8006ad0:	005b      	lslpl	r3, r3, #1
 8006ad2:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8006ad6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006ada:	bf58      	it	pl
 8006adc:	0064      	lslpl	r4, r4, #1
 8006ade:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006ae2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006ae6:	0064      	lsls	r4, r4, #1
 8006ae8:	1815      	adds	r5, r2, r0
 8006aea:	429d      	cmp	r5, r3
 8006aec:	bfde      	ittt	le
 8006aee:	182a      	addle	r2, r5, r0
 8006af0:	1b5b      	suble	r3, r3, r5
 8006af2:	183f      	addle	r7, r7, r0
 8006af4:	0fe5      	lsrs	r5, r4, #31
 8006af6:	3901      	subs	r1, #1
 8006af8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006afc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006b00:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006b04:	d1f0      	bne.n	8006ae8 <__ieee754_sqrt+0xb0>
 8006b06:	460d      	mov	r5, r1
 8006b08:	2620      	movs	r6, #32
 8006b0a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	eb00 0c01 	add.w	ip, r0, r1
 8006b14:	dc02      	bgt.n	8006b1c <__ieee754_sqrt+0xe4>
 8006b16:	d113      	bne.n	8006b40 <__ieee754_sqrt+0x108>
 8006b18:	45a4      	cmp	ip, r4
 8006b1a:	d811      	bhi.n	8006b40 <__ieee754_sqrt+0x108>
 8006b1c:	f1bc 0f00 	cmp.w	ip, #0
 8006b20:	eb0c 0100 	add.w	r1, ip, r0
 8006b24:	da3e      	bge.n	8006ba4 <__ieee754_sqrt+0x16c>
 8006b26:	2900      	cmp	r1, #0
 8006b28:	db3c      	blt.n	8006ba4 <__ieee754_sqrt+0x16c>
 8006b2a:	f102 0e01 	add.w	lr, r2, #1
 8006b2e:	1a9b      	subs	r3, r3, r2
 8006b30:	4672      	mov	r2, lr
 8006b32:	45a4      	cmp	ip, r4
 8006b34:	bf88      	it	hi
 8006b36:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006b3a:	eba4 040c 	sub.w	r4, r4, ip
 8006b3e:	4405      	add	r5, r0
 8006b40:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8006b44:	3e01      	subs	r6, #1
 8006b46:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8006b4a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006b4e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006b52:	d1dc      	bne.n	8006b0e <__ieee754_sqrt+0xd6>
 8006b54:	431c      	orrs	r4, r3
 8006b56:	d01a      	beq.n	8006b8e <__ieee754_sqrt+0x156>
 8006b58:	4c1e      	ldr	r4, [pc, #120]	@ (8006bd4 <__ieee754_sqrt+0x19c>)
 8006b5a:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8006bd8 <__ieee754_sqrt+0x1a0>
 8006b5e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006b62:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006b66:	f7f9 faff 	bl	8000168 <__aeabi_dsub>
 8006b6a:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	4650      	mov	r0, sl
 8006b74:	4659      	mov	r1, fp
 8006b76:	f7f9 ff2b 	bl	80009d0 <__aeabi_dcmple>
 8006b7a:	b140      	cbz	r0, 8006b8e <__ieee754_sqrt+0x156>
 8006b7c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006b80:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006b84:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006b88:	d10e      	bne.n	8006ba8 <__ieee754_sqrt+0x170>
 8006b8a:	4635      	mov	r5, r6
 8006b8c:	3701      	adds	r7, #1
 8006b8e:	107b      	asrs	r3, r7, #1
 8006b90:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b94:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8006b98:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8006b9c:	086b      	lsrs	r3, r5, #1
 8006b9e:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8006ba2:	e75b      	b.n	8006a5c <__ieee754_sqrt+0x24>
 8006ba4:	4696      	mov	lr, r2
 8006ba6:	e7c2      	b.n	8006b2e <__ieee754_sqrt+0xf6>
 8006ba8:	f7f9 fae0 	bl	800016c <__adddf3>
 8006bac:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4650      	mov	r0, sl
 8006bb6:	4659      	mov	r1, fp
 8006bb8:	f7f9 ff00 	bl	80009bc <__aeabi_dcmplt>
 8006bbc:	b120      	cbz	r0, 8006bc8 <__ieee754_sqrt+0x190>
 8006bbe:	1cab      	adds	r3, r5, #2
 8006bc0:	bf08      	it	eq
 8006bc2:	3701      	addeq	r7, #1
 8006bc4:	3502      	adds	r5, #2
 8006bc6:	e7e2      	b.n	8006b8e <__ieee754_sqrt+0x156>
 8006bc8:	1c6b      	adds	r3, r5, #1
 8006bca:	f023 0501 	bic.w	r5, r3, #1
 8006bce:	e7de      	b.n	8006b8e <__ieee754_sqrt+0x156>
 8006bd0:	7ff00000 	.word	0x7ff00000
 8006bd4:	080070c8 	.word	0x080070c8
 8006bd8:	080070c0 	.word	0x080070c0

08006bdc <_init>:
 8006bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bde:	bf00      	nop
 8006be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be2:	bc08      	pop	{r3}
 8006be4:	469e      	mov	lr, r3
 8006be6:	4770      	bx	lr

08006be8 <_fini>:
 8006be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bea:	bf00      	nop
 8006bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bee:	bc08      	pop	{r3}
 8006bf0:	469e      	mov	lr, r3
 8006bf2:	4770      	bx	lr
