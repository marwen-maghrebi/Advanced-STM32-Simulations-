
STM32_HC-SR04_Ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004208  08004208  00014208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800427c  0800427c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800427c  0800427c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800427c  0800427c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800427c  0800427c  0001427c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004280  08004280  00014280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000005c  080042e0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080042e0  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf12  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c34  00000000  00000000  0002bfda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c10  00000000  00000000  0002dc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000977  00000000  00000000  0002e820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000175e7  00000000  00000000  0002f197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d918  00000000  00000000  0004677e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088051  00000000  00000000  00054096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003888  00000000  00000000  000dc0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000df970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	080041f0 	.word	0x080041f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	080041f0 	.word	0x080041f0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr
 800076c:	0000      	movs	r0, r0
	...

08000770 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	7f1b      	ldrb	r3, [r3, #28]
 800077c:	2b02      	cmp	r3, #2
 800077e:	d178      	bne.n	8000872 <HAL_TIM_IC_CaptureCallback+0x102>
    {
        if (Is_First_Captured==0) // if the first value is not captured
 8000780:	4b41      	ldr	r3, [pc, #260]	; (8000888 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d11a      	bne.n	80007be <HAL_TIM_IC_CaptureCallback+0x4e>
        {
            IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8000788:	2104      	movs	r1, #4
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f002 f804 	bl	8002798 <HAL_TIM_ReadCapturedValue>
 8000790:	4603      	mov	r3, r0
 8000792:	4a3e      	ldr	r2, [pc, #248]	; (800088c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000794:	6013      	str	r3, [r2, #0]
            Is_First_Captured = 1;  // set the first captured as true
 8000796:	4b3c      	ldr	r3, [pc, #240]	; (8000888 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000798:	2201      	movs	r2, #1
 800079a:	701a      	strb	r2, [r3, #0]
            // Now change the polarity to falling edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	6a1a      	ldr	r2, [r3, #32]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80007aa:	621a      	str	r2, [r3, #32]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	6a1a      	ldr	r2, [r3, #32]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f042 0220 	orr.w	r2, r2, #32
 80007ba:	621a      	str	r2, [r3, #32]
            // set polarity to rising edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
            __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
        }
    }
}
 80007bc:	e059      	b.n	8000872 <HAL_TIM_IC_CaptureCallback+0x102>
        else if (Is_First_Captured==1)   // if the first is already captured
 80007be:	4b32      	ldr	r3, [pc, #200]	; (8000888 <HAL_TIM_IC_CaptureCallback+0x118>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d155      	bne.n	8000872 <HAL_TIM_IC_CaptureCallback+0x102>
            IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 80007c6:	2104      	movs	r1, #4
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f001 ffe5 	bl	8002798 <HAL_TIM_ReadCapturedValue>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4a2f      	ldr	r2, [pc, #188]	; (8000890 <HAL_TIM_IC_CaptureCallback+0x120>)
 80007d2:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
            if (IC_Val2 > IC_Val1)
 80007dc:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <HAL_TIM_IC_CaptureCallback+0x120>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d907      	bls.n	80007f8 <HAL_TIM_IC_CaptureCallback+0x88>
                Difference = IC_Val2-IC_Val1;
 80007e8:	4b29      	ldr	r3, [pc, #164]	; (8000890 <HAL_TIM_IC_CaptureCallback+0x120>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	4a28      	ldr	r2, [pc, #160]	; (8000894 <HAL_TIM_IC_CaptureCallback+0x124>)
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	e00f      	b.n	8000818 <HAL_TIM_IC_CaptureCallback+0xa8>
            else if (IC_Val1 > IC_Val2)
 80007f8:	4b24      	ldr	r3, [pc, #144]	; (800088c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <HAL_TIM_IC_CaptureCallback+0x120>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	429a      	cmp	r2, r3
 8000802:	d909      	bls.n	8000818 <HAL_TIM_IC_CaptureCallback+0xa8>
                Difference = (0xffff - IC_Val1) + IC_Val2;
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000812:	33ff      	adds	r3, #255	; 0xff
 8000814:	4a1f      	ldr	r2, [pc, #124]	; (8000894 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000816:	6013      	str	r3, [r2, #0]
            Distance = Difference * (0.034/2);
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <HAL_TIM_IC_CaptureCallback+0x124>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff0b 	bl	8000638 <__aeabi_ui2d>
 8000822:	a317      	add	r3, pc, #92	; (adr r3, 8000880 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000828:	f7ff fc9a 	bl	8000160 <__aeabi_dmul>
 800082c:	4602      	mov	r2, r0
 800082e:	460b      	mov	r3, r1
 8000830:	4610      	mov	r0, r2
 8000832:	4619      	mov	r1, r3
 8000834:	f7ff ff7a 	bl	800072c <__aeabi_d2uiz>
 8000838:	4603      	mov	r3, r0
 800083a:	b2da      	uxtb	r2, r3
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <HAL_TIM_IC_CaptureCallback+0x128>)
 800083e:	701a      	strb	r2, [r3, #0]
            Is_First_Captured = 0; // set it back to false
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	6a1a      	ldr	r2, [r3, #32]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000854:	621a      	str	r2, [r3, #32]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	6a12      	ldr	r2, [r2, #32]
 8000860:	621a      	str	r2, [r3, #32]
            __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	68da      	ldr	r2, [r3, #12]
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f022 0204 	bic.w	r2, r2, #4
 8000870:	60da      	str	r2, [r3, #12]
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	f3af 8000 	nop.w
 8000880:	b020c49c 	.word	0xb020c49c
 8000884:	3f916872 	.word	0x3f916872
 8000888:	20000084 	.word	0x20000084
 800088c:	20000078 	.word	0x20000078
 8000890:	2000007c 	.word	0x2000007c
 8000894:	20000080 	.word	0x20000080
 8000898:	20000085 	.word	0x20000085
 800089c:	20000088 	.word	0x20000088

080008a0 <HCSR04_Read>:

void HCSR04_Read (void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80008a4:	2201      	movs	r2, #1
 80008a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008aa:	480b      	ldr	r0, [pc, #44]	; (80008d8 <HCSR04_Read+0x38>)
 80008ac:	f001 f852 	bl	8001954 <HAL_GPIO_WritePin>
    HAL_Delay(10);  // wait for 10 us
 80008b0:	200a      	movs	r0, #10
 80008b2:	f000 fb8d 	bl	8000fd0 <HAL_Delay>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <HCSR04_Read+0x38>)
 80008be:	f001 f849 	bl	8001954 <HAL_GPIO_WritePin>

    __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HCSR04_Read+0x3c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	68da      	ldr	r2, [r3, #12]
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <HCSR04_Read+0x3c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f042 0204 	orr.w	r2, r2, #4
 80008d0:	60da      	str	r2, [r3, #12]
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40010800 	.word	0x40010800
 80008dc:	20000088 	.word	0x20000088

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e6:	f000 fb11 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ea:	f000 f82f 	bl	800094c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ee:	f000 f90d 	bl	8000b0c <MX_GPIO_Init>
  MX_DMA_Init();
 80008f2:	f000 f8ed 	bl	8000ad0 <MX_DMA_Init>
  MX_TIM1_Init();
 80008f6:	f000 f86b 	bl	80009d0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80008fa:	f000 f8bf 	bl	8000a7c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 80008fe:	2104      	movs	r1, #4
 8000900:	480e      	ldr	r0, [pc, #56]	; (800093c <main+0x5c>)
 8000902:	f001 fc9f 	bl	8002244 <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HCSR04_Read();
 8000906:	f7ff ffcb 	bl	80008a0 <HCSR04_Read>
    sprintf(MSG,"Distance : %d cm\n\r",Distance);
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <main+0x60>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	461a      	mov	r2, r3
 8000910:	463b      	mov	r3, r7
 8000912:	490c      	ldr	r1, [pc, #48]	; (8000944 <main+0x64>)
 8000914:	4618      	mov	r0, r3
 8000916:	f002 ffb9 	bl	800388c <siprintf>
    HAL_UART_Transmit(&huart1,(uint8_t*)MSG, strlen(MSG),100);
 800091a:	463b      	mov	r3, r7
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fc17 	bl	8000150 <strlen>
 8000922:	4603      	mov	r3, r0
 8000924:	b29a      	uxth	r2, r3
 8000926:	4639      	mov	r1, r7
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	4807      	ldr	r0, [pc, #28]	; (8000948 <main+0x68>)
 800092c:	f002 f9da 	bl	8002ce4 <HAL_UART_Transmit>
    HAL_Delay(500);
 8000930:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000934:	f000 fb4c 	bl	8000fd0 <HAL_Delay>
    HCSR04_Read();
 8000938:	e7e5      	b.n	8000906 <main+0x26>
 800093a:	bf00      	nop
 800093c:	20000088 	.word	0x20000088
 8000940:	20000085 	.word	0x20000085
 8000944:	08004208 	.word	0x08004208
 8000948:	200000d0 	.word	0x200000d0

0800094c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b090      	sub	sp, #64	; 0x40
 8000950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	f107 0318 	add.w	r3, r7, #24
 8000956:	2228      	movs	r2, #40	; 0x28
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f002 ffb6 	bl	80038cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800096e:	2302      	movs	r3, #2
 8000970:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000972:	2301      	movs	r3, #1
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000976:	2310      	movs	r3, #16
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097a:	2302      	movs	r3, #2
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800097e:	2300      	movs	r3, #0
 8000980:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000982:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000986:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	f107 0318 	add.w	r3, r7, #24
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fff9 	bl	8001984 <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000998:	f000 f904 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	230f      	movs	r3, #15
 800099e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a0:	2302      	movs	r3, #2
 80009a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 fa66 	bl	8001e88 <HAL_RCC_ClockConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80009c2:	f000 f8ef 	bl	8000ba4 <Error_Handler>
  }
}
 80009c6:	bf00      	nop
 80009c8:	3740      	adds	r7, #64	; 0x40
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009e0:	463b      	mov	r3, r7
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ec:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <MX_TIM1_Init+0xa4>)
 80009ee:	4a22      	ldr	r2, [pc, #136]	; (8000a78 <MX_TIM1_Init+0xa8>)
 80009f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80009f2:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <MX_TIM1_Init+0xa4>)
 80009f4:	220f      	movs	r2, #15
 80009f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f8:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <MX_TIM1_Init+0xa4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <MX_TIM1_Init+0xa4>)
 8000a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <MX_TIM1_Init+0xa4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_TIM1_Init+0xa4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_TIM1_Init+0xa4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000a18:	4816      	ldr	r0, [pc, #88]	; (8000a74 <MX_TIM1_Init+0xa4>)
 8000a1a:	f001 fbc3 	bl	80021a4 <HAL_TIM_IC_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a24:	f000 f8be 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	4619      	mov	r1, r3
 8000a36:	480f      	ldr	r0, [pc, #60]	; (8000a74 <MX_TIM1_Init+0xa4>)
 8000a38:	f002 f89a 	bl	8002b70 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a42:	f000 f8af 	bl	8000ba4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000a56:	463b      	mov	r3, r7
 8000a58:	2204      	movs	r2, #4
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_TIM1_Init+0xa4>)
 8000a5e:	f001 fdff 	bl	8002660 <HAL_TIM_IC_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000a68:	f000 f89c 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000088 	.word	0x20000088
 8000a78:	40012c00 	.word	0x40012c00

08000a7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <MX_USART1_UART_Init+0x50>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	f002 f8c6 	bl	8002c44 <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000abe:	f000 f871 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200000d0 	.word	0x200000d0
 8000acc:	40013800 	.word	0x40013800

08000ad0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_DMA_Init+0x38>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <MX_DMA_Init+0x38>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6153      	str	r3, [r2, #20]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_DMA_Init+0x38>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	200e      	movs	r0, #14
 8000af4:	f000 fb67 	bl	80011c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000af8:	200e      	movs	r0, #14
 8000afa:	f000 fb80 	bl	80011fe <HAL_NVIC_EnableIRQ>

}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <MX_GPIO_Init+0x90>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <MX_GPIO_Init+0x90>)
 8000b26:	f043 0320 	orr.w	r3, r3, #32
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <MX_GPIO_Init+0x90>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0320 	and.w	r3, r3, #32
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_GPIO_Init+0x90>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <MX_GPIO_Init+0x90>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_GPIO_Init+0x90>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_GPIO_Init+0x90>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a11      	ldr	r2, [pc, #68]	; (8000b9c <MX_GPIO_Init+0x90>)
 8000b56:	f043 0308 	orr.w	r3, r3, #8
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_GPIO_Init+0x90>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0308 	and.w	r3, r3, #8
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b6e:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <MX_GPIO_Init+0x94>)
 8000b70:	f000 fef0 	bl	8001954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_GPIO_Init+0x94>)
 8000b8e:	f000 fd65 	bl	800165c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b92:	bf00      	nop
 8000b94:	3720      	adds	r7, #32
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010800 	.word	0x40010800

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	e7fe      	b.n	8000bac <Error_Handler+0x8>
	...

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6193      	str	r3, [r2, #24]
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	61d3      	str	r3, [r2, #28]
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_MspInit+0x60>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_MspInit+0x60>)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010000 	.word	0x40010000

08000c14 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a1a      	ldr	r2, [pc, #104]	; (8000c98 <HAL_TIM_IC_MspInit+0x84>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d12c      	bne.n	8000c8e <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_TIM_IC_MspInit+0x88>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a18      	ldr	r2, [pc, #96]	; (8000c9c <HAL_TIM_IC_MspInit+0x88>)
 8000c3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_TIM_IC_MspInit+0x88>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <HAL_TIM_IC_MspInit+0x88>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <HAL_TIM_IC_MspInit+0x88>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_TIM_IC_MspInit+0x88>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	4619      	mov	r1, r3
 8000c78:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <HAL_TIM_IC_MspInit+0x8c>)
 8000c7a:	f000 fcef 	bl	800165c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	201b      	movs	r0, #27
 8000c84:	f000 fa9f 	bl	80011c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000c88:	201b      	movs	r0, #27
 8000c8a:	f000 fab8 	bl	80011fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c8e:	bf00      	nop
 8000c90:	3720      	adds	r7, #32
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40012c00 	.word	0x40012c00
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010800 	.word	0x40010800

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a39      	ldr	r2, [pc, #228]	; (8000da4 <HAL_UART_MspInit+0x100>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d16b      	bne.n	8000d9c <HAL_UART_MspInit+0xf8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc4:	4b38      	ldr	r3, [pc, #224]	; (8000da8 <HAL_UART_MspInit+0x104>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a37      	ldr	r2, [pc, #220]	; (8000da8 <HAL_UART_MspInit+0x104>)
 8000cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b35      	ldr	r3, [pc, #212]	; (8000da8 <HAL_UART_MspInit+0x104>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b32      	ldr	r3, [pc, #200]	; (8000da8 <HAL_UART_MspInit+0x104>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a31      	ldr	r2, [pc, #196]	; (8000da8 <HAL_UART_MspInit+0x104>)
 8000ce2:	f043 0308 	orr.w	r3, r3, #8
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <HAL_UART_MspInit+0x104>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0308 	and.w	r3, r3, #8
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cf4:	2340      	movs	r3, #64	; 0x40
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	4829      	ldr	r0, [pc, #164]	; (8000dac <HAL_UART_MspInit+0x108>)
 8000d08:	f000 fca8 	bl	800165c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4823      	ldr	r0, [pc, #140]	; (8000dac <HAL_UART_MspInit+0x108>)
 8000d20:	f000 fc9c 	bl	800165c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <HAL_UART_MspInit+0x10c>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
 8000d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
 8000d3a:	4a1d      	ldr	r2, [pc, #116]	; (8000db0 <HAL_UART_MspInit+0x10c>)
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <HAL_UART_MspInit+0x110>)
 8000d42:	4a1d      	ldr	r2, [pc, #116]	; (8000db8 <HAL_UART_MspInit+0x114>)
 8000d44:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d46:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <HAL_UART_MspInit+0x110>)
 8000d48:	2210      	movs	r2, #16
 8000d4a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <HAL_UART_MspInit+0x110>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_UART_MspInit+0x110>)
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <HAL_UART_MspInit+0x110>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_UART_MspInit+0x110>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <HAL_UART_MspInit+0x110>)
 8000d66:	2220      	movs	r2, #32
 8000d68:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_UART_MspInit+0x110>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d70:	4810      	ldr	r0, [pc, #64]	; (8000db4 <HAL_UART_MspInit+0x110>)
 8000d72:	f000 fa5f 	bl	8001234 <HAL_DMA_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8000d7c:	f7ff ff12 	bl	8000ba4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <HAL_UART_MspInit+0x110>)
 8000d84:	639a      	str	r2, [r3, #56]	; 0x38
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <HAL_UART_MspInit+0x110>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2025      	movs	r0, #37	; 0x25
 8000d92:	f000 fa18 	bl	80011c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d96:	2025      	movs	r0, #37	; 0x25
 8000d98:	f000 fa31 	bl	80011fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	3728      	adds	r7, #40	; 0x28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40013800 	.word	0x40013800
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010c00 	.word	0x40010c00
 8000db0:	40010000 	.word	0x40010000
 8000db4:	20000118 	.word	0x20000118
 8000db8:	40020044 	.word	0x40020044

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <NMI_Handler+0x4>

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <MemManage_Handler+0x4>

08000dce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr

08000de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr

08000df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr

08000dfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e02:	f000 f8c9 	bl	8000f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <DMA1_Channel4_IRQHandler+0x10>)
 8000e12:	f000 fb1d 	bl	8001450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000118 	.word	0x20000118

08000e20 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <TIM1_CC_IRQHandler+0x10>)
 8000e26:	f001 fb13 	bl	8002450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000088 	.word	0x20000088

08000e34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <USART1_IRQHandler+0x10>)
 8000e3a:	f001 ffd7 	bl	8002dec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200000d0 	.word	0x200000d0

08000e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e50:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <_sbrk+0x5c>)
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <_sbrk+0x60>)
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <_sbrk+0x64>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <_sbrk+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d207      	bcs.n	8000e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e78:	f002 fd30 	bl	80038dc <__errno>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	220c      	movs	r2, #12
 8000e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	e009      	b.n	8000e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <_sbrk+0x64>)
 8000e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20002800 	.word	0x20002800
 8000ea8:	00000400 	.word	0x00000400
 8000eac:	2000015c 	.word	0x2000015c
 8000eb0:	200002b0 	.word	0x200002b0

08000eb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec0:	f7ff fff8 	bl	8000eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec4:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ec6:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ec8:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000edc:	4c09      	ldr	r4, [pc, #36]	; (8000f04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eea:	f002 fcfd 	bl	80038e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eee:	f7ff fcf7 	bl	80008e0 <main>
  bx lr
 8000ef2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000efc:	08004284 	.word	0x08004284
  ldr r2, =_sbss
 8000f00:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f04:	200002ac 	.word	0x200002ac

08000f08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC1_2_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_Init+0x28>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_Init+0x28>)
 8000f16:	f043 0310 	orr.w	r3, r3, #16
 8000f1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 f947 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f22:	200f      	movs	r0, #15
 8000f24:	f000 f808 	bl	8000f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f28:	f7ff fe42 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40022000 	.word	0x40022000

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x54>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x58>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f95f 	bl	800121a <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00e      	b.n	8000f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b0f      	cmp	r3, #15
 8000f6a:	d80a      	bhi.n	8000f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f000 f927 	bl	80011c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <HAL_InitTick+0x5c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000008 	.word	0x20000008
 8000f94:	20000004 	.word	0x20000004

08000f98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_IncTick+0x1c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_IncTick+0x20>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a03      	ldr	r2, [pc, #12]	; (8000fb8 <HAL_IncTick+0x20>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000160 	.word	0x20000160

08000fbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b02      	ldr	r3, [pc, #8]	; (8000fcc <HAL_GetTick+0x10>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	20000160 	.word	0x20000160

08000fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff fff0 	bl	8000fbc <HAL_GetTick>
 8000fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe8:	d005      	beq.n	8000ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_Delay+0x44>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff6:	bf00      	nop
 8000ff8:	f7ff ffe0 	bl	8000fbc <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	d8f7      	bhi.n	8000ff8 <HAL_Delay+0x28>
  {
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4906      	ldr	r1, [pc, #24]	; (80010b0 <__NVIC_EnableIRQ+0x34>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	; (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	; (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f7ff ff90 	bl	80010b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff2d 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d8:	f7ff ff42 	bl	8001060 <__NVIC_GetPriorityGrouping>
 80011dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff ff90 	bl	8001108 <NVIC_EncodePriority>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff5f 	bl	80010b4 <__NVIC_SetPriority>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff35 	bl	800107c <__NVIC_EnableIRQ>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffa2 	bl	800116c <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e043      	b.n	80012d2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	4b22      	ldr	r3, [pc, #136]	; (80012dc <HAL_DMA_Init+0xa8>)
 8001252:	4413      	add	r3, r2
 8001254:	4a22      	ldr	r2, [pc, #136]	; (80012e0 <HAL_DMA_Init+0xac>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	009a      	lsls	r2, r3, #2
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a1f      	ldr	r2, [pc, #124]	; (80012e4 <HAL_DMA_Init+0xb0>)
 8001266:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2202      	movs	r2, #2
 800126c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800127e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001282:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800128c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001298:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	bffdfff8 	.word	0xbffdfff8
 80012e0:	cccccccd 	.word	0xcccccccd
 80012e4:	40020000 	.word	0x40020000

080012e8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d008      	beq.n	8001312 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2204      	movs	r2, #4
 8001304:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e020      	b.n	8001354 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 020e 	bic.w	r2, r2, #14
 8001320:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133a:	2101      	movs	r1, #1
 800133c:	fa01 f202 	lsl.w	r2, r1, r2
 8001340:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001352:	7bfb      	ldrb	r3, [r7, #15]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
	...

08001360 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d005      	beq.n	8001384 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2204      	movs	r2, #4
 800137c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	73fb      	strb	r3, [r7, #15]
 8001382:	e051      	b.n	8001428 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 020e 	bic.w	r2, r2, #14
 8001392:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a22      	ldr	r2, [pc, #136]	; (8001434 <HAL_DMA_Abort_IT+0xd4>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d029      	beq.n	8001402 <HAL_DMA_Abort_IT+0xa2>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a21      	ldr	r2, [pc, #132]	; (8001438 <HAL_DMA_Abort_IT+0xd8>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d022      	beq.n	80013fe <HAL_DMA_Abort_IT+0x9e>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a1f      	ldr	r2, [pc, #124]	; (800143c <HAL_DMA_Abort_IT+0xdc>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d01a      	beq.n	80013f8 <HAL_DMA_Abort_IT+0x98>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a1e      	ldr	r2, [pc, #120]	; (8001440 <HAL_DMA_Abort_IT+0xe0>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d012      	beq.n	80013f2 <HAL_DMA_Abort_IT+0x92>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <HAL_DMA_Abort_IT+0xe4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00a      	beq.n	80013ec <HAL_DMA_Abort_IT+0x8c>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <HAL_DMA_Abort_IT+0xe8>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d102      	bne.n	80013e6 <HAL_DMA_Abort_IT+0x86>
 80013e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013e4:	e00e      	b.n	8001404 <HAL_DMA_Abort_IT+0xa4>
 80013e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013ea:	e00b      	b.n	8001404 <HAL_DMA_Abort_IT+0xa4>
 80013ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f0:	e008      	b.n	8001404 <HAL_DMA_Abort_IT+0xa4>
 80013f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f6:	e005      	b.n	8001404 <HAL_DMA_Abort_IT+0xa4>
 80013f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fc:	e002      	b.n	8001404 <HAL_DMA_Abort_IT+0xa4>
 80013fe:	2310      	movs	r3, #16
 8001400:	e000      	b.n	8001404 <HAL_DMA_Abort_IT+0xa4>
 8001402:	2301      	movs	r3, #1
 8001404:	4a11      	ldr	r2, [pc, #68]	; (800144c <HAL_DMA_Abort_IT+0xec>)
 8001406:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    } 
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40020008 	.word	0x40020008
 8001438:	4002001c 	.word	0x4002001c
 800143c:	40020030 	.word	0x40020030
 8001440:	40020044 	.word	0x40020044
 8001444:	40020058 	.word	0x40020058
 8001448:	4002006c 	.word	0x4002006c
 800144c:	40020000 	.word	0x40020000

08001450 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	2204      	movs	r2, #4
 800146e:	409a      	lsls	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d04f      	beq.n	8001518 <HAL_DMA_IRQHandler+0xc8>
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	2b00      	cmp	r3, #0
 8001480:	d04a      	beq.n	8001518 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0320 	and.w	r3, r3, #32
 800148c:	2b00      	cmp	r3, #0
 800148e:	d107      	bne.n	80014a0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0204 	bic.w	r2, r2, #4
 800149e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a66      	ldr	r2, [pc, #408]	; (8001640 <HAL_DMA_IRQHandler+0x1f0>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d029      	beq.n	80014fe <HAL_DMA_IRQHandler+0xae>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a65      	ldr	r2, [pc, #404]	; (8001644 <HAL_DMA_IRQHandler+0x1f4>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d022      	beq.n	80014fa <HAL_DMA_IRQHandler+0xaa>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a63      	ldr	r2, [pc, #396]	; (8001648 <HAL_DMA_IRQHandler+0x1f8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d01a      	beq.n	80014f4 <HAL_DMA_IRQHandler+0xa4>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a62      	ldr	r2, [pc, #392]	; (800164c <HAL_DMA_IRQHandler+0x1fc>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d012      	beq.n	80014ee <HAL_DMA_IRQHandler+0x9e>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a60      	ldr	r2, [pc, #384]	; (8001650 <HAL_DMA_IRQHandler+0x200>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d00a      	beq.n	80014e8 <HAL_DMA_IRQHandler+0x98>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a5f      	ldr	r2, [pc, #380]	; (8001654 <HAL_DMA_IRQHandler+0x204>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d102      	bne.n	80014e2 <HAL_DMA_IRQHandler+0x92>
 80014dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014e0:	e00e      	b.n	8001500 <HAL_DMA_IRQHandler+0xb0>
 80014e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014e6:	e00b      	b.n	8001500 <HAL_DMA_IRQHandler+0xb0>
 80014e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014ec:	e008      	b.n	8001500 <HAL_DMA_IRQHandler+0xb0>
 80014ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014f2:	e005      	b.n	8001500 <HAL_DMA_IRQHandler+0xb0>
 80014f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f8:	e002      	b.n	8001500 <HAL_DMA_IRQHandler+0xb0>
 80014fa:	2340      	movs	r3, #64	; 0x40
 80014fc:	e000      	b.n	8001500 <HAL_DMA_IRQHandler+0xb0>
 80014fe:	2304      	movs	r3, #4
 8001500:	4a55      	ldr	r2, [pc, #340]	; (8001658 <HAL_DMA_IRQHandler+0x208>)
 8001502:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 8094 	beq.w	8001636 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001516:	e08e      	b.n	8001636 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	2202      	movs	r2, #2
 800151e:	409a      	lsls	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4013      	ands	r3, r2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d056      	beq.n	80015d6 <HAL_DMA_IRQHandler+0x186>
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d051      	beq.n	80015d6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0320 	and.w	r3, r3, #32
 800153c:	2b00      	cmp	r3, #0
 800153e:	d10b      	bne.n	8001558 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 020a 	bic.w	r2, r2, #10
 800154e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a38      	ldr	r2, [pc, #224]	; (8001640 <HAL_DMA_IRQHandler+0x1f0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d029      	beq.n	80015b6 <HAL_DMA_IRQHandler+0x166>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a37      	ldr	r2, [pc, #220]	; (8001644 <HAL_DMA_IRQHandler+0x1f4>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d022      	beq.n	80015b2 <HAL_DMA_IRQHandler+0x162>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a35      	ldr	r2, [pc, #212]	; (8001648 <HAL_DMA_IRQHandler+0x1f8>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01a      	beq.n	80015ac <HAL_DMA_IRQHandler+0x15c>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a34      	ldr	r2, [pc, #208]	; (800164c <HAL_DMA_IRQHandler+0x1fc>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d012      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x156>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a32      	ldr	r2, [pc, #200]	; (8001650 <HAL_DMA_IRQHandler+0x200>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d00a      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x150>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a31      	ldr	r2, [pc, #196]	; (8001654 <HAL_DMA_IRQHandler+0x204>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d102      	bne.n	800159a <HAL_DMA_IRQHandler+0x14a>
 8001594:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001598:	e00e      	b.n	80015b8 <HAL_DMA_IRQHandler+0x168>
 800159a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800159e:	e00b      	b.n	80015b8 <HAL_DMA_IRQHandler+0x168>
 80015a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a4:	e008      	b.n	80015b8 <HAL_DMA_IRQHandler+0x168>
 80015a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015aa:	e005      	b.n	80015b8 <HAL_DMA_IRQHandler+0x168>
 80015ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b0:	e002      	b.n	80015b8 <HAL_DMA_IRQHandler+0x168>
 80015b2:	2320      	movs	r3, #32
 80015b4:	e000      	b.n	80015b8 <HAL_DMA_IRQHandler+0x168>
 80015b6:	2302      	movs	r3, #2
 80015b8:	4a27      	ldr	r2, [pc, #156]	; (8001658 <HAL_DMA_IRQHandler+0x208>)
 80015ba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d034      	beq.n	8001636 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015d4:	e02f      	b.n	8001636 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	2208      	movs	r2, #8
 80015dc:	409a      	lsls	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d028      	beq.n	8001638 <HAL_DMA_IRQHandler+0x1e8>
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d023      	beq.n	8001638 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 020e 	bic.w	r2, r2, #14
 80015fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001608:	2101      	movs	r1, #1
 800160a:	fa01 f202 	lsl.w	r2, r1, r2
 800160e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	4798      	blx	r3
    }
  }
  return;
 8001636:	bf00      	nop
 8001638:	bf00      	nop
}
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40020008 	.word	0x40020008
 8001644:	4002001c 	.word	0x4002001c
 8001648:	40020030 	.word	0x40020030
 800164c:	40020044 	.word	0x40020044
 8001650:	40020058 	.word	0x40020058
 8001654:	4002006c 	.word	0x4002006c
 8001658:	40020000 	.word	0x40020000

0800165c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800165c:	b480      	push	{r7}
 800165e:	b08b      	sub	sp, #44	; 0x2c
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166e:	e161      	b.n	8001934 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001670:	2201      	movs	r2, #1
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	429a      	cmp	r2, r3
 800168a:	f040 8150 	bne.w	800192e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	4a97      	ldr	r2, [pc, #604]	; (80018f0 <HAL_GPIO_Init+0x294>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d05e      	beq.n	8001756 <HAL_GPIO_Init+0xfa>
 8001698:	4a95      	ldr	r2, [pc, #596]	; (80018f0 <HAL_GPIO_Init+0x294>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d875      	bhi.n	800178a <HAL_GPIO_Init+0x12e>
 800169e:	4a95      	ldr	r2, [pc, #596]	; (80018f4 <HAL_GPIO_Init+0x298>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d058      	beq.n	8001756 <HAL_GPIO_Init+0xfa>
 80016a4:	4a93      	ldr	r2, [pc, #588]	; (80018f4 <HAL_GPIO_Init+0x298>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d86f      	bhi.n	800178a <HAL_GPIO_Init+0x12e>
 80016aa:	4a93      	ldr	r2, [pc, #588]	; (80018f8 <HAL_GPIO_Init+0x29c>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d052      	beq.n	8001756 <HAL_GPIO_Init+0xfa>
 80016b0:	4a91      	ldr	r2, [pc, #580]	; (80018f8 <HAL_GPIO_Init+0x29c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d869      	bhi.n	800178a <HAL_GPIO_Init+0x12e>
 80016b6:	4a91      	ldr	r2, [pc, #580]	; (80018fc <HAL_GPIO_Init+0x2a0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d04c      	beq.n	8001756 <HAL_GPIO_Init+0xfa>
 80016bc:	4a8f      	ldr	r2, [pc, #572]	; (80018fc <HAL_GPIO_Init+0x2a0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d863      	bhi.n	800178a <HAL_GPIO_Init+0x12e>
 80016c2:	4a8f      	ldr	r2, [pc, #572]	; (8001900 <HAL_GPIO_Init+0x2a4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d046      	beq.n	8001756 <HAL_GPIO_Init+0xfa>
 80016c8:	4a8d      	ldr	r2, [pc, #564]	; (8001900 <HAL_GPIO_Init+0x2a4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d85d      	bhi.n	800178a <HAL_GPIO_Init+0x12e>
 80016ce:	2b12      	cmp	r3, #18
 80016d0:	d82a      	bhi.n	8001728 <HAL_GPIO_Init+0xcc>
 80016d2:	2b12      	cmp	r3, #18
 80016d4:	d859      	bhi.n	800178a <HAL_GPIO_Init+0x12e>
 80016d6:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <HAL_GPIO_Init+0x80>)
 80016d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016dc:	08001757 	.word	0x08001757
 80016e0:	08001731 	.word	0x08001731
 80016e4:	08001743 	.word	0x08001743
 80016e8:	08001785 	.word	0x08001785
 80016ec:	0800178b 	.word	0x0800178b
 80016f0:	0800178b 	.word	0x0800178b
 80016f4:	0800178b 	.word	0x0800178b
 80016f8:	0800178b 	.word	0x0800178b
 80016fc:	0800178b 	.word	0x0800178b
 8001700:	0800178b 	.word	0x0800178b
 8001704:	0800178b 	.word	0x0800178b
 8001708:	0800178b 	.word	0x0800178b
 800170c:	0800178b 	.word	0x0800178b
 8001710:	0800178b 	.word	0x0800178b
 8001714:	0800178b 	.word	0x0800178b
 8001718:	0800178b 	.word	0x0800178b
 800171c:	0800178b 	.word	0x0800178b
 8001720:	08001739 	.word	0x08001739
 8001724:	0800174d 	.word	0x0800174d
 8001728:	4a76      	ldr	r2, [pc, #472]	; (8001904 <HAL_GPIO_Init+0x2a8>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d013      	beq.n	8001756 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800172e:	e02c      	b.n	800178a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	623b      	str	r3, [r7, #32]
          break;
 8001736:	e029      	b.n	800178c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	3304      	adds	r3, #4
 800173e:	623b      	str	r3, [r7, #32]
          break;
 8001740:	e024      	b.n	800178c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	3308      	adds	r3, #8
 8001748:	623b      	str	r3, [r7, #32]
          break;
 800174a:	e01f      	b.n	800178c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	330c      	adds	r3, #12
 8001752:	623b      	str	r3, [r7, #32]
          break;
 8001754:	e01a      	b.n	800178c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800175e:	2304      	movs	r3, #4
 8001760:	623b      	str	r3, [r7, #32]
          break;
 8001762:	e013      	b.n	800178c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d105      	bne.n	8001778 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800176c:	2308      	movs	r3, #8
 800176e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	611a      	str	r2, [r3, #16]
          break;
 8001776:	e009      	b.n	800178c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001778:	2308      	movs	r3, #8
 800177a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	615a      	str	r2, [r3, #20]
          break;
 8001782:	e003      	b.n	800178c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
          break;
 8001788:	e000      	b.n	800178c <HAL_GPIO_Init+0x130>
          break;
 800178a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2bff      	cmp	r3, #255	; 0xff
 8001790:	d801      	bhi.n	8001796 <HAL_GPIO_Init+0x13a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	e001      	b.n	800179a <HAL_GPIO_Init+0x13e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3304      	adds	r3, #4
 800179a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2bff      	cmp	r3, #255	; 0xff
 80017a0:	d802      	bhi.n	80017a8 <HAL_GPIO_Init+0x14c>
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	e002      	b.n	80017ae <HAL_GPIO_Init+0x152>
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	3b08      	subs	r3, #8
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	210f      	movs	r1, #15
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	401a      	ands	r2, r3
 80017c0:	6a39      	ldr	r1, [r7, #32]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	431a      	orrs	r2, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 80a9 	beq.w	800192e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017dc:	4b4a      	ldr	r3, [pc, #296]	; (8001908 <HAL_GPIO_Init+0x2ac>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a49      	ldr	r2, [pc, #292]	; (8001908 <HAL_GPIO_Init+0x2ac>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b47      	ldr	r3, [pc, #284]	; (8001908 <HAL_GPIO_Init+0x2ac>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017f4:	4a45      	ldr	r2, [pc, #276]	; (800190c <HAL_GPIO_Init+0x2b0>)
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	3302      	adds	r3, #2
 80017fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001800:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	220f      	movs	r2, #15
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a3d      	ldr	r2, [pc, #244]	; (8001910 <HAL_GPIO_Init+0x2b4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00d      	beq.n	800183c <HAL_GPIO_Init+0x1e0>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a3c      	ldr	r2, [pc, #240]	; (8001914 <HAL_GPIO_Init+0x2b8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d007      	beq.n	8001838 <HAL_GPIO_Init+0x1dc>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a3b      	ldr	r2, [pc, #236]	; (8001918 <HAL_GPIO_Init+0x2bc>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d101      	bne.n	8001834 <HAL_GPIO_Init+0x1d8>
 8001830:	2302      	movs	r3, #2
 8001832:	e004      	b.n	800183e <HAL_GPIO_Init+0x1e2>
 8001834:	2303      	movs	r3, #3
 8001836:	e002      	b.n	800183e <HAL_GPIO_Init+0x1e2>
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <HAL_GPIO_Init+0x1e2>
 800183c:	2300      	movs	r3, #0
 800183e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001840:	f002 0203 	and.w	r2, r2, #3
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	4093      	lsls	r3, r2
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4313      	orrs	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800184e:	492f      	ldr	r1, [pc, #188]	; (800190c <HAL_GPIO_Init+0x2b0>)
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3302      	adds	r3, #2
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d006      	beq.n	8001876 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001868:	4b2c      	ldr	r3, [pc, #176]	; (800191c <HAL_GPIO_Init+0x2c0>)
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	492b      	ldr	r1, [pc, #172]	; (800191c <HAL_GPIO_Init+0x2c0>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	608b      	str	r3, [r1, #8]
 8001874:	e006      	b.n	8001884 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001876:	4b29      	ldr	r3, [pc, #164]	; (800191c <HAL_GPIO_Init+0x2c0>)
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	43db      	mvns	r3, r3
 800187e:	4927      	ldr	r1, [pc, #156]	; (800191c <HAL_GPIO_Init+0x2c0>)
 8001880:	4013      	ands	r3, r2
 8001882:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001890:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_GPIO_Init+0x2c0>)
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	4921      	ldr	r1, [pc, #132]	; (800191c <HAL_GPIO_Init+0x2c0>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	60cb      	str	r3, [r1, #12]
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800189e:	4b1f      	ldr	r3, [pc, #124]	; (800191c <HAL_GPIO_Init+0x2c0>)
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	491d      	ldr	r1, [pc, #116]	; (800191c <HAL_GPIO_Init+0x2c0>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_GPIO_Init+0x2c0>)
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4917      	ldr	r1, [pc, #92]	; (800191c <HAL_GPIO_Init+0x2c0>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_GPIO_Init+0x2c0>)
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	4913      	ldr	r1, [pc, #76]	; (800191c <HAL_GPIO_Init+0x2c0>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d01f      	beq.n	8001920 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_GPIO_Init+0x2c0>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	490d      	ldr	r1, [pc, #52]	; (800191c <HAL_GPIO_Init+0x2c0>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]
 80018ec:	e01f      	b.n	800192e <HAL_GPIO_Init+0x2d2>
 80018ee:	bf00      	nop
 80018f0:	10320000 	.word	0x10320000
 80018f4:	10310000 	.word	0x10310000
 80018f8:	10220000 	.word	0x10220000
 80018fc:	10210000 	.word	0x10210000
 8001900:	10120000 	.word	0x10120000
 8001904:	10110000 	.word	0x10110000
 8001908:	40021000 	.word	0x40021000
 800190c:	40010000 	.word	0x40010000
 8001910:	40010800 	.word	0x40010800
 8001914:	40010c00 	.word	0x40010c00
 8001918:	40011000 	.word	0x40011000
 800191c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_GPIO_Init+0x2f4>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	43db      	mvns	r3, r3
 8001928:	4909      	ldr	r1, [pc, #36]	; (8001950 <HAL_GPIO_Init+0x2f4>)
 800192a:	4013      	ands	r3, r2
 800192c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	3301      	adds	r3, #1
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	fa22 f303 	lsr.w	r3, r2, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	f47f ae96 	bne.w	8001670 <HAL_GPIO_Init+0x14>
  }
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	372c      	adds	r7, #44	; 0x2c
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	40010400 	.word	0x40010400

08001954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
 8001960:	4613      	mov	r3, r2
 8001962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001964:	787b      	ldrb	r3, [r7, #1]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800196a:	887a      	ldrh	r2, [r7, #2]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001970:	e003      	b.n	800197a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001972:	887b      	ldrh	r3, [r7, #2]
 8001974:	041a      	lsls	r2, r3, #16
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	611a      	str	r2, [r3, #16]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e272      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8087 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a4:	4b92      	ldr	r3, [pc, #584]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d00c      	beq.n	80019ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019b0:	4b8f      	ldr	r3, [pc, #572]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d112      	bne.n	80019e2 <HAL_RCC_OscConfig+0x5e>
 80019bc:	4b8c      	ldr	r3, [pc, #560]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c8:	d10b      	bne.n	80019e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ca:	4b89      	ldr	r3, [pc, #548]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d06c      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x12c>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d168      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e24c      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ea:	d106      	bne.n	80019fa <HAL_RCC_OscConfig+0x76>
 80019ec:	4b80      	ldr	r3, [pc, #512]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a7f      	ldr	r2, [pc, #508]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	e02e      	b.n	8001a58 <HAL_RCC_OscConfig+0xd4>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x98>
 8001a02:	4b7b      	ldr	r3, [pc, #492]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a7a      	ldr	r2, [pc, #488]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b78      	ldr	r3, [pc, #480]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a77      	ldr	r2, [pc, #476]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e01d      	b.n	8001a58 <HAL_RCC_OscConfig+0xd4>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0xbc>
 8001a26:	4b72      	ldr	r3, [pc, #456]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a71      	ldr	r2, [pc, #452]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	4b6f      	ldr	r3, [pc, #444]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a6e      	ldr	r2, [pc, #440]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e00b      	b.n	8001a58 <HAL_RCC_OscConfig+0xd4>
 8001a40:	4b6b      	ldr	r3, [pc, #428]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a6a      	ldr	r2, [pc, #424]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b68      	ldr	r3, [pc, #416]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a67      	ldr	r2, [pc, #412]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d013      	beq.n	8001a88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff faac 	bl	8000fbc <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff faa8 	bl	8000fbc <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e200      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0xe4>
 8001a86:	e014      	b.n	8001ab2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff fa98 	bl	8000fbc <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a90:	f7ff fa94 	bl	8000fbc <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	; 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e1ec      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa2:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x10c>
 8001aae:	e000      	b.n	8001ab2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d063      	beq.n	8001b86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001abe:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00b      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aca:	4b49      	ldr	r3, [pc, #292]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d11c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x18c>
 8001ad6:	4b46      	ldr	r3, [pc, #280]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d116      	bne.n	8001b10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae2:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d005      	beq.n	8001afa <HAL_RCC_OscConfig+0x176>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d001      	beq.n	8001afa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e1c0      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afa:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4939      	ldr	r1, [pc, #228]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0e:	e03a      	b.n	8001b86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d020      	beq.n	8001b5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b18:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7ff fa4d 	bl	8000fbc <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b26:	f7ff fa49 	bl	8000fbc <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e1a1      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b38:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4927      	ldr	r1, [pc, #156]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
 8001b58:	e015      	b.n	8001b86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fa2c 	bl	8000fbc <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b68:	f7ff fa28 	bl	8000fbc <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e180      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d03a      	beq.n	8001c08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d019      	beq.n	8001bce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9a:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba0:	f7ff fa0c 	bl	8000fbc <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba8:	f7ff fa08 	bl	8000fbc <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e160      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f000 face 	bl	8002168 <RCC_Delay>
 8001bcc:	e01c      	b.n	8001c08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_RCC_OscConfig+0x274>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd4:	f7ff f9f2 	bl	8000fbc <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bda:	e00f      	b.n	8001bfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bdc:	f7ff f9ee 	bl	8000fbc <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d908      	bls.n	8001bfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e146      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	42420000 	.word	0x42420000
 8001bf8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfc:	4b92      	ldr	r3, [pc, #584]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1e9      	bne.n	8001bdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80a6 	beq.w	8001d62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1a:	4b8b      	ldr	r3, [pc, #556]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10d      	bne.n	8001c42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b88      	ldr	r3, [pc, #544]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a87      	ldr	r2, [pc, #540]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	61d3      	str	r3, [r2, #28]
 8001c32:	4b85      	ldr	r3, [pc, #532]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c42:	4b82      	ldr	r3, [pc, #520]	; (8001e4c <HAL_RCC_OscConfig+0x4c8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d118      	bne.n	8001c80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4e:	4b7f      	ldr	r3, [pc, #508]	; (8001e4c <HAL_RCC_OscConfig+0x4c8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a7e      	ldr	r2, [pc, #504]	; (8001e4c <HAL_RCC_OscConfig+0x4c8>)
 8001c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5a:	f7ff f9af 	bl	8000fbc <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c62:	f7ff f9ab 	bl	8000fbc <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b64      	cmp	r3, #100	; 0x64
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e103      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	4b75      	ldr	r3, [pc, #468]	; (8001e4c <HAL_RCC_OscConfig+0x4c8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x312>
 8001c88:	4b6f      	ldr	r3, [pc, #444]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4a6e      	ldr	r2, [pc, #440]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6213      	str	r3, [r2, #32]
 8001c94:	e02d      	b.n	8001cf2 <HAL_RCC_OscConfig+0x36e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x334>
 8001c9e:	4b6a      	ldr	r3, [pc, #424]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4a69      	ldr	r2, [pc, #420]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	6213      	str	r3, [r2, #32]
 8001caa:	4b67      	ldr	r3, [pc, #412]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	4a66      	ldr	r2, [pc, #408]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	f023 0304 	bic.w	r3, r3, #4
 8001cb4:	6213      	str	r3, [r2, #32]
 8001cb6:	e01c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x36e>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d10c      	bne.n	8001cda <HAL_RCC_OscConfig+0x356>
 8001cc0:	4b61      	ldr	r3, [pc, #388]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4a60      	ldr	r2, [pc, #384]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	6213      	str	r3, [r2, #32]
 8001ccc:	4b5e      	ldr	r3, [pc, #376]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	4a5d      	ldr	r2, [pc, #372]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6213      	str	r3, [r2, #32]
 8001cd8:	e00b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x36e>
 8001cda:	4b5b      	ldr	r3, [pc, #364]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4a5a      	ldr	r2, [pc, #360]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6213      	str	r3, [r2, #32]
 8001ce6:	4b58      	ldr	r3, [pc, #352]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	4a57      	ldr	r2, [pc, #348]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	f023 0304 	bic.w	r3, r3, #4
 8001cf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d015      	beq.n	8001d26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f95f 	bl	8000fbc <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f95b 	bl	8000fbc <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e0b1      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0ee      	beq.n	8001d02 <HAL_RCC_OscConfig+0x37e>
 8001d24:	e014      	b.n	8001d50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7ff f949 	bl	8000fbc <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7ff f945 	bl	8000fbc <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e09b      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d44:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ee      	bne.n	8001d2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d105      	bne.n	8001d62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d56:	4b3c      	ldr	r3, [pc, #240]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	4a3b      	ldr	r2, [pc, #236]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 8087 	beq.w	8001e7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d6c:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d061      	beq.n	8001e3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d146      	bne.n	8001e0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d80:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7ff f919 	bl	8000fbc <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7ff f915 	bl	8000fbc <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e06d      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da0:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db4:	d108      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001db6:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	4921      	ldr	r1, [pc, #132]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc8:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a19      	ldr	r1, [r3, #32]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	491b      	ldr	r1, [pc, #108]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7ff f8e9 	bl	8000fbc <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dee:	f7ff f8e5 	bl	8000fbc <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e03d      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x46a>
 8001e0c:	e035      	b.n	8001e7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7ff f8d2 	bl	8000fbc <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7ff f8ce 	bl	8000fbc <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e026      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x498>
 8001e3a:	e01e      	b.n	8001e7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d107      	bne.n	8001e54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e019      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40007000 	.word	0x40007000
 8001e50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_RCC_OscConfig+0x500>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d001      	beq.n	8001e7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000

08001e88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0d0      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b6a      	ldr	r3, [pc, #424]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d910      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b67      	ldr	r3, [pc, #412]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 0207 	bic.w	r2, r3, #7
 8001eb2:	4965      	ldr	r1, [pc, #404]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b63      	ldr	r3, [pc, #396]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0b8      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee4:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4a58      	ldr	r2, [pc, #352]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001efc:	4b53      	ldr	r3, [pc, #332]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a52      	ldr	r2, [pc, #328]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f08:	4b50      	ldr	r3, [pc, #320]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	494d      	ldr	r1, [pc, #308]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d040      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d115      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e07f      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e073      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f56:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e06b      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f023 0203 	bic.w	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4936      	ldr	r1, [pc, #216]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f78:	f7ff f820 	bl	8000fbc <HAL_GetTick>
 8001f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f80:	f7ff f81c 	bl	8000fbc <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e053      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 020c 	and.w	r2, r3, #12
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d1eb      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b27      	ldr	r3, [pc, #156]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d210      	bcs.n	8001fd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4922      	ldr	r1, [pc, #136]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e032      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4916      	ldr	r1, [pc, #88]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	490e      	ldr	r1, [pc, #56]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002016:	f000 f821 	bl	800205c <HAL_RCC_GetSysClockFreq>
 800201a:	4602      	mov	r2, r0
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	490a      	ldr	r1, [pc, #40]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	5ccb      	ldrb	r3, [r1, r3]
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	4a09      	ldr	r2, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x1cc>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x1d0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe ff7e 	bl	8000f38 <HAL_InitTick>

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40022000 	.word	0x40022000
 800204c:	40021000 	.word	0x40021000
 8002050:	0800421c 	.word	0x0800421c
 8002054:	20000000 	.word	0x20000000
 8002058:	20000004 	.word	0x20000004

0800205c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002076:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b04      	cmp	r3, #4
 8002084:	d002      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0x30>
 8002086:	2b08      	cmp	r3, #8
 8002088:	d003      	beq.n	8002092 <HAL_RCC_GetSysClockFreq+0x36>
 800208a:	e027      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800208e:	613b      	str	r3, [r7, #16]
      break;
 8002090:	e027      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	0c9b      	lsrs	r3, r3, #18
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800209c:	5cd3      	ldrb	r3, [r2, r3]
 800209e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d010      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	0c5b      	lsrs	r3, r3, #17
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	4a11      	ldr	r2, [pc, #68]	; (80020fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80020be:	fb03 f202 	mul.w	r2, r3, r2
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	e004      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a0c      	ldr	r2, [pc, #48]	; (8002100 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020d0:	fb02 f303 	mul.w	r3, r2, r3
 80020d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	613b      	str	r3, [r7, #16]
      break;
 80020da:	e002      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80020de:	613b      	str	r3, [r7, #16]
      break;
 80020e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e2:	693b      	ldr	r3, [r7, #16]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000
 80020f4:	007a1200 	.word	0x007a1200
 80020f8:	08004234 	.word	0x08004234
 80020fc:	08004244 	.word	0x08004244
 8002100:	003d0900 	.word	0x003d0900

08002104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002108:	4b02      	ldr	r3, [pc, #8]	; (8002114 <HAL_RCC_GetHCLKFreq+0x10>)
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	20000000 	.word	0x20000000

08002118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800211c:	f7ff fff2 	bl	8002104 <HAL_RCC_GetHCLKFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	0a1b      	lsrs	r3, r3, #8
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	4903      	ldr	r1, [pc, #12]	; (800213c <HAL_RCC_GetPCLK1Freq+0x24>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	0800422c 	.word	0x0800422c

08002140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002144:	f7ff ffde 	bl	8002104 <HAL_RCC_GetHCLKFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	0adb      	lsrs	r3, r3, #11
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4903      	ldr	r1, [pc, #12]	; (8002164 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	0800422c 	.word	0x0800422c

08002168 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <RCC_Delay+0x34>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <RCC_Delay+0x38>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	0a5b      	lsrs	r3, r3, #9
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	fb02 f303 	mul.w	r3, r2, r3
 8002182:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002184:	bf00      	nop
  }
  while (Delay --);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1e5a      	subs	r2, r3, #1
 800218a:	60fa      	str	r2, [r7, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f9      	bne.n	8002184 <RCC_Delay+0x1c>
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	20000000 	.word	0x20000000
 80021a0:	10624dd3 	.word	0x10624dd3

080021a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e041      	b.n	800223a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fd22 	bl	8000c14 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3304      	adds	r3, #4
 80021e0:	4619      	mov	r1, r3
 80021e2:	4610      	mov	r0, r2
 80021e4:	f000 fb40 	bl	8002868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d104      	bne.n	8002262 <HAL_TIM_IC_Start_IT+0x1e>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800225e:	b2db      	uxtb	r3, r3
 8002260:	e013      	b.n	800228a <HAL_TIM_IC_Start_IT+0x46>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b04      	cmp	r3, #4
 8002266:	d104      	bne.n	8002272 <HAL_TIM_IC_Start_IT+0x2e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800226e:	b2db      	uxtb	r3, r3
 8002270:	e00b      	b.n	800228a <HAL_TIM_IC_Start_IT+0x46>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b08      	cmp	r3, #8
 8002276:	d104      	bne.n	8002282 <HAL_TIM_IC_Start_IT+0x3e>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800227e:	b2db      	uxtb	r3, r3
 8002280:	e003      	b.n	800228a <HAL_TIM_IC_Start_IT+0x46>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002288:	b2db      	uxtb	r3, r3
 800228a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d104      	bne.n	800229c <HAL_TIM_IC_Start_IT+0x58>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e013      	b.n	80022c4 <HAL_TIM_IC_Start_IT+0x80>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d104      	bne.n	80022ac <HAL_TIM_IC_Start_IT+0x68>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	e00b      	b.n	80022c4 <HAL_TIM_IC_Start_IT+0x80>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d104      	bne.n	80022bc <HAL_TIM_IC_Start_IT+0x78>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	e003      	b.n	80022c4 <HAL_TIM_IC_Start_IT+0x80>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80022c6:	7bbb      	ldrb	r3, [r7, #14]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d102      	bne.n	80022d2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80022cc:	7b7b      	ldrb	r3, [r7, #13]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d001      	beq.n	80022d6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0b3      	b.n	800243e <HAL_TIM_IC_Start_IT+0x1fa>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d104      	bne.n	80022e6 <HAL_TIM_IC_Start_IT+0xa2>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022e4:	e013      	b.n	800230e <HAL_TIM_IC_Start_IT+0xca>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d104      	bne.n	80022f6 <HAL_TIM_IC_Start_IT+0xb2>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022f4:	e00b      	b.n	800230e <HAL_TIM_IC_Start_IT+0xca>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d104      	bne.n	8002306 <HAL_TIM_IC_Start_IT+0xc2>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002304:	e003      	b.n	800230e <HAL_TIM_IC_Start_IT+0xca>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2202      	movs	r2, #2
 800230a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d104      	bne.n	800231e <HAL_TIM_IC_Start_IT+0xda>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800231c:	e013      	b.n	8002346 <HAL_TIM_IC_Start_IT+0x102>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b04      	cmp	r3, #4
 8002322:	d104      	bne.n	800232e <HAL_TIM_IC_Start_IT+0xea>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800232c:	e00b      	b.n	8002346 <HAL_TIM_IC_Start_IT+0x102>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b08      	cmp	r3, #8
 8002332:	d104      	bne.n	800233e <HAL_TIM_IC_Start_IT+0xfa>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800233c:	e003      	b.n	8002346 <HAL_TIM_IC_Start_IT+0x102>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2202      	movs	r2, #2
 8002342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b0c      	cmp	r3, #12
 800234a:	d841      	bhi.n	80023d0 <HAL_TIM_IC_Start_IT+0x18c>
 800234c:	a201      	add	r2, pc, #4	; (adr r2, 8002354 <HAL_TIM_IC_Start_IT+0x110>)
 800234e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002352:	bf00      	nop
 8002354:	08002389 	.word	0x08002389
 8002358:	080023d1 	.word	0x080023d1
 800235c:	080023d1 	.word	0x080023d1
 8002360:	080023d1 	.word	0x080023d1
 8002364:	0800239b 	.word	0x0800239b
 8002368:	080023d1 	.word	0x080023d1
 800236c:	080023d1 	.word	0x080023d1
 8002370:	080023d1 	.word	0x080023d1
 8002374:	080023ad 	.word	0x080023ad
 8002378:	080023d1 	.word	0x080023d1
 800237c:	080023d1 	.word	0x080023d1
 8002380:	080023d1 	.word	0x080023d1
 8002384:	080023bf 	.word	0x080023bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0202 	orr.w	r2, r2, #2
 8002396:	60da      	str	r2, [r3, #12]
      break;
 8002398:	e01d      	b.n	80023d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0204 	orr.w	r2, r2, #4
 80023a8:	60da      	str	r2, [r3, #12]
      break;
 80023aa:	e014      	b.n	80023d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0208 	orr.w	r2, r2, #8
 80023ba:	60da      	str	r2, [r3, #12]
      break;
 80023bc:	e00b      	b.n	80023d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0210 	orr.w	r2, r2, #16
 80023cc:	60da      	str	r2, [r3, #12]
      break;
 80023ce:	e002      	b.n	80023d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
      break;
 80023d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d12f      	bne.n	800243c <HAL_TIM_IC_Start_IT+0x1f8>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2201      	movs	r2, #1
 80023e2:	6839      	ldr	r1, [r7, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fb9e 	bl	8002b26 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a16      	ldr	r2, [pc, #88]	; (8002448 <HAL_TIM_IC_Start_IT+0x204>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d009      	beq.n	8002408 <HAL_TIM_IC_Start_IT+0x1c4>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fc:	d004      	beq.n	8002408 <HAL_TIM_IC_Start_IT+0x1c4>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a12      	ldr	r2, [pc, #72]	; (800244c <HAL_TIM_IC_Start_IT+0x208>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d111      	bne.n	800242c <HAL_TIM_IC_Start_IT+0x1e8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b06      	cmp	r3, #6
 8002418:	d010      	beq.n	800243c <HAL_TIM_IC_Start_IT+0x1f8>
      {
        __HAL_TIM_ENABLE(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0201 	orr.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800242a:	e007      	b.n	800243c <HAL_TIM_IC_Start_IT+0x1f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40012c00 	.word	0x40012c00
 800244c:	40000400 	.word	0x40000400

08002450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b02      	cmp	r3, #2
 8002464:	d122      	bne.n	80024ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b02      	cmp	r3, #2
 8002472:	d11b      	bne.n	80024ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0202 	mvn.w	r2, #2
 800247c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7fe f96c 	bl	8000770 <HAL_TIM_IC_CaptureCallback>
 8002498:	e005      	b.n	80024a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f9c9 	bl	8002832 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f9cf 	bl	8002844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d122      	bne.n	8002500 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d11b      	bne.n	8002500 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0204 	mvn.w	r2, #4
 80024d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2202      	movs	r2, #2
 80024d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7fe f942 	bl	8000770 <HAL_TIM_IC_CaptureCallback>
 80024ec:	e005      	b.n	80024fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f99f 	bl	8002832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f9a5 	bl	8002844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b08      	cmp	r3, #8
 800250c:	d122      	bne.n	8002554 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b08      	cmp	r3, #8
 800251a:	d11b      	bne.n	8002554 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0208 	mvn.w	r2, #8
 8002524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2204      	movs	r2, #4
 800252a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe f918 	bl	8000770 <HAL_TIM_IC_CaptureCallback>
 8002540:	e005      	b.n	800254e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f975 	bl	8002832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f97b 	bl	8002844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b10      	cmp	r3, #16
 8002560:	d122      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	2b10      	cmp	r3, #16
 800256e:	d11b      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0210 	mvn.w	r2, #16
 8002578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2208      	movs	r2, #8
 800257e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fe f8ee 	bl	8000770 <HAL_TIM_IC_CaptureCallback>
 8002594:	e005      	b.n	80025a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f94b 	bl	8002832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f951 	bl	8002844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d10e      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d107      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0201 	mvn.w	r2, #1
 80025cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f926 	bl	8002820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025de:	2b80      	cmp	r3, #128	; 0x80
 80025e0:	d10e      	bne.n	8002600 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ec:	2b80      	cmp	r3, #128	; 0x80
 80025ee:	d107      	bne.n	8002600 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fb19 	bl	8002c32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	d10e      	bne.n	800262c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002618:	2b40      	cmp	r3, #64	; 0x40
 800261a:	d107      	bne.n	800262c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f915 	bl	8002856 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b20      	cmp	r3, #32
 8002638:	d10e      	bne.n	8002658 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b20      	cmp	r3, #32
 8002646:	d107      	bne.n	8002658 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0220 	mvn.w	r2, #32
 8002650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fae4 	bl	8002c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_TIM_IC_ConfigChannel+0x1e>
 800267a:	2302      	movs	r3, #2
 800267c:	e088      	b.n	8002790 <HAL_TIM_IC_ConfigChannel+0x130>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d11b      	bne.n	80026c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800269c:	f000 f93c 	bl	8002918 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 020c 	bic.w	r2, r2, #12
 80026ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6999      	ldr	r1, [r3, #24]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	619a      	str	r2, [r3, #24]
 80026c2:	e060      	b.n	8002786 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d11c      	bne.n	8002704 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80026da:	f000 f971 	bl	80029c0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	699a      	ldr	r2, [r3, #24]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80026ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6999      	ldr	r1, [r3, #24]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	021a      	lsls	r2, r3, #8
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	619a      	str	r2, [r3, #24]
 8002702:	e040      	b.n	8002786 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b08      	cmp	r3, #8
 8002708:	d11b      	bne.n	8002742 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800271a:	f000 f98d 	bl	8002a38 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 020c 	bic.w	r2, r2, #12
 800272c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69d9      	ldr	r1, [r3, #28]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	61da      	str	r2, [r3, #28]
 8002740:	e021      	b.n	8002786 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b0c      	cmp	r3, #12
 8002746:	d11c      	bne.n	8002782 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002758:	f000 f9a9 	bl	8002aae <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69da      	ldr	r2, [r3, #28]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800276a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	69d9      	ldr	r1, [r3, #28]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	021a      	lsls	r2, r3, #8
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	61da      	str	r2, [r3, #28]
 8002780:	e001      	b.n	8002786 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800278e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b0c      	cmp	r3, #12
 80027aa:	d831      	bhi.n	8002810 <HAL_TIM_ReadCapturedValue+0x78>
 80027ac:	a201      	add	r2, pc, #4	; (adr r2, 80027b4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80027ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b2:	bf00      	nop
 80027b4:	080027e9 	.word	0x080027e9
 80027b8:	08002811 	.word	0x08002811
 80027bc:	08002811 	.word	0x08002811
 80027c0:	08002811 	.word	0x08002811
 80027c4:	080027f3 	.word	0x080027f3
 80027c8:	08002811 	.word	0x08002811
 80027cc:	08002811 	.word	0x08002811
 80027d0:	08002811 	.word	0x08002811
 80027d4:	080027fd 	.word	0x080027fd
 80027d8:	08002811 	.word	0x08002811
 80027dc:	08002811 	.word	0x08002811
 80027e0:	08002811 	.word	0x08002811
 80027e4:	08002807 	.word	0x08002807
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ee:	60fb      	str	r3, [r7, #12]

      break;
 80027f0:	e00f      	b.n	8002812 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f8:	60fb      	str	r3, [r7, #12]

      break;
 80027fa:	e00a      	b.n	8002812 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002802:	60fb      	str	r3, [r7, #12]

      break;
 8002804:	e005      	b.n	8002812 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	60fb      	str	r3, [r7, #12]

      break;
 800280e:	e000      	b.n	8002812 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002810:	bf00      	nop
  }

  return tmpreg;
 8002812:	68fb      	ldr	r3, [r7, #12]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop

08002820 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a25      	ldr	r2, [pc, #148]	; (8002910 <TIM_Base_SetConfig+0xa8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d007      	beq.n	8002890 <TIM_Base_SetConfig+0x28>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002886:	d003      	beq.n	8002890 <TIM_Base_SetConfig+0x28>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a22      	ldr	r2, [pc, #136]	; (8002914 <TIM_Base_SetConfig+0xac>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d108      	bne.n	80028a2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a1a      	ldr	r2, [pc, #104]	; (8002910 <TIM_Base_SetConfig+0xa8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d007      	beq.n	80028ba <TIM_Base_SetConfig+0x52>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b0:	d003      	beq.n	80028ba <TIM_Base_SetConfig+0x52>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a17      	ldr	r2, [pc, #92]	; (8002914 <TIM_Base_SetConfig+0xac>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d108      	bne.n	80028cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a07      	ldr	r2, [pc, #28]	; (8002910 <TIM_Base_SetConfig+0xa8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d103      	bne.n	8002900 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	615a      	str	r2, [r3, #20]
}
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	40012c00 	.word	0x40012c00
 8002914:	40000400 	.word	0x40000400

08002918 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f023 0201 	bic.w	r2, r3, #1
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4a1d      	ldr	r2, [pc, #116]	; (80029b8 <TIM_TI1_SetConfig+0xa0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <TIM_TI1_SetConfig+0x3e>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294c:	d003      	beq.n	8002956 <TIM_TI1_SetConfig+0x3e>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4a1a      	ldr	r2, [pc, #104]	; (80029bc <TIM_TI1_SetConfig+0xa4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d101      	bne.n	800295a <TIM_TI1_SetConfig+0x42>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <TIM_TI1_SetConfig+0x44>
 800295a:	2300      	movs	r3, #0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f023 0303 	bic.w	r3, r3, #3
 8002966:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4313      	orrs	r3, r2
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	e003      	b.n	800297a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002980:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	b2db      	uxtb	r3, r3
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	f023 030a 	bic.w	r3, r3, #10
 8002994:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f003 030a 	and.w	r3, r3, #10
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	621a      	str	r2, [r3, #32]
}
 80029ae:	bf00      	nop
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	40012c00 	.word	0x40012c00
 80029bc:	40000400 	.word	0x40000400

080029c0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f023 0210 	bic.w	r2, r3, #16
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	031b      	lsls	r3, r3, #12
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a12:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	621a      	str	r2, [r3, #32]
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f023 0303 	bic.w	r3, r3, #3
 8002a64:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a74:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a88:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	621a      	str	r2, [r3, #32]
}
 8002aa4:	bf00      	nop
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b087      	sub	sp, #28
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ada:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	031b      	lsls	r3, r3, #12
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b00:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	031b      	lsls	r3, r3, #12
 8002b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	621a      	str	r2, [r3, #32]
}
 8002b1c:	bf00      	nop
 8002b1e:	371c      	adds	r7, #28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b087      	sub	sp, #28
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	2201      	movs	r2, #1
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a1a      	ldr	r2, [r3, #32]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	401a      	ands	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a1a      	ldr	r2, [r3, #32]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	621a      	str	r2, [r3, #32]
}
 8002b64:	bf00      	nop
 8002b66:	371c      	adds	r7, #28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr
	...

08002b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e041      	b.n	8002c0c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d009      	beq.n	8002be0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d004      	beq.n	8002be0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a10      	ldr	r2, [pc, #64]	; (8002c1c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d10c      	bne.n	8002bfa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002be6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40012c00 	.word	0x40012c00
 8002c1c:	40000400 	.word	0x40000400

08002c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e042      	b.n	8002cdc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fe f81a 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2224      	movs	r2, #36	; 0x24
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fd71 	bl	8003770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d16d      	bne.n	8002de0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_UART_Transmit+0x2c>
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e066      	b.n	8002de2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2221      	movs	r2, #33	; 0x21
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d22:	f7fe f94b 	bl	8000fbc <HAL_GetTick>
 8002d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	88fa      	ldrh	r2, [r7, #6]
 8002d2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	88fa      	ldrh	r2, [r7, #6]
 8002d32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3c:	d108      	bne.n	8002d50 <HAL_UART_Transmit+0x6c>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d104      	bne.n	8002d50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	e003      	b.n	8002d58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d58:	e02a      	b.n	8002db0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2200      	movs	r2, #0
 8002d62:	2180      	movs	r1, #128	; 0x80
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 faf9 	bl	800335c <UART_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e036      	b.n	8002de2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10b      	bne.n	8002d92 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	61bb      	str	r3, [r7, #24]
 8002d90:	e007      	b.n	8002da2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1cf      	bne.n	8002d5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2140      	movs	r1, #64	; 0x40
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fac9 	bl	800335c <UART_WaitOnFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e006      	b.n	8002de2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e000      	b.n	8002de2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002de0:	2302      	movs	r3, #2
  }
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b0ba      	sub	sp, #232	; 0xe8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10f      	bne.n	8002e52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <HAL_UART_IRQHandler+0x66>
 8002e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fbd1 	bl	80035f2 <UART_Receive_IT>
      return;
 8002e50:	e25b      	b.n	800330a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 80de 	beq.w	8003018 <HAL_UART_IRQHandler+0x22c>
 8002e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d106      	bne.n	8002e76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80d1 	beq.w	8003018 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00b      	beq.n	8002e9a <HAL_UART_IRQHandler+0xae>
 8002e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d005      	beq.n	8002e9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	f043 0201 	orr.w	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00b      	beq.n	8002ebe <HAL_UART_IRQHandler+0xd2>
 8002ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	f043 0202 	orr.w	r2, r3, #2
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00b      	beq.n	8002ee2 <HAL_UART_IRQHandler+0xf6>
 8002eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	f043 0204 	orr.w	r2, r3, #4
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d011      	beq.n	8002f12 <HAL_UART_IRQHandler+0x126>
 8002eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d105      	bne.n	8002f06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d005      	beq.n	8002f12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	f043 0208 	orr.w	r2, r3, #8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 81f2 	beq.w	8003300 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f20:	f003 0320 	and.w	r3, r3, #32
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_UART_IRQHandler+0x14e>
 8002f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fb5c 	bl	80035f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d103      	bne.n	8002f66 <HAL_UART_IRQHandler+0x17a>
 8002f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d04f      	beq.n	8003006 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fa66 	bl	8003438 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d041      	beq.n	8002ffe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3314      	adds	r3, #20
 8002f80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f88:	e853 3f00 	ldrex	r3, [r3]
 8002f8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3314      	adds	r3, #20
 8002fa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002faa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fb6:	e841 2300 	strex	r3, r2, [r1]
 8002fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1d9      	bne.n	8002f7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d013      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd2:	4a7e      	ldr	r2, [pc, #504]	; (80031cc <HAL_UART_IRQHandler+0x3e0>)
 8002fd4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe f9c0 	bl	8001360 <HAL_DMA_Abort_IT>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d016      	beq.n	8003014 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff4:	e00e      	b.n	8003014 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f99c 	bl	8003334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffc:	e00a      	b.n	8003014 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f998 	bl	8003334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003004:	e006      	b.n	8003014 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f994 	bl	8003334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003012:	e175      	b.n	8003300 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003014:	bf00      	nop
    return;
 8003016:	e173      	b.n	8003300 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	2b01      	cmp	r3, #1
 800301e:	f040 814f 	bne.w	80032c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 8148 	beq.w	80032c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8141 	beq.w	80032c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800303e:	2300      	movs	r3, #0
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 80b6 	beq.w	80031d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003070:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 8145 	beq.w	8003304 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800307e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003082:	429a      	cmp	r2, r3
 8003084:	f080 813e 	bcs.w	8003304 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800308e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	2b20      	cmp	r3, #32
 8003098:	f000 8088 	beq.w	80031ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	330c      	adds	r3, #12
 80030a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030aa:	e853 3f00 	ldrex	r3, [r3]
 80030ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	330c      	adds	r3, #12
 80030c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80030c8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030d8:	e841 2300 	strex	r3, r2, [r1]
 80030dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1d9      	bne.n	800309c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3314      	adds	r3, #20
 80030ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f2:	e853 3f00 	ldrex	r3, [r3]
 80030f6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030fa:	f023 0301 	bic.w	r3, r3, #1
 80030fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3314      	adds	r3, #20
 8003108:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800310c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003110:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003112:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003114:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003118:	e841 2300 	strex	r3, r2, [r1]
 800311c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800311e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1e1      	bne.n	80030e8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3314      	adds	r3, #20
 800312a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800312e:	e853 3f00 	ldrex	r3, [r3]
 8003132:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800313a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3314      	adds	r3, #20
 8003144:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003148:	66fa      	str	r2, [r7, #108]	; 0x6c
 800314a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800314e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003150:	e841 2300 	strex	r3, r2, [r1]
 8003154:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003156:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e3      	bne.n	8003124 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	330c      	adds	r3, #12
 8003170:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003174:	e853 3f00 	ldrex	r3, [r3]
 8003178:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800317a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800317c:	f023 0310 	bic.w	r3, r3, #16
 8003180:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	330c      	adds	r3, #12
 800318a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800318e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003190:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003192:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003196:	e841 2300 	strex	r3, r2, [r1]
 800319a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800319c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1e3      	bne.n	800316a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe f89e 	bl	80012e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	b29b      	uxth	r3, r3
 80031c0:	4619      	mov	r1, r3
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f8bf 	bl	8003346 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031c8:	e09c      	b.n	8003304 <HAL_UART_IRQHandler+0x518>
 80031ca:	bf00      	nop
 80031cc:	080034fd 	.word	0x080034fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031d8:	b29b      	uxth	r3, r3
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 808e 	beq.w	8003308 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80031ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 8089 	beq.w	8003308 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	330c      	adds	r3, #12
 80031fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003200:	e853 3f00 	ldrex	r3, [r3]
 8003204:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003208:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800320c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	330c      	adds	r3, #12
 8003216:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800321a:	647a      	str	r2, [r7, #68]	; 0x44
 800321c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003220:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003222:	e841 2300 	strex	r3, r2, [r1]
 8003226:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1e3      	bne.n	80031f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3314      	adds	r3, #20
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	623b      	str	r3, [r7, #32]
   return(result);
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3314      	adds	r3, #20
 800324e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003252:	633a      	str	r2, [r7, #48]	; 0x30
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800325a:	e841 2300 	strex	r3, r2, [r1]
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1e3      	bne.n	800322e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	330c      	adds	r3, #12
 800327a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	e853 3f00 	ldrex	r3, [r3]
 8003282:	60fb      	str	r3, [r7, #12]
   return(result);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0310 	bic.w	r3, r3, #16
 800328a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003298:	61fa      	str	r2, [r7, #28]
 800329a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329c:	69b9      	ldr	r1, [r7, #24]
 800329e:	69fa      	ldr	r2, [r7, #28]
 80032a0:	e841 2300 	strex	r3, r2, [r1]
 80032a4:	617b      	str	r3, [r7, #20]
   return(result);
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e3      	bne.n	8003274 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032b6:	4619      	mov	r1, r3
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f844 	bl	8003346 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032be:	e023      	b.n	8003308 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d009      	beq.n	80032e0 <HAL_UART_IRQHandler+0x4f4>
 80032cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f923 	bl	8003524 <UART_Transmit_IT>
    return;
 80032de:	e014      	b.n	800330a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00e      	beq.n	800330a <HAL_UART_IRQHandler+0x51e>
 80032ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f962 	bl	80035c2 <UART_EndTransmit_IT>
    return;
 80032fe:	e004      	b.n	800330a <HAL_UART_IRQHandler+0x51e>
    return;
 8003300:	bf00      	nop
 8003302:	e002      	b.n	800330a <HAL_UART_IRQHandler+0x51e>
      return;
 8003304:	bf00      	nop
 8003306:	e000      	b.n	800330a <HAL_UART_IRQHandler+0x51e>
      return;
 8003308:	bf00      	nop
  }
}
 800330a:	37e8      	adds	r7, #232	; 0xe8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	460b      	mov	r3, r1
 8003350:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b090      	sub	sp, #64	; 0x40
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800336c:	e050      	b.n	8003410 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d04c      	beq.n	8003410 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003378:	2b00      	cmp	r3, #0
 800337a:	d007      	beq.n	800338c <UART_WaitOnFlagUntilTimeout+0x30>
 800337c:	f7fd fe1e 	bl	8000fbc <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003388:	429a      	cmp	r2, r3
 800338a:	d241      	bcs.n	8003410 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	330c      	adds	r3, #12
 8003392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003396:	e853 3f00 	ldrex	r3, [r3]
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	330c      	adds	r3, #12
 80033aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033ac:	637a      	str	r2, [r7, #52]	; 0x34
 80033ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033b4:	e841 2300 	strex	r3, r2, [r1]
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e5      	bne.n	800338c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3314      	adds	r3, #20
 80033c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	e853 3f00 	ldrex	r3, [r3]
 80033ce:	613b      	str	r3, [r7, #16]
   return(result);
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f023 0301 	bic.w	r3, r3, #1
 80033d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3314      	adds	r3, #20
 80033de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033e0:	623a      	str	r2, [r7, #32]
 80033e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	69f9      	ldr	r1, [r7, #28]
 80033e6:	6a3a      	ldr	r2, [r7, #32]
 80033e8:	e841 2300 	strex	r3, r2, [r1]
 80033ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e5      	bne.n	80033c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e00f      	b.n	8003430 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	4013      	ands	r3, r2
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	429a      	cmp	r2, r3
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	461a      	mov	r2, r3
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	429a      	cmp	r2, r3
 800342c:	d09f      	beq.n	800336e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3740      	adds	r7, #64	; 0x40
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003438:	b480      	push	{r7}
 800343a:	b095      	sub	sp, #84	; 0x54
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	330c      	adds	r3, #12
 8003446:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344a:	e853 3f00 	ldrex	r3, [r3]
 800344e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	330c      	adds	r3, #12
 800345e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003460:	643a      	str	r2, [r7, #64]	; 0x40
 8003462:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003464:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003466:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003468:	e841 2300 	strex	r3, r2, [r1]
 800346c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e5      	bne.n	8003440 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3314      	adds	r3, #20
 800347a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	e853 3f00 	ldrex	r3, [r3]
 8003482:	61fb      	str	r3, [r7, #28]
   return(result);
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f023 0301 	bic.w	r3, r3, #1
 800348a:	64bb      	str	r3, [r7, #72]	; 0x48
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3314      	adds	r3, #20
 8003492:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003494:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800349a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800349c:	e841 2300 	strex	r3, r2, [r1]
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1e5      	bne.n	8003474 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d119      	bne.n	80034e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	e853 3f00 	ldrex	r3, [r3]
 80034be:	60bb      	str	r3, [r7, #8]
   return(result);
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f023 0310 	bic.w	r3, r3, #16
 80034c6:	647b      	str	r3, [r7, #68]	; 0x44
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	330c      	adds	r3, #12
 80034ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034d0:	61ba      	str	r2, [r7, #24]
 80034d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d4:	6979      	ldr	r1, [r7, #20]
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	e841 2300 	strex	r3, r2, [r1]
 80034dc:	613b      	str	r3, [r7, #16]
   return(result);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e5      	bne.n	80034b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80034f2:	bf00      	nop
 80034f4:	3754      	adds	r7, #84	; 0x54
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr

080034fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff ff0c 	bl	8003334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800351c:	bf00      	nop
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b21      	cmp	r3, #33	; 0x21
 8003536:	d13e      	bne.n	80035b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003540:	d114      	bne.n	800356c <UART_Transmit_IT+0x48>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d110      	bne.n	800356c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800355e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	1c9a      	adds	r2, r3, #2
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	621a      	str	r2, [r3, #32]
 800356a:	e008      	b.n	800357e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	1c59      	adds	r1, r3, #1
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6211      	str	r1, [r2, #32]
 8003576:	781a      	ldrb	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29b      	uxth	r3, r3
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	4619      	mov	r1, r3
 800358c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10f      	bne.n	80035b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e000      	b.n	80035b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035b6:	2302      	movs	r3, #2
  }
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr

080035c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff fe94 	bl	8003310 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b08c      	sub	sp, #48	; 0x30
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b22      	cmp	r3, #34	; 0x22
 8003604:	f040 80ae 	bne.w	8003764 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003610:	d117      	bne.n	8003642 <UART_Receive_IT+0x50>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d113      	bne.n	8003642 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800361a:	2300      	movs	r3, #0
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	b29b      	uxth	r3, r3
 800362c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003630:	b29a      	uxth	r2, r3
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	1c9a      	adds	r2, r3, #2
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	629a      	str	r2, [r3, #40]	; 0x28
 8003640:	e026      	b.n	8003690 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003648:	2300      	movs	r3, #0
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003654:	d007      	beq.n	8003666 <UART_Receive_IT+0x74>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <UART_Receive_IT+0x82>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	e008      	b.n	8003686 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003680:	b2da      	uxtb	r2, r3
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b29b      	uxth	r3, r3
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4619      	mov	r1, r3
 800369e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d15d      	bne.n	8003760 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0220 	bic.w	r2, r2, #32
 80036b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695a      	ldr	r2, [r3, #20]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d135      	bne.n	8003756 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	330c      	adds	r3, #12
 80036f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	e853 3f00 	ldrex	r3, [r3]
 80036fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f023 0310 	bic.w	r3, r3, #16
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	330c      	adds	r3, #12
 800370e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003710:	623a      	str	r2, [r7, #32]
 8003712:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003714:	69f9      	ldr	r1, [r7, #28]
 8003716:	6a3a      	ldr	r2, [r7, #32]
 8003718:	e841 2300 	strex	r3, r2, [r1]
 800371c:	61bb      	str	r3, [r7, #24]
   return(result);
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1e5      	bne.n	80036f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b10      	cmp	r3, #16
 8003730:	d10a      	bne.n	8003748 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800374c:	4619      	mov	r1, r3
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fdf9 	bl	8003346 <HAL_UARTEx_RxEventCallback>
 8003754:	e002      	b.n	800375c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff fde3 	bl	8003322 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	e002      	b.n	8003766 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	e000      	b.n	8003766 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003764:	2302      	movs	r3, #2
  }
}
 8003766:	4618      	mov	r0, r3
 8003768:	3730      	adds	r7, #48	; 0x30
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037aa:	f023 030c 	bic.w	r3, r3, #12
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	430b      	orrs	r3, r1
 80037b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2c      	ldr	r2, [pc, #176]	; (8003884 <UART_SetConfig+0x114>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d103      	bne.n	80037e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037d8:	f7fe fcb2 	bl	8002140 <HAL_RCC_GetPCLK2Freq>
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	e002      	b.n	80037e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037e0:	f7fe fc9a 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 80037e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	009a      	lsls	r2, r3, #2
 80037f0:	441a      	add	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	4a22      	ldr	r2, [pc, #136]	; (8003888 <UART_SetConfig+0x118>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	0119      	lsls	r1, r3, #4
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009a      	lsls	r2, r3, #2
 8003810:	441a      	add	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	fbb2 f2f3 	udiv	r2, r2, r3
 800381c:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <UART_SetConfig+0x118>)
 800381e:	fba3 0302 	umull	r0, r3, r3, r2
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	2064      	movs	r0, #100	; 0x64
 8003826:	fb00 f303 	mul.w	r3, r0, r3
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	3332      	adds	r3, #50	; 0x32
 8003830:	4a15      	ldr	r2, [pc, #84]	; (8003888 <UART_SetConfig+0x118>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800383c:	4419      	add	r1, r3
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	009a      	lsls	r2, r3, #2
 8003848:	441a      	add	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	fbb2 f2f3 	udiv	r2, r2, r3
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <UART_SetConfig+0x118>)
 8003856:	fba3 0302 	umull	r0, r3, r3, r2
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2064      	movs	r0, #100	; 0x64
 800385e:	fb00 f303 	mul.w	r3, r0, r3
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	3332      	adds	r3, #50	; 0x32
 8003868:	4a07      	ldr	r2, [pc, #28]	; (8003888 <UART_SetConfig+0x118>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	f003 020f 	and.w	r2, r3, #15
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	440a      	add	r2, r1
 800387a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40013800 	.word	0x40013800
 8003888:	51eb851f 	.word	0x51eb851f

0800388c <siprintf>:
 800388c:	b40e      	push	{r1, r2, r3}
 800388e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003892:	b500      	push	{lr}
 8003894:	b09c      	sub	sp, #112	; 0x70
 8003896:	ab1d      	add	r3, sp, #116	; 0x74
 8003898:	9002      	str	r0, [sp, #8]
 800389a:	9006      	str	r0, [sp, #24]
 800389c:	9107      	str	r1, [sp, #28]
 800389e:	9104      	str	r1, [sp, #16]
 80038a0:	4808      	ldr	r0, [pc, #32]	; (80038c4 <siprintf+0x38>)
 80038a2:	4909      	ldr	r1, [pc, #36]	; (80038c8 <siprintf+0x3c>)
 80038a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80038a8:	9105      	str	r1, [sp, #20]
 80038aa:	6800      	ldr	r0, [r0, #0]
 80038ac:	a902      	add	r1, sp, #8
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	f000 f98e 	bl	8003bd0 <_svfiprintf_r>
 80038b4:	2200      	movs	r2, #0
 80038b6:	9b02      	ldr	r3, [sp, #8]
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	b01c      	add	sp, #112	; 0x70
 80038bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80038c0:	b003      	add	sp, #12
 80038c2:	4770      	bx	lr
 80038c4:	20000058 	.word	0x20000058
 80038c8:	ffff0208 	.word	0xffff0208

080038cc <memset>:
 80038cc:	4603      	mov	r3, r0
 80038ce:	4402      	add	r2, r0
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d100      	bne.n	80038d6 <memset+0xa>
 80038d4:	4770      	bx	lr
 80038d6:	f803 1b01 	strb.w	r1, [r3], #1
 80038da:	e7f9      	b.n	80038d0 <memset+0x4>

080038dc <__errno>:
 80038dc:	4b01      	ldr	r3, [pc, #4]	; (80038e4 <__errno+0x8>)
 80038de:	6818      	ldr	r0, [r3, #0]
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	20000058 	.word	0x20000058

080038e8 <__libc_init_array>:
 80038e8:	b570      	push	{r4, r5, r6, lr}
 80038ea:	2600      	movs	r6, #0
 80038ec:	4d0c      	ldr	r5, [pc, #48]	; (8003920 <__libc_init_array+0x38>)
 80038ee:	4c0d      	ldr	r4, [pc, #52]	; (8003924 <__libc_init_array+0x3c>)
 80038f0:	1b64      	subs	r4, r4, r5
 80038f2:	10a4      	asrs	r4, r4, #2
 80038f4:	42a6      	cmp	r6, r4
 80038f6:	d109      	bne.n	800390c <__libc_init_array+0x24>
 80038f8:	f000 fc7a 	bl	80041f0 <_init>
 80038fc:	2600      	movs	r6, #0
 80038fe:	4d0a      	ldr	r5, [pc, #40]	; (8003928 <__libc_init_array+0x40>)
 8003900:	4c0a      	ldr	r4, [pc, #40]	; (800392c <__libc_init_array+0x44>)
 8003902:	1b64      	subs	r4, r4, r5
 8003904:	10a4      	asrs	r4, r4, #2
 8003906:	42a6      	cmp	r6, r4
 8003908:	d105      	bne.n	8003916 <__libc_init_array+0x2e>
 800390a:	bd70      	pop	{r4, r5, r6, pc}
 800390c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003910:	4798      	blx	r3
 8003912:	3601      	adds	r6, #1
 8003914:	e7ee      	b.n	80038f4 <__libc_init_array+0xc>
 8003916:	f855 3b04 	ldr.w	r3, [r5], #4
 800391a:	4798      	blx	r3
 800391c:	3601      	adds	r6, #1
 800391e:	e7f2      	b.n	8003906 <__libc_init_array+0x1e>
 8003920:	0800427c 	.word	0x0800427c
 8003924:	0800427c 	.word	0x0800427c
 8003928:	0800427c 	.word	0x0800427c
 800392c:	08004280 	.word	0x08004280

08003930 <__retarget_lock_acquire_recursive>:
 8003930:	4770      	bx	lr

08003932 <__retarget_lock_release_recursive>:
 8003932:	4770      	bx	lr

08003934 <_free_r>:
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	4605      	mov	r5, r0
 8003938:	2900      	cmp	r1, #0
 800393a:	d040      	beq.n	80039be <_free_r+0x8a>
 800393c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003940:	1f0c      	subs	r4, r1, #4
 8003942:	2b00      	cmp	r3, #0
 8003944:	bfb8      	it	lt
 8003946:	18e4      	addlt	r4, r4, r3
 8003948:	f000 f8dc 	bl	8003b04 <__malloc_lock>
 800394c:	4a1c      	ldr	r2, [pc, #112]	; (80039c0 <_free_r+0x8c>)
 800394e:	6813      	ldr	r3, [r2, #0]
 8003950:	b933      	cbnz	r3, 8003960 <_free_r+0x2c>
 8003952:	6063      	str	r3, [r4, #4]
 8003954:	6014      	str	r4, [r2, #0]
 8003956:	4628      	mov	r0, r5
 8003958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800395c:	f000 b8d8 	b.w	8003b10 <__malloc_unlock>
 8003960:	42a3      	cmp	r3, r4
 8003962:	d908      	bls.n	8003976 <_free_r+0x42>
 8003964:	6820      	ldr	r0, [r4, #0]
 8003966:	1821      	adds	r1, r4, r0
 8003968:	428b      	cmp	r3, r1
 800396a:	bf01      	itttt	eq
 800396c:	6819      	ldreq	r1, [r3, #0]
 800396e:	685b      	ldreq	r3, [r3, #4]
 8003970:	1809      	addeq	r1, r1, r0
 8003972:	6021      	streq	r1, [r4, #0]
 8003974:	e7ed      	b.n	8003952 <_free_r+0x1e>
 8003976:	461a      	mov	r2, r3
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	b10b      	cbz	r3, 8003980 <_free_r+0x4c>
 800397c:	42a3      	cmp	r3, r4
 800397e:	d9fa      	bls.n	8003976 <_free_r+0x42>
 8003980:	6811      	ldr	r1, [r2, #0]
 8003982:	1850      	adds	r0, r2, r1
 8003984:	42a0      	cmp	r0, r4
 8003986:	d10b      	bne.n	80039a0 <_free_r+0x6c>
 8003988:	6820      	ldr	r0, [r4, #0]
 800398a:	4401      	add	r1, r0
 800398c:	1850      	adds	r0, r2, r1
 800398e:	4283      	cmp	r3, r0
 8003990:	6011      	str	r1, [r2, #0]
 8003992:	d1e0      	bne.n	8003956 <_free_r+0x22>
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4408      	add	r0, r1
 800399a:	6010      	str	r0, [r2, #0]
 800399c:	6053      	str	r3, [r2, #4]
 800399e:	e7da      	b.n	8003956 <_free_r+0x22>
 80039a0:	d902      	bls.n	80039a8 <_free_r+0x74>
 80039a2:	230c      	movs	r3, #12
 80039a4:	602b      	str	r3, [r5, #0]
 80039a6:	e7d6      	b.n	8003956 <_free_r+0x22>
 80039a8:	6820      	ldr	r0, [r4, #0]
 80039aa:	1821      	adds	r1, r4, r0
 80039ac:	428b      	cmp	r3, r1
 80039ae:	bf01      	itttt	eq
 80039b0:	6819      	ldreq	r1, [r3, #0]
 80039b2:	685b      	ldreq	r3, [r3, #4]
 80039b4:	1809      	addeq	r1, r1, r0
 80039b6:	6021      	streq	r1, [r4, #0]
 80039b8:	6063      	str	r3, [r4, #4]
 80039ba:	6054      	str	r4, [r2, #4]
 80039bc:	e7cb      	b.n	8003956 <_free_r+0x22>
 80039be:	bd38      	pop	{r3, r4, r5, pc}
 80039c0:	200002a4 	.word	0x200002a4

080039c4 <sbrk_aligned>:
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	4e0e      	ldr	r6, [pc, #56]	; (8003a00 <sbrk_aligned+0x3c>)
 80039c8:	460c      	mov	r4, r1
 80039ca:	6831      	ldr	r1, [r6, #0]
 80039cc:	4605      	mov	r5, r0
 80039ce:	b911      	cbnz	r1, 80039d6 <sbrk_aligned+0x12>
 80039d0:	f000 fbaa 	bl	8004128 <_sbrk_r>
 80039d4:	6030      	str	r0, [r6, #0]
 80039d6:	4621      	mov	r1, r4
 80039d8:	4628      	mov	r0, r5
 80039da:	f000 fba5 	bl	8004128 <_sbrk_r>
 80039de:	1c43      	adds	r3, r0, #1
 80039e0:	d00a      	beq.n	80039f8 <sbrk_aligned+0x34>
 80039e2:	1cc4      	adds	r4, r0, #3
 80039e4:	f024 0403 	bic.w	r4, r4, #3
 80039e8:	42a0      	cmp	r0, r4
 80039ea:	d007      	beq.n	80039fc <sbrk_aligned+0x38>
 80039ec:	1a21      	subs	r1, r4, r0
 80039ee:	4628      	mov	r0, r5
 80039f0:	f000 fb9a 	bl	8004128 <_sbrk_r>
 80039f4:	3001      	adds	r0, #1
 80039f6:	d101      	bne.n	80039fc <sbrk_aligned+0x38>
 80039f8:	f04f 34ff 	mov.w	r4, #4294967295
 80039fc:	4620      	mov	r0, r4
 80039fe:	bd70      	pop	{r4, r5, r6, pc}
 8003a00:	200002a8 	.word	0x200002a8

08003a04 <_malloc_r>:
 8003a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a08:	1ccd      	adds	r5, r1, #3
 8003a0a:	f025 0503 	bic.w	r5, r5, #3
 8003a0e:	3508      	adds	r5, #8
 8003a10:	2d0c      	cmp	r5, #12
 8003a12:	bf38      	it	cc
 8003a14:	250c      	movcc	r5, #12
 8003a16:	2d00      	cmp	r5, #0
 8003a18:	4607      	mov	r7, r0
 8003a1a:	db01      	blt.n	8003a20 <_malloc_r+0x1c>
 8003a1c:	42a9      	cmp	r1, r5
 8003a1e:	d905      	bls.n	8003a2c <_malloc_r+0x28>
 8003a20:	230c      	movs	r3, #12
 8003a22:	2600      	movs	r6, #0
 8003a24:	603b      	str	r3, [r7, #0]
 8003a26:	4630      	mov	r0, r6
 8003a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b00 <_malloc_r+0xfc>
 8003a30:	f000 f868 	bl	8003b04 <__malloc_lock>
 8003a34:	f8d8 3000 	ldr.w	r3, [r8]
 8003a38:	461c      	mov	r4, r3
 8003a3a:	bb5c      	cbnz	r4, 8003a94 <_malloc_r+0x90>
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	4638      	mov	r0, r7
 8003a40:	f7ff ffc0 	bl	80039c4 <sbrk_aligned>
 8003a44:	1c43      	adds	r3, r0, #1
 8003a46:	4604      	mov	r4, r0
 8003a48:	d155      	bne.n	8003af6 <_malloc_r+0xf2>
 8003a4a:	f8d8 4000 	ldr.w	r4, [r8]
 8003a4e:	4626      	mov	r6, r4
 8003a50:	2e00      	cmp	r6, #0
 8003a52:	d145      	bne.n	8003ae0 <_malloc_r+0xdc>
 8003a54:	2c00      	cmp	r4, #0
 8003a56:	d048      	beq.n	8003aea <_malloc_r+0xe6>
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	4631      	mov	r1, r6
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	eb04 0903 	add.w	r9, r4, r3
 8003a62:	f000 fb61 	bl	8004128 <_sbrk_r>
 8003a66:	4581      	cmp	r9, r0
 8003a68:	d13f      	bne.n	8003aea <_malloc_r+0xe6>
 8003a6a:	6821      	ldr	r1, [r4, #0]
 8003a6c:	4638      	mov	r0, r7
 8003a6e:	1a6d      	subs	r5, r5, r1
 8003a70:	4629      	mov	r1, r5
 8003a72:	f7ff ffa7 	bl	80039c4 <sbrk_aligned>
 8003a76:	3001      	adds	r0, #1
 8003a78:	d037      	beq.n	8003aea <_malloc_r+0xe6>
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	442b      	add	r3, r5
 8003a7e:	6023      	str	r3, [r4, #0]
 8003a80:	f8d8 3000 	ldr.w	r3, [r8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d038      	beq.n	8003afa <_malloc_r+0xf6>
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	42a2      	cmp	r2, r4
 8003a8c:	d12b      	bne.n	8003ae6 <_malloc_r+0xe2>
 8003a8e:	2200      	movs	r2, #0
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	e00f      	b.n	8003ab4 <_malloc_r+0xb0>
 8003a94:	6822      	ldr	r2, [r4, #0]
 8003a96:	1b52      	subs	r2, r2, r5
 8003a98:	d41f      	bmi.n	8003ada <_malloc_r+0xd6>
 8003a9a:	2a0b      	cmp	r2, #11
 8003a9c:	d917      	bls.n	8003ace <_malloc_r+0xca>
 8003a9e:	1961      	adds	r1, r4, r5
 8003aa0:	42a3      	cmp	r3, r4
 8003aa2:	6025      	str	r5, [r4, #0]
 8003aa4:	bf18      	it	ne
 8003aa6:	6059      	strne	r1, [r3, #4]
 8003aa8:	6863      	ldr	r3, [r4, #4]
 8003aaa:	bf08      	it	eq
 8003aac:	f8c8 1000 	streq.w	r1, [r8]
 8003ab0:	5162      	str	r2, [r4, r5]
 8003ab2:	604b      	str	r3, [r1, #4]
 8003ab4:	4638      	mov	r0, r7
 8003ab6:	f104 060b 	add.w	r6, r4, #11
 8003aba:	f000 f829 	bl	8003b10 <__malloc_unlock>
 8003abe:	f026 0607 	bic.w	r6, r6, #7
 8003ac2:	1d23      	adds	r3, r4, #4
 8003ac4:	1af2      	subs	r2, r6, r3
 8003ac6:	d0ae      	beq.n	8003a26 <_malloc_r+0x22>
 8003ac8:	1b9b      	subs	r3, r3, r6
 8003aca:	50a3      	str	r3, [r4, r2]
 8003acc:	e7ab      	b.n	8003a26 <_malloc_r+0x22>
 8003ace:	42a3      	cmp	r3, r4
 8003ad0:	6862      	ldr	r2, [r4, #4]
 8003ad2:	d1dd      	bne.n	8003a90 <_malloc_r+0x8c>
 8003ad4:	f8c8 2000 	str.w	r2, [r8]
 8003ad8:	e7ec      	b.n	8003ab4 <_malloc_r+0xb0>
 8003ada:	4623      	mov	r3, r4
 8003adc:	6864      	ldr	r4, [r4, #4]
 8003ade:	e7ac      	b.n	8003a3a <_malloc_r+0x36>
 8003ae0:	4634      	mov	r4, r6
 8003ae2:	6876      	ldr	r6, [r6, #4]
 8003ae4:	e7b4      	b.n	8003a50 <_malloc_r+0x4c>
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	e7cc      	b.n	8003a84 <_malloc_r+0x80>
 8003aea:	230c      	movs	r3, #12
 8003aec:	4638      	mov	r0, r7
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	f000 f80e 	bl	8003b10 <__malloc_unlock>
 8003af4:	e797      	b.n	8003a26 <_malloc_r+0x22>
 8003af6:	6025      	str	r5, [r4, #0]
 8003af8:	e7dc      	b.n	8003ab4 <_malloc_r+0xb0>
 8003afa:	605b      	str	r3, [r3, #4]
 8003afc:	deff      	udf	#255	; 0xff
 8003afe:	bf00      	nop
 8003b00:	200002a4 	.word	0x200002a4

08003b04 <__malloc_lock>:
 8003b04:	4801      	ldr	r0, [pc, #4]	; (8003b0c <__malloc_lock+0x8>)
 8003b06:	f7ff bf13 	b.w	8003930 <__retarget_lock_acquire_recursive>
 8003b0a:	bf00      	nop
 8003b0c:	200002a0 	.word	0x200002a0

08003b10 <__malloc_unlock>:
 8003b10:	4801      	ldr	r0, [pc, #4]	; (8003b18 <__malloc_unlock+0x8>)
 8003b12:	f7ff bf0e 	b.w	8003932 <__retarget_lock_release_recursive>
 8003b16:	bf00      	nop
 8003b18:	200002a0 	.word	0x200002a0

08003b1c <__ssputs_r>:
 8003b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b20:	461f      	mov	r7, r3
 8003b22:	688e      	ldr	r6, [r1, #8]
 8003b24:	4682      	mov	sl, r0
 8003b26:	42be      	cmp	r6, r7
 8003b28:	460c      	mov	r4, r1
 8003b2a:	4690      	mov	r8, r2
 8003b2c:	680b      	ldr	r3, [r1, #0]
 8003b2e:	d82c      	bhi.n	8003b8a <__ssputs_r+0x6e>
 8003b30:	898a      	ldrh	r2, [r1, #12]
 8003b32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b36:	d026      	beq.n	8003b86 <__ssputs_r+0x6a>
 8003b38:	6965      	ldr	r5, [r4, #20]
 8003b3a:	6909      	ldr	r1, [r1, #16]
 8003b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b40:	eba3 0901 	sub.w	r9, r3, r1
 8003b44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b48:	1c7b      	adds	r3, r7, #1
 8003b4a:	444b      	add	r3, r9
 8003b4c:	106d      	asrs	r5, r5, #1
 8003b4e:	429d      	cmp	r5, r3
 8003b50:	bf38      	it	cc
 8003b52:	461d      	movcc	r5, r3
 8003b54:	0553      	lsls	r3, r2, #21
 8003b56:	d527      	bpl.n	8003ba8 <__ssputs_r+0x8c>
 8003b58:	4629      	mov	r1, r5
 8003b5a:	f7ff ff53 	bl	8003a04 <_malloc_r>
 8003b5e:	4606      	mov	r6, r0
 8003b60:	b360      	cbz	r0, 8003bbc <__ssputs_r+0xa0>
 8003b62:	464a      	mov	r2, r9
 8003b64:	6921      	ldr	r1, [r4, #16]
 8003b66:	f000 fafd 	bl	8004164 <memcpy>
 8003b6a:	89a3      	ldrh	r3, [r4, #12]
 8003b6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b74:	81a3      	strh	r3, [r4, #12]
 8003b76:	6126      	str	r6, [r4, #16]
 8003b78:	444e      	add	r6, r9
 8003b7a:	6026      	str	r6, [r4, #0]
 8003b7c:	463e      	mov	r6, r7
 8003b7e:	6165      	str	r5, [r4, #20]
 8003b80:	eba5 0509 	sub.w	r5, r5, r9
 8003b84:	60a5      	str	r5, [r4, #8]
 8003b86:	42be      	cmp	r6, r7
 8003b88:	d900      	bls.n	8003b8c <__ssputs_r+0x70>
 8003b8a:	463e      	mov	r6, r7
 8003b8c:	4632      	mov	r2, r6
 8003b8e:	4641      	mov	r1, r8
 8003b90:	6820      	ldr	r0, [r4, #0]
 8003b92:	f000 faaf 	bl	80040f4 <memmove>
 8003b96:	2000      	movs	r0, #0
 8003b98:	68a3      	ldr	r3, [r4, #8]
 8003b9a:	1b9b      	subs	r3, r3, r6
 8003b9c:	60a3      	str	r3, [r4, #8]
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	4433      	add	r3, r6
 8003ba2:	6023      	str	r3, [r4, #0]
 8003ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba8:	462a      	mov	r2, r5
 8003baa:	f000 fae9 	bl	8004180 <_realloc_r>
 8003bae:	4606      	mov	r6, r0
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	d1e0      	bne.n	8003b76 <__ssputs_r+0x5a>
 8003bb4:	4650      	mov	r0, sl
 8003bb6:	6921      	ldr	r1, [r4, #16]
 8003bb8:	f7ff febc 	bl	8003934 <_free_r>
 8003bbc:	230c      	movs	r3, #12
 8003bbe:	f8ca 3000 	str.w	r3, [sl]
 8003bc2:	89a3      	ldrh	r3, [r4, #12]
 8003bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bcc:	81a3      	strh	r3, [r4, #12]
 8003bce:	e7e9      	b.n	8003ba4 <__ssputs_r+0x88>

08003bd0 <_svfiprintf_r>:
 8003bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd4:	4698      	mov	r8, r3
 8003bd6:	898b      	ldrh	r3, [r1, #12]
 8003bd8:	4607      	mov	r7, r0
 8003bda:	061b      	lsls	r3, r3, #24
 8003bdc:	460d      	mov	r5, r1
 8003bde:	4614      	mov	r4, r2
 8003be0:	b09d      	sub	sp, #116	; 0x74
 8003be2:	d50e      	bpl.n	8003c02 <_svfiprintf_r+0x32>
 8003be4:	690b      	ldr	r3, [r1, #16]
 8003be6:	b963      	cbnz	r3, 8003c02 <_svfiprintf_r+0x32>
 8003be8:	2140      	movs	r1, #64	; 0x40
 8003bea:	f7ff ff0b 	bl	8003a04 <_malloc_r>
 8003bee:	6028      	str	r0, [r5, #0]
 8003bf0:	6128      	str	r0, [r5, #16]
 8003bf2:	b920      	cbnz	r0, 8003bfe <_svfiprintf_r+0x2e>
 8003bf4:	230c      	movs	r3, #12
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bfc:	e0d0      	b.n	8003da0 <_svfiprintf_r+0x1d0>
 8003bfe:	2340      	movs	r3, #64	; 0x40
 8003c00:	616b      	str	r3, [r5, #20]
 8003c02:	2300      	movs	r3, #0
 8003c04:	9309      	str	r3, [sp, #36]	; 0x24
 8003c06:	2320      	movs	r3, #32
 8003c08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c0c:	2330      	movs	r3, #48	; 0x30
 8003c0e:	f04f 0901 	mov.w	r9, #1
 8003c12:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c16:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003db8 <_svfiprintf_r+0x1e8>
 8003c1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c1e:	4623      	mov	r3, r4
 8003c20:	469a      	mov	sl, r3
 8003c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c26:	b10a      	cbz	r2, 8003c2c <_svfiprintf_r+0x5c>
 8003c28:	2a25      	cmp	r2, #37	; 0x25
 8003c2a:	d1f9      	bne.n	8003c20 <_svfiprintf_r+0x50>
 8003c2c:	ebba 0b04 	subs.w	fp, sl, r4
 8003c30:	d00b      	beq.n	8003c4a <_svfiprintf_r+0x7a>
 8003c32:	465b      	mov	r3, fp
 8003c34:	4622      	mov	r2, r4
 8003c36:	4629      	mov	r1, r5
 8003c38:	4638      	mov	r0, r7
 8003c3a:	f7ff ff6f 	bl	8003b1c <__ssputs_r>
 8003c3e:	3001      	adds	r0, #1
 8003c40:	f000 80a9 	beq.w	8003d96 <_svfiprintf_r+0x1c6>
 8003c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c46:	445a      	add	r2, fp
 8003c48:	9209      	str	r2, [sp, #36]	; 0x24
 8003c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 80a1 	beq.w	8003d96 <_svfiprintf_r+0x1c6>
 8003c54:	2300      	movs	r3, #0
 8003c56:	f04f 32ff 	mov.w	r2, #4294967295
 8003c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c5e:	f10a 0a01 	add.w	sl, sl, #1
 8003c62:	9304      	str	r3, [sp, #16]
 8003c64:	9307      	str	r3, [sp, #28]
 8003c66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c6a:	931a      	str	r3, [sp, #104]	; 0x68
 8003c6c:	4654      	mov	r4, sl
 8003c6e:	2205      	movs	r2, #5
 8003c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c74:	4850      	ldr	r0, [pc, #320]	; (8003db8 <_svfiprintf_r+0x1e8>)
 8003c76:	f000 fa67 	bl	8004148 <memchr>
 8003c7a:	9a04      	ldr	r2, [sp, #16]
 8003c7c:	b9d8      	cbnz	r0, 8003cb6 <_svfiprintf_r+0xe6>
 8003c7e:	06d0      	lsls	r0, r2, #27
 8003c80:	bf44      	itt	mi
 8003c82:	2320      	movmi	r3, #32
 8003c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c88:	0711      	lsls	r1, r2, #28
 8003c8a:	bf44      	itt	mi
 8003c8c:	232b      	movmi	r3, #43	; 0x2b
 8003c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c92:	f89a 3000 	ldrb.w	r3, [sl]
 8003c96:	2b2a      	cmp	r3, #42	; 0x2a
 8003c98:	d015      	beq.n	8003cc6 <_svfiprintf_r+0xf6>
 8003c9a:	4654      	mov	r4, sl
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	f04f 0c0a 	mov.w	ip, #10
 8003ca2:	9a07      	ldr	r2, [sp, #28]
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003caa:	3b30      	subs	r3, #48	; 0x30
 8003cac:	2b09      	cmp	r3, #9
 8003cae:	d94d      	bls.n	8003d4c <_svfiprintf_r+0x17c>
 8003cb0:	b1b0      	cbz	r0, 8003ce0 <_svfiprintf_r+0x110>
 8003cb2:	9207      	str	r2, [sp, #28]
 8003cb4:	e014      	b.n	8003ce0 <_svfiprintf_r+0x110>
 8003cb6:	eba0 0308 	sub.w	r3, r0, r8
 8003cba:	fa09 f303 	lsl.w	r3, r9, r3
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	46a2      	mov	sl, r4
 8003cc2:	9304      	str	r3, [sp, #16]
 8003cc4:	e7d2      	b.n	8003c6c <_svfiprintf_r+0x9c>
 8003cc6:	9b03      	ldr	r3, [sp, #12]
 8003cc8:	1d19      	adds	r1, r3, #4
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	9103      	str	r1, [sp, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bfbb      	ittet	lt
 8003cd2:	425b      	neglt	r3, r3
 8003cd4:	f042 0202 	orrlt.w	r2, r2, #2
 8003cd8:	9307      	strge	r3, [sp, #28]
 8003cda:	9307      	strlt	r3, [sp, #28]
 8003cdc:	bfb8      	it	lt
 8003cde:	9204      	strlt	r2, [sp, #16]
 8003ce0:	7823      	ldrb	r3, [r4, #0]
 8003ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ce4:	d10c      	bne.n	8003d00 <_svfiprintf_r+0x130>
 8003ce6:	7863      	ldrb	r3, [r4, #1]
 8003ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8003cea:	d134      	bne.n	8003d56 <_svfiprintf_r+0x186>
 8003cec:	9b03      	ldr	r3, [sp, #12]
 8003cee:	3402      	adds	r4, #2
 8003cf0:	1d1a      	adds	r2, r3, #4
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	9203      	str	r2, [sp, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	bfb8      	it	lt
 8003cfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cfe:	9305      	str	r3, [sp, #20]
 8003d00:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003dbc <_svfiprintf_r+0x1ec>
 8003d04:	2203      	movs	r2, #3
 8003d06:	4650      	mov	r0, sl
 8003d08:	7821      	ldrb	r1, [r4, #0]
 8003d0a:	f000 fa1d 	bl	8004148 <memchr>
 8003d0e:	b138      	cbz	r0, 8003d20 <_svfiprintf_r+0x150>
 8003d10:	2240      	movs	r2, #64	; 0x40
 8003d12:	9b04      	ldr	r3, [sp, #16]
 8003d14:	eba0 000a 	sub.w	r0, r0, sl
 8003d18:	4082      	lsls	r2, r0
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	3401      	adds	r4, #1
 8003d1e:	9304      	str	r3, [sp, #16]
 8003d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d24:	2206      	movs	r2, #6
 8003d26:	4826      	ldr	r0, [pc, #152]	; (8003dc0 <_svfiprintf_r+0x1f0>)
 8003d28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d2c:	f000 fa0c 	bl	8004148 <memchr>
 8003d30:	2800      	cmp	r0, #0
 8003d32:	d038      	beq.n	8003da6 <_svfiprintf_r+0x1d6>
 8003d34:	4b23      	ldr	r3, [pc, #140]	; (8003dc4 <_svfiprintf_r+0x1f4>)
 8003d36:	bb1b      	cbnz	r3, 8003d80 <_svfiprintf_r+0x1b0>
 8003d38:	9b03      	ldr	r3, [sp, #12]
 8003d3a:	3307      	adds	r3, #7
 8003d3c:	f023 0307 	bic.w	r3, r3, #7
 8003d40:	3308      	adds	r3, #8
 8003d42:	9303      	str	r3, [sp, #12]
 8003d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d46:	4433      	add	r3, r6
 8003d48:	9309      	str	r3, [sp, #36]	; 0x24
 8003d4a:	e768      	b.n	8003c1e <_svfiprintf_r+0x4e>
 8003d4c:	460c      	mov	r4, r1
 8003d4e:	2001      	movs	r0, #1
 8003d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d54:	e7a6      	b.n	8003ca4 <_svfiprintf_r+0xd4>
 8003d56:	2300      	movs	r3, #0
 8003d58:	f04f 0c0a 	mov.w	ip, #10
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	3401      	adds	r4, #1
 8003d60:	9305      	str	r3, [sp, #20]
 8003d62:	4620      	mov	r0, r4
 8003d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d68:	3a30      	subs	r2, #48	; 0x30
 8003d6a:	2a09      	cmp	r2, #9
 8003d6c:	d903      	bls.n	8003d76 <_svfiprintf_r+0x1a6>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0c6      	beq.n	8003d00 <_svfiprintf_r+0x130>
 8003d72:	9105      	str	r1, [sp, #20]
 8003d74:	e7c4      	b.n	8003d00 <_svfiprintf_r+0x130>
 8003d76:	4604      	mov	r4, r0
 8003d78:	2301      	movs	r3, #1
 8003d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d7e:	e7f0      	b.n	8003d62 <_svfiprintf_r+0x192>
 8003d80:	ab03      	add	r3, sp, #12
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	462a      	mov	r2, r5
 8003d86:	4638      	mov	r0, r7
 8003d88:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <_svfiprintf_r+0x1f8>)
 8003d8a:	a904      	add	r1, sp, #16
 8003d8c:	f3af 8000 	nop.w
 8003d90:	1c42      	adds	r2, r0, #1
 8003d92:	4606      	mov	r6, r0
 8003d94:	d1d6      	bne.n	8003d44 <_svfiprintf_r+0x174>
 8003d96:	89ab      	ldrh	r3, [r5, #12]
 8003d98:	065b      	lsls	r3, r3, #25
 8003d9a:	f53f af2d 	bmi.w	8003bf8 <_svfiprintf_r+0x28>
 8003d9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003da0:	b01d      	add	sp, #116	; 0x74
 8003da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da6:	ab03      	add	r3, sp, #12
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	462a      	mov	r2, r5
 8003dac:	4638      	mov	r0, r7
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <_svfiprintf_r+0x1f8>)
 8003db0:	a904      	add	r1, sp, #16
 8003db2:	f000 f87d 	bl	8003eb0 <_printf_i>
 8003db6:	e7eb      	b.n	8003d90 <_svfiprintf_r+0x1c0>
 8003db8:	08004246 	.word	0x08004246
 8003dbc:	0800424c 	.word	0x0800424c
 8003dc0:	08004250 	.word	0x08004250
 8003dc4:	00000000 	.word	0x00000000
 8003dc8:	08003b1d 	.word	0x08003b1d

08003dcc <_printf_common>:
 8003dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd0:	4616      	mov	r6, r2
 8003dd2:	4699      	mov	r9, r3
 8003dd4:	688a      	ldr	r2, [r1, #8]
 8003dd6:	690b      	ldr	r3, [r1, #16]
 8003dd8:	4607      	mov	r7, r0
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	bfb8      	it	lt
 8003dde:	4613      	movlt	r3, r2
 8003de0:	6033      	str	r3, [r6, #0]
 8003de2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003de6:	460c      	mov	r4, r1
 8003de8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dec:	b10a      	cbz	r2, 8003df2 <_printf_common+0x26>
 8003dee:	3301      	adds	r3, #1
 8003df0:	6033      	str	r3, [r6, #0]
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	0699      	lsls	r1, r3, #26
 8003df6:	bf42      	ittt	mi
 8003df8:	6833      	ldrmi	r3, [r6, #0]
 8003dfa:	3302      	addmi	r3, #2
 8003dfc:	6033      	strmi	r3, [r6, #0]
 8003dfe:	6825      	ldr	r5, [r4, #0]
 8003e00:	f015 0506 	ands.w	r5, r5, #6
 8003e04:	d106      	bne.n	8003e14 <_printf_common+0x48>
 8003e06:	f104 0a19 	add.w	sl, r4, #25
 8003e0a:	68e3      	ldr	r3, [r4, #12]
 8003e0c:	6832      	ldr	r2, [r6, #0]
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	42ab      	cmp	r3, r5
 8003e12:	dc2b      	bgt.n	8003e6c <_printf_common+0xa0>
 8003e14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e18:	1e13      	subs	r3, r2, #0
 8003e1a:	6822      	ldr	r2, [r4, #0]
 8003e1c:	bf18      	it	ne
 8003e1e:	2301      	movne	r3, #1
 8003e20:	0692      	lsls	r2, r2, #26
 8003e22:	d430      	bmi.n	8003e86 <_printf_common+0xba>
 8003e24:	4649      	mov	r1, r9
 8003e26:	4638      	mov	r0, r7
 8003e28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e2c:	47c0      	blx	r8
 8003e2e:	3001      	adds	r0, #1
 8003e30:	d023      	beq.n	8003e7a <_printf_common+0xae>
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	6922      	ldr	r2, [r4, #16]
 8003e36:	f003 0306 	and.w	r3, r3, #6
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	bf14      	ite	ne
 8003e3e:	2500      	movne	r5, #0
 8003e40:	6833      	ldreq	r3, [r6, #0]
 8003e42:	f04f 0600 	mov.w	r6, #0
 8003e46:	bf08      	it	eq
 8003e48:	68e5      	ldreq	r5, [r4, #12]
 8003e4a:	f104 041a 	add.w	r4, r4, #26
 8003e4e:	bf08      	it	eq
 8003e50:	1aed      	subeq	r5, r5, r3
 8003e52:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e56:	bf08      	it	eq
 8003e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	bfc4      	itt	gt
 8003e60:	1a9b      	subgt	r3, r3, r2
 8003e62:	18ed      	addgt	r5, r5, r3
 8003e64:	42b5      	cmp	r5, r6
 8003e66:	d11a      	bne.n	8003e9e <_printf_common+0xd2>
 8003e68:	2000      	movs	r0, #0
 8003e6a:	e008      	b.n	8003e7e <_printf_common+0xb2>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	4652      	mov	r2, sl
 8003e70:	4649      	mov	r1, r9
 8003e72:	4638      	mov	r0, r7
 8003e74:	47c0      	blx	r8
 8003e76:	3001      	adds	r0, #1
 8003e78:	d103      	bne.n	8003e82 <_printf_common+0xb6>
 8003e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e82:	3501      	adds	r5, #1
 8003e84:	e7c1      	b.n	8003e0a <_printf_common+0x3e>
 8003e86:	2030      	movs	r0, #48	; 0x30
 8003e88:	18e1      	adds	r1, r4, r3
 8003e8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e94:	4422      	add	r2, r4
 8003e96:	3302      	adds	r3, #2
 8003e98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e9c:	e7c2      	b.n	8003e24 <_printf_common+0x58>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	4622      	mov	r2, r4
 8003ea2:	4649      	mov	r1, r9
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	47c0      	blx	r8
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	d0e6      	beq.n	8003e7a <_printf_common+0xae>
 8003eac:	3601      	adds	r6, #1
 8003eae:	e7d9      	b.n	8003e64 <_printf_common+0x98>

08003eb0 <_printf_i>:
 8003eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb4:	7e0f      	ldrb	r7, [r1, #24]
 8003eb6:	4691      	mov	r9, r2
 8003eb8:	2f78      	cmp	r7, #120	; 0x78
 8003eba:	4680      	mov	r8, r0
 8003ebc:	460c      	mov	r4, r1
 8003ebe:	469a      	mov	sl, r3
 8003ec0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ec2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ec6:	d807      	bhi.n	8003ed8 <_printf_i+0x28>
 8003ec8:	2f62      	cmp	r7, #98	; 0x62
 8003eca:	d80a      	bhi.n	8003ee2 <_printf_i+0x32>
 8003ecc:	2f00      	cmp	r7, #0
 8003ece:	f000 80d5 	beq.w	800407c <_printf_i+0x1cc>
 8003ed2:	2f58      	cmp	r7, #88	; 0x58
 8003ed4:	f000 80c1 	beq.w	800405a <_printf_i+0x1aa>
 8003ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003edc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ee0:	e03a      	b.n	8003f58 <_printf_i+0xa8>
 8003ee2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ee6:	2b15      	cmp	r3, #21
 8003ee8:	d8f6      	bhi.n	8003ed8 <_printf_i+0x28>
 8003eea:	a101      	add	r1, pc, #4	; (adr r1, 8003ef0 <_printf_i+0x40>)
 8003eec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ef0:	08003f49 	.word	0x08003f49
 8003ef4:	08003f5d 	.word	0x08003f5d
 8003ef8:	08003ed9 	.word	0x08003ed9
 8003efc:	08003ed9 	.word	0x08003ed9
 8003f00:	08003ed9 	.word	0x08003ed9
 8003f04:	08003ed9 	.word	0x08003ed9
 8003f08:	08003f5d 	.word	0x08003f5d
 8003f0c:	08003ed9 	.word	0x08003ed9
 8003f10:	08003ed9 	.word	0x08003ed9
 8003f14:	08003ed9 	.word	0x08003ed9
 8003f18:	08003ed9 	.word	0x08003ed9
 8003f1c:	08004063 	.word	0x08004063
 8003f20:	08003f89 	.word	0x08003f89
 8003f24:	0800401d 	.word	0x0800401d
 8003f28:	08003ed9 	.word	0x08003ed9
 8003f2c:	08003ed9 	.word	0x08003ed9
 8003f30:	08004085 	.word	0x08004085
 8003f34:	08003ed9 	.word	0x08003ed9
 8003f38:	08003f89 	.word	0x08003f89
 8003f3c:	08003ed9 	.word	0x08003ed9
 8003f40:	08003ed9 	.word	0x08003ed9
 8003f44:	08004025 	.word	0x08004025
 8003f48:	682b      	ldr	r3, [r5, #0]
 8003f4a:	1d1a      	adds	r2, r3, #4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	602a      	str	r2, [r5, #0]
 8003f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0a0      	b.n	800409e <_printf_i+0x1ee>
 8003f5c:	6820      	ldr	r0, [r4, #0]
 8003f5e:	682b      	ldr	r3, [r5, #0]
 8003f60:	0607      	lsls	r7, r0, #24
 8003f62:	f103 0104 	add.w	r1, r3, #4
 8003f66:	6029      	str	r1, [r5, #0]
 8003f68:	d501      	bpl.n	8003f6e <_printf_i+0xbe>
 8003f6a:	681e      	ldr	r6, [r3, #0]
 8003f6c:	e003      	b.n	8003f76 <_printf_i+0xc6>
 8003f6e:	0646      	lsls	r6, r0, #25
 8003f70:	d5fb      	bpl.n	8003f6a <_printf_i+0xba>
 8003f72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003f76:	2e00      	cmp	r6, #0
 8003f78:	da03      	bge.n	8003f82 <_printf_i+0xd2>
 8003f7a:	232d      	movs	r3, #45	; 0x2d
 8003f7c:	4276      	negs	r6, r6
 8003f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f82:	230a      	movs	r3, #10
 8003f84:	4859      	ldr	r0, [pc, #356]	; (80040ec <_printf_i+0x23c>)
 8003f86:	e012      	b.n	8003fae <_printf_i+0xfe>
 8003f88:	682b      	ldr	r3, [r5, #0]
 8003f8a:	6820      	ldr	r0, [r4, #0]
 8003f8c:	1d19      	adds	r1, r3, #4
 8003f8e:	6029      	str	r1, [r5, #0]
 8003f90:	0605      	lsls	r5, r0, #24
 8003f92:	d501      	bpl.n	8003f98 <_printf_i+0xe8>
 8003f94:	681e      	ldr	r6, [r3, #0]
 8003f96:	e002      	b.n	8003f9e <_printf_i+0xee>
 8003f98:	0641      	lsls	r1, r0, #25
 8003f9a:	d5fb      	bpl.n	8003f94 <_printf_i+0xe4>
 8003f9c:	881e      	ldrh	r6, [r3, #0]
 8003f9e:	2f6f      	cmp	r7, #111	; 0x6f
 8003fa0:	bf0c      	ite	eq
 8003fa2:	2308      	moveq	r3, #8
 8003fa4:	230a      	movne	r3, #10
 8003fa6:	4851      	ldr	r0, [pc, #324]	; (80040ec <_printf_i+0x23c>)
 8003fa8:	2100      	movs	r1, #0
 8003faa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fae:	6865      	ldr	r5, [r4, #4]
 8003fb0:	2d00      	cmp	r5, #0
 8003fb2:	bfa8      	it	ge
 8003fb4:	6821      	ldrge	r1, [r4, #0]
 8003fb6:	60a5      	str	r5, [r4, #8]
 8003fb8:	bfa4      	itt	ge
 8003fba:	f021 0104 	bicge.w	r1, r1, #4
 8003fbe:	6021      	strge	r1, [r4, #0]
 8003fc0:	b90e      	cbnz	r6, 8003fc6 <_printf_i+0x116>
 8003fc2:	2d00      	cmp	r5, #0
 8003fc4:	d04b      	beq.n	800405e <_printf_i+0x1ae>
 8003fc6:	4615      	mov	r5, r2
 8003fc8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003fcc:	fb03 6711 	mls	r7, r3, r1, r6
 8003fd0:	5dc7      	ldrb	r7, [r0, r7]
 8003fd2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003fd6:	4637      	mov	r7, r6
 8003fd8:	42bb      	cmp	r3, r7
 8003fda:	460e      	mov	r6, r1
 8003fdc:	d9f4      	bls.n	8003fc8 <_printf_i+0x118>
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d10b      	bne.n	8003ffa <_printf_i+0x14a>
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	07de      	lsls	r6, r3, #31
 8003fe6:	d508      	bpl.n	8003ffa <_printf_i+0x14a>
 8003fe8:	6923      	ldr	r3, [r4, #16]
 8003fea:	6861      	ldr	r1, [r4, #4]
 8003fec:	4299      	cmp	r1, r3
 8003fee:	bfde      	ittt	le
 8003ff0:	2330      	movle	r3, #48	; 0x30
 8003ff2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ff6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ffa:	1b52      	subs	r2, r2, r5
 8003ffc:	6122      	str	r2, [r4, #16]
 8003ffe:	464b      	mov	r3, r9
 8004000:	4621      	mov	r1, r4
 8004002:	4640      	mov	r0, r8
 8004004:	f8cd a000 	str.w	sl, [sp]
 8004008:	aa03      	add	r2, sp, #12
 800400a:	f7ff fedf 	bl	8003dcc <_printf_common>
 800400e:	3001      	adds	r0, #1
 8004010:	d14a      	bne.n	80040a8 <_printf_i+0x1f8>
 8004012:	f04f 30ff 	mov.w	r0, #4294967295
 8004016:	b004      	add	sp, #16
 8004018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	f043 0320 	orr.w	r3, r3, #32
 8004022:	6023      	str	r3, [r4, #0]
 8004024:	2778      	movs	r7, #120	; 0x78
 8004026:	4832      	ldr	r0, [pc, #200]	; (80040f0 <_printf_i+0x240>)
 8004028:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	6829      	ldr	r1, [r5, #0]
 8004030:	061f      	lsls	r7, r3, #24
 8004032:	f851 6b04 	ldr.w	r6, [r1], #4
 8004036:	d402      	bmi.n	800403e <_printf_i+0x18e>
 8004038:	065f      	lsls	r7, r3, #25
 800403a:	bf48      	it	mi
 800403c:	b2b6      	uxthmi	r6, r6
 800403e:	07df      	lsls	r7, r3, #31
 8004040:	bf48      	it	mi
 8004042:	f043 0320 	orrmi.w	r3, r3, #32
 8004046:	6029      	str	r1, [r5, #0]
 8004048:	bf48      	it	mi
 800404a:	6023      	strmi	r3, [r4, #0]
 800404c:	b91e      	cbnz	r6, 8004056 <_printf_i+0x1a6>
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	f023 0320 	bic.w	r3, r3, #32
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	2310      	movs	r3, #16
 8004058:	e7a6      	b.n	8003fa8 <_printf_i+0xf8>
 800405a:	4824      	ldr	r0, [pc, #144]	; (80040ec <_printf_i+0x23c>)
 800405c:	e7e4      	b.n	8004028 <_printf_i+0x178>
 800405e:	4615      	mov	r5, r2
 8004060:	e7bd      	b.n	8003fde <_printf_i+0x12e>
 8004062:	682b      	ldr	r3, [r5, #0]
 8004064:	6826      	ldr	r6, [r4, #0]
 8004066:	1d18      	adds	r0, r3, #4
 8004068:	6961      	ldr	r1, [r4, #20]
 800406a:	6028      	str	r0, [r5, #0]
 800406c:	0635      	lsls	r5, r6, #24
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	d501      	bpl.n	8004076 <_printf_i+0x1c6>
 8004072:	6019      	str	r1, [r3, #0]
 8004074:	e002      	b.n	800407c <_printf_i+0x1cc>
 8004076:	0670      	lsls	r0, r6, #25
 8004078:	d5fb      	bpl.n	8004072 <_printf_i+0x1c2>
 800407a:	8019      	strh	r1, [r3, #0]
 800407c:	2300      	movs	r3, #0
 800407e:	4615      	mov	r5, r2
 8004080:	6123      	str	r3, [r4, #16]
 8004082:	e7bc      	b.n	8003ffe <_printf_i+0x14e>
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	2100      	movs	r1, #0
 8004088:	1d1a      	adds	r2, r3, #4
 800408a:	602a      	str	r2, [r5, #0]
 800408c:	681d      	ldr	r5, [r3, #0]
 800408e:	6862      	ldr	r2, [r4, #4]
 8004090:	4628      	mov	r0, r5
 8004092:	f000 f859 	bl	8004148 <memchr>
 8004096:	b108      	cbz	r0, 800409c <_printf_i+0x1ec>
 8004098:	1b40      	subs	r0, r0, r5
 800409a:	6060      	str	r0, [r4, #4]
 800409c:	6863      	ldr	r3, [r4, #4]
 800409e:	6123      	str	r3, [r4, #16]
 80040a0:	2300      	movs	r3, #0
 80040a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040a6:	e7aa      	b.n	8003ffe <_printf_i+0x14e>
 80040a8:	462a      	mov	r2, r5
 80040aa:	4649      	mov	r1, r9
 80040ac:	4640      	mov	r0, r8
 80040ae:	6923      	ldr	r3, [r4, #16]
 80040b0:	47d0      	blx	sl
 80040b2:	3001      	adds	r0, #1
 80040b4:	d0ad      	beq.n	8004012 <_printf_i+0x162>
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	079b      	lsls	r3, r3, #30
 80040ba:	d413      	bmi.n	80040e4 <_printf_i+0x234>
 80040bc:	68e0      	ldr	r0, [r4, #12]
 80040be:	9b03      	ldr	r3, [sp, #12]
 80040c0:	4298      	cmp	r0, r3
 80040c2:	bfb8      	it	lt
 80040c4:	4618      	movlt	r0, r3
 80040c6:	e7a6      	b.n	8004016 <_printf_i+0x166>
 80040c8:	2301      	movs	r3, #1
 80040ca:	4632      	mov	r2, r6
 80040cc:	4649      	mov	r1, r9
 80040ce:	4640      	mov	r0, r8
 80040d0:	47d0      	blx	sl
 80040d2:	3001      	adds	r0, #1
 80040d4:	d09d      	beq.n	8004012 <_printf_i+0x162>
 80040d6:	3501      	adds	r5, #1
 80040d8:	68e3      	ldr	r3, [r4, #12]
 80040da:	9903      	ldr	r1, [sp, #12]
 80040dc:	1a5b      	subs	r3, r3, r1
 80040de:	42ab      	cmp	r3, r5
 80040e0:	dcf2      	bgt.n	80040c8 <_printf_i+0x218>
 80040e2:	e7eb      	b.n	80040bc <_printf_i+0x20c>
 80040e4:	2500      	movs	r5, #0
 80040e6:	f104 0619 	add.w	r6, r4, #25
 80040ea:	e7f5      	b.n	80040d8 <_printf_i+0x228>
 80040ec:	08004257 	.word	0x08004257
 80040f0:	08004268 	.word	0x08004268

080040f4 <memmove>:
 80040f4:	4288      	cmp	r0, r1
 80040f6:	b510      	push	{r4, lr}
 80040f8:	eb01 0402 	add.w	r4, r1, r2
 80040fc:	d902      	bls.n	8004104 <memmove+0x10>
 80040fe:	4284      	cmp	r4, r0
 8004100:	4623      	mov	r3, r4
 8004102:	d807      	bhi.n	8004114 <memmove+0x20>
 8004104:	1e43      	subs	r3, r0, #1
 8004106:	42a1      	cmp	r1, r4
 8004108:	d008      	beq.n	800411c <memmove+0x28>
 800410a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800410e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004112:	e7f8      	b.n	8004106 <memmove+0x12>
 8004114:	4601      	mov	r1, r0
 8004116:	4402      	add	r2, r0
 8004118:	428a      	cmp	r2, r1
 800411a:	d100      	bne.n	800411e <memmove+0x2a>
 800411c:	bd10      	pop	{r4, pc}
 800411e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004126:	e7f7      	b.n	8004118 <memmove+0x24>

08004128 <_sbrk_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	2300      	movs	r3, #0
 800412c:	4d05      	ldr	r5, [pc, #20]	; (8004144 <_sbrk_r+0x1c>)
 800412e:	4604      	mov	r4, r0
 8004130:	4608      	mov	r0, r1
 8004132:	602b      	str	r3, [r5, #0]
 8004134:	f7fc fe88 	bl	8000e48 <_sbrk>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_sbrk_r+0x1a>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	b103      	cbz	r3, 8004142 <_sbrk_r+0x1a>
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	2000029c 	.word	0x2000029c

08004148 <memchr>:
 8004148:	4603      	mov	r3, r0
 800414a:	b510      	push	{r4, lr}
 800414c:	b2c9      	uxtb	r1, r1
 800414e:	4402      	add	r2, r0
 8004150:	4293      	cmp	r3, r2
 8004152:	4618      	mov	r0, r3
 8004154:	d101      	bne.n	800415a <memchr+0x12>
 8004156:	2000      	movs	r0, #0
 8004158:	e003      	b.n	8004162 <memchr+0x1a>
 800415a:	7804      	ldrb	r4, [r0, #0]
 800415c:	3301      	adds	r3, #1
 800415e:	428c      	cmp	r4, r1
 8004160:	d1f6      	bne.n	8004150 <memchr+0x8>
 8004162:	bd10      	pop	{r4, pc}

08004164 <memcpy>:
 8004164:	440a      	add	r2, r1
 8004166:	4291      	cmp	r1, r2
 8004168:	f100 33ff 	add.w	r3, r0, #4294967295
 800416c:	d100      	bne.n	8004170 <memcpy+0xc>
 800416e:	4770      	bx	lr
 8004170:	b510      	push	{r4, lr}
 8004172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004176:	4291      	cmp	r1, r2
 8004178:	f803 4f01 	strb.w	r4, [r3, #1]!
 800417c:	d1f9      	bne.n	8004172 <memcpy+0xe>
 800417e:	bd10      	pop	{r4, pc}

08004180 <_realloc_r>:
 8004180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004184:	4680      	mov	r8, r0
 8004186:	4614      	mov	r4, r2
 8004188:	460e      	mov	r6, r1
 800418a:	b921      	cbnz	r1, 8004196 <_realloc_r+0x16>
 800418c:	4611      	mov	r1, r2
 800418e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004192:	f7ff bc37 	b.w	8003a04 <_malloc_r>
 8004196:	b92a      	cbnz	r2, 80041a4 <_realloc_r+0x24>
 8004198:	f7ff fbcc 	bl	8003934 <_free_r>
 800419c:	4625      	mov	r5, r4
 800419e:	4628      	mov	r0, r5
 80041a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041a4:	f000 f81b 	bl	80041de <_malloc_usable_size_r>
 80041a8:	4284      	cmp	r4, r0
 80041aa:	4607      	mov	r7, r0
 80041ac:	d802      	bhi.n	80041b4 <_realloc_r+0x34>
 80041ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041b2:	d812      	bhi.n	80041da <_realloc_r+0x5a>
 80041b4:	4621      	mov	r1, r4
 80041b6:	4640      	mov	r0, r8
 80041b8:	f7ff fc24 	bl	8003a04 <_malloc_r>
 80041bc:	4605      	mov	r5, r0
 80041be:	2800      	cmp	r0, #0
 80041c0:	d0ed      	beq.n	800419e <_realloc_r+0x1e>
 80041c2:	42bc      	cmp	r4, r7
 80041c4:	4622      	mov	r2, r4
 80041c6:	4631      	mov	r1, r6
 80041c8:	bf28      	it	cs
 80041ca:	463a      	movcs	r2, r7
 80041cc:	f7ff ffca 	bl	8004164 <memcpy>
 80041d0:	4631      	mov	r1, r6
 80041d2:	4640      	mov	r0, r8
 80041d4:	f7ff fbae 	bl	8003934 <_free_r>
 80041d8:	e7e1      	b.n	800419e <_realloc_r+0x1e>
 80041da:	4635      	mov	r5, r6
 80041dc:	e7df      	b.n	800419e <_realloc_r+0x1e>

080041de <_malloc_usable_size_r>:
 80041de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041e2:	1f18      	subs	r0, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bfbc      	itt	lt
 80041e8:	580b      	ldrlt	r3, [r1, r0]
 80041ea:	18c0      	addlt	r0, r0, r3
 80041ec:	4770      	bx	lr
	...

080041f0 <_init>:
 80041f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f2:	bf00      	nop
 80041f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041f6:	bc08      	pop	{r3}
 80041f8:	469e      	mov	lr, r3
 80041fa:	4770      	bx	lr

080041fc <_fini>:
 80041fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fe:	bf00      	nop
 8004200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004202:	bc08      	pop	{r3}
 8004204:	469e      	mov	lr, r3
 8004206:	4770      	bx	lr
