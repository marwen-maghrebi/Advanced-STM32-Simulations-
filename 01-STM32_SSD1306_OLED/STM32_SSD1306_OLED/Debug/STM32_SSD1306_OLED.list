
STM32_SSD1306_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003010  080036c0  080036c0  000136c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d0  080066d0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080066d0  080066d0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066d0  080066d0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066d0  080066d0  000166d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066d4  080066d4  000166d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080066d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  20000064  0800673c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  0800673c  00020630  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000646e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001830  00000000  00000000  0002653e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  00027d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000575  00000000  00000000  000284d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ec8  00000000  00000000  00028a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000090a7  00000000  00000000  0003f915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f8fa  00000000  00000000  000489bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002144  00000000  00000000  000c82b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000ca3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080036a8 	.word	0x080036a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080036a8 	.word	0x080036a8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f001 fca1 	bl	8001a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f9a1 	bl	800049c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa15 	bl	8000588 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015e:	f000 f9dd 	bl	800051c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000162:	f000 fbe9 	bl	8000938 <SSD1306_Init>

      SSD1306_GotoXY (0,0);
 8000166:	2100      	movs	r1, #0
 8000168:	2000      	movs	r0, #0
 800016a:	f000 fcfd 	bl	8000b68 <SSD1306_GotoXY>
      SSD1306_Puts ("THE Embedded", &Font_7x10, 1);
 800016e:	2201      	movs	r2, #1
 8000170:	49b9      	ldr	r1, [pc, #740]	; (8000458 <main+0x30c>)
 8000172:	48ba      	ldr	r0, [pc, #744]	; (800045c <main+0x310>)
 8000174:	f000 fd8e 	bl	8000c94 <SSD1306_Puts>

      SSD1306_GotoXY (0, 10);
 8000178:	210a      	movs	r1, #10
 800017a:	2000      	movs	r0, #0
 800017c:	f000 fcf4 	bl	8000b68 <SSD1306_GotoXY>
      SSD1306_Puts ("THINGS", &Font_7x10, 1);
 8000180:	2201      	movs	r2, #1
 8000182:	49b5      	ldr	r1, [pc, #724]	; (8000458 <main+0x30c>)
 8000184:	48b6      	ldr	r0, [pc, #728]	; (8000460 <main+0x314>)
 8000186:	f000 fd85 	bl	8000c94 <SSD1306_Puts>

      SSD1306_GotoXY (0, 30);
 800018a:	211e      	movs	r1, #30
 800018c:	2000      	movs	r0, #0
 800018e:	f000 fceb 	bl	8000b68 <SSD1306_GotoXY>
      SSD1306_Puts ("OLED Display", &Font_7x10, 1);
 8000192:	2201      	movs	r2, #1
 8000194:	49b0      	ldr	r1, [pc, #704]	; (8000458 <main+0x30c>)
 8000196:	48b3      	ldr	r0, [pc, #716]	; (8000464 <main+0x318>)
 8000198:	f000 fd7c 	bl	8000c94 <SSD1306_Puts>

      SSD1306_GotoXY (0, 50);
 800019c:	2132      	movs	r1, #50	; 0x32
 800019e:	2000      	movs	r0, #0
 80001a0:	f000 fce2 	bl	8000b68 <SSD1306_GotoXY>
      SSD1306_Puts ("LIKE && SUBSCRIBE", &Font_7x10, 1);
 80001a4:	2201      	movs	r2, #1
 80001a6:	49ac      	ldr	r1, [pc, #688]	; (8000458 <main+0x30c>)
 80001a8:	48af      	ldr	r0, [pc, #700]	; (8000468 <main+0x31c>)
 80001aa:	f000 fd73 	bl	8000c94 <SSD1306_Puts>
      SSD1306_UpdateScreen(); //display
 80001ae:	f000 fc3d 	bl	8000a2c <SSD1306_UpdateScreen>
      HAL_Delay(2000);
 80001b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001b6:	f001 fcd1 	bl	8001b5c <HAL_Delay>

      SSD1306_ScrollRight(0,7);  // scroll entire screen
 80001ba:	2107      	movs	r1, #7
 80001bc:	2000      	movs	r0, #0
 80001be:	f000 fa96 	bl	80006ee <SSD1306_ScrollRight>
      HAL_Delay(2000);  // 2 sec
 80001c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001c6:	f001 fcc9 	bl	8001b5c <HAL_Delay>
      SSD1306_ScrollLeft(0,7);  // scroll entire screen
 80001ca:	2107      	movs	r1, #7
 80001cc:	2000      	movs	r0, #0
 80001ce:	f000 fab4 	bl	800073a <SSD1306_ScrollLeft>
      HAL_Delay(2000);  // 2 sec
 80001d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001d6:	f001 fcc1 	bl	8001b5c <HAL_Delay>
      SSD1306_Stopscroll();
 80001da:	f000 fb2c 	bl	8000836 <SSD1306_Stopscroll>
      SSD1306_ScrollRight(0x00, 0x0f);    // scroll entire screen right
 80001de:	210f      	movs	r1, #15
 80001e0:	2000      	movs	r0, #0
 80001e2:	f000 fa84 	bl	80006ee <SSD1306_ScrollRight>
      HAL_Delay (2000);
 80001e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001ea:	f001 fcb7 	bl	8001b5c <HAL_Delay>
      SSD1306_ScrollLeft(0x00, 0x0f);  // scroll entire screen left
 80001ee:	210f      	movs	r1, #15
 80001f0:	2000      	movs	r0, #0
 80001f2:	f000 faa2 	bl	800073a <SSD1306_ScrollLeft>
      HAL_Delay (2000);
 80001f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001fa:	f001 fcaf 	bl	8001b5c <HAL_Delay>
      SSD1306_Scrolldiagright(0x00, 0x0f);  // scroll entire screen diagonal right
 80001fe:	210f      	movs	r1, #15
 8000200:	2000      	movs	r0, #0
 8000202:	f000 fac0 	bl	8000786 <SSD1306_Scrolldiagright>
      HAL_Delay (2000);
 8000206:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800020a:	f001 fca7 	bl	8001b5c <HAL_Delay>
      SSD1306_Scrolldiagleft(0x00, 0x0f);  // scroll entire screen diagonal left
 800020e:	210f      	movs	r1, #15
 8000210:	2000      	movs	r0, #0
 8000212:	f000 fae4 	bl	80007de <SSD1306_Scrolldiagleft>
      HAL_Delay (2000);
 8000216:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800021a:	f001 fc9f 	bl	8001b5c <HAL_Delay>
      SSD1306_Stopscroll();   // stop scrolling.
 800021e:	f000 fb0a 	bl	8000836 <SSD1306_Stopscroll>


      SSD1306_InvertDisplay(1);   // invert the display
 8000222:	2001      	movs	r0, #1
 8000224:	f000 fb0e 	bl	8000844 <SSD1306_InvertDisplay>
      HAL_Delay(2000);
 8000228:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800022c:	f001 fc96 	bl	8001b5c <HAL_Delay>
      SSD1306_InvertDisplay(0);  // normalize the display
 8000230:	2000      	movs	r0, #0
 8000232:	f000 fb07 	bl	8000844 <SSD1306_InvertDisplay>
      HAL_Delay(2000);
 8000236:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800023a:	f001 fc8f 	bl	8001b5c <HAL_Delay>
      SSD1306_Clear();
 800023e:	f001 f8e0 	bl	8001402 <SSD1306_Clear>

          SSD1306_GotoXY (0,0);
 8000242:	2100      	movs	r1, #0
 8000244:	2000      	movs	r0, #0
 8000246:	f000 fc8f 	bl	8000b68 <SSD1306_GotoXY>
      SSD1306_Puts ("count to 99", &Font_7x10, 1);
 800024a:	2201      	movs	r2, #1
 800024c:	4982      	ldr	r1, [pc, #520]	; (8000458 <main+0x30c>)
 800024e:	4887      	ldr	r0, [pc, #540]	; (800046c <main+0x320>)
 8000250:	f000 fd20 	bl	8000c94 <SSD1306_Puts>
      SSD1306_UpdateScreen();
 8000254:	f000 fbea 	bl	8000a2c <SSD1306_UpdateScreen>

      for (int i=0; i<100;i++)
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
 800025c:	e017      	b.n	800028e <main+0x142>
      {
      sprintf(str,"%i",i);
 800025e:	463b      	mov	r3, r7
 8000260:	68fa      	ldr	r2, [r7, #12]
 8000262:	4983      	ldr	r1, [pc, #524]	; (8000470 <main+0x324>)
 8000264:	4618      	mov	r0, r3
 8000266:	f002 fd6d 	bl	8002d44 <siprintf>
      SSD1306_GotoXY (10, 30);
 800026a:	211e      	movs	r1, #30
 800026c:	200a      	movs	r0, #10
 800026e:	f000 fc7b 	bl	8000b68 <SSD1306_GotoXY>
      SSD1306_Puts (str, &Font_7x10, 1);
 8000272:	463b      	mov	r3, r7
 8000274:	2201      	movs	r2, #1
 8000276:	4978      	ldr	r1, [pc, #480]	; (8000458 <main+0x30c>)
 8000278:	4618      	mov	r0, r3
 800027a:	f000 fd0b 	bl	8000c94 <SSD1306_Puts>
      SSD1306_UpdateScreen();
 800027e:	f000 fbd5 	bl	8000a2c <SSD1306_UpdateScreen>
      HAL_Delay(100);
 8000282:	2064      	movs	r0, #100	; 0x64
 8000284:	f001 fc6a 	bl	8001b5c <HAL_Delay>
      for (int i=0; i<100;i++)
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	3301      	adds	r3, #1
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	2b63      	cmp	r3, #99	; 0x63
 8000292:	dde4      	ble.n	800025e <main+0x112>
      }

      TestLines(1);
 8000294:	2001      	movs	r0, #1
 8000296:	f001 f991 	bl	80015bc <TestLines>
      HAL_Delay(500);
 800029a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800029e:	f001 fc5d 	bl	8001b5c <HAL_Delay>
      SSD1306_Clear();
 80002a2:	f001 f8ae 	bl	8001402 <SSD1306_Clear>

      TestRectangles(1);
 80002a6:	2001      	movs	r0, #1
 80002a8:	f001 fa9f 	bl	80017ea <TestRectangles>
      HAL_Delay(500);
 80002ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002b0:	f001 fc54 	bl	8001b5c <HAL_Delay>
      SSD1306_Clear();
 80002b4:	f001 f8a5 	bl	8001402 <SSD1306_Clear>

      TestFilledRectangles(1);
 80002b8:	2001      	movs	r0, #1
 80002ba:	f001 fac9 	bl	8001850 <TestFilledRectangles>
      HAL_Delay(500);
 80002be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002c2:	f001 fc4b 	bl	8001b5c <HAL_Delay>
      SSD1306_Clear();
 80002c6:	f001 f89c 	bl	8001402 <SSD1306_Clear>

      TestFilledCircles(10,1);
 80002ca:	2101      	movs	r1, #1
 80002cc:	200a      	movs	r0, #10
 80002ce:	f001 faf7 	bl	80018c0 <TestFilledCircles>
      HAL_Delay(500);
 80002d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d6:	f001 fc41 	bl	8001b5c <HAL_Delay>
      SSD1306_Clear();
 80002da:	f001 f892 	bl	8001402 <SSD1306_Clear>

      TestCircles(10,1);
 80002de:	2101      	movs	r1, #1
 80002e0:	200a      	movs	r0, #10
 80002e2:	f001 fb28 	bl	8001936 <TestCircles>
      HAL_Delay(500);
 80002e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ea:	f001 fc37 	bl	8001b5c <HAL_Delay>
      SSD1306_Clear();
 80002ee:	f001 f888 	bl	8001402 <SSD1306_Clear>

      TestTriangles(1);
 80002f2:	2001      	movs	r0, #1
 80002f4:	f001 fb5c 	bl	80019b0 <TestTriangles>
      HAL_Delay(100);
 80002f8:	2064      	movs	r0, #100	; 0x64
 80002fa:	f001 fc2f 	bl	8001b5c <HAL_Delay>
      SSD1306_Clear();
 80002fe:	f001 f880 	bl	8001402 <SSD1306_Clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    SSD1306_Clear();
 8000302:	f001 f87e 	bl	8001402 <SSD1306_Clear>
      SSD1306_DrawBitmap(0,0,horse1,128,64,1);
 8000306:	2301      	movs	r3, #1
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	2340      	movs	r3, #64	; 0x40
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	2380      	movs	r3, #128	; 0x80
 8000310:	4a58      	ldr	r2, [pc, #352]	; (8000474 <main+0x328>)
 8000312:	2100      	movs	r1, #0
 8000314:	2000      	movs	r0, #0
 8000316:	f000 faa7 	bl	8000868 <SSD1306_DrawBitmap>
      SSD1306_UpdateScreen();
 800031a:	f000 fb87 	bl	8000a2c <SSD1306_UpdateScreen>
      HAL_Delay(1);
 800031e:	2001      	movs	r0, #1
 8000320:	f001 fc1c 	bl	8001b5c <HAL_Delay>

      SSD1306_Clear();
 8000324:	f001 f86d 	bl	8001402 <SSD1306_Clear>
      SSD1306_DrawBitmap(0,0,horse2,128,64,1);
 8000328:	2301      	movs	r3, #1
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	2340      	movs	r3, #64	; 0x40
 800032e:	9300      	str	r3, [sp, #0]
 8000330:	2380      	movs	r3, #128	; 0x80
 8000332:	4a51      	ldr	r2, [pc, #324]	; (8000478 <main+0x32c>)
 8000334:	2100      	movs	r1, #0
 8000336:	2000      	movs	r0, #0
 8000338:	f000 fa96 	bl	8000868 <SSD1306_DrawBitmap>
      SSD1306_UpdateScreen();
 800033c:	f000 fb76 	bl	8000a2c <SSD1306_UpdateScreen>
      HAL_Delay(1);
 8000340:	2001      	movs	r0, #1
 8000342:	f001 fc0b 	bl	8001b5c <HAL_Delay>

      SSD1306_Clear();
 8000346:	f001 f85c 	bl	8001402 <SSD1306_Clear>
      SSD1306_DrawBitmap(0,0,horse3,128,64,1);
 800034a:	2301      	movs	r3, #1
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2340      	movs	r3, #64	; 0x40
 8000350:	9300      	str	r3, [sp, #0]
 8000352:	2380      	movs	r3, #128	; 0x80
 8000354:	4a49      	ldr	r2, [pc, #292]	; (800047c <main+0x330>)
 8000356:	2100      	movs	r1, #0
 8000358:	2000      	movs	r0, #0
 800035a:	f000 fa85 	bl	8000868 <SSD1306_DrawBitmap>
      SSD1306_UpdateScreen();
 800035e:	f000 fb65 	bl	8000a2c <SSD1306_UpdateScreen>
      HAL_Delay(1);
 8000362:	2001      	movs	r0, #1
 8000364:	f001 fbfa 	bl	8001b5c <HAL_Delay>

      SSD1306_Clear();
 8000368:	f001 f84b 	bl	8001402 <SSD1306_Clear>
      SSD1306_DrawBitmap(0,0,horse4,128,64,1);
 800036c:	2301      	movs	r3, #1
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	2340      	movs	r3, #64	; 0x40
 8000372:	9300      	str	r3, [sp, #0]
 8000374:	2380      	movs	r3, #128	; 0x80
 8000376:	4a42      	ldr	r2, [pc, #264]	; (8000480 <main+0x334>)
 8000378:	2100      	movs	r1, #0
 800037a:	2000      	movs	r0, #0
 800037c:	f000 fa74 	bl	8000868 <SSD1306_DrawBitmap>
      SSD1306_UpdateScreen();
 8000380:	f000 fb54 	bl	8000a2c <SSD1306_UpdateScreen>
      HAL_Delay(1);
 8000384:	2001      	movs	r0, #1
 8000386:	f001 fbe9 	bl	8001b5c <HAL_Delay>

      SSD1306_Clear();
 800038a:	f001 f83a 	bl	8001402 <SSD1306_Clear>
      SSD1306_DrawBitmap(0,0,horse5,128,64,1);
 800038e:	2301      	movs	r3, #1
 8000390:	9301      	str	r3, [sp, #4]
 8000392:	2340      	movs	r3, #64	; 0x40
 8000394:	9300      	str	r3, [sp, #0]
 8000396:	2380      	movs	r3, #128	; 0x80
 8000398:	4a3a      	ldr	r2, [pc, #232]	; (8000484 <main+0x338>)
 800039a:	2100      	movs	r1, #0
 800039c:	2000      	movs	r0, #0
 800039e:	f000 fa63 	bl	8000868 <SSD1306_DrawBitmap>
      SSD1306_UpdateScreen();
 80003a2:	f000 fb43 	bl	8000a2c <SSD1306_UpdateScreen>
      HAL_Delay(1);
 80003a6:	2001      	movs	r0, #1
 80003a8:	f001 fbd8 	bl	8001b5c <HAL_Delay>

      SSD1306_Clear();
 80003ac:	f001 f829 	bl	8001402 <SSD1306_Clear>
      SSD1306_DrawBitmap(0,0,horse6,128,64,1);
 80003b0:	2301      	movs	r3, #1
 80003b2:	9301      	str	r3, [sp, #4]
 80003b4:	2340      	movs	r3, #64	; 0x40
 80003b6:	9300      	str	r3, [sp, #0]
 80003b8:	2380      	movs	r3, #128	; 0x80
 80003ba:	4a33      	ldr	r2, [pc, #204]	; (8000488 <main+0x33c>)
 80003bc:	2100      	movs	r1, #0
 80003be:	2000      	movs	r0, #0
 80003c0:	f000 fa52 	bl	8000868 <SSD1306_DrawBitmap>
      SSD1306_UpdateScreen();
 80003c4:	f000 fb32 	bl	8000a2c <SSD1306_UpdateScreen>
      HAL_Delay(1);
 80003c8:	2001      	movs	r0, #1
 80003ca:	f001 fbc7 	bl	8001b5c <HAL_Delay>

      SSD1306_Clear();
 80003ce:	f001 f818 	bl	8001402 <SSD1306_Clear>
      SSD1306_DrawBitmap(0,0,horse7,128,64,1);
 80003d2:	2301      	movs	r3, #1
 80003d4:	9301      	str	r3, [sp, #4]
 80003d6:	2340      	movs	r3, #64	; 0x40
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	2380      	movs	r3, #128	; 0x80
 80003dc:	4a2b      	ldr	r2, [pc, #172]	; (800048c <main+0x340>)
 80003de:	2100      	movs	r1, #0
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 fa41 	bl	8000868 <SSD1306_DrawBitmap>
      SSD1306_UpdateScreen();
 80003e6:	f000 fb21 	bl	8000a2c <SSD1306_UpdateScreen>
      HAL_Delay(1);
 80003ea:	2001      	movs	r0, #1
 80003ec:	f001 fbb6 	bl	8001b5c <HAL_Delay>

      SSD1306_Clear();
 80003f0:	f001 f807 	bl	8001402 <SSD1306_Clear>
      SSD1306_DrawBitmap(0,0,horse8,128,64,1);
 80003f4:	2301      	movs	r3, #1
 80003f6:	9301      	str	r3, [sp, #4]
 80003f8:	2340      	movs	r3, #64	; 0x40
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	4a24      	ldr	r2, [pc, #144]	; (8000490 <main+0x344>)
 8000400:	2100      	movs	r1, #0
 8000402:	2000      	movs	r0, #0
 8000404:	f000 fa30 	bl	8000868 <SSD1306_DrawBitmap>
      SSD1306_UpdateScreen();
 8000408:	f000 fb10 	bl	8000a2c <SSD1306_UpdateScreen>
      HAL_Delay(1);
 800040c:	2001      	movs	r0, #1
 800040e:	f001 fba5 	bl	8001b5c <HAL_Delay>

      SSD1306_Clear();
 8000412:	f000 fff6 	bl	8001402 <SSD1306_Clear>
      SSD1306_DrawBitmap(0,0,horse9,128,64,1);
 8000416:	2301      	movs	r3, #1
 8000418:	9301      	str	r3, [sp, #4]
 800041a:	2340      	movs	r3, #64	; 0x40
 800041c:	9300      	str	r3, [sp, #0]
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <main+0x348>)
 8000422:	2100      	movs	r1, #0
 8000424:	2000      	movs	r0, #0
 8000426:	f000 fa1f 	bl	8000868 <SSD1306_DrawBitmap>
      SSD1306_UpdateScreen();
 800042a:	f000 faff 	bl	8000a2c <SSD1306_UpdateScreen>
      HAL_Delay(1);
 800042e:	2001      	movs	r0, #1
 8000430:	f001 fb94 	bl	8001b5c <HAL_Delay>

      SSD1306_Clear();
 8000434:	f000 ffe5 	bl	8001402 <SSD1306_Clear>
      SSD1306_DrawBitmap(0,0,horse10,128,64,1);
 8000438:	2301      	movs	r3, #1
 800043a:	9301      	str	r3, [sp, #4]
 800043c:	2340      	movs	r3, #64	; 0x40
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2380      	movs	r3, #128	; 0x80
 8000442:	4a15      	ldr	r2, [pc, #84]	; (8000498 <main+0x34c>)
 8000444:	2100      	movs	r1, #0
 8000446:	2000      	movs	r0, #0
 8000448:	f000 fa0e 	bl	8000868 <SSD1306_DrawBitmap>
      SSD1306_UpdateScreen();
 800044c:	f000 faee 	bl	8000a2c <SSD1306_UpdateScreen>
      HAL_Delay(1);
 8000450:	2001      	movs	r0, #1
 8000452:	f001 fb83 	bl	8001b5c <HAL_Delay>
    SSD1306_Clear();
 8000456:	e754      	b.n	8000302 <main+0x1b6>
 8000458:	20000000 	.word	0x20000000
 800045c:	080036c0 	.word	0x080036c0
 8000460:	080036d0 	.word	0x080036d0
 8000464:	080036d8 	.word	0x080036d8
 8000468:	080036e8 	.word	0x080036e8
 800046c:	080036fc 	.word	0x080036fc
 8000470:	08003708 	.word	0x08003708
 8000474:	08003e78 	.word	0x08003e78
 8000478:	08004278 	.word	0x08004278
 800047c:	08004678 	.word	0x08004678
 8000480:	08004a78 	.word	0x08004a78
 8000484:	08004e78 	.word	0x08004e78
 8000488:	08005278 	.word	0x08005278
 800048c:	08005678 	.word	0x08005678
 8000490:	08005a78 	.word	0x08005a78
 8000494:	08005e78 	.word	0x08005e78
 8000498:	08006278 	.word	0x08006278

0800049c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b090      	sub	sp, #64	; 0x40
 80004a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a2:	f107 0318 	add.w	r3, r7, #24
 80004a6:	2228      	movs	r2, #40	; 0x28
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f002 fc6a 	bl	8002d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
 80004bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004be:	2302      	movs	r3, #2
 80004c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c2:	2301      	movs	r3, #1
 80004c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c6:	2310      	movs	r3, #16
 80004c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ca:	2302      	movs	r3, #2
 80004cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80004ce:	2300      	movs	r3, #0
 80004d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80004d2:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80004d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d8:	f107 0318 	add.w	r3, r7, #24
 80004dc:	4618      	mov	r0, r3
 80004de:	f001 fdd9 	bl	8002094 <HAL_RCC_OscConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004e8:	f000 f880 	bl	80005ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ec:	230f      	movs	r3, #15
 80004ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f0:	2302      	movs	r3, #2
 80004f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2101      	movs	r1, #1
 8000504:	4618      	mov	r0, r3
 8000506:	f002 f847 	bl	8002598 <HAL_RCC_ClockConfig>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000510:	f000 f86c 	bl	80005ec <Error_Handler>
  }
}
 8000514:	bf00      	nop
 8000516:	3740      	adds	r7, #64	; 0x40
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <MX_SPI1_Init+0x64>)
 8000522:	4a18      	ldr	r2, [pc, #96]	; (8000584 <MX_SPI1_Init+0x68>)
 8000524:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000526:	4b16      	ldr	r3, [pc, #88]	; (8000580 <MX_SPI1_Init+0x64>)
 8000528:	f44f 7282 	mov.w	r2, #260	; 0x104
 800052c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MX_SPI1_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <MX_SPI1_Init+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <MX_SPI1_Init+0x64>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <MX_SPI1_Init+0x64>)
 8000542:	2200      	movs	r2, #0
 8000544:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <MX_SPI1_Init+0x64>)
 8000548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800054c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <MX_SPI1_Init+0x64>)
 8000550:	2200      	movs	r2, #0
 8000552:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <MX_SPI1_Init+0x64>)
 8000556:	2200      	movs	r2, #0
 8000558:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <MX_SPI1_Init+0x64>)
 800055c:	2200      	movs	r2, #0
 800055e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <MX_SPI1_Init+0x64>)
 8000562:	2200      	movs	r2, #0
 8000564:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_SPI1_Init+0x64>)
 8000568:	220a      	movs	r2, #10
 800056a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800056c:	4804      	ldr	r0, [pc, #16]	; (8000580 <MX_SPI1_Init+0x64>)
 800056e:	f002 f96f 	bl	8002850 <HAL_SPI_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000578:	f000 f838 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000080 	.word	0x20000080
 8000584:	40013000 	.word	0x40013000

08000588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_GPIO_Init+0x5c>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <MX_GPIO_Init+0x5c>)
 80005a2:	f043 0304 	orr.w	r3, r3, #4
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <MX_GPIO_Init+0x5c>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0304 	and.w	r3, r3, #4
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_Pin|CS_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2118      	movs	r1, #24
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <MX_GPIO_Init+0x60>)
 80005ba:	f001 fd53 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DC_Pin CS_Pin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin;
 80005be:	2318      	movs	r3, #24
 80005c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2302      	movs	r3, #2
 80005cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	4619      	mov	r1, r3
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <MX_GPIO_Init+0x60>)
 80005d6:	f001 fbc9 	bl	8001d6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005da:	bf00      	nop
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010800 	.word	0x40010800

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <Error_Handler+0x8>
	...

080005f8 <OLED_Select>:
/* SSD1306 data buffer */
static char SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];


void OLED_Select(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, CS_Pin, GPIO_PIN_RESET); // Set PA9 low
 80005fc:	2200      	movs	r2, #0
 80005fe:	2110      	movs	r1, #16
 8000600:	4802      	ldr	r0, [pc, #8]	; (800060c <OLED_Select+0x14>)
 8000602:	f001 fd2f 	bl	8002064 <HAL_GPIO_WritePin>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40010800 	.word	0x40010800

08000610 <OLED_Deselect>:

void OLED_Deselect(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, CS_Pin, GPIO_PIN_SET); // Set PA9 high
 8000614:	2201      	movs	r2, #1
 8000616:	2110      	movs	r1, #16
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <OLED_Deselect+0x14>)
 800061a:	f001 fd23 	bl	8002064 <HAL_GPIO_WritePin>
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40010800 	.word	0x40010800

08000628 <OLED_DataMode>:


void OLED_DataMode()
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, DC_Pin, GPIO_PIN_SET); // Set PA10 high
 800062c:	2201      	movs	r2, #1
 800062e:	2108      	movs	r1, #8
 8000630:	4802      	ldr	r0, [pc, #8]	; (800063c <OLED_DataMode+0x14>)
 8000632:	f001 fd17 	bl	8002064 <HAL_GPIO_WritePin>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40010800 	.word	0x40010800

08000640 <OLED_CommMode>:

void OLED_CommMode()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, DC_Pin, GPIO_PIN_RESET); // Set PA10 low
 8000644:	2200      	movs	r2, #0
 8000646:	2108      	movs	r1, #8
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <OLED_CommMode+0x14>)
 800064a:	f001 fd0b 	bl	8002064 <HAL_GPIO_WritePin>
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40010800 	.word	0x40010800

08000658 <OLED_SPI_Write>:

void OLED_SPI_Write(char *data, uint32_t size)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
    // Wait until SPI is ready
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000662:	bf00      	nop
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <OLED_SPI_Write+0x40>)
 8000666:	f002 faba 	bl	8002bde <HAL_SPI_GetState>
 800066a:	4603      	mov	r3, r0
 800066c:	2b01      	cmp	r3, #1
 800066e:	d1f9      	bne.n	8000664 <OLED_SPI_Write+0xc>

    // Transmit data
    if (HAL_SPI_Transmit(&hspi1,(uint8_t *) data, size, HAL_MAX_DELAY) != HAL_OK)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	b29a      	uxth	r2, r3
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	4807      	ldr	r0, [pc, #28]	; (8000698 <OLED_SPI_Write+0x40>)
 800067c:	f002 f96c 	bl	8002958 <HAL_SPI_Transmit>
    {
        // Error handling if necessary
    }

    // Wait until SPI is ready again
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000680:	bf00      	nop
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <OLED_SPI_Write+0x40>)
 8000684:	f002 faab 	bl	8002bde <HAL_SPI_GetState>
 8000688:	4603      	mov	r3, r0
 800068a:	2b01      	cmp	r3, #1
 800068c:	d1f9      	bne.n	8000682 <OLED_SPI_Write+0x2a>
}
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000080 	.word	0x20000080

0800069c <SSD1306_WRITECOMMAND>:


void SSD1306_WRITECOMMAND(char command)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  OLED_CommMode();
 80006a6:	f7ff ffcb 	bl	8000640 <OLED_CommMode>
  OLED_Select();
 80006aa:	f7ff ffa5 	bl	80005f8 <OLED_Select>
  OLED_SPI_Write(&command,1);
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	2101      	movs	r1, #1
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ffd0 	bl	8000658 <OLED_SPI_Write>
  OLED_Deselect();
 80006b8:	f7ff ffaa 	bl	8000610 <OLED_Deselect>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <SSD1306_Write_Multi_Data>:
  OLED_SPI_Write(&command,1);
  OLED_Deselect();
}

void SSD1306_Write_Multi_Data(char * data, uint16_t length)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	807b      	strh	r3, [r7, #2]
  OLED_DataMode();
 80006d0:	f7ff ffaa 	bl	8000628 <OLED_DataMode>
  OLED_Select();
 80006d4:	f7ff ff90 	bl	80005f8 <OLED_Select>
  OLED_SPI_Write((char*)data,length);
 80006d8:	887b      	ldrh	r3, [r7, #2]
 80006da:	4619      	mov	r1, r3
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f7ff ffbb 	bl	8000658 <OLED_SPI_Write>
  OLED_Deselect();
 80006e2:	f7ff ff95 	bl	8000610 <OLED_Deselect>

}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	4603      	mov	r3, r0
 80006f6:	460a      	mov	r2, r1
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	4613      	mov	r3, r2
 80006fc:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 80006fe:	2026      	movs	r0, #38	; 0x26
 8000700:	f7ff ffcc 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000704:	2000      	movs	r0, #0
 8000706:	f7ff ffc9 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ffc5 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000712:	2000      	movs	r0, #0
 8000714:	f7ff ffc2 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ffbe 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0X00);
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff ffbb 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0XFF);
 8000726:	20ff      	movs	r0, #255	; 0xff
 8000728:	f7ff ffb8 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 800072c:	202f      	movs	r0, #47	; 0x2f
 800072e:	f7ff ffb5 	bl	800069c <SSD1306_WRITECOMMAND>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	4603      	mov	r3, r0
 8000742:	460a      	mov	r2, r1
 8000744:	71fb      	strb	r3, [r7, #7]
 8000746:	4613      	mov	r3, r2
 8000748:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 800074a:	2027      	movs	r0, #39	; 0x27
 800074c:	f7ff ffa6 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ffa3 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff9f 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff ff9c 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff98 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0X00);
 800076c:	2000      	movs	r0, #0
 800076e:	f7ff ff95 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0XFF);
 8000772:	20ff      	movs	r0, #255	; 0xff
 8000774:	f7ff ff92 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000778:	202f      	movs	r0, #47	; 0x2f
 800077a:	f7ff ff8f 	bl	800069c <SSD1306_WRITECOMMAND>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <SSD1306_Scrolldiagright>:


void SSD1306_Scrolldiagright(uint8_t start_row, uint8_t end_row)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	460a      	mov	r2, r1
 8000790:	71fb      	strb	r3, [r7, #7]
 8000792:	4613      	mov	r3, r2
 8000794:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 8000796:	20a3      	movs	r0, #163	; 0xa3
 8000798:	f7ff ff80 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff ff7d 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 80007a2:	2040      	movs	r0, #64	; 0x40
 80007a4:	f7ff ff7a 	bl	800069c <SSD1306_WRITECOMMAND>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
 80007a8:	2029      	movs	r0, #41	; 0x29
 80007aa:	f7ff ff77 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x00);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff ff74 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(start_row);
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff70 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0X00);
 80007bc:	2000      	movs	r0, #0
 80007be:	f7ff ff6d 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(end_row);
 80007c2:	79bb      	ldrb	r3, [r7, #6]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff69 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x01);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f7ff ff66 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 80007d0:	202f      	movs	r0, #47	; 0x2f
 80007d2:	f7ff ff63 	bl	800069c <SSD1306_WRITECOMMAND>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <SSD1306_Scrolldiagleft>:


void SSD1306_Scrolldiagleft(uint8_t start_row, uint8_t end_row)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	460a      	mov	r2, r1
 80007e8:	71fb      	strb	r3, [r7, #7]
 80007ea:	4613      	mov	r3, r2
 80007ec:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 80007ee:	20a3      	movs	r0, #163	; 0xa3
 80007f0:	f7ff ff54 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff ff51 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 80007fa:	2040      	movs	r0, #64	; 0x40
 80007fc:	f7ff ff4e 	bl	800069c <SSD1306_WRITECOMMAND>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
 8000800:	202a      	movs	r0, #42	; 0x2a
 8000802:	f7ff ff4b 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x00);
 8000806:	2000      	movs	r0, #0
 8000808:	f7ff ff48 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(start_row);
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff44 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0X00);
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff ff41 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(end_row);
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff3d 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (0x01);
 8000822:	2001      	movs	r0, #1
 8000824:	f7ff ff3a 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 8000828:	202f      	movs	r0, #47	; 0x2f
 800082a:	f7ff ff37 	bl	800069c <SSD1306_WRITECOMMAND>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <SSD1306_Stopscroll>:


void SSD1306_Stopscroll(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
  SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800083a:	202e      	movs	r0, #46	; 0x2e
 800083c:	f7ff ff2e 	bl	800069c <SSD1306_WRITECOMMAND>
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <SSD1306_InvertDisplay>:



void SSD1306_InvertDisplay (int i)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d003      	beq.n	800085a <SSD1306_InvertDisplay+0x16>
 8000852:	20a7      	movs	r0, #167	; 0xa7
 8000854:	f7ff ff22 	bl	800069c <SSD1306_WRITECOMMAND>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 8000858:	e002      	b.n	8000860 <SSD1306_InvertDisplay+0x1c>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 800085a:	20a6      	movs	r0, #166	; 0xa6
 800085c:	f7ff ff1e 	bl	800069c <SSD1306_WRITECOMMAND>
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <SSD1306_DrawBitmap>:


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60ba      	str	r2, [r7, #8]
 8000870:	461a      	mov	r2, r3
 8000872:	4603      	mov	r3, r0
 8000874:	81fb      	strh	r3, [r7, #14]
 8000876:	460b      	mov	r3, r1
 8000878:	81bb      	strh	r3, [r7, #12]
 800087a:	4613      	mov	r3, r2
 800087c:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800087e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000882:	3307      	adds	r3, #7
 8000884:	2b00      	cmp	r3, #0
 8000886:	da00      	bge.n	800088a <SSD1306_DrawBitmap+0x22>
 8000888:	3307      	adds	r3, #7
 800088a:	10db      	asrs	r3, r3, #3
 800088c:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000892:	2300      	movs	r3, #0
 8000894:	82bb      	strh	r3, [r7, #20]
 8000896:	e044      	b.n	8000922 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000898:	2300      	movs	r3, #0
 800089a:	827b      	strh	r3, [r7, #18]
 800089c:	e02f      	b.n	80008fe <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 800089e:	8a7b      	ldrh	r3, [r7, #18]
 80008a0:	f003 0307 	and.w	r3, r3, #7
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d003      	beq.n	80008b0 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80008a8:	7dfb      	ldrb	r3, [r7, #23]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	75fb      	strb	r3, [r7, #23]
 80008ae:	e012      	b.n	80008d6 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80008b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008b4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80008b8:	fb03 f202 	mul.w	r2, r3, r2
 80008bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	da00      	bge.n	80008c6 <SSD1306_DrawBitmap+0x5e>
 80008c4:	3307      	adds	r3, #7
 80008c6:	10db      	asrs	r3, r3, #3
 80008c8:	b21b      	sxth	r3, r3
 80008ca:	4413      	add	r3, r2
 80008cc:	461a      	mov	r2, r3
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	4413      	add	r3, r2
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80008d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	da09      	bge.n	80008f2 <SSD1306_DrawBitmap+0x8a>
 80008de:	89fa      	ldrh	r2, [r7, #14]
 80008e0:	8a7b      	ldrh	r3, [r7, #18]
 80008e2:	4413      	add	r3, r2
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	89b9      	ldrh	r1, [r7, #12]
 80008e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f8dd 	bl	8000aac <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80008f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	3301      	adds	r3, #1
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	827b      	strh	r3, [r7, #18]
 80008fe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000906:	429a      	cmp	r2, r3
 8000908:	dbc9      	blt.n	800089e <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800090a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800090e:	b29b      	uxth	r3, r3
 8000910:	3301      	adds	r3, #1
 8000912:	b29b      	uxth	r3, r3
 8000914:	82bb      	strh	r3, [r7, #20]
 8000916:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800091a:	b29b      	uxth	r3, r3
 800091c:	3301      	adds	r3, #1
 800091e:	b29b      	uxth	r3, r3
 8000920:	81bb      	strh	r3, [r7, #12]
 8000922:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000926:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800092a:	429a      	cmp	r2, r3
 800092c:	dbb4      	blt.n	8000898 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800092e:	bf00      	nop
 8000930:	bf00      	nop
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <SSD1306_Init>:


uint8_t SSD1306_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
   //OLED_SPI_Pins_Init();
   //OLED_SPI_Configure();

  /* A little delay */
  uint32_t p = 2500;
 800093e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000942:	607b      	str	r3, [r7, #4]
  while(p>0)
 8000944:	e002      	b.n	800094c <SSD1306_Init+0x14>
    p--;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3b01      	subs	r3, #1
 800094a:	607b      	str	r3, [r7, #4]
  while(p>0)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d1f9      	bne.n	8000946 <SSD1306_Init+0xe>

  /* Init LCD */
  SSD1306_WRITECOMMAND(0xAE); //display off
 8000952:	20ae      	movs	r0, #174	; 0xae
 8000954:	f7ff fea2 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000958:	2020      	movs	r0, #32
 800095a:	f7ff fe9f 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800095e:	2010      	movs	r0, #16
 8000960:	f7ff fe9c 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000964:	20b0      	movs	r0, #176	; 0xb0
 8000966:	f7ff fe99 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800096a:	20c8      	movs	r0, #200	; 0xc8
 800096c:	f7ff fe96 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff fe93 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000976:	2010      	movs	r0, #16
 8000978:	f7ff fe90 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0x40); //--set start line address
 800097c:	2040      	movs	r0, #64	; 0x40
 800097e:	f7ff fe8d 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000982:	2081      	movs	r0, #129	; 0x81
 8000984:	f7ff fe8a 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0xFF);
 8000988:	20ff      	movs	r0, #255	; 0xff
 800098a:	f7ff fe87 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800098e:	20a1      	movs	r0, #161	; 0xa1
 8000990:	f7ff fe84 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000994:	20a6      	movs	r0, #166	; 0xa6
 8000996:	f7ff fe81 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800099a:	20a8      	movs	r0, #168	; 0xa8
 800099c:	f7ff fe7e 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0x3F); //
 80009a0:	203f      	movs	r0, #63	; 0x3f
 80009a2:	f7ff fe7b 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80009a6:	20a4      	movs	r0, #164	; 0xa4
 80009a8:	f7ff fe78 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80009ac:	20d3      	movs	r0, #211	; 0xd3
 80009ae:	f7ff fe75 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0x00); //-not offset
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff fe72 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80009b8:	20d5      	movs	r0, #213	; 0xd5
 80009ba:	f7ff fe6f 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80009be:	20f0      	movs	r0, #240	; 0xf0
 80009c0:	f7ff fe6c 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80009c4:	20d9      	movs	r0, #217	; 0xd9
 80009c6:	f7ff fe69 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0x22); //
 80009ca:	2022      	movs	r0, #34	; 0x22
 80009cc:	f7ff fe66 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80009d0:	20da      	movs	r0, #218	; 0xda
 80009d2:	f7ff fe63 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0x12);
 80009d6:	2012      	movs	r0, #18
 80009d8:	f7ff fe60 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80009dc:	20db      	movs	r0, #219	; 0xdb
 80009de:	f7ff fe5d 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80009e2:	2020      	movs	r0, #32
 80009e4:	f7ff fe5a 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80009e8:	208d      	movs	r0, #141	; 0x8d
 80009ea:	f7ff fe57 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0x14); //
 80009ee:	2014      	movs	r0, #20
 80009f0:	f7ff fe54 	bl	800069c <SSD1306_WRITECOMMAND>
  SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80009f4:	20af      	movs	r0, #175	; 0xaf
 80009f6:	f7ff fe51 	bl	800069c <SSD1306_WRITECOMMAND>


  SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80009fa:	202e      	movs	r0, #46	; 0x2e
 80009fc:	f7ff fe4e 	bl	800069c <SSD1306_WRITECOMMAND>

  /* Clear screen */
  SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f000 f83b 	bl	8000a7c <SSD1306_Fill>

  /* Update screen */
  SSD1306_UpdateScreen();
 8000a06:	f000 f811 	bl	8000a2c <SSD1306_UpdateScreen>

  /* Set default values */
  SSD1306.CurrentX = 0;
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <SSD1306_Init+0xf0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	801a      	strh	r2, [r3, #0]
  SSD1306.CurrentY = 0;
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <SSD1306_Init+0xf0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	805a      	strh	r2, [r3, #2]

  /* Initialized OK */
  SSD1306.Initialized = 1;
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <SSD1306_Init+0xf0>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	715a      	strb	r2, [r3, #5]

  /* Return OK */
  return 1;
 8000a1c:	2301      	movs	r3, #1
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200004d8 	.word	0x200004d8

08000a2c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  uint8_t m;

  for (m = 0; m < 8; m++) {
 8000a32:	2300      	movs	r3, #0
 8000a34:	71fb      	strb	r3, [r7, #7]
 8000a36:	e016      	b.n	8000a66 <SSD1306_UpdateScreen+0x3a>
    SSD1306_WRITECOMMAND(0xB0 + m);
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	3b50      	subs	r3, #80	; 0x50
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fe2c 	bl	800069c <SSD1306_WRITECOMMAND>
    SSD1306_WRITECOMMAND(0x00);
 8000a44:	2000      	movs	r0, #0
 8000a46:	f7ff fe29 	bl	800069c <SSD1306_WRITECOMMAND>
    SSD1306_WRITECOMMAND(0x10);
 8000a4a:	2010      	movs	r0, #16
 8000a4c:	f7ff fe26 	bl	800069c <SSD1306_WRITECOMMAND>

    /* Write multi data */

    SSD1306_Write_Multi_Data(&SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	01db      	lsls	r3, r3, #7
 8000a54:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <SSD1306_UpdateScreen+0x4c>)
 8000a56:	4413      	add	r3, r2
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fe32 	bl	80006c4 <SSD1306_Write_Multi_Data>
  for (m = 0; m < 8; m++) {
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	3301      	adds	r3, #1
 8000a64:	71fb      	strb	r3, [r7, #7]
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b07      	cmp	r3, #7
 8000a6a:	d9e5      	bls.n	8000a38 <SSD1306_UpdateScreen+0xc>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200000d8 	.word	0x200000d8

08000a7c <SSD1306_Fill>:
  for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
    SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
  }
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
  /* Set memory */
  memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d101      	bne.n	8000a90 <SSD1306_Fill+0x14>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	e000      	b.n	8000a92 <SSD1306_Fill+0x16>
 8000a90:	23ff      	movs	r3, #255	; 0xff
 8000a92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a96:	4619      	mov	r1, r3
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <SSD1306_Fill+0x2c>)
 8000a9a:	f002 f973 	bl	8002d84 <memset>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200000d8 	.word	0x200000d8

08000aac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	80bb      	strh	r3, [r7, #4]
 8000aba:	4613      	mov	r3, r2
 8000abc:	70fb      	strb	r3, [r7, #3]
  if (
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac2:	d848      	bhi.n	8000b56 <SSD1306_DrawPixel+0xaa>
    x >= SSD1306_WIDTH ||
 8000ac4:	88bb      	ldrh	r3, [r7, #4]
 8000ac6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ac8:	d845      	bhi.n	8000b56 <SSD1306_DrawPixel+0xaa>
    /* Error */
    return;
  }

  /* Check if pixels are inverted */
  if (SSD1306.Inverted) {
 8000aca:	4b25      	ldr	r3, [pc, #148]	; (8000b60 <SSD1306_DrawPixel+0xb4>)
 8000acc:	791b      	ldrb	r3, [r3, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d006      	beq.n	8000ae0 <SSD1306_DrawPixel+0x34>
    color = (SSD1306_COLOR_t)!color;
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bf0c      	ite	eq
 8000ad8:	2301      	moveq	r3, #1
 8000ada:	2300      	movne	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	70fb      	strb	r3, [r7, #3]
  }

  /* Set color */
  if (color == SSD1306_COLOR_WHITE) {
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d11a      	bne.n	8000b1c <SSD1306_DrawPixel+0x70>
    SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ae6:	88fa      	ldrh	r2, [r7, #6]
 8000ae8:	88bb      	ldrh	r3, [r7, #4]
 8000aea:	08db      	lsrs	r3, r3, #3
 8000aec:	b298      	uxth	r0, r3
 8000aee:	4603      	mov	r3, r0
 8000af0:	01db      	lsls	r3, r3, #7
 8000af2:	4413      	add	r3, r2
 8000af4:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <SSD1306_DrawPixel+0xb8>)
 8000af6:	5cd3      	ldrb	r3, [r2, r3]
 8000af8:	b25a      	sxtb	r2, r3
 8000afa:	88bb      	ldrh	r3, [r7, #4]
 8000afc:	f003 0307 	and.w	r3, r3, #7
 8000b00:	2101      	movs	r1, #1
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	b25b      	sxtb	r3, r3
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	b259      	sxtb	r1, r3
 8000b0c:	88fa      	ldrh	r2, [r7, #6]
 8000b0e:	4603      	mov	r3, r0
 8000b10:	01db      	lsls	r3, r3, #7
 8000b12:	4413      	add	r3, r2
 8000b14:	b2c9      	uxtb	r1, r1
 8000b16:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <SSD1306_DrawPixel+0xb8>)
 8000b18:	54d1      	strb	r1, [r2, r3]
 8000b1a:	e01d      	b.n	8000b58 <SSD1306_DrawPixel+0xac>
  } else {
    SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b1c:	88fa      	ldrh	r2, [r7, #6]
 8000b1e:	88bb      	ldrh	r3, [r7, #4]
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	b298      	uxth	r0, r3
 8000b24:	4603      	mov	r3, r0
 8000b26:	01db      	lsls	r3, r3, #7
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <SSD1306_DrawPixel+0xb8>)
 8000b2c:	5cd3      	ldrb	r3, [r2, r3]
 8000b2e:	b25a      	sxtb	r2, r3
 8000b30:	88bb      	ldrh	r3, [r7, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	2101      	movs	r1, #1
 8000b38:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3c:	b25b      	sxtb	r3, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	b25b      	sxtb	r3, r3
 8000b42:	4013      	ands	r3, r2
 8000b44:	b259      	sxtb	r1, r3
 8000b46:	88fa      	ldrh	r2, [r7, #6]
 8000b48:	4603      	mov	r3, r0
 8000b4a:	01db      	lsls	r3, r3, #7
 8000b4c:	4413      	add	r3, r2
 8000b4e:	b2c9      	uxtb	r1, r1
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <SSD1306_DrawPixel+0xb8>)
 8000b52:	54d1      	strb	r1, [r2, r3]
 8000b54:	e000      	b.n	8000b58 <SSD1306_DrawPixel+0xac>
    return;
 8000b56:	bf00      	nop
  }
}
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	200004d8 	.word	0x200004d8
 8000b64:	200000d8 	.word	0x200000d8

08000b68 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	460a      	mov	r2, r1
 8000b72:	80fb      	strh	r3, [r7, #6]
 8000b74:	4613      	mov	r3, r2
 8000b76:	80bb      	strh	r3, [r7, #4]
  /* Set write pointers */
  SSD1306.CurrentX = x;
 8000b78:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <SSD1306_GotoXY+0x28>)
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	8013      	strh	r3, [r2, #0]
  SSD1306.CurrentY = y;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <SSD1306_GotoXY+0x28>)
 8000b80:	88bb      	ldrh	r3, [r7, #4]
 8000b82:	8053      	strh	r3, [r2, #2]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	200004d8 	.word	0x200004d8

08000b94 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	71bb      	strb	r3, [r7, #6]
  uint32_t i, b, j;

  /* Check available space in LCD */
  if (
    SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ba4:	4b3a      	ldr	r3, [pc, #232]	; (8000c90 <SSD1306_Putc+0xfc>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
  if (
 8000bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8000bb2:	dc07      	bgt.n	8000bc4 <SSD1306_Putc+0x30>
    SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000bb4:	4b36      	ldr	r3, [pc, #216]	; (8000c90 <SSD1306_Putc+0xfc>)
 8000bb6:	885b      	ldrh	r3, [r3, #2]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	785b      	ldrb	r3, [r3, #1]
 8000bbe:	4413      	add	r3, r2
    SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000bc0:	2b3f      	cmp	r3, #63	; 0x3f
 8000bc2:	dd01      	ble.n	8000bc8 <SSD1306_Putc+0x34>
  ) {
    /* Error */
    return 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	e05e      	b.n	8000c86 <SSD1306_Putc+0xf2>
  }

  /* Go through font */
  for (i = 0; i < Font->FontHeight; i++) {
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	e04b      	b.n	8000c66 <SSD1306_Putc+0xd2>
    b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	3b20      	subs	r3, #32
 8000bd6:	6839      	ldr	r1, [r7, #0]
 8000bd8:	7849      	ldrb	r1, [r1, #1]
 8000bda:	fb01 f303 	mul.w	r3, r1, r3
 8000bde:	4619      	mov	r1, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	440b      	add	r3, r1
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	4413      	add	r3, r2
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	60fb      	str	r3, [r7, #12]
    for (j = 0; j < Font->FontWidth; j++) {
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	e030      	b.n	8000c54 <SSD1306_Putc+0xc0>
      if ((b << j) & 0x8000) {
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d010      	beq.n	8000c24 <SSD1306_Putc+0x90>
        SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000c02:	4b23      	ldr	r3, [pc, #140]	; (8000c90 <SSD1306_Putc+0xfc>)
 8000c04:	881a      	ldrh	r2, [r3, #0]
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	4413      	add	r3, r2
 8000c0c:	b298      	uxth	r0, r3
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <SSD1306_Putc+0xfc>)
 8000c10:	885a      	ldrh	r2, [r3, #2]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	4413      	add	r3, r2
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	79ba      	ldrb	r2, [r7, #6]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f7ff ff45 	bl	8000aac <SSD1306_DrawPixel>
 8000c22:	e014      	b.n	8000c4e <SSD1306_Putc+0xba>
      } else {
        SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000c24:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <SSD1306_Putc+0xfc>)
 8000c26:	881a      	ldrh	r2, [r3, #0]
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b298      	uxth	r0, r3
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <SSD1306_Putc+0xfc>)
 8000c32:	885a      	ldrh	r2, [r3, #2]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	4413      	add	r3, r2
 8000c3a:	b299      	uxth	r1, r3
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	bf0c      	ite	eq
 8000c42:	2301      	moveq	r3, #1
 8000c44:	2300      	movne	r3, #0
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	f7ff ff2f 	bl	8000aac <SSD1306_DrawPixel>
    for (j = 0; j < Font->FontWidth; j++) {
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	3301      	adds	r3, #1
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d3c8      	bcc.n	8000bf2 <SSD1306_Putc+0x5e>
  for (i = 0; i < Font->FontHeight; i++) {
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	3301      	adds	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	785b      	ldrb	r3, [r3, #1]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d3ad      	bcc.n	8000bce <SSD1306_Putc+0x3a>
      }
    }
  }

  /* Increase pointer */
  SSD1306.CurrentX += Font->FontWidth;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <SSD1306_Putc+0xfc>)
 8000c74:	881a      	ldrh	r2, [r3, #0]
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	4413      	add	r3, r2
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <SSD1306_Putc+0xfc>)
 8000c82:	801a      	strh	r2, [r3, #0]

  /* Return character written */
  return ch;
 8000c84:	79fb      	ldrb	r3, [r7, #7]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200004d8 	.word	0x200004d8

08000c94 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	71fb      	strb	r3, [r7, #7]
  /* Write characters */
  while (*str) {
 8000ca2:	e012      	b.n	8000cca <SSD1306_Puts+0x36>
    /* Write character by character */
    if (SSD1306_Putc(*str, Font, color) != *str) {
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	79fa      	ldrb	r2, [r7, #7]
 8000caa:	68b9      	ldr	r1, [r7, #8]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff71 	bl	8000b94 <SSD1306_Putc>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d002      	beq.n	8000cc4 <SSD1306_Puts+0x30>
      /* Return error */
      return *str;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	e008      	b.n	8000cd6 <SSD1306_Puts+0x42>
    }

    /* Increase string pointer */
    str++;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
  while (*str) {
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1e8      	bne.n	8000ca4 <SSD1306_Puts+0x10>
  }

  /* Everything OK, zero should be returned */
  return *str;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000cde:	b590      	push	{r4, r7, lr}
 8000ce0:	b087      	sub	sp, #28
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4604      	mov	r4, r0
 8000ce6:	4608      	mov	r0, r1
 8000ce8:	4611      	mov	r1, r2
 8000cea:	461a      	mov	r2, r3
 8000cec:	4623      	mov	r3, r4
 8000cee:	80fb      	strh	r3, [r7, #6]
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	80bb      	strh	r3, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	807b      	strh	r3, [r7, #2]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	803b      	strh	r3, [r7, #0]
  int16_t dx, dy, sx, sy, err, e2, i, tmp;

  /* Check for overflow */
  if (x0 >= SSD1306_WIDTH) {
 8000cfc:	88fb      	ldrh	r3, [r7, #6]
 8000cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8000d00:	d901      	bls.n	8000d06 <SSD1306_DrawLine+0x28>
    x0 = SSD1306_WIDTH - 1;
 8000d02:	237f      	movs	r3, #127	; 0x7f
 8000d04:	80fb      	strh	r3, [r7, #6]
  }
  if (x1 >= SSD1306_WIDTH) {
 8000d06:	887b      	ldrh	r3, [r7, #2]
 8000d08:	2b7f      	cmp	r3, #127	; 0x7f
 8000d0a:	d901      	bls.n	8000d10 <SSD1306_DrawLine+0x32>
    x1 = SSD1306_WIDTH - 1;
 8000d0c:	237f      	movs	r3, #127	; 0x7f
 8000d0e:	807b      	strh	r3, [r7, #2]
  }
  if (y0 >= SSD1306_HEIGHT) {
 8000d10:	88bb      	ldrh	r3, [r7, #4]
 8000d12:	2b3f      	cmp	r3, #63	; 0x3f
 8000d14:	d901      	bls.n	8000d1a <SSD1306_DrawLine+0x3c>
    y0 = SSD1306_HEIGHT - 1;
 8000d16:	233f      	movs	r3, #63	; 0x3f
 8000d18:	80bb      	strh	r3, [r7, #4]
  }
  if (y1 >= SSD1306_HEIGHT) {
 8000d1a:	883b      	ldrh	r3, [r7, #0]
 8000d1c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d1e:	d901      	bls.n	8000d24 <SSD1306_DrawLine+0x46>
    y1 = SSD1306_HEIGHT - 1;
 8000d20:	233f      	movs	r3, #63	; 0x3f
 8000d22:	803b      	strh	r3, [r7, #0]
  }

  dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8000d24:	88fa      	ldrh	r2, [r7, #6]
 8000d26:	887b      	ldrh	r3, [r7, #2]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d205      	bcs.n	8000d38 <SSD1306_DrawLine+0x5a>
 8000d2c:	887a      	ldrh	r2, [r7, #2]
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	b21b      	sxth	r3, r3
 8000d36:	e004      	b.n	8000d42 <SSD1306_DrawLine+0x64>
 8000d38:	88fa      	ldrh	r2, [r7, #6]
 8000d3a:	887b      	ldrh	r3, [r7, #2]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	827b      	strh	r3, [r7, #18]
  dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8000d44:	88ba      	ldrh	r2, [r7, #4]
 8000d46:	883b      	ldrh	r3, [r7, #0]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d205      	bcs.n	8000d58 <SSD1306_DrawLine+0x7a>
 8000d4c:	883a      	ldrh	r2, [r7, #0]
 8000d4e:	88bb      	ldrh	r3, [r7, #4]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	e004      	b.n	8000d62 <SSD1306_DrawLine+0x84>
 8000d58:	88ba      	ldrh	r2, [r7, #4]
 8000d5a:	883b      	ldrh	r3, [r7, #0]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	823b      	strh	r3, [r7, #16]
  sx = (x0 < x1) ? 1 : -1;
 8000d64:	88fa      	ldrh	r2, [r7, #6]
 8000d66:	887b      	ldrh	r3, [r7, #2]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d201      	bcs.n	8000d70 <SSD1306_DrawLine+0x92>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e001      	b.n	8000d74 <SSD1306_DrawLine+0x96>
 8000d70:	f04f 33ff 	mov.w	r3, #4294967295
 8000d74:	81fb      	strh	r3, [r7, #14]
  sy = (y0 < y1) ? 1 : -1;
 8000d76:	88ba      	ldrh	r2, [r7, #4]
 8000d78:	883b      	ldrh	r3, [r7, #0]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d201      	bcs.n	8000d82 <SSD1306_DrawLine+0xa4>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e001      	b.n	8000d86 <SSD1306_DrawLine+0xa8>
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	81bb      	strh	r3, [r7, #12]
  err = ((dx > dy) ? dx : -dy) / 2;
 8000d88:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000d8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dd06      	ble.n	8000da2 <SSD1306_DrawLine+0xc4>
 8000d94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000d98:	0fda      	lsrs	r2, r3, #31
 8000d9a:	4413      	add	r3, r2
 8000d9c:	105b      	asrs	r3, r3, #1
 8000d9e:	b21b      	sxth	r3, r3
 8000da0:	e006      	b.n	8000db0 <SSD1306_DrawLine+0xd2>
 8000da2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000da6:	0fda      	lsrs	r2, r3, #31
 8000da8:	4413      	add	r3, r2
 8000daa:	105b      	asrs	r3, r3, #1
 8000dac:	425b      	negs	r3, r3
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	82fb      	strh	r3, [r7, #22]

  if (dx == 0) {
 8000db2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d129      	bne.n	8000e0e <SSD1306_DrawLine+0x130>
    if (y1 < y0) {
 8000dba:	883a      	ldrh	r2, [r7, #0]
 8000dbc:	88bb      	ldrh	r3, [r7, #4]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d205      	bcs.n	8000dce <SSD1306_DrawLine+0xf0>
      tmp = y1;
 8000dc2:	883b      	ldrh	r3, [r7, #0]
 8000dc4:	813b      	strh	r3, [r7, #8]
      y1 = y0;
 8000dc6:	88bb      	ldrh	r3, [r7, #4]
 8000dc8:	803b      	strh	r3, [r7, #0]
      y0 = tmp;
 8000dca:	893b      	ldrh	r3, [r7, #8]
 8000dcc:	80bb      	strh	r3, [r7, #4]
    }

    if (x1 < x0) {
 8000dce:	887a      	ldrh	r2, [r7, #2]
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d205      	bcs.n	8000de2 <SSD1306_DrawLine+0x104>
      tmp = x1;
 8000dd6:	887b      	ldrh	r3, [r7, #2]
 8000dd8:	813b      	strh	r3, [r7, #8]
      x1 = x0;
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	807b      	strh	r3, [r7, #2]
      x0 = tmp;
 8000dde:	893b      	ldrh	r3, [r7, #8]
 8000de0:	80fb      	strh	r3, [r7, #6]
    }

    /* Vertical line */
    for (i = y0; i <= y1; i++) {
 8000de2:	88bb      	ldrh	r3, [r7, #4]
 8000de4:	82bb      	strh	r3, [r7, #20]
 8000de6:	e00c      	b.n	8000e02 <SSD1306_DrawLine+0x124>
      SSD1306_DrawPixel(x0, i, c);
 8000de8:	8ab9      	ldrh	r1, [r7, #20]
 8000dea:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fe5b 	bl	8000aac <SSD1306_DrawPixel>
    for (i = y0; i <= y1; i++) {
 8000df6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	82bb      	strh	r3, [r7, #20]
 8000e02:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e06:	883b      	ldrh	r3, [r7, #0]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	dded      	ble.n	8000de8 <SSD1306_DrawLine+0x10a>
    }

    /* Return from function */
    return;
 8000e0c:	e05f      	b.n	8000ece <SSD1306_DrawLine+0x1f0>
  }

  if (dy == 0) {
 8000e0e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d129      	bne.n	8000e6a <SSD1306_DrawLine+0x18c>
    if (y1 < y0) {
 8000e16:	883a      	ldrh	r2, [r7, #0]
 8000e18:	88bb      	ldrh	r3, [r7, #4]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d205      	bcs.n	8000e2a <SSD1306_DrawLine+0x14c>
      tmp = y1;
 8000e1e:	883b      	ldrh	r3, [r7, #0]
 8000e20:	813b      	strh	r3, [r7, #8]
      y1 = y0;
 8000e22:	88bb      	ldrh	r3, [r7, #4]
 8000e24:	803b      	strh	r3, [r7, #0]
      y0 = tmp;
 8000e26:	893b      	ldrh	r3, [r7, #8]
 8000e28:	80bb      	strh	r3, [r7, #4]
    }

    if (x1 < x0) {
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d205      	bcs.n	8000e3e <SSD1306_DrawLine+0x160>
      tmp = x1;
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	813b      	strh	r3, [r7, #8]
      x1 = x0;
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	807b      	strh	r3, [r7, #2]
      x0 = tmp;
 8000e3a:	893b      	ldrh	r3, [r7, #8]
 8000e3c:	80fb      	strh	r3, [r7, #6]
    }

    /* Horizontal line */
    for (i = x0; i <= x1; i++) {
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	82bb      	strh	r3, [r7, #20]
 8000e42:	e00c      	b.n	8000e5e <SSD1306_DrawLine+0x180>
      SSD1306_DrawPixel(i, y0, c);
 8000e44:	8abb      	ldrh	r3, [r7, #20]
 8000e46:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e4a:	88b9      	ldrh	r1, [r7, #4]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fe2d 	bl	8000aac <SSD1306_DrawPixel>
    for (i = x0; i <= x1; i++) {
 8000e52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	3301      	adds	r3, #1
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	82bb      	strh	r3, [r7, #20]
 8000e5e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e62:	887b      	ldrh	r3, [r7, #2]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	dded      	ble.n	8000e44 <SSD1306_DrawLine+0x166>
    }

    /* Return from function */
    return;
 8000e68:	e031      	b.n	8000ece <SSD1306_DrawLine+0x1f0>
  }

  while (1) {
    SSD1306_DrawPixel(x0, y0, c);
 8000e6a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e6e:	88b9      	ldrh	r1, [r7, #4]
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fe1a 	bl	8000aac <SSD1306_DrawPixel>
    if (x0 == x1 && y0 == y1) {
 8000e78:	88fa      	ldrh	r2, [r7, #6]
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d103      	bne.n	8000e88 <SSD1306_DrawLine+0x1aa>
 8000e80:	88ba      	ldrh	r2, [r7, #4]
 8000e82:	883b      	ldrh	r3, [r7, #0]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d021      	beq.n	8000ecc <SSD1306_DrawLine+0x1ee>
      break;
    }
    e2 = err;
 8000e88:	8afb      	ldrh	r3, [r7, #22]
 8000e8a:	817b      	strh	r3, [r7, #10]
    if (e2 > -dx) {
 8000e8c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000e90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e94:	425b      	negs	r3, r3
 8000e96:	429a      	cmp	r2, r3
 8000e98:	dd08      	ble.n	8000eac <SSD1306_DrawLine+0x1ce>
      err -= dy;
 8000e9a:	8afa      	ldrh	r2, [r7, #22]
 8000e9c:	8a3b      	ldrh	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	82fb      	strh	r3, [r7, #22]
      x0 += sx;
 8000ea4:	89fa      	ldrh	r2, [r7, #14]
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	80fb      	strh	r3, [r7, #6]
    }
    if (e2 < dy) {
 8000eac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000eb0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	dad8      	bge.n	8000e6a <SSD1306_DrawLine+0x18c>
      err += dx;
 8000eb8:	8afa      	ldrh	r2, [r7, #22]
 8000eba:	8a7b      	ldrh	r3, [r7, #18]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	82fb      	strh	r3, [r7, #22]
      y0 += sy;
 8000ec2:	89ba      	ldrh	r2, [r7, #12]
 8000ec4:	88bb      	ldrh	r3, [r7, #4]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	80bb      	strh	r3, [r7, #4]
    SSD1306_DrawPixel(x0, y0, c);
 8000eca:	e7ce      	b.n	8000e6a <SSD1306_DrawLine+0x18c>
      break;
 8000ecc:	bf00      	nop
    }
  }
}
 8000ece:	371c      	adds	r7, #28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd90      	pop	{r4, r7, pc}

08000ed4 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	4604      	mov	r4, r0
 8000edc:	4608      	mov	r0, r1
 8000ede:	4611      	mov	r1, r2
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4623      	mov	r3, r4
 8000ee4:	80fb      	strh	r3, [r7, #6]
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80bb      	strh	r3, [r7, #4]
 8000eea:	460b      	mov	r3, r1
 8000eec:	807b      	strh	r3, [r7, #2]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	803b      	strh	r3, [r7, #0]
  /* Check input parameters */
  if (
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef6:	d853      	bhi.n	8000fa0 <SSD1306_DrawRectangle+0xcc>
    x >= SSD1306_WIDTH ||
 8000ef8:	88bb      	ldrh	r3, [r7, #4]
 8000efa:	2b3f      	cmp	r3, #63	; 0x3f
 8000efc:	d850      	bhi.n	8000fa0 <SSD1306_DrawRectangle+0xcc>
    /* Return error */
    return;
  }

  /* Check width and height */
  if ((x + w) >= SSD1306_WIDTH) {
 8000efe:	88fa      	ldrh	r2, [r7, #6]
 8000f00:	887b      	ldrh	r3, [r7, #2]
 8000f02:	4413      	add	r3, r2
 8000f04:	2b7f      	cmp	r3, #127	; 0x7f
 8000f06:	dd03      	ble.n	8000f10 <SSD1306_DrawRectangle+0x3c>
    w = SSD1306_WIDTH - x;
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000f0e:	807b      	strh	r3, [r7, #2]
  }
  if ((y + h) >= SSD1306_HEIGHT) {
 8000f10:	88ba      	ldrh	r2, [r7, #4]
 8000f12:	883b      	ldrh	r3, [r7, #0]
 8000f14:	4413      	add	r3, r2
 8000f16:	2b3f      	cmp	r3, #63	; 0x3f
 8000f18:	dd03      	ble.n	8000f22 <SSD1306_DrawRectangle+0x4e>
    h = SSD1306_HEIGHT - y;
 8000f1a:	88bb      	ldrh	r3, [r7, #4]
 8000f1c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000f20:	803b      	strh	r3, [r7, #0]
  }

  /* Draw 4 lines */
  SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8000f22:	88fa      	ldrh	r2, [r7, #6]
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	4413      	add	r3, r2
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	88bc      	ldrh	r4, [r7, #4]
 8000f2c:	88b9      	ldrh	r1, [r7, #4]
 8000f2e:	88f8      	ldrh	r0, [r7, #6]
 8000f30:	7e3b      	ldrb	r3, [r7, #24]
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	4623      	mov	r3, r4
 8000f36:	f7ff fed2 	bl	8000cde <SSD1306_DrawLine>
  SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8000f3a:	88ba      	ldrh	r2, [r7, #4]
 8000f3c:	883b      	ldrh	r3, [r7, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	b299      	uxth	r1, r3
 8000f42:	88fa      	ldrh	r2, [r7, #6]
 8000f44:	887b      	ldrh	r3, [r7, #2]
 8000f46:	4413      	add	r3, r2
 8000f48:	b29c      	uxth	r4, r3
 8000f4a:	88ba      	ldrh	r2, [r7, #4]
 8000f4c:	883b      	ldrh	r3, [r7, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	88f8      	ldrh	r0, [r7, #6]
 8000f54:	7e3b      	ldrb	r3, [r7, #24]
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	4622      	mov	r2, r4
 8000f5c:	f7ff febf 	bl	8000cde <SSD1306_DrawLine>
  SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8000f60:	88ba      	ldrh	r2, [r7, #4]
 8000f62:	883b      	ldrh	r3, [r7, #0]
 8000f64:	4413      	add	r3, r2
 8000f66:	b29c      	uxth	r4, r3
 8000f68:	88fa      	ldrh	r2, [r7, #6]
 8000f6a:	88b9      	ldrh	r1, [r7, #4]
 8000f6c:	88f8      	ldrh	r0, [r7, #6]
 8000f6e:	7e3b      	ldrb	r3, [r7, #24]
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4623      	mov	r3, r4
 8000f74:	f7ff feb3 	bl	8000cde <SSD1306_DrawLine>
  SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8000f78:	88fa      	ldrh	r2, [r7, #6]
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b298      	uxth	r0, r3
 8000f80:	88fa      	ldrh	r2, [r7, #6]
 8000f82:	887b      	ldrh	r3, [r7, #2]
 8000f84:	4413      	add	r3, r2
 8000f86:	b29c      	uxth	r4, r3
 8000f88:	88ba      	ldrh	r2, [r7, #4]
 8000f8a:	883b      	ldrh	r3, [r7, #0]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	88b9      	ldrh	r1, [r7, #4]
 8000f92:	7e3b      	ldrb	r3, [r7, #24]
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	4613      	mov	r3, r2
 8000f98:	4622      	mov	r2, r4
 8000f9a:	f7ff fea0 	bl	8000cde <SSD1306_DrawLine>
 8000f9e:	e000      	b.n	8000fa2 <SSD1306_DrawRectangle+0xce>
    return;
 8000fa0:	bf00      	nop
}
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd90      	pop	{r4, r7, pc}

08000fa8 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	4604      	mov	r4, r0
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	80fb      	strh	r3, [r7, #6]
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80bb      	strh	r3, [r7, #4]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	807b      	strh	r3, [r7, #2]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	803b      	strh	r3, [r7, #0]
  uint8_t i;

  /* Check input parameters */
  if (
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	2b7f      	cmp	r3, #127	; 0x7f
 8000fca:	d836      	bhi.n	800103a <SSD1306_DrawFilledRectangle+0x92>
    x >= SSD1306_WIDTH ||
 8000fcc:	88bb      	ldrh	r3, [r7, #4]
 8000fce:	2b3f      	cmp	r3, #63	; 0x3f
 8000fd0:	d833      	bhi.n	800103a <SSD1306_DrawFilledRectangle+0x92>
    /* Return error */
    return;
  }

  /* Check width and height */
  if ((x + w) >= SSD1306_WIDTH) {
 8000fd2:	88fa      	ldrh	r2, [r7, #6]
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	2b7f      	cmp	r3, #127	; 0x7f
 8000fda:	dd03      	ble.n	8000fe4 <SSD1306_DrawFilledRectangle+0x3c>
    w = SSD1306_WIDTH - x;
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000fe2:	807b      	strh	r3, [r7, #2]
  }
  if ((y + h) >= SSD1306_HEIGHT) {
 8000fe4:	88ba      	ldrh	r2, [r7, #4]
 8000fe6:	883b      	ldrh	r3, [r7, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	2b3f      	cmp	r3, #63	; 0x3f
 8000fec:	dd03      	ble.n	8000ff6 <SSD1306_DrawFilledRectangle+0x4e>
    h = SSD1306_HEIGHT - y;
 8000fee:	88bb      	ldrh	r3, [r7, #4]
 8000ff0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000ff4:	803b      	strh	r3, [r7, #0]
  }

  /* Draw lines */
  for (i = 0; i <= h; i++) {
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	e018      	b.n	800102e <SSD1306_DrawFilledRectangle+0x86>
    /* Draw lines */
    SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	88bb      	ldrh	r3, [r7, #4]
 8001002:	4413      	add	r3, r2
 8001004:	b299      	uxth	r1, r3
 8001006:	88fa      	ldrh	r2, [r7, #6]
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	4413      	add	r3, r2
 800100c:	b29c      	uxth	r4, r3
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	b29a      	uxth	r2, r3
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	b29a      	uxth	r2, r3
 8001018:	88f8      	ldrh	r0, [r7, #6]
 800101a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	4613      	mov	r3, r2
 8001022:	4622      	mov	r2, r4
 8001024:	f7ff fe5b 	bl	8000cde <SSD1306_DrawLine>
  for (i = 0; i <= h; i++) {
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	3301      	adds	r3, #1
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	b29b      	uxth	r3, r3
 8001032:	883a      	ldrh	r2, [r7, #0]
 8001034:	429a      	cmp	r2, r3
 8001036:	d2e1      	bcs.n	8000ffc <SSD1306_DrawFilledRectangle+0x54>
 8001038:	e000      	b.n	800103c <SSD1306_DrawFilledRectangle+0x94>
    return;
 800103a:	bf00      	nop
  }
}
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	bd90      	pop	{r4, r7, pc}

08001042 <SSD1306_DrawTriangle>:

void SSD1306_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
 8001042:	b590      	push	{r4, r7, lr}
 8001044:	b085      	sub	sp, #20
 8001046:	af02      	add	r7, sp, #8
 8001048:	4604      	mov	r4, r0
 800104a:	4608      	mov	r0, r1
 800104c:	4611      	mov	r1, r2
 800104e:	461a      	mov	r2, r3
 8001050:	4623      	mov	r3, r4
 8001052:	80fb      	strh	r3, [r7, #6]
 8001054:	4603      	mov	r3, r0
 8001056:	80bb      	strh	r3, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
 800105c:	4613      	mov	r3, r2
 800105e:	803b      	strh	r3, [r7, #0]
  /* Draw lines */
  SSD1306_DrawLine(x1, y1, x2, y2, color);
 8001060:	883c      	ldrh	r4, [r7, #0]
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	88b9      	ldrh	r1, [r7, #4]
 8001066:	88f8      	ldrh	r0, [r7, #6]
 8001068:	f897 3020 	ldrb.w	r3, [r7, #32]
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	4623      	mov	r3, r4
 8001070:	f7ff fe35 	bl	8000cde <SSD1306_DrawLine>
  SSD1306_DrawLine(x2, y2, x3, y3, color);
 8001074:	8bbc      	ldrh	r4, [r7, #28]
 8001076:	8b3a      	ldrh	r2, [r7, #24]
 8001078:	8839      	ldrh	r1, [r7, #0]
 800107a:	8878      	ldrh	r0, [r7, #2]
 800107c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	4623      	mov	r3, r4
 8001084:	f7ff fe2b 	bl	8000cde <SSD1306_DrawLine>
  SSD1306_DrawLine(x3, y3, x1, y1, color);
 8001088:	88bc      	ldrh	r4, [r7, #4]
 800108a:	88fa      	ldrh	r2, [r7, #6]
 800108c:	8bb9      	ldrh	r1, [r7, #28]
 800108e:	8b38      	ldrh	r0, [r7, #24]
 8001090:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	4623      	mov	r3, r4
 8001098:	f7ff fe21 	bl	8000cde <SSD1306_DrawLine>
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd90      	pop	{r4, r7, pc}

080010a4 <SSD1306_DrawCircle>:
    x += xinc2;
    y += yinc2;
  }
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4604      	mov	r4, r0
 80010ac:	4608      	mov	r0, r1
 80010ae:	4611      	mov	r1, r2
 80010b0:	461a      	mov	r2, r3
 80010b2:	4623      	mov	r3, r4
 80010b4:	80fb      	strh	r3, [r7, #6]
 80010b6:	4603      	mov	r3, r0
 80010b8:	80bb      	strh	r3, [r7, #4]
 80010ba:	460b      	mov	r3, r1
 80010bc:	807b      	strh	r3, [r7, #2]
 80010be:	4613      	mov	r3, r2
 80010c0:	707b      	strb	r3, [r7, #1]
  int16_t f = 1 - r;
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	f1c3 0301 	rsb	r3, r3, #1
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	461a      	mov	r2, r3
 80010d4:	03d2      	lsls	r2, r2, #15
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	b29b      	uxth	r3, r3
 80010dc:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 80010e2:	887b      	ldrh	r3, [r7, #2]
 80010e4:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 80010e6:	88f8      	ldrh	r0, [r7, #6]
 80010e8:	88ba      	ldrh	r2, [r7, #4]
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	4413      	add	r3, r2
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	787a      	ldrb	r2, [r7, #1]
 80010f2:	4619      	mov	r1, r3
 80010f4:	f7ff fcda 	bl	8000aac <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 80010f8:	88f8      	ldrh	r0, [r7, #6]
 80010fa:	88ba      	ldrh	r2, [r7, #4]
 80010fc:	887b      	ldrh	r3, [r7, #2]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	b29b      	uxth	r3, r3
 8001102:	787a      	ldrb	r2, [r7, #1]
 8001104:	4619      	mov	r1, r3
 8001106:	f7ff fcd1 	bl	8000aac <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 800110a:	88fa      	ldrh	r2, [r7, #6]
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	4413      	add	r3, r2
 8001110:	b29b      	uxth	r3, r3
 8001112:	88b9      	ldrh	r1, [r7, #4]
 8001114:	787a      	ldrb	r2, [r7, #1]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fcc8 	bl	8000aac <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 800111c:	88fa      	ldrh	r2, [r7, #6]
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	b29b      	uxth	r3, r3
 8001124:	88b9      	ldrh	r1, [r7, #4]
 8001126:	787a      	ldrb	r2, [r7, #1]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fcbf 	bl	8000aac <SSD1306_DrawPixel>

    while (x < y) {
 800112e:	e081      	b.n	8001234 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 8001130:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0e      	blt.n	8001156 <SSD1306_DrawCircle+0xb2>
            y--;
 8001138:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800113c:	b29b      	uxth	r3, r3
 800113e:	3b01      	subs	r3, #1
 8001140:	b29b      	uxth	r3, r3
 8001142:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001144:	8a7b      	ldrh	r3, [r7, #18]
 8001146:	3302      	adds	r3, #2
 8001148:	b29b      	uxth	r3, r3
 800114a:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 800114c:	8afa      	ldrh	r2, [r7, #22]
 800114e:	8a7b      	ldrh	r3, [r7, #18]
 8001150:	4413      	add	r3, r2
 8001152:	b29b      	uxth	r3, r3
 8001154:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001156:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800115a:	b29b      	uxth	r3, r3
 800115c:	3301      	adds	r3, #1
 800115e:	b29b      	uxth	r3, r3
 8001160:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001162:	8abb      	ldrh	r3, [r7, #20]
 8001164:	3302      	adds	r3, #2
 8001166:	b29b      	uxth	r3, r3
 8001168:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 800116a:	8afa      	ldrh	r2, [r7, #22]
 800116c:	8abb      	ldrh	r3, [r7, #20]
 800116e:	4413      	add	r3, r2
 8001170:	b29b      	uxth	r3, r3
 8001172:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8001174:	88fa      	ldrh	r2, [r7, #6]
 8001176:	8a3b      	ldrh	r3, [r7, #16]
 8001178:	4413      	add	r3, r2
 800117a:	b298      	uxth	r0, r3
 800117c:	88ba      	ldrh	r2, [r7, #4]
 800117e:	89fb      	ldrh	r3, [r7, #14]
 8001180:	4413      	add	r3, r2
 8001182:	b29b      	uxth	r3, r3
 8001184:	787a      	ldrb	r2, [r7, #1]
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fc90 	bl	8000aac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 800118c:	88fa      	ldrh	r2, [r7, #6]
 800118e:	8a3b      	ldrh	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	b298      	uxth	r0, r3
 8001194:	88ba      	ldrh	r2, [r7, #4]
 8001196:	89fb      	ldrh	r3, [r7, #14]
 8001198:	4413      	add	r3, r2
 800119a:	b29b      	uxth	r3, r3
 800119c:	787a      	ldrb	r2, [r7, #1]
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fc84 	bl	8000aac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 80011a4:	88fa      	ldrh	r2, [r7, #6]
 80011a6:	8a3b      	ldrh	r3, [r7, #16]
 80011a8:	4413      	add	r3, r2
 80011aa:	b298      	uxth	r0, r3
 80011ac:	88ba      	ldrh	r2, [r7, #4]
 80011ae:	89fb      	ldrh	r3, [r7, #14]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	787a      	ldrb	r2, [r7, #1]
 80011b6:	4619      	mov	r1, r3
 80011b8:	f7ff fc78 	bl	8000aac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 80011bc:	88fa      	ldrh	r2, [r7, #6]
 80011be:	8a3b      	ldrh	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	b298      	uxth	r0, r3
 80011c4:	88ba      	ldrh	r2, [r7, #4]
 80011c6:	89fb      	ldrh	r3, [r7, #14]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	787a      	ldrb	r2, [r7, #1]
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fc6c 	bl	8000aac <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 80011d4:	88fa      	ldrh	r2, [r7, #6]
 80011d6:	89fb      	ldrh	r3, [r7, #14]
 80011d8:	4413      	add	r3, r2
 80011da:	b298      	uxth	r0, r3
 80011dc:	88ba      	ldrh	r2, [r7, #4]
 80011de:	8a3b      	ldrh	r3, [r7, #16]
 80011e0:	4413      	add	r3, r2
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	787a      	ldrb	r2, [r7, #1]
 80011e6:	4619      	mov	r1, r3
 80011e8:	f7ff fc60 	bl	8000aac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 80011ec:	88fa      	ldrh	r2, [r7, #6]
 80011ee:	89fb      	ldrh	r3, [r7, #14]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	b298      	uxth	r0, r3
 80011f4:	88ba      	ldrh	r2, [r7, #4]
 80011f6:	8a3b      	ldrh	r3, [r7, #16]
 80011f8:	4413      	add	r3, r2
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	787a      	ldrb	r2, [r7, #1]
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fc54 	bl	8000aac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8001204:	88fa      	ldrh	r2, [r7, #6]
 8001206:	89fb      	ldrh	r3, [r7, #14]
 8001208:	4413      	add	r3, r2
 800120a:	b298      	uxth	r0, r3
 800120c:	88ba      	ldrh	r2, [r7, #4]
 800120e:	8a3b      	ldrh	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	b29b      	uxth	r3, r3
 8001214:	787a      	ldrb	r2, [r7, #1]
 8001216:	4619      	mov	r1, r3
 8001218:	f7ff fc48 	bl	8000aac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 800121c:	88fa      	ldrh	r2, [r7, #6]
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	b298      	uxth	r0, r3
 8001224:	88ba      	ldrh	r2, [r7, #4]
 8001226:	8a3b      	ldrh	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	b29b      	uxth	r3, r3
 800122c:	787a      	ldrb	r2, [r7, #1]
 800122e:	4619      	mov	r1, r3
 8001230:	f7ff fc3c 	bl	8000aac <SSD1306_DrawPixel>
    while (x < y) {
 8001234:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001238:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800123c:	429a      	cmp	r2, r3
 800123e:	f6ff af77 	blt.w	8001130 <SSD1306_DrawCircle+0x8c>
    }
}
 8001242:	bf00      	nop
 8001244:	bf00      	nop
 8001246:	371c      	adds	r7, #28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd90      	pop	{r4, r7, pc}

0800124c <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af02      	add	r7, sp, #8
 8001252:	4604      	mov	r4, r0
 8001254:	4608      	mov	r0, r1
 8001256:	4611      	mov	r1, r2
 8001258:	461a      	mov	r2, r3
 800125a:	4623      	mov	r3, r4
 800125c:	80fb      	strh	r3, [r7, #6]
 800125e:	4603      	mov	r3, r0
 8001260:	80bb      	strh	r3, [r7, #4]
 8001262:	460b      	mov	r3, r1
 8001264:	807b      	strh	r3, [r7, #2]
 8001266:	4613      	mov	r3, r2
 8001268:	707b      	strb	r3, [r7, #1]
  int16_t f = 1 - r;
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	f1c3 0301 	rsb	r3, r3, #1
 8001270:	b29b      	uxth	r3, r3
 8001272:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8001274:	2301      	movs	r3, #1
 8001276:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8001278:	887b      	ldrh	r3, [r7, #2]
 800127a:	461a      	mov	r2, r3
 800127c:	03d2      	lsls	r2, r2, #15
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	b29b      	uxth	r3, r3
 8001284:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 800128e:	88f8      	ldrh	r0, [r7, #6]
 8001290:	88ba      	ldrh	r2, [r7, #4]
 8001292:	887b      	ldrh	r3, [r7, #2]
 8001294:	4413      	add	r3, r2
 8001296:	b29b      	uxth	r3, r3
 8001298:	787a      	ldrb	r2, [r7, #1]
 800129a:	4619      	mov	r1, r3
 800129c:	f7ff fc06 	bl	8000aac <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 80012a0:	88f8      	ldrh	r0, [r7, #6]
 80012a2:	88ba      	ldrh	r2, [r7, #4]
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	787a      	ldrb	r2, [r7, #1]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f7ff fbfd 	bl	8000aac <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 80012b2:	88fa      	ldrh	r2, [r7, #6]
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	88b9      	ldrh	r1, [r7, #4]
 80012bc:	787a      	ldrb	r2, [r7, #1]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fbf4 	bl	8000aac <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 80012c4:	88fa      	ldrh	r2, [r7, #6]
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	88b9      	ldrh	r1, [r7, #4]
 80012ce:	787a      	ldrb	r2, [r7, #1]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fbeb 	bl	8000aac <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 80012d6:	88fa      	ldrh	r2, [r7, #6]
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b298      	uxth	r0, r3
 80012de:	88b9      	ldrh	r1, [r7, #4]
 80012e0:	88fa      	ldrh	r2, [r7, #6]
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	4413      	add	r3, r2
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	88bc      	ldrh	r4, [r7, #4]
 80012ea:	787b      	ldrb	r3, [r7, #1]
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	4623      	mov	r3, r4
 80012f0:	f7ff fcf5 	bl	8000cde <SSD1306_DrawLine>

    while (x < y) {
 80012f4:	e079      	b.n	80013ea <SSD1306_DrawFilledCircle+0x19e>
        if (f >= 0) {
 80012f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0e      	blt.n	800131c <SSD1306_DrawFilledCircle+0xd0>
            y--;
 80012fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001302:	b29b      	uxth	r3, r3
 8001304:	3b01      	subs	r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800130a:	8a7b      	ldrh	r3, [r7, #18]
 800130c:	3302      	adds	r3, #2
 800130e:	b29b      	uxth	r3, r3
 8001310:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8001312:	8afa      	ldrh	r2, [r7, #22]
 8001314:	8a7b      	ldrh	r3, [r7, #18]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800131c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001320:	b29b      	uxth	r3, r3
 8001322:	3301      	adds	r3, #1
 8001324:	b29b      	uxth	r3, r3
 8001326:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001328:	8abb      	ldrh	r3, [r7, #20]
 800132a:	3302      	adds	r3, #2
 800132c:	b29b      	uxth	r3, r3
 800132e:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8001330:	8afa      	ldrh	r2, [r7, #22]
 8001332:	8abb      	ldrh	r3, [r7, #20]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 800133a:	88fa      	ldrh	r2, [r7, #6]
 800133c:	8a3b      	ldrh	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	b298      	uxth	r0, r3
 8001342:	88ba      	ldrh	r2, [r7, #4]
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	4413      	add	r3, r2
 8001348:	b299      	uxth	r1, r3
 800134a:	88fa      	ldrh	r2, [r7, #6]
 800134c:	8a3b      	ldrh	r3, [r7, #16]
 800134e:	4413      	add	r3, r2
 8001350:	b29c      	uxth	r4, r3
 8001352:	88ba      	ldrh	r2, [r7, #4]
 8001354:	89fb      	ldrh	r3, [r7, #14]
 8001356:	4413      	add	r3, r2
 8001358:	b29a      	uxth	r2, r3
 800135a:	787b      	ldrb	r3, [r7, #1]
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	4613      	mov	r3, r2
 8001360:	4622      	mov	r2, r4
 8001362:	f7ff fcbc 	bl	8000cde <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 8001366:	88fa      	ldrh	r2, [r7, #6]
 8001368:	8a3b      	ldrh	r3, [r7, #16]
 800136a:	4413      	add	r3, r2
 800136c:	b298      	uxth	r0, r3
 800136e:	88ba      	ldrh	r2, [r7, #4]
 8001370:	89fb      	ldrh	r3, [r7, #14]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	b299      	uxth	r1, r3
 8001376:	88fa      	ldrh	r2, [r7, #6]
 8001378:	8a3b      	ldrh	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	b29c      	uxth	r4, r3
 800137e:	88ba      	ldrh	r2, [r7, #4]
 8001380:	89fb      	ldrh	r3, [r7, #14]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	b29a      	uxth	r2, r3
 8001386:	787b      	ldrb	r3, [r7, #1]
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	4613      	mov	r3, r2
 800138c:	4622      	mov	r2, r4
 800138e:	f7ff fca6 	bl	8000cde <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8001392:	88fa      	ldrh	r2, [r7, #6]
 8001394:	89fb      	ldrh	r3, [r7, #14]
 8001396:	4413      	add	r3, r2
 8001398:	b298      	uxth	r0, r3
 800139a:	88ba      	ldrh	r2, [r7, #4]
 800139c:	8a3b      	ldrh	r3, [r7, #16]
 800139e:	4413      	add	r3, r2
 80013a0:	b299      	uxth	r1, r3
 80013a2:	88fa      	ldrh	r2, [r7, #6]
 80013a4:	89fb      	ldrh	r3, [r7, #14]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	b29c      	uxth	r4, r3
 80013aa:	88ba      	ldrh	r2, [r7, #4]
 80013ac:	8a3b      	ldrh	r3, [r7, #16]
 80013ae:	4413      	add	r3, r2
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	787b      	ldrb	r3, [r7, #1]
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	4613      	mov	r3, r2
 80013b8:	4622      	mov	r2, r4
 80013ba:	f7ff fc90 	bl	8000cde <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 80013be:	88fa      	ldrh	r2, [r7, #6]
 80013c0:	89fb      	ldrh	r3, [r7, #14]
 80013c2:	4413      	add	r3, r2
 80013c4:	b298      	uxth	r0, r3
 80013c6:	88ba      	ldrh	r2, [r7, #4]
 80013c8:	8a3b      	ldrh	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	b299      	uxth	r1, r3
 80013ce:	88fa      	ldrh	r2, [r7, #6]
 80013d0:	89fb      	ldrh	r3, [r7, #14]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	b29c      	uxth	r4, r3
 80013d6:	88ba      	ldrh	r2, [r7, #4]
 80013d8:	8a3b      	ldrh	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	b29a      	uxth	r2, r3
 80013de:	787b      	ldrb	r3, [r7, #1]
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	4613      	mov	r3, r2
 80013e4:	4622      	mov	r2, r4
 80013e6:	f7ff fc7a 	bl	8000cde <SSD1306_DrawLine>
    while (x < y) {
 80013ea:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80013ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	f6ff af7f 	blt.w	80012f6 <SSD1306_DrawFilledCircle+0xaa>
    }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	371c      	adds	r7, #28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd90      	pop	{r4, r7, pc}

08001402 <SSD1306_Clear>:



void SSD1306_Clear (void)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	af00      	add	r7, sp, #0
  SSD1306_Fill (0);
 8001406:	2000      	movs	r0, #0
 8001408:	f7ff fb38 	bl	8000a7c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800140c:	f7ff fb0e 	bl	8000a2c <SSD1306_UpdateScreen>
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_MspInit+0x5c>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	4a14      	ldr	r2, [pc, #80]	; (8001470 <HAL_MspInit+0x5c>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6193      	str	r3, [r2, #24]
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_MspInit+0x5c>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_MspInit+0x5c>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <HAL_MspInit+0x5c>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143c:	61d3      	str	r3, [r2, #28]
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_MspInit+0x5c>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_MspInit+0x60>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <HAL_MspInit+0x60>)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	40021000 	.word	0x40021000
 8001474:	40010000 	.word	0x40010000

08001478 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <HAL_SPI_MspInit+0x70>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d123      	bne.n	80014e0 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <HAL_SPI_MspInit+0x74>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a13      	ldr	r2, [pc, #76]	; (80014ec <HAL_SPI_MspInit+0x74>)
 800149e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <HAL_SPI_MspInit+0x74>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <HAL_SPI_MspInit+0x74>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <HAL_SPI_MspInit+0x74>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_SPI_MspInit+0x74>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80014c8:	23a0      	movs	r3, #160	; 0xa0
 80014ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	4619      	mov	r1, r3
 80014da:	4805      	ldr	r0, [pc, #20]	; (80014f0 <HAL_SPI_MspInit+0x78>)
 80014dc:	f000 fc46 	bl	8001d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014e0:	bf00      	nop
 80014e2:	3720      	adds	r7, #32
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40013000 	.word	0x40013000
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010800 	.word	0x40010800

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f8:	e7fe      	b.n	80014f8 <NMI_Handler+0x4>

080014fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <MemManage_Handler+0x4>

08001506 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler+0x4>

08001512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153a:	f000 faf3 	bl	8001b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <_sbrk+0x5c>)
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <_sbrk+0x60>)
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d102      	bne.n	8001566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <_sbrk+0x64>)
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <_sbrk+0x68>)
 8001564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <_sbrk+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	429a      	cmp	r2, r3
 8001572:	d207      	bcs.n	8001584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001574:	f001 fc0e 	bl	8002d94 <__errno>
 8001578:	4603      	mov	r3, r0
 800157a:	220c      	movs	r2, #12
 800157c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157e:	f04f 33ff 	mov.w	r3, #4294967295
 8001582:	e009      	b.n	8001598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <_sbrk+0x64>)
 8001594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001596:	68fb      	ldr	r3, [r7, #12]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20002800 	.word	0x20002800
 80015a4:	00000400 	.word	0x00000400
 80015a8:	200004e0 	.word	0x200004e0
 80015ac:	20000630 	.word	0x20000630

080015b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <TestLines>:
#include "test.h"
#include "oled.h"
#define min(a, b) (((a) < (b)) ? (a) : (b))

void TestLines(uint8_t color)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b087      	sub	sp, #28
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
    uint8_t x1, y1, x2, y2;

    SSD1306_Clear ();
 80015c6:	f7ff ff1c 	bl	8001402 <SSD1306_Clear>

    x1 = y1 = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	737b      	strb	r3, [r7, #13]
 80015ce:	7b7b      	ldrb	r3, [r7, #13]
 80015d0:	733b      	strb	r3, [r7, #12]
    y2    = SSD1306_HEIGHT - 1;
 80015d2:	233f      	movs	r3, #63	; 0x3f
 80015d4:	73bb      	strb	r3, [r7, #14]
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	e014      	b.n	8001606 <TestLines+0x4a>
      {
        SSD1306_DrawLine(x1, y1, x2, y2, color);
 80015dc:	7b3b      	ldrb	r3, [r7, #12]
 80015de:	b298      	uxth	r0, r3
 80015e0:	7b7b      	ldrb	r3, [r7, #13]
 80015e2:	b299      	uxth	r1, r3
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	7bbb      	ldrb	r3, [r7, #14]
 80015ea:	b29c      	uxth	r4, r3
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	4623      	mov	r3, r4
 80015f2:	f7ff fb74 	bl	8000cde <SSD1306_DrawLine>
        HAL_Delay(1);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f000 fab0 	bl	8001b5c <HAL_Delay>
        SSD1306_UpdateScreen();
 80015fc:	f7ff fa16 	bl	8000a2c <SSD1306_UpdateScreen>
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	3306      	adds	r3, #6
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160a:	2b00      	cmp	r3, #0
 800160c:	dae6      	bge.n	80015dc <TestLines+0x20>
      }
    x2    = SSD1306_WIDTH - 1;
 800160e:	237f      	movs	r3, #127	; 0x7f
 8001610:	73fb      	strb	r3, [r7, #15]
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 8001612:	2300      	movs	r3, #0
 8001614:	73bb      	strb	r3, [r7, #14]
 8001616:	e014      	b.n	8001642 <TestLines+0x86>
      {
        SSD1306_DrawLine(x1, y1, x2, y2, color);
 8001618:	7b3b      	ldrb	r3, [r7, #12]
 800161a:	b298      	uxth	r0, r3
 800161c:	7b7b      	ldrb	r3, [r7, #13]
 800161e:	b299      	uxth	r1, r3
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	b29a      	uxth	r2, r3
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	b29c      	uxth	r4, r3
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	4623      	mov	r3, r4
 800162e:	f7ff fb56 	bl	8000cde <SSD1306_DrawLine>
        HAL_Delay(1);
 8001632:	2001      	movs	r0, #1
 8001634:	f000 fa92 	bl	8001b5c <HAL_Delay>
        SSD1306_UpdateScreen();
 8001638:	f7ff f9f8 	bl	8000a2c <SSD1306_UpdateScreen>
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 800163c:	7bbb      	ldrb	r3, [r7, #14]
 800163e:	3306      	adds	r3, #6
 8001640:	73bb      	strb	r3, [r7, #14]
 8001642:	7bbb      	ldrb	r3, [r7, #14]
 8001644:	2b3f      	cmp	r3, #63	; 0x3f
 8001646:	d9e7      	bls.n	8001618 <TestLines+0x5c>
      }

    HAL_Delay(10);
 8001648:	200a      	movs	r0, #10
 800164a:	f000 fa87 	bl	8001b5c <HAL_Delay>


    SSD1306_Clear ();
 800164e:	f7ff fed8 	bl	8001402 <SSD1306_Clear>

    x1    = SSD1306_WIDTH - 1;
 8001652:	237f      	movs	r3, #127	; 0x7f
 8001654:	733b      	strb	r3, [r7, #12]
    y1    = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	737b      	strb	r3, [r7, #13]
    y2    = SSD1306_HEIGHT - 1;
 800165a:	233f      	movs	r3, #63	; 0x3f
 800165c:	73bb      	strb	r3, [r7, #14]
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 800165e:	2300      	movs	r3, #0
 8001660:	73fb      	strb	r3, [r7, #15]
 8001662:	e014      	b.n	800168e <TestLines+0xd2>
      {
        SSD1306_DrawLine(x1, y1, x2, y2, color);
 8001664:	7b3b      	ldrb	r3, [r7, #12]
 8001666:	b298      	uxth	r0, r3
 8001668:	7b7b      	ldrb	r3, [r7, #13]
 800166a:	b299      	uxth	r1, r3
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	b29a      	uxth	r2, r3
 8001670:	7bbb      	ldrb	r3, [r7, #14]
 8001672:	b29c      	uxth	r4, r3
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	4623      	mov	r3, r4
 800167a:	f7ff fb30 	bl	8000cde <SSD1306_DrawLine>
        SSD1306_UpdateScreen();
 800167e:	f7ff f9d5 	bl	8000a2c <SSD1306_UpdateScreen>
        HAL_Delay(1);
 8001682:	2001      	movs	r0, #1
 8001684:	f000 fa6a 	bl	8001b5c <HAL_Delay>
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	3306      	adds	r3, #6
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001692:	2b00      	cmp	r3, #0
 8001694:	dae6      	bge.n	8001664 <TestLines+0xa8>
      }
    x2    = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	73fb      	strb	r3, [r7, #15]
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 800169a:	2300      	movs	r3, #0
 800169c:	73bb      	strb	r3, [r7, #14]
 800169e:	e014      	b.n	80016ca <TestLines+0x10e>
      {
        SSD1306_DrawLine(x1, y1, x2, y2, color);
 80016a0:	7b3b      	ldrb	r3, [r7, #12]
 80016a2:	b298      	uxth	r0, r3
 80016a4:	7b7b      	ldrb	r3, [r7, #13]
 80016a6:	b299      	uxth	r1, r3
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	7bbb      	ldrb	r3, [r7, #14]
 80016ae:	b29c      	uxth	r4, r3
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	4623      	mov	r3, r4
 80016b6:	f7ff fb12 	bl	8000cde <SSD1306_DrawLine>
        SSD1306_UpdateScreen();
 80016ba:	f7ff f9b7 	bl	8000a2c <SSD1306_UpdateScreen>
        HAL_Delay(1);
 80016be:	2001      	movs	r0, #1
 80016c0:	f000 fa4c 	bl	8001b5c <HAL_Delay>
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 80016c4:	7bbb      	ldrb	r3, [r7, #14]
 80016c6:	3306      	adds	r3, #6
 80016c8:	73bb      	strb	r3, [r7, #14]
 80016ca:	7bbb      	ldrb	r3, [r7, #14]
 80016cc:	2b3f      	cmp	r3, #63	; 0x3f
 80016ce:	d9e7      	bls.n	80016a0 <TestLines+0xe4>
      }

    HAL_Delay(10);
 80016d0:	200a      	movs	r0, #10
 80016d2:	f000 fa43 	bl	8001b5c <HAL_Delay>


    SSD1306_Clear ();
 80016d6:	f7ff fe94 	bl	8001402 <SSD1306_Clear>

    x1    = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	733b      	strb	r3, [r7, #12]
    y1    = SSD1306_HEIGHT - 1;
 80016de:	233f      	movs	r3, #63	; 0x3f
 80016e0:	737b      	strb	r3, [r7, #13]
    y2    = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	73bb      	strb	r3, [r7, #14]
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 80016e6:	2300      	movs	r3, #0
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	e014      	b.n	8001716 <TestLines+0x15a>
    {
      SSD1306_DrawLine(x1, y1, x2, y2, color);
 80016ec:	7b3b      	ldrb	r3, [r7, #12]
 80016ee:	b298      	uxth	r0, r3
 80016f0:	7b7b      	ldrb	r3, [r7, #13]
 80016f2:	b299      	uxth	r1, r3
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	7bbb      	ldrb	r3, [r7, #14]
 80016fa:	b29c      	uxth	r4, r3
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	4623      	mov	r3, r4
 8001702:	f7ff faec 	bl	8000cde <SSD1306_DrawLine>
      HAL_Delay(1);
 8001706:	2001      	movs	r0, #1
 8001708:	f000 fa28 	bl	8001b5c <HAL_Delay>
      SSD1306_UpdateScreen();
 800170c:	f7ff f98e 	bl	8000a2c <SSD1306_UpdateScreen>
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	3306      	adds	r3, #6
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171a:	2b00      	cmp	r3, #0
 800171c:	dae6      	bge.n	80016ec <TestLines+0x130>
    }
    x2    = SSD1306_WIDTH - 1;
 800171e:	237f      	movs	r3, #127	; 0x7f
 8001720:	73fb      	strb	r3, [r7, #15]
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 8001722:	2300      	movs	r3, #0
 8001724:	73bb      	strb	r3, [r7, #14]
 8001726:	e014      	b.n	8001752 <TestLines+0x196>
      {
        SSD1306_DrawLine(x1, y1, x2, y2, color);
 8001728:	7b3b      	ldrb	r3, [r7, #12]
 800172a:	b298      	uxth	r0, r3
 800172c:	7b7b      	ldrb	r3, [r7, #13]
 800172e:	b299      	uxth	r1, r3
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	b29a      	uxth	r2, r3
 8001734:	7bbb      	ldrb	r3, [r7, #14]
 8001736:	b29c      	uxth	r4, r3
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	4623      	mov	r3, r4
 800173e:	f7ff face 	bl	8000cde <SSD1306_DrawLine>
        HAL_Delay(1);
 8001742:	2001      	movs	r0, #1
 8001744:	f000 fa0a 	bl	8001b5c <HAL_Delay>
        SSD1306_UpdateScreen();
 8001748:	f7ff f970 	bl	8000a2c <SSD1306_UpdateScreen>
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 800174c:	7bbb      	ldrb	r3, [r7, #14]
 800174e:	3306      	adds	r3, #6
 8001750:	73bb      	strb	r3, [r7, #14]
 8001752:	7bbb      	ldrb	r3, [r7, #14]
 8001754:	2b3f      	cmp	r3, #63	; 0x3f
 8001756:	d9e7      	bls.n	8001728 <TestLines+0x16c>
      }

    HAL_Delay(10);
 8001758:	200a      	movs	r0, #10
 800175a:	f000 f9ff 	bl	8001b5c <HAL_Delay>


    SSD1306_Clear ();
 800175e:	f7ff fe50 	bl	8001402 <SSD1306_Clear>

    x1    = SSD1306_WIDTH - 1;
 8001762:	237f      	movs	r3, #127	; 0x7f
 8001764:	733b      	strb	r3, [r7, #12]
    y1    = SSD1306_HEIGHT - 1;
 8001766:	233f      	movs	r3, #63	; 0x3f
 8001768:	737b      	strb	r3, [r7, #13]
    y2    = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	73bb      	strb	r3, [r7, #14]
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 800176e:	2300      	movs	r3, #0
 8001770:	73fb      	strb	r3, [r7, #15]
 8001772:	e014      	b.n	800179e <TestLines+0x1e2>
      {
        SSD1306_DrawLine(x1, y1, x2, y2, color);
 8001774:	7b3b      	ldrb	r3, [r7, #12]
 8001776:	b298      	uxth	r0, r3
 8001778:	7b7b      	ldrb	r3, [r7, #13]
 800177a:	b299      	uxth	r1, r3
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	b29a      	uxth	r2, r3
 8001780:	7bbb      	ldrb	r3, [r7, #14]
 8001782:	b29c      	uxth	r4, r3
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	4623      	mov	r3, r4
 800178a:	f7ff faa8 	bl	8000cde <SSD1306_DrawLine>
        HAL_Delay(1);
 800178e:	2001      	movs	r0, #1
 8001790:	f000 f9e4 	bl	8001b5c <HAL_Delay>
        SSD1306_UpdateScreen();
 8001794:	f7ff f94a 	bl	8000a2c <SSD1306_UpdateScreen>
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	3306      	adds	r3, #6
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	dae6      	bge.n	8001774 <TestLines+0x1b8>
      }
    x2    = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 80017aa:	2300      	movs	r3, #0
 80017ac:	73bb      	strb	r3, [r7, #14]
 80017ae:	e014      	b.n	80017da <TestLines+0x21e>
      {
        SSD1306_DrawLine(x1, y1, x2, y2, color);
 80017b0:	7b3b      	ldrb	r3, [r7, #12]
 80017b2:	b298      	uxth	r0, r3
 80017b4:	7b7b      	ldrb	r3, [r7, #13]
 80017b6:	b299      	uxth	r1, r3
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	7bbb      	ldrb	r3, [r7, #14]
 80017be:	b29c      	uxth	r4, r3
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	4623      	mov	r3, r4
 80017c6:	f7ff fa8a 	bl	8000cde <SSD1306_DrawLine>
        HAL_Delay(1);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f000 f9c6 	bl	8001b5c <HAL_Delay>
        SSD1306_UpdateScreen();
 80017d0:	f7ff f92c 	bl	8000a2c <SSD1306_UpdateScreen>
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 80017d4:	7bbb      	ldrb	r3, [r7, #14]
 80017d6:	3306      	adds	r3, #6
 80017d8:	73bb      	strb	r3, [r7, #14]
 80017da:	7bbb      	ldrb	r3, [r7, #14]
 80017dc:	2b3f      	cmp	r3, #63	; 0x3f
 80017de:	d9e7      	bls.n	80017b0 <TestLines+0x1f4>
      }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd90      	pop	{r4, r7, pc}

080017ea <TestRectangles>:

void TestRectangles (uint8_t color)
{
 80017ea:	b590      	push	{r4, r7, lr}
 80017ec:	b087      	sub	sp, #28
 80017ee:	af02      	add	r7, sp, #8
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
    uint8_t n, i, i2;

    SSD1306_Clear ();
 80017f4:	f7ff fe05 	bl	8001402 <SSD1306_Clear>

    n = min(SSD1306_WIDTH, SSD1306_HEIGHT);
 80017f8:	2340      	movs	r3, #64	; 0x40
 80017fa:	73bb      	strb	r3, [r7, #14]

    for (i = 2; i < n; i += 6)
 80017fc:	2302      	movs	r3, #2
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	e01d      	b.n	800183e <TestRectangles+0x54>
    {
        i2 = i / 2;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	085b      	lsrs	r3, r3, #1
 8001806:	737b      	strb	r3, [r7, #13]
        SSD1306_DrawRectangle((SSD1306_WIDTH/2) - i2, (SSD1306_HEIGHT/2) - i2, i, i, color);
 8001808:	7b7b      	ldrb	r3, [r7, #13]
 800180a:	b29b      	uxth	r3, r3
 800180c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001810:	b298      	uxth	r0, r3
 8001812:	7b7b      	ldrb	r3, [r7, #13]
 8001814:	b29b      	uxth	r3, r3
 8001816:	f1c3 0320 	rsb	r3, r3, #32
 800181a:	b299      	uxth	r1, r3
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	b29a      	uxth	r2, r3
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	b29c      	uxth	r4, r3
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	4623      	mov	r3, r4
 800182a:	f7ff fb53 	bl	8000ed4 <SSD1306_DrawRectangle>
        SSD1306_UpdateScreen();
 800182e:	f7ff f8fd 	bl	8000a2c <SSD1306_UpdateScreen>
        HAL_Delay (10);
 8001832:	200a      	movs	r0, #10
 8001834:	f000 f992 	bl	8001b5c <HAL_Delay>
    for (i = 2; i < n; i += 6)
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	3306      	adds	r3, #6
 800183c:	73fb      	strb	r3, [r7, #15]
 800183e:	7bfa      	ldrb	r2, [r7, #15]
 8001840:	7bbb      	ldrb	r3, [r7, #14]
 8001842:	429a      	cmp	r2, r3
 8001844:	d3dd      	bcc.n	8001802 <TestRectangles+0x18>
    }
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}

08001850 <TestFilledRectangles>:

void TestFilledRectangles (uint8_t color)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b087      	sub	sp, #28
 8001854:	af02      	add	r7, sp, #8
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
    uint8_t n, i, i2,
            cx = SSD1306_WIDTH / 2 - 1,
 800185a:	233f      	movs	r3, #63	; 0x3f
 800185c:	73bb      	strb	r3, [r7, #14]
            cy = SSD1306_HEIGHT / 2 - 1;
 800185e:	231f      	movs	r3, #31
 8001860:	737b      	strb	r3, [r7, #13]

    SSD1306_Clear ();
 8001862:	f7ff fdce 	bl	8001402 <SSD1306_Clear>

    n = min(SSD1306_WIDTH, SSD1306_HEIGHT);
 8001866:	2340      	movs	r3, #64	; 0x40
 8001868:	733b      	strb	r3, [r7, #12]
    for (i = n; i > 0; i -= 6)
 800186a:	7b3b      	ldrb	r3, [r7, #12]
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	e01f      	b.n	80018b0 <TestFilledRectangles+0x60>
    {
        i2    = i / 2;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	085b      	lsrs	r3, r3, #1
 8001874:	72fb      	strb	r3, [r7, #11]
        SSD1306_DrawFilledRectangle(cx - i2, cy - i2, i, i, color);
 8001876:	7bbb      	ldrb	r3, [r7, #14]
 8001878:	b29a      	uxth	r2, r3
 800187a:	7afb      	ldrb	r3, [r7, #11]
 800187c:	b29b      	uxth	r3, r3
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	b298      	uxth	r0, r3
 8001882:	7b7b      	ldrb	r3, [r7, #13]
 8001884:	b29a      	uxth	r2, r3
 8001886:	7afb      	ldrb	r3, [r7, #11]
 8001888:	b29b      	uxth	r3, r3
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	b299      	uxth	r1, r3
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	b29a      	uxth	r2, r3
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	b29c      	uxth	r4, r3
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	4623      	mov	r3, r4
 800189c:	f7ff fb84 	bl	8000fa8 <SSD1306_DrawFilledRectangle>
        SSD1306_UpdateScreen();
 80018a0:	f7ff f8c4 	bl	8000a2c <SSD1306_UpdateScreen>
        HAL_Delay (10);
 80018a4:	200a      	movs	r0, #10
 80018a6:	f000 f959 	bl	8001b5c <HAL_Delay>
    for (i = n; i > 0; i -= 6)
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	3b06      	subs	r3, #6
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1dc      	bne.n	8001870 <TestFilledRectangles+0x20>
    }
}
 80018b6:	bf00      	nop
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd90      	pop	{r4, r7, pc}

080018c0 <TestFilledCircles>:

void TestFilledCircles(uint8_t radius, uint16_t color)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	460a      	mov	r2, r1
 80018ca:	71fb      	strb	r3, [r7, #7]
 80018cc:	4613      	mov	r3, r2
 80018ce:	80bb      	strh	r3, [r7, #4]
    uint8_t x, y, w = SSD1306_WIDTH, h = SSD1306_HEIGHT, r2 = radius * 2;
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	737b      	strb	r3, [r7, #13]
 80018d4:	2340      	movs	r3, #64	; 0x40
 80018d6:	733b      	strb	r3, [r7, #12]
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	72fb      	strb	r3, [r7, #11]

    SSD1306_Clear ();
 80018de:	f7ff fd90 	bl	8001402 <SSD1306_Clear>

    for (x = radius; x < w; x += r2)
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	73fb      	strb	r3, [r7, #15]
 80018e6:	e01d      	b.n	8001924 <TestFilledCircles+0x64>
    {
        for (y = radius; y < h; y += r2)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	73bb      	strb	r3, [r7, #14]
 80018ec:	e012      	b.n	8001914 <TestFilledCircles+0x54>
        {
            SSD1306_DrawFilledCircle(x, y, radius, color);
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	b218      	sxth	r0, r3
 80018f2:	7bbb      	ldrb	r3, [r7, #14]
 80018f4:	b219      	sxth	r1, r3
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	88bb      	ldrh	r3, [r7, #4]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f7ff fca5 	bl	800124c <SSD1306_DrawFilledCircle>
            SSD1306_UpdateScreen();
 8001902:	f7ff f893 	bl	8000a2c <SSD1306_UpdateScreen>
            HAL_Delay (10);
 8001906:	200a      	movs	r0, #10
 8001908:	f000 f928 	bl	8001b5c <HAL_Delay>
        for (y = radius; y < h; y += r2)
 800190c:	7bba      	ldrb	r2, [r7, #14]
 800190e:	7afb      	ldrb	r3, [r7, #11]
 8001910:	4413      	add	r3, r2
 8001912:	73bb      	strb	r3, [r7, #14]
 8001914:	7bba      	ldrb	r2, [r7, #14]
 8001916:	7b3b      	ldrb	r3, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d3e8      	bcc.n	80018ee <TestFilledCircles+0x2e>
    for (x = radius; x < w; x += r2)
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	7afb      	ldrb	r3, [r7, #11]
 8001920:	4413      	add	r3, r2
 8001922:	73fb      	strb	r3, [r7, #15]
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	7b7b      	ldrb	r3, [r7, #13]
 8001928:	429a      	cmp	r2, r3
 800192a:	d3dd      	bcc.n	80018e8 <TestFilledCircles+0x28>
        }
    }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <TestCircles>:

void TestCircles(uint8_t radius, uint16_t color)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	460a      	mov	r2, r1
 8001940:	71fb      	strb	r3, [r7, #7]
 8001942:	4613      	mov	r3, r2
 8001944:	80bb      	strh	r3, [r7, #4]
  SSD1306_Clear ();
 8001946:	f7ff fd5c 	bl	8001402 <SSD1306_Clear>

  uint8_t x, y, r2 = radius * 2,
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	737b      	strb	r3, [r7, #13]
            w = SSD1306_WIDTH + radius,
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	3b80      	subs	r3, #128	; 0x80
 8001954:	733b      	strb	r3, [r7, #12]
            h = SSD1306_HEIGHT + radius;
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	3340      	adds	r3, #64	; 0x40
 800195a:	72fb      	strb	r3, [r7, #11]

    for (x = 0; x < w; x += r2)
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e01d      	b.n	800199e <TestCircles+0x68>
    {
        for (y = 0; y < h; y += r2)
 8001962:	2300      	movs	r3, #0
 8001964:	73bb      	strb	r3, [r7, #14]
 8001966:	e012      	b.n	800198e <TestCircles+0x58>
        {
            SSD1306_DrawCircle(x, y, radius, color);
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	b218      	sxth	r0, r3
 800196c:	7bbb      	ldrb	r3, [r7, #14]
 800196e:	b219      	sxth	r1, r3
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	b21a      	sxth	r2, r3
 8001974:	88bb      	ldrh	r3, [r7, #4]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f7ff fb94 	bl	80010a4 <SSD1306_DrawCircle>
            SSD1306_UpdateScreen();
 800197c:	f7ff f856 	bl	8000a2c <SSD1306_UpdateScreen>
            HAL_Delay (10);
 8001980:	200a      	movs	r0, #10
 8001982:	f000 f8eb 	bl	8001b5c <HAL_Delay>
        for (y = 0; y < h; y += r2)
 8001986:	7bba      	ldrb	r2, [r7, #14]
 8001988:	7b7b      	ldrb	r3, [r7, #13]
 800198a:	4413      	add	r3, r2
 800198c:	73bb      	strb	r3, [r7, #14]
 800198e:	7bba      	ldrb	r2, [r7, #14]
 8001990:	7afb      	ldrb	r3, [r7, #11]
 8001992:	429a      	cmp	r2, r3
 8001994:	d3e8      	bcc.n	8001968 <TestCircles+0x32>
    for (x = 0; x < w; x += r2)
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	7b7b      	ldrb	r3, [r7, #13]
 800199a:	4413      	add	r3, r2
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	7bfa      	ldrb	r2, [r7, #15]
 80019a0:	7b3b      	ldrb	r3, [r7, #12]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d3dd      	bcc.n	8001962 <TestCircles+0x2c>
        }
    }
}
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <TestTriangles>:

void TestTriangles(uint8_t color)
{
 80019b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af04      	add	r7, sp, #16
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
    uint8_t n, i, cx = SSD1306_WIDTH  / 2 - 1,
 80019ba:	233f      	movs	r3, #63	; 0x3f
 80019bc:	73bb      	strb	r3, [r7, #14]
            cy = SSD1306_HEIGHT / 2 - 1;
 80019be:	231f      	movs	r3, #31
 80019c0:	737b      	strb	r3, [r7, #13]

    SSD1306_Clear ();
 80019c2:	f7ff fd1e 	bl	8001402 <SSD1306_Clear>

    n = min(cx, cy);
 80019c6:	7b7a      	ldrb	r2, [r7, #13]
 80019c8:	7bbb      	ldrb	r3, [r7, #14]
 80019ca:	4293      	cmp	r3, r2
 80019cc:	bf28      	it	cs
 80019ce:	4613      	movcs	r3, r2
 80019d0:	733b      	strb	r3, [r7, #12]
    for (i = 0; i < n; i += 5)
 80019d2:	2300      	movs	r3, #0
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	e030      	b.n	8001a3a <TestTriangles+0x8a>
    {
        SSD1306_DrawTriangle(cx , cy - i, cx - i, cy + i, cx + i, cy + i, color);
 80019d8:	7bbb      	ldrb	r3, [r7, #14]
 80019da:	b298      	uxth	r0, r3
 80019dc:	7b7b      	ldrb	r3, [r7, #13]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	b29c      	uxth	r4, r3
 80019e8:	7bbb      	ldrb	r3, [r7, #14]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	b29d      	uxth	r5, r3
 80019f4:	7b7b      	ldrb	r3, [r7, #13]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	b29e      	uxth	r6, r3
 8001a00:	7bbb      	ldrb	r3, [r7, #14]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	4413      	add	r3, r2
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	7b7a      	ldrb	r2, [r7, #13]
 8001a0e:	b291      	uxth	r1, r2
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	b292      	uxth	r2, r2
 8001a14:	440a      	add	r2, r1
 8001a16:	b292      	uxth	r2, r2
 8001a18:	79f9      	ldrb	r1, [r7, #7]
 8001a1a:	9102      	str	r1, [sp, #8]
 8001a1c:	9201      	str	r2, [sp, #4]
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	4633      	mov	r3, r6
 8001a22:	462a      	mov	r2, r5
 8001a24:	4621      	mov	r1, r4
 8001a26:	f7ff fb0c 	bl	8001042 <SSD1306_DrawTriangle>
        SSD1306_UpdateScreen();
 8001a2a:	f7fe ffff 	bl	8000a2c <SSD1306_UpdateScreen>
        HAL_Delay (10);
 8001a2e:	200a      	movs	r0, #10
 8001a30:	f000 f894 	bl	8001b5c <HAL_Delay>
    for (i = 0; i < n; i += 5)
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	3305      	adds	r3, #5
 8001a38:	73fb      	strb	r3, [r7, #15]
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	7b3b      	ldrb	r3, [r7, #12]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d3ca      	bcc.n	80019d8 <TestTriangles+0x28>
    }

}
 8001a42:	bf00      	nop
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a4c:	f7ff fdb0 	bl	80015b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a50:	480b      	ldr	r0, [pc, #44]	; (8001a80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a52:	490c      	ldr	r1, [pc, #48]	; (8001a84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a54:	4a0c      	ldr	r2, [pc, #48]	; (8001a88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a68:	4c09      	ldr	r4, [pc, #36]	; (8001a90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a76:	f001 f993 	bl	8002da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a7a:	f7fe fb67 	bl	800014c <main>
  bx lr
 8001a7e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a84:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001a88:	080066d8 	.word	0x080066d8
  ldr r2, =_sbss
 8001a8c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001a90:	20000630 	.word	0x20000630

08001a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a94:	e7fe      	b.n	8001a94 <ADC1_2_IRQHandler>
	...

08001a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <HAL_Init+0x28>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <HAL_Init+0x28>)
 8001aa2:	f043 0310 	orr.w	r3, r3, #16
 8001aa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	f000 f92b 	bl	8001d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aae:	200f      	movs	r0, #15
 8001ab0:	f000 f808 	bl	8001ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab4:	f7ff fcae 	bl	8001414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40022000 	.word	0x40022000

08001ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_InitTick+0x54>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_InitTick+0x58>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 f935 	bl	8001d52 <HAL_SYSTICK_Config>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00e      	b.n	8001b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b0f      	cmp	r3, #15
 8001af6:	d80a      	bhi.n	8001b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af8:	2200      	movs	r2, #0
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f000 f90b 	bl	8001d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b04:	4a06      	ldr	r2, [pc, #24]	; (8001b20 <HAL_InitTick+0x5c>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e000      	b.n	8001b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000008 	.word	0x20000008
 8001b1c:	20000010 	.word	0x20000010
 8001b20:	2000000c 	.word	0x2000000c

08001b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_IncTick+0x1c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_IncTick+0x20>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	4a03      	ldr	r2, [pc, #12]	; (8001b44 <HAL_IncTick+0x20>)
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	20000010 	.word	0x20000010
 8001b44:	200004e4 	.word	0x200004e4

08001b48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b4c:	4b02      	ldr	r3, [pc, #8]	; (8001b58 <HAL_GetTick+0x10>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	200004e4 	.word	0x200004e4

08001b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b64:	f7ff fff0 	bl	8001b48 <HAL_GetTick>
 8001b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b74:	d005      	beq.n	8001b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_Delay+0x44>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b82:	bf00      	nop
 8001b84:	f7ff ffe0 	bl	8001b48 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d8f7      	bhi.n	8001b84 <HAL_Delay+0x28>
  {
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000010 	.word	0x20000010

08001ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd6:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	60d3      	str	r3, [r2, #12]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	f003 0307 	and.w	r3, r3, #7
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	db0a      	blt.n	8001c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	490c      	ldr	r1, [pc, #48]	; (8001c54 <__NVIC_SetPriority+0x4c>)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	0112      	lsls	r2, r2, #4
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c30:	e00a      	b.n	8001c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4908      	ldr	r1, [pc, #32]	; (8001c58 <__NVIC_SetPriority+0x50>)
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	3b04      	subs	r3, #4
 8001c40:	0112      	lsls	r2, r2, #4
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	440b      	add	r3, r1
 8001c46:	761a      	strb	r2, [r3, #24]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000e100 	.word	0xe000e100
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f1c3 0307 	rsb	r3, r3, #7
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	bf28      	it	cs
 8001c7a:	2304      	movcs	r3, #4
 8001c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3304      	adds	r3, #4
 8001c82:	2b06      	cmp	r3, #6
 8001c84:	d902      	bls.n	8001c8c <NVIC_EncodePriority+0x30>
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3b03      	subs	r3, #3
 8001c8a:	e000      	b.n	8001c8e <NVIC_EncodePriority+0x32>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c90:	f04f 32ff 	mov.w	r2, #4294967295
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	43d9      	mvns	r1, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	4313      	orrs	r3, r2
         );
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3724      	adds	r7, #36	; 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd0:	d301      	bcc.n	8001cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00f      	b.n	8001cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <SysTick_Config+0x40>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cde:	210f      	movs	r1, #15
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f7ff ff90 	bl	8001c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <SysTick_Config+0x40>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <SysTick_Config+0x40>)
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	e000e010 	.word	0xe000e010

08001d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ff49 	bl	8001ba4 <__NVIC_SetPriorityGrouping>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d2c:	f7ff ff5e 	bl	8001bec <__NVIC_GetPriorityGrouping>
 8001d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	6978      	ldr	r0, [r7, #20]
 8001d38:	f7ff ff90 	bl	8001c5c <NVIC_EncodePriority>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff5f 	bl	8001c08 <__NVIC_SetPriority>
}
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ffb0 	bl	8001cc0 <SysTick_Config>
 8001d60:	4603      	mov	r3, r0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b08b      	sub	sp, #44	; 0x2c
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7e:	e161      	b.n	8002044 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d80:	2201      	movs	r2, #1
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	f040 8150 	bne.w	800203e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4a97      	ldr	r2, [pc, #604]	; (8002000 <HAL_GPIO_Init+0x294>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d05e      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001da8:	4a95      	ldr	r2, [pc, #596]	; (8002000 <HAL_GPIO_Init+0x294>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d875      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dae:	4a95      	ldr	r2, [pc, #596]	; (8002004 <HAL_GPIO_Init+0x298>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d058      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001db4:	4a93      	ldr	r2, [pc, #588]	; (8002004 <HAL_GPIO_Init+0x298>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d86f      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dba:	4a93      	ldr	r2, [pc, #588]	; (8002008 <HAL_GPIO_Init+0x29c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d052      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001dc0:	4a91      	ldr	r2, [pc, #580]	; (8002008 <HAL_GPIO_Init+0x29c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d869      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dc6:	4a91      	ldr	r2, [pc, #580]	; (800200c <HAL_GPIO_Init+0x2a0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d04c      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001dcc:	4a8f      	ldr	r2, [pc, #572]	; (800200c <HAL_GPIO_Init+0x2a0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d863      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dd2:	4a8f      	ldr	r2, [pc, #572]	; (8002010 <HAL_GPIO_Init+0x2a4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d046      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
 8001dd8:	4a8d      	ldr	r2, [pc, #564]	; (8002010 <HAL_GPIO_Init+0x2a4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d85d      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001dde:	2b12      	cmp	r3, #18
 8001de0:	d82a      	bhi.n	8001e38 <HAL_GPIO_Init+0xcc>
 8001de2:	2b12      	cmp	r3, #18
 8001de4:	d859      	bhi.n	8001e9a <HAL_GPIO_Init+0x12e>
 8001de6:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <HAL_GPIO_Init+0x80>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001e67 	.word	0x08001e67
 8001df0:	08001e41 	.word	0x08001e41
 8001df4:	08001e53 	.word	0x08001e53
 8001df8:	08001e95 	.word	0x08001e95
 8001dfc:	08001e9b 	.word	0x08001e9b
 8001e00:	08001e9b 	.word	0x08001e9b
 8001e04:	08001e9b 	.word	0x08001e9b
 8001e08:	08001e9b 	.word	0x08001e9b
 8001e0c:	08001e9b 	.word	0x08001e9b
 8001e10:	08001e9b 	.word	0x08001e9b
 8001e14:	08001e9b 	.word	0x08001e9b
 8001e18:	08001e9b 	.word	0x08001e9b
 8001e1c:	08001e9b 	.word	0x08001e9b
 8001e20:	08001e9b 	.word	0x08001e9b
 8001e24:	08001e9b 	.word	0x08001e9b
 8001e28:	08001e9b 	.word	0x08001e9b
 8001e2c:	08001e9b 	.word	0x08001e9b
 8001e30:	08001e49 	.word	0x08001e49
 8001e34:	08001e5d 	.word	0x08001e5d
 8001e38:	4a76      	ldr	r2, [pc, #472]	; (8002014 <HAL_GPIO_Init+0x2a8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d013      	beq.n	8001e66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e3e:	e02c      	b.n	8001e9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	623b      	str	r3, [r7, #32]
          break;
 8001e46:	e029      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	623b      	str	r3, [r7, #32]
          break;
 8001e50:	e024      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	3308      	adds	r3, #8
 8001e58:	623b      	str	r3, [r7, #32]
          break;
 8001e5a:	e01f      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	330c      	adds	r3, #12
 8001e62:	623b      	str	r3, [r7, #32]
          break;
 8001e64:	e01a      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d102      	bne.n	8001e74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e6e:	2304      	movs	r3, #4
 8001e70:	623b      	str	r3, [r7, #32]
          break;
 8001e72:	e013      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d105      	bne.n	8001e88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	611a      	str	r2, [r3, #16]
          break;
 8001e86:	e009      	b.n	8001e9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e88:	2308      	movs	r3, #8
 8001e8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	615a      	str	r2, [r3, #20]
          break;
 8001e92:	e003      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
          break;
 8001e98:	e000      	b.n	8001e9c <HAL_GPIO_Init+0x130>
          break;
 8001e9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2bff      	cmp	r3, #255	; 0xff
 8001ea0:	d801      	bhi.n	8001ea6 <HAL_GPIO_Init+0x13a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	e001      	b.n	8001eaa <HAL_GPIO_Init+0x13e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2bff      	cmp	r3, #255	; 0xff
 8001eb0:	d802      	bhi.n	8001eb8 <HAL_GPIO_Init+0x14c>
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	e002      	b.n	8001ebe <HAL_GPIO_Init+0x152>
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	3b08      	subs	r3, #8
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	210f      	movs	r1, #15
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	401a      	ands	r2, r3
 8001ed0:	6a39      	ldr	r1, [r7, #32]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 80a9 	beq.w	800203e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eec:	4b4a      	ldr	r3, [pc, #296]	; (8002018 <HAL_GPIO_Init+0x2ac>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4a49      	ldr	r2, [pc, #292]	; (8002018 <HAL_GPIO_Init+0x2ac>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6193      	str	r3, [r2, #24]
 8001ef8:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_GPIO_Init+0x2ac>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f04:	4a45      	ldr	r2, [pc, #276]	; (800201c <HAL_GPIO_Init+0x2b0>)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	220f      	movs	r2, #15
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4013      	ands	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a3d      	ldr	r2, [pc, #244]	; (8002020 <HAL_GPIO_Init+0x2b4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00d      	beq.n	8001f4c <HAL_GPIO_Init+0x1e0>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3c      	ldr	r2, [pc, #240]	; (8002024 <HAL_GPIO_Init+0x2b8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d007      	beq.n	8001f48 <HAL_GPIO_Init+0x1dc>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a3b      	ldr	r2, [pc, #236]	; (8002028 <HAL_GPIO_Init+0x2bc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d101      	bne.n	8001f44 <HAL_GPIO_Init+0x1d8>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e004      	b.n	8001f4e <HAL_GPIO_Init+0x1e2>
 8001f44:	2303      	movs	r3, #3
 8001f46:	e002      	b.n	8001f4e <HAL_GPIO_Init+0x1e2>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <HAL_GPIO_Init+0x1e2>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f50:	f002 0203 	and.w	r2, r2, #3
 8001f54:	0092      	lsls	r2, r2, #2
 8001f56:	4093      	lsls	r3, r2
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f5e:	492f      	ldr	r1, [pc, #188]	; (800201c <HAL_GPIO_Init+0x2b0>)
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	3302      	adds	r3, #2
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f78:	4b2c      	ldr	r3, [pc, #176]	; (800202c <HAL_GPIO_Init+0x2c0>)
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	492b      	ldr	r1, [pc, #172]	; (800202c <HAL_GPIO_Init+0x2c0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f86:	4b29      	ldr	r3, [pc, #164]	; (800202c <HAL_GPIO_Init+0x2c0>)
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	4927      	ldr	r1, [pc, #156]	; (800202c <HAL_GPIO_Init+0x2c0>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <HAL_GPIO_Init+0x2c0>)
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	4921      	ldr	r1, [pc, #132]	; (800202c <HAL_GPIO_Init+0x2c0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60cb      	str	r3, [r1, #12]
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fae:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_GPIO_Init+0x2c0>)
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	491d      	ldr	r1, [pc, #116]	; (800202c <HAL_GPIO_Init+0x2c0>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fc8:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_GPIO_Init+0x2c0>)
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	4917      	ldr	r1, [pc, #92]	; (800202c <HAL_GPIO_Init+0x2c0>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_GPIO_Init+0x2c0>)
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	4913      	ldr	r1, [pc, #76]	; (800202c <HAL_GPIO_Init+0x2c0>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d01f      	beq.n	8002030 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_GPIO_Init+0x2c0>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	490d      	ldr	r1, [pc, #52]	; (800202c <HAL_GPIO_Init+0x2c0>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]
 8001ffc:	e01f      	b.n	800203e <HAL_GPIO_Init+0x2d2>
 8001ffe:	bf00      	nop
 8002000:	10320000 	.word	0x10320000
 8002004:	10310000 	.word	0x10310000
 8002008:	10220000 	.word	0x10220000
 800200c:	10210000 	.word	0x10210000
 8002010:	10120000 	.word	0x10120000
 8002014:	10110000 	.word	0x10110000
 8002018:	40021000 	.word	0x40021000
 800201c:	40010000 	.word	0x40010000
 8002020:	40010800 	.word	0x40010800
 8002024:	40010c00 	.word	0x40010c00
 8002028:	40011000 	.word	0x40011000
 800202c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_GPIO_Init+0x2f4>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	43db      	mvns	r3, r3
 8002038:	4909      	ldr	r1, [pc, #36]	; (8002060 <HAL_GPIO_Init+0x2f4>)
 800203a:	4013      	ands	r3, r2
 800203c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	3301      	adds	r3, #1
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	fa22 f303 	lsr.w	r3, r2, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	f47f ae96 	bne.w	8001d80 <HAL_GPIO_Init+0x14>
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	372c      	adds	r7, #44	; 0x2c
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	40010400 	.word	0x40010400

08002064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	807b      	strh	r3, [r7, #2]
 8002070:	4613      	mov	r3, r2
 8002072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002074:	787b      	ldrb	r3, [r7, #1]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800207a:	887a      	ldrh	r2, [r7, #2]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002080:	e003      	b.n	800208a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002082:	887b      	ldrh	r3, [r7, #2]
 8002084:	041a      	lsls	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	611a      	str	r2, [r3, #16]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e272      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8087 	beq.w	80021c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b4:	4b92      	ldr	r3, [pc, #584]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d00c      	beq.n	80020da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020c0:	4b8f      	ldr	r3, [pc, #572]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d112      	bne.n	80020f2 <HAL_RCC_OscConfig+0x5e>
 80020cc:	4b8c      	ldr	r3, [pc, #560]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d8:	d10b      	bne.n	80020f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020da:	4b89      	ldr	r3, [pc, #548]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d06c      	beq.n	80021c0 <HAL_RCC_OscConfig+0x12c>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d168      	bne.n	80021c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e24c      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x76>
 80020fc:	4b80      	ldr	r3, [pc, #512]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a7f      	ldr	r2, [pc, #508]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	e02e      	b.n	8002168 <HAL_RCC_OscConfig+0xd4>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x98>
 8002112:	4b7b      	ldr	r3, [pc, #492]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a7a      	ldr	r2, [pc, #488]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b78      	ldr	r3, [pc, #480]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a77      	ldr	r2, [pc, #476]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e01d      	b.n	8002168 <HAL_RCC_OscConfig+0xd4>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0xbc>
 8002136:	4b72      	ldr	r3, [pc, #456]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a71      	ldr	r2, [pc, #452]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b6f      	ldr	r3, [pc, #444]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6e      	ldr	r2, [pc, #440]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0xd4>
 8002150:	4b6b      	ldr	r3, [pc, #428]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a6a      	ldr	r2, [pc, #424]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b68      	ldr	r3, [pc, #416]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a67      	ldr	r2, [pc, #412]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002166:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff fcea 	bl	8001b48 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002178:	f7ff fce6 	bl	8001b48 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e200      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b5d      	ldr	r3, [pc, #372]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0xe4>
 8002196:	e014      	b.n	80021c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7ff fcd6 	bl	8001b48 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff fcd2 	bl	8001b48 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1ec      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	4b53      	ldr	r3, [pc, #332]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x10c>
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d063      	beq.n	8002296 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ce:	4b4c      	ldr	r3, [pc, #304]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021da:	4b49      	ldr	r3, [pc, #292]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d11c      	bne.n	8002220 <HAL_RCC_OscConfig+0x18c>
 80021e6:	4b46      	ldr	r3, [pc, #280]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d116      	bne.n	8002220 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	4b43      	ldr	r3, [pc, #268]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_RCC_OscConfig+0x176>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e1c0      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220a:	4b3d      	ldr	r3, [pc, #244]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4939      	ldr	r1, [pc, #228]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	e03a      	b.n	8002296 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d020      	beq.n	800226a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002228:	4b36      	ldr	r3, [pc, #216]	; (8002304 <HAL_RCC_OscConfig+0x270>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7ff fc8b 	bl	8001b48 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002236:	f7ff fc87 	bl	8001b48 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e1a1      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002248:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002254:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4927      	ldr	r1, [pc, #156]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
 8002268:	e015      	b.n	8002296 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <HAL_RCC_OscConfig+0x270>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7ff fc6a 	bl	8001b48 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002278:	f7ff fc66 	bl	8001b48 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e180      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d03a      	beq.n	8002318 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d019      	beq.n	80022de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022aa:	4b17      	ldr	r3, [pc, #92]	; (8002308 <HAL_RCC_OscConfig+0x274>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b0:	f7ff fc4a 	bl	8001b48 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b8:	f7ff fc46 	bl	8001b48 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e160      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022d6:	2001      	movs	r0, #1
 80022d8:	f000 fa9c 	bl	8002814 <RCC_Delay>
 80022dc:	e01c      	b.n	8002318 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_RCC_OscConfig+0x274>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e4:	f7ff fc30 	bl	8001b48 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ea:	e00f      	b.n	800230c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ec:	f7ff fc2c 	bl	8001b48 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d908      	bls.n	800230c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e146      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	42420000 	.word	0x42420000
 8002308:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230c:	4b92      	ldr	r3, [pc, #584]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1e9      	bne.n	80022ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80a6 	beq.w	8002472 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232a:	4b8b      	ldr	r3, [pc, #556]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10d      	bne.n	8002352 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	4b88      	ldr	r3, [pc, #544]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	4a87      	ldr	r2, [pc, #540]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002340:	61d3      	str	r3, [r2, #28]
 8002342:	4b85      	ldr	r3, [pc, #532]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234e:	2301      	movs	r3, #1
 8002350:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002352:	4b82      	ldr	r3, [pc, #520]	; (800255c <HAL_RCC_OscConfig+0x4c8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d118      	bne.n	8002390 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235e:	4b7f      	ldr	r3, [pc, #508]	; (800255c <HAL_RCC_OscConfig+0x4c8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a7e      	ldr	r2, [pc, #504]	; (800255c <HAL_RCC_OscConfig+0x4c8>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236a:	f7ff fbed 	bl	8001b48 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002372:	f7ff fbe9 	bl	8001b48 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b64      	cmp	r3, #100	; 0x64
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e103      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002384:	4b75      	ldr	r3, [pc, #468]	; (800255c <HAL_RCC_OscConfig+0x4c8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d106      	bne.n	80023a6 <HAL_RCC_OscConfig+0x312>
 8002398:	4b6f      	ldr	r3, [pc, #444]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a6e      	ldr	r2, [pc, #440]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6213      	str	r3, [r2, #32]
 80023a4:	e02d      	b.n	8002402 <HAL_RCC_OscConfig+0x36e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x334>
 80023ae:	4b6a      	ldr	r3, [pc, #424]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4a69      	ldr	r2, [pc, #420]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	6213      	str	r3, [r2, #32]
 80023ba:	4b67      	ldr	r3, [pc, #412]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a66      	ldr	r2, [pc, #408]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	f023 0304 	bic.w	r3, r3, #4
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	e01c      	b.n	8002402 <HAL_RCC_OscConfig+0x36e>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d10c      	bne.n	80023ea <HAL_RCC_OscConfig+0x356>
 80023d0:	4b61      	ldr	r3, [pc, #388]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a60      	ldr	r2, [pc, #384]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	6213      	str	r3, [r2, #32]
 80023dc:	4b5e      	ldr	r3, [pc, #376]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	4a5d      	ldr	r2, [pc, #372]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6213      	str	r3, [r2, #32]
 80023e8:	e00b      	b.n	8002402 <HAL_RCC_OscConfig+0x36e>
 80023ea:	4b5b      	ldr	r3, [pc, #364]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4a5a      	ldr	r2, [pc, #360]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6213      	str	r3, [r2, #32]
 80023f6:	4b58      	ldr	r3, [pc, #352]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a57      	ldr	r2, [pc, #348]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d015      	beq.n	8002436 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240a:	f7ff fb9d 	bl	8001b48 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7ff fb99 	bl	8001b48 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0b1      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	4b4b      	ldr	r3, [pc, #300]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0ee      	beq.n	8002412 <HAL_RCC_OscConfig+0x37e>
 8002434:	e014      	b.n	8002460 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7ff fb87 	bl	8001b48 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7ff fb83 	bl	8001b48 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	; 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e09b      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002454:	4b40      	ldr	r3, [pc, #256]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ee      	bne.n	800243e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002460:	7dfb      	ldrb	r3, [r7, #23]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d105      	bne.n	8002472 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002466:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	4a3b      	ldr	r2, [pc, #236]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002470:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8087 	beq.w	800258a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800247c:	4b36      	ldr	r3, [pc, #216]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b08      	cmp	r3, #8
 8002486:	d061      	beq.n	800254c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d146      	bne.n	800251e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002490:	4b33      	ldr	r3, [pc, #204]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002496:	f7ff fb57 	bl	8001b48 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249e:	f7ff fb53 	bl	8001b48 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e06d      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b0:	4b29      	ldr	r3, [pc, #164]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f0      	bne.n	800249e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c4:	d108      	bne.n	80024d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024c6:	4b24      	ldr	r3, [pc, #144]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	4921      	ldr	r1, [pc, #132]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d8:	4b1f      	ldr	r3, [pc, #124]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a19      	ldr	r1, [r3, #32]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	430b      	orrs	r3, r1
 80024ea:	491b      	ldr	r1, [pc, #108]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7ff fb27 	bl	8001b48 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fe:	f7ff fb23 	bl	8001b48 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e03d      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x46a>
 800251c:	e035      	b.n	800258a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251e:	4b10      	ldr	r3, [pc, #64]	; (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7ff fb10 	bl	8001b48 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252c:	f7ff fb0c 	bl	8001b48 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e026      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_RCC_OscConfig+0x4c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x498>
 800254a:	e01e      	b.n	800258a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d107      	bne.n	8002564 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e019      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
 8002558:	40021000 	.word	0x40021000
 800255c:	40007000 	.word	0x40007000
 8002560:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_OscConfig+0x500>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	429a      	cmp	r2, r3
 8002576:	d106      	bne.n	8002586 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d001      	beq.n	800258a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000

08002598 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0d0      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025ac:	4b6a      	ldr	r3, [pc, #424]	; (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d910      	bls.n	80025dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b67      	ldr	r3, [pc, #412]	; (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 0207 	bic.w	r2, r3, #7
 80025c2:	4965      	ldr	r1, [pc, #404]	; (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b63      	ldr	r3, [pc, #396]	; (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0b8      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d020      	beq.n	800262a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f4:	4b59      	ldr	r3, [pc, #356]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4a58      	ldr	r2, [pc, #352]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800260c:	4b53      	ldr	r3, [pc, #332]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a52      	ldr	r2, [pc, #328]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002616:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002618:	4b50      	ldr	r3, [pc, #320]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	494d      	ldr	r1, [pc, #308]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	4313      	orrs	r3, r2
 8002628:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d040      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	4b47      	ldr	r3, [pc, #284]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d115      	bne.n	8002676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e07f      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002656:	4b41      	ldr	r3, [pc, #260]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e073      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002666:	4b3d      	ldr	r3, [pc, #244]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e06b      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002676:	4b39      	ldr	r3, [pc, #228]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f023 0203 	bic.w	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4936      	ldr	r1, [pc, #216]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002688:	f7ff fa5e 	bl	8001b48 <HAL_GetTick>
 800268c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268e:	e00a      	b.n	80026a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002690:	f7ff fa5a 	bl	8001b48 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	; 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e053      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	4b2d      	ldr	r3, [pc, #180]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 020c 	and.w	r2, r3, #12
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d1eb      	bne.n	8002690 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026b8:	4b27      	ldr	r3, [pc, #156]	; (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d210      	bcs.n	80026e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c6:	4b24      	ldr	r3, [pc, #144]	; (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 0207 	bic.w	r2, r3, #7
 80026ce:	4922      	ldr	r1, [pc, #136]	; (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b20      	ldr	r3, [pc, #128]	; (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e032      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4916      	ldr	r1, [pc, #88]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d009      	beq.n	8002726 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	490e      	ldr	r1, [pc, #56]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002726:	f000 f821 	bl	800276c <HAL_RCC_GetSysClockFreq>
 800272a:	4602      	mov	r2, r0
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	490a      	ldr	r1, [pc, #40]	; (8002760 <HAL_RCC_ClockConfig+0x1c8>)
 8002738:	5ccb      	ldrb	r3, [r1, r3]
 800273a:	fa22 f303 	lsr.w	r3, r2, r3
 800273e:	4a09      	ldr	r2, [pc, #36]	; (8002764 <HAL_RCC_ClockConfig+0x1cc>)
 8002740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_RCC_ClockConfig+0x1d0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff f9bc 	bl	8001ac4 <HAL_InitTick>

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40022000 	.word	0x40022000
 800275c:	40021000 	.word	0x40021000
 8002760:	08006678 	.word	0x08006678
 8002764:	20000008 	.word	0x20000008
 8002768:	2000000c 	.word	0x2000000c

0800276c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002786:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <HAL_RCC_GetSysClockFreq+0x94>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b04      	cmp	r3, #4
 8002794:	d002      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x30>
 8002796:	2b08      	cmp	r3, #8
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_GetSysClockFreq+0x36>
 800279a:	e027      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <HAL_RCC_GetSysClockFreq+0x98>)
 800279e:	613b      	str	r3, [r7, #16]
      break;
 80027a0:	e027      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	0c9b      	lsrs	r3, r3, #18
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	4a17      	ldr	r2, [pc, #92]	; (8002808 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027ac:	5cd3      	ldrb	r3, [r2, r3]
 80027ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d010      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027ba:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HAL_RCC_GetSysClockFreq+0x94>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	0c5b      	lsrs	r3, r3, #17
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	4a11      	ldr	r2, [pc, #68]	; (800280c <HAL_RCC_GetSysClockFreq+0xa0>)
 80027c6:	5cd3      	ldrb	r3, [r2, r3]
 80027c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a0d      	ldr	r2, [pc, #52]	; (8002804 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ce:	fb03 f202 	mul.w	r2, r3, r2
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	e004      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a0c      	ldr	r2, [pc, #48]	; (8002810 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027e0:	fb02 f303 	mul.w	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	613b      	str	r3, [r7, #16]
      break;
 80027ea:	e002      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ee:	613b      	str	r3, [r7, #16]
      break;
 80027f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027f2:	693b      	ldr	r3, [r7, #16]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000
 8002804:	007a1200 	.word	0x007a1200
 8002808:	08006688 	.word	0x08006688
 800280c:	08006698 	.word	0x08006698
 8002810:	003d0900 	.word	0x003d0900

08002814 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800281c:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <RCC_Delay+0x34>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0a      	ldr	r2, [pc, #40]	; (800284c <RCC_Delay+0x38>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	0a5b      	lsrs	r3, r3, #9
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	fb02 f303 	mul.w	r3, r2, r3
 800282e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002830:	bf00      	nop
  }
  while (Delay --);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1e5a      	subs	r2, r3, #1
 8002836:	60fa      	str	r2, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f9      	bne.n	8002830 <RCC_Delay+0x1c>
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	20000008 	.word	0x20000008
 800284c:	10624dd3 	.word	0x10624dd3

08002850 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e076      	b.n	8002950 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	2b00      	cmp	r3, #0
 8002868:	d108      	bne.n	800287c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002872:	d009      	beq.n	8002888 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	61da      	str	r2, [r3, #28]
 800287a:	e005      	b.n	8002888 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe fde8 	bl	8001478 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290c:	ea42 0103 	orr.w	r1, r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	0c1a      	lsrs	r2, r3, #16
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f002 0204 	and.w	r2, r2, #4
 800292e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69da      	ldr	r2, [r3, #28]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800293e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	4613      	mov	r3, r2
 8002966:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_SPI_Transmit+0x22>
 8002976:	2302      	movs	r3, #2
 8002978:	e12d      	b.n	8002bd6 <HAL_SPI_Transmit+0x27e>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002982:	f7ff f8e1 	bl	8001b48 <HAL_GetTick>
 8002986:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d002      	beq.n	800299e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002998:	2302      	movs	r3, #2
 800299a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800299c:	e116      	b.n	8002bcc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <HAL_SPI_Transmit+0x52>
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029ae:	e10d      	b.n	8002bcc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2203      	movs	r2, #3
 80029b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	88fa      	ldrh	r2, [r7, #6]
 80029c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	88fa      	ldrh	r2, [r7, #6]
 80029ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029f6:	d10f      	bne.n	8002a18 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a16:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a22:	2b40      	cmp	r3, #64	; 0x40
 8002a24:	d007      	beq.n	8002a36 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a3e:	d14f      	bne.n	8002ae0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <HAL_SPI_Transmit+0xf6>
 8002a48:	8afb      	ldrh	r3, [r7, #22]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d142      	bne.n	8002ad4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	881a      	ldrh	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	1c9a      	adds	r2, r3, #2
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a72:	e02f      	b.n	8002ad4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d112      	bne.n	8002aa8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	881a      	ldrh	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	1c9a      	adds	r2, r3, #2
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	86da      	strh	r2, [r3, #54]	; 0x36
 8002aa6:	e015      	b.n	8002ad4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aa8:	f7ff f84e 	bl	8001b48 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d803      	bhi.n	8002ac0 <HAL_SPI_Transmit+0x168>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abe:	d102      	bne.n	8002ac6 <HAL_SPI_Transmit+0x16e>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002ad2:	e07b      	b.n	8002bcc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1ca      	bne.n	8002a74 <HAL_SPI_Transmit+0x11c>
 8002ade:	e050      	b.n	8002b82 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <HAL_SPI_Transmit+0x196>
 8002ae8:	8afb      	ldrh	r3, [r7, #22]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d144      	bne.n	8002b78 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	330c      	adds	r3, #12
 8002af8:	7812      	ldrb	r2, [r2, #0]
 8002afa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b14:	e030      	b.n	8002b78 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d113      	bne.n	8002b4c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	7812      	ldrb	r2, [r2, #0]
 8002b30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b4a:	e015      	b.n	8002b78 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b4c:	f7fe fffc 	bl	8001b48 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d803      	bhi.n	8002b64 <HAL_SPI_Transmit+0x20c>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b62:	d102      	bne.n	8002b6a <HAL_SPI_Transmit+0x212>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002b76:	e029      	b.n	8002bcc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1c9      	bne.n	8002b16 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	6839      	ldr	r1, [r7, #0]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f8be 	bl	8002d08 <SPI_EndRxTxTransaction>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2220      	movs	r2, #32
 8002b96:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	77fb      	strb	r3, [r7, #31]
 8002bc2:	e003      	b.n	8002bcc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3720      	adds	r7, #32
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bec:	b2db      	uxtb	r3, r3
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	4613      	mov	r3, r2
 8002c06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c08:	f7fe ff9e 	bl	8001b48 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	4413      	add	r3, r2
 8002c16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c18:	f7fe ff96 	bl	8001b48 <HAL_GetTick>
 8002c1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c1e:	4b39      	ldr	r3, [pc, #228]	; (8002d04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	015b      	lsls	r3, r3, #5
 8002c24:	0d1b      	lsrs	r3, r3, #20
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	fb02 f303 	mul.w	r3, r2, r3
 8002c2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c2e:	e054      	b.n	8002cda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c36:	d050      	beq.n	8002cda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c38:	f7fe ff86 	bl	8001b48 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d902      	bls.n	8002c4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d13d      	bne.n	8002cca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c66:	d111      	bne.n	8002c8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c70:	d004      	beq.n	8002c7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7a:	d107      	bne.n	8002c8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c94:	d10f      	bne.n	8002cb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e017      	b.n	8002cfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	bf0c      	ite	eq
 8002cea:	2301      	moveq	r3, #1
 8002cec:	2300      	movne	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d19b      	bne.n	8002c30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000008 	.word	0x20000008

08002d08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2180      	movs	r1, #128	; 0x80
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f7ff ff6a 	bl	8002bf8 <SPI_WaitFlagStateUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	f043 0220 	orr.w	r2, r3, #32
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e000      	b.n	8002d3c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <siprintf>:
 8002d44:	b40e      	push	{r1, r2, r3}
 8002d46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d4a:	b500      	push	{lr}
 8002d4c:	b09c      	sub	sp, #112	; 0x70
 8002d4e:	ab1d      	add	r3, sp, #116	; 0x74
 8002d50:	9002      	str	r0, [sp, #8]
 8002d52:	9006      	str	r0, [sp, #24]
 8002d54:	9107      	str	r1, [sp, #28]
 8002d56:	9104      	str	r1, [sp, #16]
 8002d58:	4808      	ldr	r0, [pc, #32]	; (8002d7c <siprintf+0x38>)
 8002d5a:	4909      	ldr	r1, [pc, #36]	; (8002d80 <siprintf+0x3c>)
 8002d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d60:	9105      	str	r1, [sp, #20]
 8002d62:	6800      	ldr	r0, [r0, #0]
 8002d64:	a902      	add	r1, sp, #8
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	f000 f98e 	bl	8003088 <_svfiprintf_r>
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	9b02      	ldr	r3, [sp, #8]
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	b01c      	add	sp, #112	; 0x70
 8002d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d78:	b003      	add	sp, #12
 8002d7a:	4770      	bx	lr
 8002d7c:	20000060 	.word	0x20000060
 8002d80:	ffff0208 	.word	0xffff0208

08002d84 <memset>:
 8002d84:	4603      	mov	r3, r0
 8002d86:	4402      	add	r2, r0
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d100      	bne.n	8002d8e <memset+0xa>
 8002d8c:	4770      	bx	lr
 8002d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d92:	e7f9      	b.n	8002d88 <memset+0x4>

08002d94 <__errno>:
 8002d94:	4b01      	ldr	r3, [pc, #4]	; (8002d9c <__errno+0x8>)
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20000060 	.word	0x20000060

08002da0 <__libc_init_array>:
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	2600      	movs	r6, #0
 8002da4:	4d0c      	ldr	r5, [pc, #48]	; (8002dd8 <__libc_init_array+0x38>)
 8002da6:	4c0d      	ldr	r4, [pc, #52]	; (8002ddc <__libc_init_array+0x3c>)
 8002da8:	1b64      	subs	r4, r4, r5
 8002daa:	10a4      	asrs	r4, r4, #2
 8002dac:	42a6      	cmp	r6, r4
 8002dae:	d109      	bne.n	8002dc4 <__libc_init_array+0x24>
 8002db0:	f000 fc7a 	bl	80036a8 <_init>
 8002db4:	2600      	movs	r6, #0
 8002db6:	4d0a      	ldr	r5, [pc, #40]	; (8002de0 <__libc_init_array+0x40>)
 8002db8:	4c0a      	ldr	r4, [pc, #40]	; (8002de4 <__libc_init_array+0x44>)
 8002dba:	1b64      	subs	r4, r4, r5
 8002dbc:	10a4      	asrs	r4, r4, #2
 8002dbe:	42a6      	cmp	r6, r4
 8002dc0:	d105      	bne.n	8002dce <__libc_init_array+0x2e>
 8002dc2:	bd70      	pop	{r4, r5, r6, pc}
 8002dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc8:	4798      	blx	r3
 8002dca:	3601      	adds	r6, #1
 8002dcc:	e7ee      	b.n	8002dac <__libc_init_array+0xc>
 8002dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dd2:	4798      	blx	r3
 8002dd4:	3601      	adds	r6, #1
 8002dd6:	e7f2      	b.n	8002dbe <__libc_init_array+0x1e>
 8002dd8:	080066d0 	.word	0x080066d0
 8002ddc:	080066d0 	.word	0x080066d0
 8002de0:	080066d0 	.word	0x080066d0
 8002de4:	080066d4 	.word	0x080066d4

08002de8 <__retarget_lock_acquire_recursive>:
 8002de8:	4770      	bx	lr

08002dea <__retarget_lock_release_recursive>:
 8002dea:	4770      	bx	lr

08002dec <_free_r>:
 8002dec:	b538      	push	{r3, r4, r5, lr}
 8002dee:	4605      	mov	r5, r0
 8002df0:	2900      	cmp	r1, #0
 8002df2:	d040      	beq.n	8002e76 <_free_r+0x8a>
 8002df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002df8:	1f0c      	subs	r4, r1, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bfb8      	it	lt
 8002dfe:	18e4      	addlt	r4, r4, r3
 8002e00:	f000 f8dc 	bl	8002fbc <__malloc_lock>
 8002e04:	4a1c      	ldr	r2, [pc, #112]	; (8002e78 <_free_r+0x8c>)
 8002e06:	6813      	ldr	r3, [r2, #0]
 8002e08:	b933      	cbnz	r3, 8002e18 <_free_r+0x2c>
 8002e0a:	6063      	str	r3, [r4, #4]
 8002e0c:	6014      	str	r4, [r2, #0]
 8002e0e:	4628      	mov	r0, r5
 8002e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e14:	f000 b8d8 	b.w	8002fc8 <__malloc_unlock>
 8002e18:	42a3      	cmp	r3, r4
 8002e1a:	d908      	bls.n	8002e2e <_free_r+0x42>
 8002e1c:	6820      	ldr	r0, [r4, #0]
 8002e1e:	1821      	adds	r1, r4, r0
 8002e20:	428b      	cmp	r3, r1
 8002e22:	bf01      	itttt	eq
 8002e24:	6819      	ldreq	r1, [r3, #0]
 8002e26:	685b      	ldreq	r3, [r3, #4]
 8002e28:	1809      	addeq	r1, r1, r0
 8002e2a:	6021      	streq	r1, [r4, #0]
 8002e2c:	e7ed      	b.n	8002e0a <_free_r+0x1e>
 8002e2e:	461a      	mov	r2, r3
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	b10b      	cbz	r3, 8002e38 <_free_r+0x4c>
 8002e34:	42a3      	cmp	r3, r4
 8002e36:	d9fa      	bls.n	8002e2e <_free_r+0x42>
 8002e38:	6811      	ldr	r1, [r2, #0]
 8002e3a:	1850      	adds	r0, r2, r1
 8002e3c:	42a0      	cmp	r0, r4
 8002e3e:	d10b      	bne.n	8002e58 <_free_r+0x6c>
 8002e40:	6820      	ldr	r0, [r4, #0]
 8002e42:	4401      	add	r1, r0
 8002e44:	1850      	adds	r0, r2, r1
 8002e46:	4283      	cmp	r3, r0
 8002e48:	6011      	str	r1, [r2, #0]
 8002e4a:	d1e0      	bne.n	8002e0e <_free_r+0x22>
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4408      	add	r0, r1
 8002e52:	6010      	str	r0, [r2, #0]
 8002e54:	6053      	str	r3, [r2, #4]
 8002e56:	e7da      	b.n	8002e0e <_free_r+0x22>
 8002e58:	d902      	bls.n	8002e60 <_free_r+0x74>
 8002e5a:	230c      	movs	r3, #12
 8002e5c:	602b      	str	r3, [r5, #0]
 8002e5e:	e7d6      	b.n	8002e0e <_free_r+0x22>
 8002e60:	6820      	ldr	r0, [r4, #0]
 8002e62:	1821      	adds	r1, r4, r0
 8002e64:	428b      	cmp	r3, r1
 8002e66:	bf01      	itttt	eq
 8002e68:	6819      	ldreq	r1, [r3, #0]
 8002e6a:	685b      	ldreq	r3, [r3, #4]
 8002e6c:	1809      	addeq	r1, r1, r0
 8002e6e:	6021      	streq	r1, [r4, #0]
 8002e70:	6063      	str	r3, [r4, #4]
 8002e72:	6054      	str	r4, [r2, #4]
 8002e74:	e7cb      	b.n	8002e0e <_free_r+0x22>
 8002e76:	bd38      	pop	{r3, r4, r5, pc}
 8002e78:	20000628 	.word	0x20000628

08002e7c <sbrk_aligned>:
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	4e0e      	ldr	r6, [pc, #56]	; (8002eb8 <sbrk_aligned+0x3c>)
 8002e80:	460c      	mov	r4, r1
 8002e82:	6831      	ldr	r1, [r6, #0]
 8002e84:	4605      	mov	r5, r0
 8002e86:	b911      	cbnz	r1, 8002e8e <sbrk_aligned+0x12>
 8002e88:	f000 fbaa 	bl	80035e0 <_sbrk_r>
 8002e8c:	6030      	str	r0, [r6, #0]
 8002e8e:	4621      	mov	r1, r4
 8002e90:	4628      	mov	r0, r5
 8002e92:	f000 fba5 	bl	80035e0 <_sbrk_r>
 8002e96:	1c43      	adds	r3, r0, #1
 8002e98:	d00a      	beq.n	8002eb0 <sbrk_aligned+0x34>
 8002e9a:	1cc4      	adds	r4, r0, #3
 8002e9c:	f024 0403 	bic.w	r4, r4, #3
 8002ea0:	42a0      	cmp	r0, r4
 8002ea2:	d007      	beq.n	8002eb4 <sbrk_aligned+0x38>
 8002ea4:	1a21      	subs	r1, r4, r0
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	f000 fb9a 	bl	80035e0 <_sbrk_r>
 8002eac:	3001      	adds	r0, #1
 8002eae:	d101      	bne.n	8002eb4 <sbrk_aligned+0x38>
 8002eb0:	f04f 34ff 	mov.w	r4, #4294967295
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	bd70      	pop	{r4, r5, r6, pc}
 8002eb8:	2000062c 	.word	0x2000062c

08002ebc <_malloc_r>:
 8002ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ec0:	1ccd      	adds	r5, r1, #3
 8002ec2:	f025 0503 	bic.w	r5, r5, #3
 8002ec6:	3508      	adds	r5, #8
 8002ec8:	2d0c      	cmp	r5, #12
 8002eca:	bf38      	it	cc
 8002ecc:	250c      	movcc	r5, #12
 8002ece:	2d00      	cmp	r5, #0
 8002ed0:	4607      	mov	r7, r0
 8002ed2:	db01      	blt.n	8002ed8 <_malloc_r+0x1c>
 8002ed4:	42a9      	cmp	r1, r5
 8002ed6:	d905      	bls.n	8002ee4 <_malloc_r+0x28>
 8002ed8:	230c      	movs	r3, #12
 8002eda:	2600      	movs	r6, #0
 8002edc:	603b      	str	r3, [r7, #0]
 8002ede:	4630      	mov	r0, r6
 8002ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ee4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002fb8 <_malloc_r+0xfc>
 8002ee8:	f000 f868 	bl	8002fbc <__malloc_lock>
 8002eec:	f8d8 3000 	ldr.w	r3, [r8]
 8002ef0:	461c      	mov	r4, r3
 8002ef2:	bb5c      	cbnz	r4, 8002f4c <_malloc_r+0x90>
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	4638      	mov	r0, r7
 8002ef8:	f7ff ffc0 	bl	8002e7c <sbrk_aligned>
 8002efc:	1c43      	adds	r3, r0, #1
 8002efe:	4604      	mov	r4, r0
 8002f00:	d155      	bne.n	8002fae <_malloc_r+0xf2>
 8002f02:	f8d8 4000 	ldr.w	r4, [r8]
 8002f06:	4626      	mov	r6, r4
 8002f08:	2e00      	cmp	r6, #0
 8002f0a:	d145      	bne.n	8002f98 <_malloc_r+0xdc>
 8002f0c:	2c00      	cmp	r4, #0
 8002f0e:	d048      	beq.n	8002fa2 <_malloc_r+0xe6>
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	4631      	mov	r1, r6
 8002f14:	4638      	mov	r0, r7
 8002f16:	eb04 0903 	add.w	r9, r4, r3
 8002f1a:	f000 fb61 	bl	80035e0 <_sbrk_r>
 8002f1e:	4581      	cmp	r9, r0
 8002f20:	d13f      	bne.n	8002fa2 <_malloc_r+0xe6>
 8002f22:	6821      	ldr	r1, [r4, #0]
 8002f24:	4638      	mov	r0, r7
 8002f26:	1a6d      	subs	r5, r5, r1
 8002f28:	4629      	mov	r1, r5
 8002f2a:	f7ff ffa7 	bl	8002e7c <sbrk_aligned>
 8002f2e:	3001      	adds	r0, #1
 8002f30:	d037      	beq.n	8002fa2 <_malloc_r+0xe6>
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	442b      	add	r3, r5
 8002f36:	6023      	str	r3, [r4, #0]
 8002f38:	f8d8 3000 	ldr.w	r3, [r8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d038      	beq.n	8002fb2 <_malloc_r+0xf6>
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	42a2      	cmp	r2, r4
 8002f44:	d12b      	bne.n	8002f9e <_malloc_r+0xe2>
 8002f46:	2200      	movs	r2, #0
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	e00f      	b.n	8002f6c <_malloc_r+0xb0>
 8002f4c:	6822      	ldr	r2, [r4, #0]
 8002f4e:	1b52      	subs	r2, r2, r5
 8002f50:	d41f      	bmi.n	8002f92 <_malloc_r+0xd6>
 8002f52:	2a0b      	cmp	r2, #11
 8002f54:	d917      	bls.n	8002f86 <_malloc_r+0xca>
 8002f56:	1961      	adds	r1, r4, r5
 8002f58:	42a3      	cmp	r3, r4
 8002f5a:	6025      	str	r5, [r4, #0]
 8002f5c:	bf18      	it	ne
 8002f5e:	6059      	strne	r1, [r3, #4]
 8002f60:	6863      	ldr	r3, [r4, #4]
 8002f62:	bf08      	it	eq
 8002f64:	f8c8 1000 	streq.w	r1, [r8]
 8002f68:	5162      	str	r2, [r4, r5]
 8002f6a:	604b      	str	r3, [r1, #4]
 8002f6c:	4638      	mov	r0, r7
 8002f6e:	f104 060b 	add.w	r6, r4, #11
 8002f72:	f000 f829 	bl	8002fc8 <__malloc_unlock>
 8002f76:	f026 0607 	bic.w	r6, r6, #7
 8002f7a:	1d23      	adds	r3, r4, #4
 8002f7c:	1af2      	subs	r2, r6, r3
 8002f7e:	d0ae      	beq.n	8002ede <_malloc_r+0x22>
 8002f80:	1b9b      	subs	r3, r3, r6
 8002f82:	50a3      	str	r3, [r4, r2]
 8002f84:	e7ab      	b.n	8002ede <_malloc_r+0x22>
 8002f86:	42a3      	cmp	r3, r4
 8002f88:	6862      	ldr	r2, [r4, #4]
 8002f8a:	d1dd      	bne.n	8002f48 <_malloc_r+0x8c>
 8002f8c:	f8c8 2000 	str.w	r2, [r8]
 8002f90:	e7ec      	b.n	8002f6c <_malloc_r+0xb0>
 8002f92:	4623      	mov	r3, r4
 8002f94:	6864      	ldr	r4, [r4, #4]
 8002f96:	e7ac      	b.n	8002ef2 <_malloc_r+0x36>
 8002f98:	4634      	mov	r4, r6
 8002f9a:	6876      	ldr	r6, [r6, #4]
 8002f9c:	e7b4      	b.n	8002f08 <_malloc_r+0x4c>
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	e7cc      	b.n	8002f3c <_malloc_r+0x80>
 8002fa2:	230c      	movs	r3, #12
 8002fa4:	4638      	mov	r0, r7
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	f000 f80e 	bl	8002fc8 <__malloc_unlock>
 8002fac:	e797      	b.n	8002ede <_malloc_r+0x22>
 8002fae:	6025      	str	r5, [r4, #0]
 8002fb0:	e7dc      	b.n	8002f6c <_malloc_r+0xb0>
 8002fb2:	605b      	str	r3, [r3, #4]
 8002fb4:	deff      	udf	#255	; 0xff
 8002fb6:	bf00      	nop
 8002fb8:	20000628 	.word	0x20000628

08002fbc <__malloc_lock>:
 8002fbc:	4801      	ldr	r0, [pc, #4]	; (8002fc4 <__malloc_lock+0x8>)
 8002fbe:	f7ff bf13 	b.w	8002de8 <__retarget_lock_acquire_recursive>
 8002fc2:	bf00      	nop
 8002fc4:	20000624 	.word	0x20000624

08002fc8 <__malloc_unlock>:
 8002fc8:	4801      	ldr	r0, [pc, #4]	; (8002fd0 <__malloc_unlock+0x8>)
 8002fca:	f7ff bf0e 	b.w	8002dea <__retarget_lock_release_recursive>
 8002fce:	bf00      	nop
 8002fd0:	20000624 	.word	0x20000624

08002fd4 <__ssputs_r>:
 8002fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd8:	461f      	mov	r7, r3
 8002fda:	688e      	ldr	r6, [r1, #8]
 8002fdc:	4682      	mov	sl, r0
 8002fde:	42be      	cmp	r6, r7
 8002fe0:	460c      	mov	r4, r1
 8002fe2:	4690      	mov	r8, r2
 8002fe4:	680b      	ldr	r3, [r1, #0]
 8002fe6:	d82c      	bhi.n	8003042 <__ssputs_r+0x6e>
 8002fe8:	898a      	ldrh	r2, [r1, #12]
 8002fea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002fee:	d026      	beq.n	800303e <__ssputs_r+0x6a>
 8002ff0:	6965      	ldr	r5, [r4, #20]
 8002ff2:	6909      	ldr	r1, [r1, #16]
 8002ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ff8:	eba3 0901 	sub.w	r9, r3, r1
 8002ffc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003000:	1c7b      	adds	r3, r7, #1
 8003002:	444b      	add	r3, r9
 8003004:	106d      	asrs	r5, r5, #1
 8003006:	429d      	cmp	r5, r3
 8003008:	bf38      	it	cc
 800300a:	461d      	movcc	r5, r3
 800300c:	0553      	lsls	r3, r2, #21
 800300e:	d527      	bpl.n	8003060 <__ssputs_r+0x8c>
 8003010:	4629      	mov	r1, r5
 8003012:	f7ff ff53 	bl	8002ebc <_malloc_r>
 8003016:	4606      	mov	r6, r0
 8003018:	b360      	cbz	r0, 8003074 <__ssputs_r+0xa0>
 800301a:	464a      	mov	r2, r9
 800301c:	6921      	ldr	r1, [r4, #16]
 800301e:	f000 fafd 	bl	800361c <memcpy>
 8003022:	89a3      	ldrh	r3, [r4, #12]
 8003024:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800302c:	81a3      	strh	r3, [r4, #12]
 800302e:	6126      	str	r6, [r4, #16]
 8003030:	444e      	add	r6, r9
 8003032:	6026      	str	r6, [r4, #0]
 8003034:	463e      	mov	r6, r7
 8003036:	6165      	str	r5, [r4, #20]
 8003038:	eba5 0509 	sub.w	r5, r5, r9
 800303c:	60a5      	str	r5, [r4, #8]
 800303e:	42be      	cmp	r6, r7
 8003040:	d900      	bls.n	8003044 <__ssputs_r+0x70>
 8003042:	463e      	mov	r6, r7
 8003044:	4632      	mov	r2, r6
 8003046:	4641      	mov	r1, r8
 8003048:	6820      	ldr	r0, [r4, #0]
 800304a:	f000 faaf 	bl	80035ac <memmove>
 800304e:	2000      	movs	r0, #0
 8003050:	68a3      	ldr	r3, [r4, #8]
 8003052:	1b9b      	subs	r3, r3, r6
 8003054:	60a3      	str	r3, [r4, #8]
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	4433      	add	r3, r6
 800305a:	6023      	str	r3, [r4, #0]
 800305c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003060:	462a      	mov	r2, r5
 8003062:	f000 fae9 	bl	8003638 <_realloc_r>
 8003066:	4606      	mov	r6, r0
 8003068:	2800      	cmp	r0, #0
 800306a:	d1e0      	bne.n	800302e <__ssputs_r+0x5a>
 800306c:	4650      	mov	r0, sl
 800306e:	6921      	ldr	r1, [r4, #16]
 8003070:	f7ff febc 	bl	8002dec <_free_r>
 8003074:	230c      	movs	r3, #12
 8003076:	f8ca 3000 	str.w	r3, [sl]
 800307a:	89a3      	ldrh	r3, [r4, #12]
 800307c:	f04f 30ff 	mov.w	r0, #4294967295
 8003080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003084:	81a3      	strh	r3, [r4, #12]
 8003086:	e7e9      	b.n	800305c <__ssputs_r+0x88>

08003088 <_svfiprintf_r>:
 8003088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800308c:	4698      	mov	r8, r3
 800308e:	898b      	ldrh	r3, [r1, #12]
 8003090:	4607      	mov	r7, r0
 8003092:	061b      	lsls	r3, r3, #24
 8003094:	460d      	mov	r5, r1
 8003096:	4614      	mov	r4, r2
 8003098:	b09d      	sub	sp, #116	; 0x74
 800309a:	d50e      	bpl.n	80030ba <_svfiprintf_r+0x32>
 800309c:	690b      	ldr	r3, [r1, #16]
 800309e:	b963      	cbnz	r3, 80030ba <_svfiprintf_r+0x32>
 80030a0:	2140      	movs	r1, #64	; 0x40
 80030a2:	f7ff ff0b 	bl	8002ebc <_malloc_r>
 80030a6:	6028      	str	r0, [r5, #0]
 80030a8:	6128      	str	r0, [r5, #16]
 80030aa:	b920      	cbnz	r0, 80030b6 <_svfiprintf_r+0x2e>
 80030ac:	230c      	movs	r3, #12
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295
 80030b4:	e0d0      	b.n	8003258 <_svfiprintf_r+0x1d0>
 80030b6:	2340      	movs	r3, #64	; 0x40
 80030b8:	616b      	str	r3, [r5, #20]
 80030ba:	2300      	movs	r3, #0
 80030bc:	9309      	str	r3, [sp, #36]	; 0x24
 80030be:	2320      	movs	r3, #32
 80030c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030c4:	2330      	movs	r3, #48	; 0x30
 80030c6:	f04f 0901 	mov.w	r9, #1
 80030ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80030ce:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003270 <_svfiprintf_r+0x1e8>
 80030d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030d6:	4623      	mov	r3, r4
 80030d8:	469a      	mov	sl, r3
 80030da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030de:	b10a      	cbz	r2, 80030e4 <_svfiprintf_r+0x5c>
 80030e0:	2a25      	cmp	r2, #37	; 0x25
 80030e2:	d1f9      	bne.n	80030d8 <_svfiprintf_r+0x50>
 80030e4:	ebba 0b04 	subs.w	fp, sl, r4
 80030e8:	d00b      	beq.n	8003102 <_svfiprintf_r+0x7a>
 80030ea:	465b      	mov	r3, fp
 80030ec:	4622      	mov	r2, r4
 80030ee:	4629      	mov	r1, r5
 80030f0:	4638      	mov	r0, r7
 80030f2:	f7ff ff6f 	bl	8002fd4 <__ssputs_r>
 80030f6:	3001      	adds	r0, #1
 80030f8:	f000 80a9 	beq.w	800324e <_svfiprintf_r+0x1c6>
 80030fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030fe:	445a      	add	r2, fp
 8003100:	9209      	str	r2, [sp, #36]	; 0x24
 8003102:	f89a 3000 	ldrb.w	r3, [sl]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80a1 	beq.w	800324e <_svfiprintf_r+0x1c6>
 800310c:	2300      	movs	r3, #0
 800310e:	f04f 32ff 	mov.w	r2, #4294967295
 8003112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003116:	f10a 0a01 	add.w	sl, sl, #1
 800311a:	9304      	str	r3, [sp, #16]
 800311c:	9307      	str	r3, [sp, #28]
 800311e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003122:	931a      	str	r3, [sp, #104]	; 0x68
 8003124:	4654      	mov	r4, sl
 8003126:	2205      	movs	r2, #5
 8003128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800312c:	4850      	ldr	r0, [pc, #320]	; (8003270 <_svfiprintf_r+0x1e8>)
 800312e:	f000 fa67 	bl	8003600 <memchr>
 8003132:	9a04      	ldr	r2, [sp, #16]
 8003134:	b9d8      	cbnz	r0, 800316e <_svfiprintf_r+0xe6>
 8003136:	06d0      	lsls	r0, r2, #27
 8003138:	bf44      	itt	mi
 800313a:	2320      	movmi	r3, #32
 800313c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003140:	0711      	lsls	r1, r2, #28
 8003142:	bf44      	itt	mi
 8003144:	232b      	movmi	r3, #43	; 0x2b
 8003146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800314a:	f89a 3000 	ldrb.w	r3, [sl]
 800314e:	2b2a      	cmp	r3, #42	; 0x2a
 8003150:	d015      	beq.n	800317e <_svfiprintf_r+0xf6>
 8003152:	4654      	mov	r4, sl
 8003154:	2000      	movs	r0, #0
 8003156:	f04f 0c0a 	mov.w	ip, #10
 800315a:	9a07      	ldr	r2, [sp, #28]
 800315c:	4621      	mov	r1, r4
 800315e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003162:	3b30      	subs	r3, #48	; 0x30
 8003164:	2b09      	cmp	r3, #9
 8003166:	d94d      	bls.n	8003204 <_svfiprintf_r+0x17c>
 8003168:	b1b0      	cbz	r0, 8003198 <_svfiprintf_r+0x110>
 800316a:	9207      	str	r2, [sp, #28]
 800316c:	e014      	b.n	8003198 <_svfiprintf_r+0x110>
 800316e:	eba0 0308 	sub.w	r3, r0, r8
 8003172:	fa09 f303 	lsl.w	r3, r9, r3
 8003176:	4313      	orrs	r3, r2
 8003178:	46a2      	mov	sl, r4
 800317a:	9304      	str	r3, [sp, #16]
 800317c:	e7d2      	b.n	8003124 <_svfiprintf_r+0x9c>
 800317e:	9b03      	ldr	r3, [sp, #12]
 8003180:	1d19      	adds	r1, r3, #4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	9103      	str	r1, [sp, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	bfbb      	ittet	lt
 800318a:	425b      	neglt	r3, r3
 800318c:	f042 0202 	orrlt.w	r2, r2, #2
 8003190:	9307      	strge	r3, [sp, #28]
 8003192:	9307      	strlt	r3, [sp, #28]
 8003194:	bfb8      	it	lt
 8003196:	9204      	strlt	r2, [sp, #16]
 8003198:	7823      	ldrb	r3, [r4, #0]
 800319a:	2b2e      	cmp	r3, #46	; 0x2e
 800319c:	d10c      	bne.n	80031b8 <_svfiprintf_r+0x130>
 800319e:	7863      	ldrb	r3, [r4, #1]
 80031a0:	2b2a      	cmp	r3, #42	; 0x2a
 80031a2:	d134      	bne.n	800320e <_svfiprintf_r+0x186>
 80031a4:	9b03      	ldr	r3, [sp, #12]
 80031a6:	3402      	adds	r4, #2
 80031a8:	1d1a      	adds	r2, r3, #4
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	9203      	str	r2, [sp, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bfb8      	it	lt
 80031b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80031b6:	9305      	str	r3, [sp, #20]
 80031b8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003274 <_svfiprintf_r+0x1ec>
 80031bc:	2203      	movs	r2, #3
 80031be:	4650      	mov	r0, sl
 80031c0:	7821      	ldrb	r1, [r4, #0]
 80031c2:	f000 fa1d 	bl	8003600 <memchr>
 80031c6:	b138      	cbz	r0, 80031d8 <_svfiprintf_r+0x150>
 80031c8:	2240      	movs	r2, #64	; 0x40
 80031ca:	9b04      	ldr	r3, [sp, #16]
 80031cc:	eba0 000a 	sub.w	r0, r0, sl
 80031d0:	4082      	lsls	r2, r0
 80031d2:	4313      	orrs	r3, r2
 80031d4:	3401      	adds	r4, #1
 80031d6:	9304      	str	r3, [sp, #16]
 80031d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031dc:	2206      	movs	r2, #6
 80031de:	4826      	ldr	r0, [pc, #152]	; (8003278 <_svfiprintf_r+0x1f0>)
 80031e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031e4:	f000 fa0c 	bl	8003600 <memchr>
 80031e8:	2800      	cmp	r0, #0
 80031ea:	d038      	beq.n	800325e <_svfiprintf_r+0x1d6>
 80031ec:	4b23      	ldr	r3, [pc, #140]	; (800327c <_svfiprintf_r+0x1f4>)
 80031ee:	bb1b      	cbnz	r3, 8003238 <_svfiprintf_r+0x1b0>
 80031f0:	9b03      	ldr	r3, [sp, #12]
 80031f2:	3307      	adds	r3, #7
 80031f4:	f023 0307 	bic.w	r3, r3, #7
 80031f8:	3308      	adds	r3, #8
 80031fa:	9303      	str	r3, [sp, #12]
 80031fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031fe:	4433      	add	r3, r6
 8003200:	9309      	str	r3, [sp, #36]	; 0x24
 8003202:	e768      	b.n	80030d6 <_svfiprintf_r+0x4e>
 8003204:	460c      	mov	r4, r1
 8003206:	2001      	movs	r0, #1
 8003208:	fb0c 3202 	mla	r2, ip, r2, r3
 800320c:	e7a6      	b.n	800315c <_svfiprintf_r+0xd4>
 800320e:	2300      	movs	r3, #0
 8003210:	f04f 0c0a 	mov.w	ip, #10
 8003214:	4619      	mov	r1, r3
 8003216:	3401      	adds	r4, #1
 8003218:	9305      	str	r3, [sp, #20]
 800321a:	4620      	mov	r0, r4
 800321c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003220:	3a30      	subs	r2, #48	; 0x30
 8003222:	2a09      	cmp	r2, #9
 8003224:	d903      	bls.n	800322e <_svfiprintf_r+0x1a6>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0c6      	beq.n	80031b8 <_svfiprintf_r+0x130>
 800322a:	9105      	str	r1, [sp, #20]
 800322c:	e7c4      	b.n	80031b8 <_svfiprintf_r+0x130>
 800322e:	4604      	mov	r4, r0
 8003230:	2301      	movs	r3, #1
 8003232:	fb0c 2101 	mla	r1, ip, r1, r2
 8003236:	e7f0      	b.n	800321a <_svfiprintf_r+0x192>
 8003238:	ab03      	add	r3, sp, #12
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	462a      	mov	r2, r5
 800323e:	4638      	mov	r0, r7
 8003240:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <_svfiprintf_r+0x1f8>)
 8003242:	a904      	add	r1, sp, #16
 8003244:	f3af 8000 	nop.w
 8003248:	1c42      	adds	r2, r0, #1
 800324a:	4606      	mov	r6, r0
 800324c:	d1d6      	bne.n	80031fc <_svfiprintf_r+0x174>
 800324e:	89ab      	ldrh	r3, [r5, #12]
 8003250:	065b      	lsls	r3, r3, #25
 8003252:	f53f af2d 	bmi.w	80030b0 <_svfiprintf_r+0x28>
 8003256:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003258:	b01d      	add	sp, #116	; 0x74
 800325a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800325e:	ab03      	add	r3, sp, #12
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	462a      	mov	r2, r5
 8003264:	4638      	mov	r0, r7
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <_svfiprintf_r+0x1f8>)
 8003268:	a904      	add	r1, sp, #16
 800326a:	f000 f87d 	bl	8003368 <_printf_i>
 800326e:	e7eb      	b.n	8003248 <_svfiprintf_r+0x1c0>
 8003270:	0800669a 	.word	0x0800669a
 8003274:	080066a0 	.word	0x080066a0
 8003278:	080066a4 	.word	0x080066a4
 800327c:	00000000 	.word	0x00000000
 8003280:	08002fd5 	.word	0x08002fd5

08003284 <_printf_common>:
 8003284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003288:	4616      	mov	r6, r2
 800328a:	4699      	mov	r9, r3
 800328c:	688a      	ldr	r2, [r1, #8]
 800328e:	690b      	ldr	r3, [r1, #16]
 8003290:	4607      	mov	r7, r0
 8003292:	4293      	cmp	r3, r2
 8003294:	bfb8      	it	lt
 8003296:	4613      	movlt	r3, r2
 8003298:	6033      	str	r3, [r6, #0]
 800329a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800329e:	460c      	mov	r4, r1
 80032a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032a4:	b10a      	cbz	r2, 80032aa <_printf_common+0x26>
 80032a6:	3301      	adds	r3, #1
 80032a8:	6033      	str	r3, [r6, #0]
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	0699      	lsls	r1, r3, #26
 80032ae:	bf42      	ittt	mi
 80032b0:	6833      	ldrmi	r3, [r6, #0]
 80032b2:	3302      	addmi	r3, #2
 80032b4:	6033      	strmi	r3, [r6, #0]
 80032b6:	6825      	ldr	r5, [r4, #0]
 80032b8:	f015 0506 	ands.w	r5, r5, #6
 80032bc:	d106      	bne.n	80032cc <_printf_common+0x48>
 80032be:	f104 0a19 	add.w	sl, r4, #25
 80032c2:	68e3      	ldr	r3, [r4, #12]
 80032c4:	6832      	ldr	r2, [r6, #0]
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	42ab      	cmp	r3, r5
 80032ca:	dc2b      	bgt.n	8003324 <_printf_common+0xa0>
 80032cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032d0:	1e13      	subs	r3, r2, #0
 80032d2:	6822      	ldr	r2, [r4, #0]
 80032d4:	bf18      	it	ne
 80032d6:	2301      	movne	r3, #1
 80032d8:	0692      	lsls	r2, r2, #26
 80032da:	d430      	bmi.n	800333e <_printf_common+0xba>
 80032dc:	4649      	mov	r1, r9
 80032de:	4638      	mov	r0, r7
 80032e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032e4:	47c0      	blx	r8
 80032e6:	3001      	adds	r0, #1
 80032e8:	d023      	beq.n	8003332 <_printf_common+0xae>
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	6922      	ldr	r2, [r4, #16]
 80032ee:	f003 0306 	and.w	r3, r3, #6
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	bf14      	ite	ne
 80032f6:	2500      	movne	r5, #0
 80032f8:	6833      	ldreq	r3, [r6, #0]
 80032fa:	f04f 0600 	mov.w	r6, #0
 80032fe:	bf08      	it	eq
 8003300:	68e5      	ldreq	r5, [r4, #12]
 8003302:	f104 041a 	add.w	r4, r4, #26
 8003306:	bf08      	it	eq
 8003308:	1aed      	subeq	r5, r5, r3
 800330a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800330e:	bf08      	it	eq
 8003310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003314:	4293      	cmp	r3, r2
 8003316:	bfc4      	itt	gt
 8003318:	1a9b      	subgt	r3, r3, r2
 800331a:	18ed      	addgt	r5, r5, r3
 800331c:	42b5      	cmp	r5, r6
 800331e:	d11a      	bne.n	8003356 <_printf_common+0xd2>
 8003320:	2000      	movs	r0, #0
 8003322:	e008      	b.n	8003336 <_printf_common+0xb2>
 8003324:	2301      	movs	r3, #1
 8003326:	4652      	mov	r2, sl
 8003328:	4649      	mov	r1, r9
 800332a:	4638      	mov	r0, r7
 800332c:	47c0      	blx	r8
 800332e:	3001      	adds	r0, #1
 8003330:	d103      	bne.n	800333a <_printf_common+0xb6>
 8003332:	f04f 30ff 	mov.w	r0, #4294967295
 8003336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800333a:	3501      	adds	r5, #1
 800333c:	e7c1      	b.n	80032c2 <_printf_common+0x3e>
 800333e:	2030      	movs	r0, #48	; 0x30
 8003340:	18e1      	adds	r1, r4, r3
 8003342:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800334c:	4422      	add	r2, r4
 800334e:	3302      	adds	r3, #2
 8003350:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003354:	e7c2      	b.n	80032dc <_printf_common+0x58>
 8003356:	2301      	movs	r3, #1
 8003358:	4622      	mov	r2, r4
 800335a:	4649      	mov	r1, r9
 800335c:	4638      	mov	r0, r7
 800335e:	47c0      	blx	r8
 8003360:	3001      	adds	r0, #1
 8003362:	d0e6      	beq.n	8003332 <_printf_common+0xae>
 8003364:	3601      	adds	r6, #1
 8003366:	e7d9      	b.n	800331c <_printf_common+0x98>

08003368 <_printf_i>:
 8003368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800336c:	7e0f      	ldrb	r7, [r1, #24]
 800336e:	4691      	mov	r9, r2
 8003370:	2f78      	cmp	r7, #120	; 0x78
 8003372:	4680      	mov	r8, r0
 8003374:	460c      	mov	r4, r1
 8003376:	469a      	mov	sl, r3
 8003378:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800337a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800337e:	d807      	bhi.n	8003390 <_printf_i+0x28>
 8003380:	2f62      	cmp	r7, #98	; 0x62
 8003382:	d80a      	bhi.n	800339a <_printf_i+0x32>
 8003384:	2f00      	cmp	r7, #0
 8003386:	f000 80d5 	beq.w	8003534 <_printf_i+0x1cc>
 800338a:	2f58      	cmp	r7, #88	; 0x58
 800338c:	f000 80c1 	beq.w	8003512 <_printf_i+0x1aa>
 8003390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003394:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003398:	e03a      	b.n	8003410 <_printf_i+0xa8>
 800339a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800339e:	2b15      	cmp	r3, #21
 80033a0:	d8f6      	bhi.n	8003390 <_printf_i+0x28>
 80033a2:	a101      	add	r1, pc, #4	; (adr r1, 80033a8 <_printf_i+0x40>)
 80033a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033a8:	08003401 	.word	0x08003401
 80033ac:	08003415 	.word	0x08003415
 80033b0:	08003391 	.word	0x08003391
 80033b4:	08003391 	.word	0x08003391
 80033b8:	08003391 	.word	0x08003391
 80033bc:	08003391 	.word	0x08003391
 80033c0:	08003415 	.word	0x08003415
 80033c4:	08003391 	.word	0x08003391
 80033c8:	08003391 	.word	0x08003391
 80033cc:	08003391 	.word	0x08003391
 80033d0:	08003391 	.word	0x08003391
 80033d4:	0800351b 	.word	0x0800351b
 80033d8:	08003441 	.word	0x08003441
 80033dc:	080034d5 	.word	0x080034d5
 80033e0:	08003391 	.word	0x08003391
 80033e4:	08003391 	.word	0x08003391
 80033e8:	0800353d 	.word	0x0800353d
 80033ec:	08003391 	.word	0x08003391
 80033f0:	08003441 	.word	0x08003441
 80033f4:	08003391 	.word	0x08003391
 80033f8:	08003391 	.word	0x08003391
 80033fc:	080034dd 	.word	0x080034dd
 8003400:	682b      	ldr	r3, [r5, #0]
 8003402:	1d1a      	adds	r2, r3, #4
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	602a      	str	r2, [r5, #0]
 8003408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800340c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003410:	2301      	movs	r3, #1
 8003412:	e0a0      	b.n	8003556 <_printf_i+0x1ee>
 8003414:	6820      	ldr	r0, [r4, #0]
 8003416:	682b      	ldr	r3, [r5, #0]
 8003418:	0607      	lsls	r7, r0, #24
 800341a:	f103 0104 	add.w	r1, r3, #4
 800341e:	6029      	str	r1, [r5, #0]
 8003420:	d501      	bpl.n	8003426 <_printf_i+0xbe>
 8003422:	681e      	ldr	r6, [r3, #0]
 8003424:	e003      	b.n	800342e <_printf_i+0xc6>
 8003426:	0646      	lsls	r6, r0, #25
 8003428:	d5fb      	bpl.n	8003422 <_printf_i+0xba>
 800342a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800342e:	2e00      	cmp	r6, #0
 8003430:	da03      	bge.n	800343a <_printf_i+0xd2>
 8003432:	232d      	movs	r3, #45	; 0x2d
 8003434:	4276      	negs	r6, r6
 8003436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800343a:	230a      	movs	r3, #10
 800343c:	4859      	ldr	r0, [pc, #356]	; (80035a4 <_printf_i+0x23c>)
 800343e:	e012      	b.n	8003466 <_printf_i+0xfe>
 8003440:	682b      	ldr	r3, [r5, #0]
 8003442:	6820      	ldr	r0, [r4, #0]
 8003444:	1d19      	adds	r1, r3, #4
 8003446:	6029      	str	r1, [r5, #0]
 8003448:	0605      	lsls	r5, r0, #24
 800344a:	d501      	bpl.n	8003450 <_printf_i+0xe8>
 800344c:	681e      	ldr	r6, [r3, #0]
 800344e:	e002      	b.n	8003456 <_printf_i+0xee>
 8003450:	0641      	lsls	r1, r0, #25
 8003452:	d5fb      	bpl.n	800344c <_printf_i+0xe4>
 8003454:	881e      	ldrh	r6, [r3, #0]
 8003456:	2f6f      	cmp	r7, #111	; 0x6f
 8003458:	bf0c      	ite	eq
 800345a:	2308      	moveq	r3, #8
 800345c:	230a      	movne	r3, #10
 800345e:	4851      	ldr	r0, [pc, #324]	; (80035a4 <_printf_i+0x23c>)
 8003460:	2100      	movs	r1, #0
 8003462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003466:	6865      	ldr	r5, [r4, #4]
 8003468:	2d00      	cmp	r5, #0
 800346a:	bfa8      	it	ge
 800346c:	6821      	ldrge	r1, [r4, #0]
 800346e:	60a5      	str	r5, [r4, #8]
 8003470:	bfa4      	itt	ge
 8003472:	f021 0104 	bicge.w	r1, r1, #4
 8003476:	6021      	strge	r1, [r4, #0]
 8003478:	b90e      	cbnz	r6, 800347e <_printf_i+0x116>
 800347a:	2d00      	cmp	r5, #0
 800347c:	d04b      	beq.n	8003516 <_printf_i+0x1ae>
 800347e:	4615      	mov	r5, r2
 8003480:	fbb6 f1f3 	udiv	r1, r6, r3
 8003484:	fb03 6711 	mls	r7, r3, r1, r6
 8003488:	5dc7      	ldrb	r7, [r0, r7]
 800348a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800348e:	4637      	mov	r7, r6
 8003490:	42bb      	cmp	r3, r7
 8003492:	460e      	mov	r6, r1
 8003494:	d9f4      	bls.n	8003480 <_printf_i+0x118>
 8003496:	2b08      	cmp	r3, #8
 8003498:	d10b      	bne.n	80034b2 <_printf_i+0x14a>
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	07de      	lsls	r6, r3, #31
 800349e:	d508      	bpl.n	80034b2 <_printf_i+0x14a>
 80034a0:	6923      	ldr	r3, [r4, #16]
 80034a2:	6861      	ldr	r1, [r4, #4]
 80034a4:	4299      	cmp	r1, r3
 80034a6:	bfde      	ittt	le
 80034a8:	2330      	movle	r3, #48	; 0x30
 80034aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034b2:	1b52      	subs	r2, r2, r5
 80034b4:	6122      	str	r2, [r4, #16]
 80034b6:	464b      	mov	r3, r9
 80034b8:	4621      	mov	r1, r4
 80034ba:	4640      	mov	r0, r8
 80034bc:	f8cd a000 	str.w	sl, [sp]
 80034c0:	aa03      	add	r2, sp, #12
 80034c2:	f7ff fedf 	bl	8003284 <_printf_common>
 80034c6:	3001      	adds	r0, #1
 80034c8:	d14a      	bne.n	8003560 <_printf_i+0x1f8>
 80034ca:	f04f 30ff 	mov.w	r0, #4294967295
 80034ce:	b004      	add	sp, #16
 80034d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	f043 0320 	orr.w	r3, r3, #32
 80034da:	6023      	str	r3, [r4, #0]
 80034dc:	2778      	movs	r7, #120	; 0x78
 80034de:	4832      	ldr	r0, [pc, #200]	; (80035a8 <_printf_i+0x240>)
 80034e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	6829      	ldr	r1, [r5, #0]
 80034e8:	061f      	lsls	r7, r3, #24
 80034ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80034ee:	d402      	bmi.n	80034f6 <_printf_i+0x18e>
 80034f0:	065f      	lsls	r7, r3, #25
 80034f2:	bf48      	it	mi
 80034f4:	b2b6      	uxthmi	r6, r6
 80034f6:	07df      	lsls	r7, r3, #31
 80034f8:	bf48      	it	mi
 80034fa:	f043 0320 	orrmi.w	r3, r3, #32
 80034fe:	6029      	str	r1, [r5, #0]
 8003500:	bf48      	it	mi
 8003502:	6023      	strmi	r3, [r4, #0]
 8003504:	b91e      	cbnz	r6, 800350e <_printf_i+0x1a6>
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	f023 0320 	bic.w	r3, r3, #32
 800350c:	6023      	str	r3, [r4, #0]
 800350e:	2310      	movs	r3, #16
 8003510:	e7a6      	b.n	8003460 <_printf_i+0xf8>
 8003512:	4824      	ldr	r0, [pc, #144]	; (80035a4 <_printf_i+0x23c>)
 8003514:	e7e4      	b.n	80034e0 <_printf_i+0x178>
 8003516:	4615      	mov	r5, r2
 8003518:	e7bd      	b.n	8003496 <_printf_i+0x12e>
 800351a:	682b      	ldr	r3, [r5, #0]
 800351c:	6826      	ldr	r6, [r4, #0]
 800351e:	1d18      	adds	r0, r3, #4
 8003520:	6961      	ldr	r1, [r4, #20]
 8003522:	6028      	str	r0, [r5, #0]
 8003524:	0635      	lsls	r5, r6, #24
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	d501      	bpl.n	800352e <_printf_i+0x1c6>
 800352a:	6019      	str	r1, [r3, #0]
 800352c:	e002      	b.n	8003534 <_printf_i+0x1cc>
 800352e:	0670      	lsls	r0, r6, #25
 8003530:	d5fb      	bpl.n	800352a <_printf_i+0x1c2>
 8003532:	8019      	strh	r1, [r3, #0]
 8003534:	2300      	movs	r3, #0
 8003536:	4615      	mov	r5, r2
 8003538:	6123      	str	r3, [r4, #16]
 800353a:	e7bc      	b.n	80034b6 <_printf_i+0x14e>
 800353c:	682b      	ldr	r3, [r5, #0]
 800353e:	2100      	movs	r1, #0
 8003540:	1d1a      	adds	r2, r3, #4
 8003542:	602a      	str	r2, [r5, #0]
 8003544:	681d      	ldr	r5, [r3, #0]
 8003546:	6862      	ldr	r2, [r4, #4]
 8003548:	4628      	mov	r0, r5
 800354a:	f000 f859 	bl	8003600 <memchr>
 800354e:	b108      	cbz	r0, 8003554 <_printf_i+0x1ec>
 8003550:	1b40      	subs	r0, r0, r5
 8003552:	6060      	str	r0, [r4, #4]
 8003554:	6863      	ldr	r3, [r4, #4]
 8003556:	6123      	str	r3, [r4, #16]
 8003558:	2300      	movs	r3, #0
 800355a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800355e:	e7aa      	b.n	80034b6 <_printf_i+0x14e>
 8003560:	462a      	mov	r2, r5
 8003562:	4649      	mov	r1, r9
 8003564:	4640      	mov	r0, r8
 8003566:	6923      	ldr	r3, [r4, #16]
 8003568:	47d0      	blx	sl
 800356a:	3001      	adds	r0, #1
 800356c:	d0ad      	beq.n	80034ca <_printf_i+0x162>
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	079b      	lsls	r3, r3, #30
 8003572:	d413      	bmi.n	800359c <_printf_i+0x234>
 8003574:	68e0      	ldr	r0, [r4, #12]
 8003576:	9b03      	ldr	r3, [sp, #12]
 8003578:	4298      	cmp	r0, r3
 800357a:	bfb8      	it	lt
 800357c:	4618      	movlt	r0, r3
 800357e:	e7a6      	b.n	80034ce <_printf_i+0x166>
 8003580:	2301      	movs	r3, #1
 8003582:	4632      	mov	r2, r6
 8003584:	4649      	mov	r1, r9
 8003586:	4640      	mov	r0, r8
 8003588:	47d0      	blx	sl
 800358a:	3001      	adds	r0, #1
 800358c:	d09d      	beq.n	80034ca <_printf_i+0x162>
 800358e:	3501      	adds	r5, #1
 8003590:	68e3      	ldr	r3, [r4, #12]
 8003592:	9903      	ldr	r1, [sp, #12]
 8003594:	1a5b      	subs	r3, r3, r1
 8003596:	42ab      	cmp	r3, r5
 8003598:	dcf2      	bgt.n	8003580 <_printf_i+0x218>
 800359a:	e7eb      	b.n	8003574 <_printf_i+0x20c>
 800359c:	2500      	movs	r5, #0
 800359e:	f104 0619 	add.w	r6, r4, #25
 80035a2:	e7f5      	b.n	8003590 <_printf_i+0x228>
 80035a4:	080066ab 	.word	0x080066ab
 80035a8:	080066bc 	.word	0x080066bc

080035ac <memmove>:
 80035ac:	4288      	cmp	r0, r1
 80035ae:	b510      	push	{r4, lr}
 80035b0:	eb01 0402 	add.w	r4, r1, r2
 80035b4:	d902      	bls.n	80035bc <memmove+0x10>
 80035b6:	4284      	cmp	r4, r0
 80035b8:	4623      	mov	r3, r4
 80035ba:	d807      	bhi.n	80035cc <memmove+0x20>
 80035bc:	1e43      	subs	r3, r0, #1
 80035be:	42a1      	cmp	r1, r4
 80035c0:	d008      	beq.n	80035d4 <memmove+0x28>
 80035c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035ca:	e7f8      	b.n	80035be <memmove+0x12>
 80035cc:	4601      	mov	r1, r0
 80035ce:	4402      	add	r2, r0
 80035d0:	428a      	cmp	r2, r1
 80035d2:	d100      	bne.n	80035d6 <memmove+0x2a>
 80035d4:	bd10      	pop	{r4, pc}
 80035d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035de:	e7f7      	b.n	80035d0 <memmove+0x24>

080035e0 <_sbrk_r>:
 80035e0:	b538      	push	{r3, r4, r5, lr}
 80035e2:	2300      	movs	r3, #0
 80035e4:	4d05      	ldr	r5, [pc, #20]	; (80035fc <_sbrk_r+0x1c>)
 80035e6:	4604      	mov	r4, r0
 80035e8:	4608      	mov	r0, r1
 80035ea:	602b      	str	r3, [r5, #0]
 80035ec:	f7fd ffaa 	bl	8001544 <_sbrk>
 80035f0:	1c43      	adds	r3, r0, #1
 80035f2:	d102      	bne.n	80035fa <_sbrk_r+0x1a>
 80035f4:	682b      	ldr	r3, [r5, #0]
 80035f6:	b103      	cbz	r3, 80035fa <_sbrk_r+0x1a>
 80035f8:	6023      	str	r3, [r4, #0]
 80035fa:	bd38      	pop	{r3, r4, r5, pc}
 80035fc:	20000620 	.word	0x20000620

08003600 <memchr>:
 8003600:	4603      	mov	r3, r0
 8003602:	b510      	push	{r4, lr}
 8003604:	b2c9      	uxtb	r1, r1
 8003606:	4402      	add	r2, r0
 8003608:	4293      	cmp	r3, r2
 800360a:	4618      	mov	r0, r3
 800360c:	d101      	bne.n	8003612 <memchr+0x12>
 800360e:	2000      	movs	r0, #0
 8003610:	e003      	b.n	800361a <memchr+0x1a>
 8003612:	7804      	ldrb	r4, [r0, #0]
 8003614:	3301      	adds	r3, #1
 8003616:	428c      	cmp	r4, r1
 8003618:	d1f6      	bne.n	8003608 <memchr+0x8>
 800361a:	bd10      	pop	{r4, pc}

0800361c <memcpy>:
 800361c:	440a      	add	r2, r1
 800361e:	4291      	cmp	r1, r2
 8003620:	f100 33ff 	add.w	r3, r0, #4294967295
 8003624:	d100      	bne.n	8003628 <memcpy+0xc>
 8003626:	4770      	bx	lr
 8003628:	b510      	push	{r4, lr}
 800362a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800362e:	4291      	cmp	r1, r2
 8003630:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003634:	d1f9      	bne.n	800362a <memcpy+0xe>
 8003636:	bd10      	pop	{r4, pc}

08003638 <_realloc_r>:
 8003638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800363c:	4680      	mov	r8, r0
 800363e:	4614      	mov	r4, r2
 8003640:	460e      	mov	r6, r1
 8003642:	b921      	cbnz	r1, 800364e <_realloc_r+0x16>
 8003644:	4611      	mov	r1, r2
 8003646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800364a:	f7ff bc37 	b.w	8002ebc <_malloc_r>
 800364e:	b92a      	cbnz	r2, 800365c <_realloc_r+0x24>
 8003650:	f7ff fbcc 	bl	8002dec <_free_r>
 8003654:	4625      	mov	r5, r4
 8003656:	4628      	mov	r0, r5
 8003658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800365c:	f000 f81b 	bl	8003696 <_malloc_usable_size_r>
 8003660:	4284      	cmp	r4, r0
 8003662:	4607      	mov	r7, r0
 8003664:	d802      	bhi.n	800366c <_realloc_r+0x34>
 8003666:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800366a:	d812      	bhi.n	8003692 <_realloc_r+0x5a>
 800366c:	4621      	mov	r1, r4
 800366e:	4640      	mov	r0, r8
 8003670:	f7ff fc24 	bl	8002ebc <_malloc_r>
 8003674:	4605      	mov	r5, r0
 8003676:	2800      	cmp	r0, #0
 8003678:	d0ed      	beq.n	8003656 <_realloc_r+0x1e>
 800367a:	42bc      	cmp	r4, r7
 800367c:	4622      	mov	r2, r4
 800367e:	4631      	mov	r1, r6
 8003680:	bf28      	it	cs
 8003682:	463a      	movcs	r2, r7
 8003684:	f7ff ffca 	bl	800361c <memcpy>
 8003688:	4631      	mov	r1, r6
 800368a:	4640      	mov	r0, r8
 800368c:	f7ff fbae 	bl	8002dec <_free_r>
 8003690:	e7e1      	b.n	8003656 <_realloc_r+0x1e>
 8003692:	4635      	mov	r5, r6
 8003694:	e7df      	b.n	8003656 <_realloc_r+0x1e>

08003696 <_malloc_usable_size_r>:
 8003696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800369a:	1f18      	subs	r0, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	bfbc      	itt	lt
 80036a0:	580b      	ldrlt	r3, [r1, r0]
 80036a2:	18c0      	addlt	r0, r0, r3
 80036a4:	4770      	bx	lr
	...

080036a8 <_init>:
 80036a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036aa:	bf00      	nop
 80036ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ae:	bc08      	pop	{r3}
 80036b0:	469e      	mov	lr, r3
 80036b2:	4770      	bx	lr

080036b4 <_fini>:
 80036b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b6:	bf00      	nop
 80036b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ba:	bc08      	pop	{r3}
 80036bc:	469e      	mov	lr, r3
 80036be:	4770      	bx	lr
