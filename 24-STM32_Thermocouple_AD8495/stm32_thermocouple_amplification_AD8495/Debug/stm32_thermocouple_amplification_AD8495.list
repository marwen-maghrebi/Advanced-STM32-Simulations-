
stm32_thermocouple_amplification_AD8495.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f14  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08006028  08006028  00016028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006414  08006414  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08006414  08006414  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006414  08006414  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006414  08006414  00016414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006418  08006418  00016418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800641c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001e0  080065fc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  080065fc  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000816c  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000188b  00000000  00000000  000283b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f0  00000000  00000000  00029c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000603  00000000  00000000  0002a438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017e2d  00000000  00000000  0002aa3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ea4  00000000  00000000  00042868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000866b1  00000000  00000000  0004c70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030d8  00000000  00000000  000d2dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d5e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800600c 	.word	0x0800600c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800600c 	.word	0x0800600c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop
 8000fe4:	0000      	movs	r0, r0
	...

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b5b0      	push	{r4, r5, r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f000 fb43 	bl	8001678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 f89f 	bl	8001134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f000 f955 	bl	80012a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ffa:	f000 f8eb 	bl	80011d4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000ffe:	f000 f927 	bl	8001250 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_ADC_Start(&hadc1)!=HAL_OK)
 8001002:	4841      	ldr	r0, [pc, #260]	; (8001108 <main+0x120>)
 8001004:	f000 fc96 	bl	8001934 <HAL_ADC_Start>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d004      	beq.n	8001018 <main+0x30>
  {
  Error_Handler();
 800100e:	f000 f95f 	bl	80012d0 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    while(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY)!=HAL_OK)
 8001012:	e001      	b.n	8001018 <main+0x30>
    {
    Error_Handler();
 8001014:	f000 f95c 	bl	80012d0 <Error_Handler>
    while(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY)!=HAL_OK)
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	483a      	ldr	r0, [pc, #232]	; (8001108 <main+0x120>)
 800101e:	f000 fd37 	bl	8001a90 <HAL_ADC_PollForConversion>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1f5      	bne.n	8001014 <main+0x2c>
    }
    val = HAL_ADC_GetValue(&hadc1);                         // Read the input from ADC
 8001028:	4837      	ldr	r0, [pc, #220]	; (8001108 <main+0x120>)
 800102a:	f000 fe37 	bl	8001c9c <HAL_ADC_GetValue>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	4b36      	ldr	r3, [pc, #216]	; (800110c <main+0x124>)
 8001034:	601a      	str	r2, [r3, #0]
    TempC = (( (float)(val) * gain)-vref)/ Output_Voltage;  // -ref Convert ADC value to Celsius degree
 8001036:	4b35      	ldr	r3, [pc, #212]	; (800110c <main+0x124>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fe2e 	bl	8000c9c <__aeabi_i2f>
 8001040:	4602      	mov	r2, r0
 8001042:	4b33      	ldr	r3, [pc, #204]	; (8001110 <main+0x128>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4619      	mov	r1, r3
 8001048:	4610      	mov	r0, r2
 800104a:	f7ff fe7b 	bl	8000d44 <__aeabi_fmul>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b30      	ldr	r3, [pc, #192]	; (8001114 <main+0x12c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4619      	mov	r1, r3
 8001058:	4610      	mov	r0, r2
 800105a:	f7ff fd69 	bl	8000b30 <__aeabi_fsub>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <main+0x130>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4619      	mov	r1, r3
 8001068:	4610      	mov	r0, r2
 800106a:	f7ff ff1f 	bl	8000eac <__aeabi_fdiv>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b2a      	ldr	r3, [pc, #168]	; (800111c <main+0x134>)
 8001074:	601a      	str	r2, [r3, #0]
    TempF = (TempC * 1.8) + 32.0;
 8001076:	4b29      	ldr	r3, [pc, #164]	; (800111c <main+0x134>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f9d4 	bl	8000428 <__aeabi_f2d>
 8001080:	a31f      	add	r3, pc, #124	; (adr r3, 8001100 <main+0x118>)
 8001082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001086:	f7ff fa27 	bl	80004d8 <__aeabi_dmul>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4610      	mov	r0, r2
 8001090:	4619      	mov	r1, r3
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <main+0x138>)
 8001098:	f7ff f868 	bl	800016c <__adddf3>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fcf0 	bl	8000a88 <__aeabi_d2f>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a1e      	ldr	r2, [pc, #120]	; (8001124 <main+0x13c>)
 80010ac:	6013      	str	r3, [r2, #0]
    sprintf(buffer, "Temperature: %.2f Degrees Celsius, %.2f  Degrees Fahrenheit\r\n", TempC,TempF);
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <main+0x134>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f9b8 	bl	8000428 <__aeabi_f2d>
 80010b8:	4604      	mov	r4, r0
 80010ba:	460d      	mov	r5, r1
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <main+0x13c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f9b1 	bl	8000428 <__aeabi_f2d>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	e9cd 2300 	strd	r2, r3, [sp]
 80010ce:	4622      	mov	r2, r4
 80010d0:	462b      	mov	r3, r5
 80010d2:	4915      	ldr	r1, [pc, #84]	; (8001128 <main+0x140>)
 80010d4:	4815      	ldr	r0, [pc, #84]	; (800112c <main+0x144>)
 80010d6:	f002 fe4d 	bl	8003d74 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010da:	4814      	ldr	r0, [pc, #80]	; (800112c <main+0x144>)
 80010dc:	f7ff f838 	bl	8000150 <strlen>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	4910      	ldr	r1, [pc, #64]	; (800112c <main+0x144>)
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <main+0x148>)
 80010ec:	f001 ffa2 	bl	8003034 <HAL_UART_Transmit>
    HAL_Delay(500);
 80010f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010f4:	f000 fb22 	bl	800173c <HAL_Delay>
    while(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY)!=HAL_OK)
 80010f8:	e78e      	b.n	8001018 <main+0x30>
 80010fa:	bf00      	nop
 80010fc:	f3af 8000 	nop.w
 8001100:	cccccccd 	.word	0xcccccccd
 8001104:	3ffccccc 	.word	0x3ffccccc
 8001108:	200001fc 	.word	0x200001fc
 800110c:	20000274 	.word	0x20000274
 8001110:	20000000 	.word	0x20000000
 8001114:	20000004 	.word	0x20000004
 8001118:	20000008 	.word	0x20000008
 800111c:	20000278 	.word	0x20000278
 8001120:	40400000 	.word	0x40400000
 8001124:	2000027c 	.word	0x2000027c
 8001128:	08006028 	.word	0x08006028
 800112c:	20000280 	.word	0x20000280
 8001130:	2000022c 	.word	0x2000022c

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b094      	sub	sp, #80	; 0x50
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800113e:	2228      	movs	r2, #40	; 0x28
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f002 fe79 	bl	8003e3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001164:	2302      	movs	r3, #2
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001168:	2301      	movs	r3, #1
 800116a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116c:	2310      	movs	r3, #16
 800116e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001170:	2300      	movs	r3, #0
 8001172:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001178:	4618      	mov	r0, r3
 800117a:	f001 f98f 	bl	800249c <HAL_RCC_OscConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001184:	f000 f8a4 	bl	80012d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001188:	230f      	movs	r3, #15
 800118a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fbfc 	bl	80029a0 <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80011ae:	f000 f88f 	bl	80012d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011b2:	2302      	movs	r3, #2
 80011b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 fd7d 	bl	8002cbc <HAL_RCCEx_PeriphCLKConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011c8:	f000 f882 	bl	80012d0 <Error_Handler>
  }
}
 80011cc:	bf00      	nop
 80011ce:	3750      	adds	r7, #80	; 0x50
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_ADC1_Init+0x74>)
 80011e6:	4a19      	ldr	r2, [pc, #100]	; (800124c <MX_ADC1_Init+0x78>)
 80011e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_ADC1_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <MX_ADC1_Init+0x74>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_ADC1_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_ADC1_Init+0x74>)
 80011fe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001202:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_ADC1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_ADC1_Init+0x74>)
 800120c:	2201      	movs	r2, #1
 800120e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <MX_ADC1_Init+0x74>)
 8001212:	f000 fab7 	bl	8001784 <HAL_ADC_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800121c:	f000 f858 	bl	80012d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001220:	2302      	movs	r3, #2
 8001222:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001224:	2301      	movs	r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_ADC1_Init+0x74>)
 8001232:	f000 fd3f 	bl	8001cb4 <HAL_ADC_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800123c:	f000 f848 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200001fc 	.word	0x200001fc
 800124c:	40012400 	.word	0x40012400

08001250 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <MX_USART1_UART_Init+0x50>)
 8001258:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <MX_USART1_UART_Init+0x4c>)
 800125c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001260:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_USART1_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001276:	220c      	movs	r2, #12
 8001278:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_USART1_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001288:	f001 fe84 	bl	8002f94 <HAL_UART_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001292:	f000 f81d 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000022c 	.word	0x2000022c
 80012a0:	40013800 	.word	0x40013800

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_GPIO_Init+0x28>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	4a07      	ldr	r2, [pc, #28]	; (80012cc <MX_GPIO_Init+0x28>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	6193      	str	r3, [r2, #24]
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <MX_GPIO_Init+0x28>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	40021000 	.word	0x40021000

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <Error_Handler+0x8>
	...

080012dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_MspInit+0x5c>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	4a14      	ldr	r2, [pc, #80]	; (8001338 <HAL_MspInit+0x5c>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6193      	str	r3, [r2, #24]
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_MspInit+0x5c>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_MspInit+0x5c>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <HAL_MspInit+0x5c>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_MspInit+0x5c>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <HAL_MspInit+0x60>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <HAL_MspInit+0x60>)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	40021000 	.word	0x40021000
 800133c:	40010000 	.word	0x40010000

08001340 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a14      	ldr	r2, [pc, #80]	; (80013ac <HAL_ADC_MspInit+0x6c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d121      	bne.n	80013a4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <HAL_ADC_MspInit+0x70>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <HAL_ADC_MspInit+0x70>)
 8001366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <HAL_ADC_MspInit+0x70>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HAL_ADC_MspInit+0x70>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <HAL_ADC_MspInit+0x70>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_ADC_MspInit+0x70>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001390:	2304      	movs	r3, #4
 8001392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001394:	2303      	movs	r3, #3
 8001396:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4619      	mov	r1, r3
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <HAL_ADC_MspInit+0x74>)
 80013a0:	f000 ff00 	bl	80021a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013a4:	bf00      	nop
 80013a6:	3720      	adds	r7, #32
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40012400 	.word	0x40012400
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010800 	.word	0x40010800

080013b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <HAL_UART_MspInit+0x8c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d131      	bne.n	800143c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_UART_MspInit+0x90>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a1a      	ldr	r2, [pc, #104]	; (8001448 <HAL_UART_MspInit+0x90>)
 80013de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_UART_MspInit+0x90>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_UART_MspInit+0x90>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a14      	ldr	r2, [pc, #80]	; (8001448 <HAL_UART_MspInit+0x90>)
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_UART_MspInit+0x90>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800140c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	4619      	mov	r1, r3
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <HAL_UART_MspInit+0x94>)
 800141e:	f000 fec1 	bl	80021a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001426:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4619      	mov	r1, r3
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <HAL_UART_MspInit+0x94>)
 8001438:	f000 feb4 	bl	80021a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800143c:	bf00      	nop
 800143e:	3720      	adds	r7, #32
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40013800 	.word	0x40013800
 8001448:	40021000 	.word	0x40021000
 800144c:	40010800 	.word	0x40010800

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001454:	e7fe      	b.n	8001454 <NMI_Handler+0x4>

08001456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <MemManage_Handler+0x4>

08001462 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <UsageFault_Handler+0x4>

0800146e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001496:	f000 f935 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}

0800149e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  return 1;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <_kill>:

int _kill(int pid, int sig)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014b6:	f002 fd13 	bl	8003ee0 <__errno>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2216      	movs	r2, #22
 80014be:	601a      	str	r2, [r3, #0]
  return -1;
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_exit>:

void _exit (int status)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ffe7 	bl	80014ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80014de:	e7fe      	b.n	80014de <_exit+0x12>

080014e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	e00a      	b.n	8001508 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014f2:	f3af 8000 	nop.w
 80014f6:	4601      	mov	r1, r0
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60ba      	str	r2, [r7, #8]
 80014fe:	b2ca      	uxtb	r2, r1
 8001500:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbf0      	blt.n	80014f2 <_read+0x12>
  }

  return len;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	e009      	b.n	8001540 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	60ba      	str	r2, [r7, #8]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	dbf1      	blt.n	800152c <_write+0x12>
  }
  return len;
 8001548:	687b      	ldr	r3, [r7, #4]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <_close>:

int _close(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001578:	605a      	str	r2, [r3, #4]
  return 0;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr

08001586 <_isatty>:

int _isatty(int file)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800159a:	b480      	push	{r7}
 800159c:	b085      	sub	sp, #20
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
	...

080015b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015bc:	4a14      	ldr	r2, [pc, #80]	; (8001610 <_sbrk+0x5c>)
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <_sbrk+0x60>)
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <_sbrk+0x64>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <_sbrk+0x68>)
 80015d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d207      	bcs.n	80015f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e4:	f002 fc7c 	bl	8003ee0 <__errno>
 80015e8:	4603      	mov	r3, r0
 80015ea:	220c      	movs	r2, #12
 80015ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	e009      	b.n	8001608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <_sbrk+0x64>)
 8001604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20002800 	.word	0x20002800
 8001614:	00000400 	.word	0x00000400
 8001618:	200002e4 	.word	0x200002e4
 800161c:	20000438 	.word	0x20000438

08001620 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800162c:	f7ff fff8 	bl	8001620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001630:	480b      	ldr	r0, [pc, #44]	; (8001660 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001632:	490c      	ldr	r1, [pc, #48]	; (8001664 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001634:	4a0c      	ldr	r2, [pc, #48]	; (8001668 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001648:	4c09      	ldr	r4, [pc, #36]	; (8001670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001656:	f002 fc49 	bl	8003eec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800165a:	f7ff fcc5 	bl	8000fe8 <main>
  bx lr
 800165e:	4770      	bx	lr
  ldr r0, =_sdata
 8001660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001664:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001668:	0800641c 	.word	0x0800641c
  ldr r2, =_sbss
 800166c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001670:	20000438 	.word	0x20000438

08001674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001674:	e7fe      	b.n	8001674 <ADC1_2_IRQHandler>
	...

08001678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_Init+0x28>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_Init+0x28>)
 8001682:	f043 0310 	orr.w	r3, r3, #16
 8001686:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001688:	2003      	movs	r0, #3
 800168a:	f000 fd57 	bl	800213c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168e:	200f      	movs	r0, #15
 8001690:	f000 f808 	bl	80016a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001694:	f7ff fe22 	bl	80012dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40022000 	.word	0x40022000

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x54>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x58>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 fd61 	bl	800218a <HAL_SYSTICK_Config>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00e      	b.n	80016f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d80a      	bhi.n	80016ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d8:	2200      	movs	r2, #0
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f000 fd37 	bl	8002152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e4:	4a06      	ldr	r2, [pc, #24]	; (8001700 <HAL_InitTick+0x5c>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	2000000c 	.word	0x2000000c
 80016fc:	20000014 	.word	0x20000014
 8001700:	20000010 	.word	0x20000010

08001704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_IncTick+0x1c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_IncTick+0x20>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a03      	ldr	r2, [pc, #12]	; (8001724 <HAL_IncTick+0x20>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	20000014 	.word	0x20000014
 8001724:	200002e8 	.word	0x200002e8

08001728 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b02      	ldr	r3, [pc, #8]	; (8001738 <HAL_GetTick+0x10>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	200002e8 	.word	0x200002e8

0800173c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff fff0 	bl	8001728 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d005      	beq.n	8001762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_Delay+0x44>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001762:	bf00      	nop
 8001764:	f7ff ffe0 	bl	8001728 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d8f7      	bhi.n	8001764 <HAL_Delay+0x28>
  {
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000014 	.word	0x20000014

08001784 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0be      	b.n	8001924 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d109      	bne.n	80017c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fdbc 	bl	8001340 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 fbc5 	bl	8001f58 <ADC_ConversionStop_Disable>
 80017ce:	4603      	mov	r3, r0
 80017d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 8099 	bne.w	8001912 <HAL_ADC_Init+0x18e>
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 8095 	bne.w	8001912 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017f0:	f023 0302 	bic.w	r3, r3, #2
 80017f4:	f043 0202 	orr.w	r2, r3, #2
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001804:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	7b1b      	ldrb	r3, [r3, #12]
 800180a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800180c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	4313      	orrs	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800181c:	d003      	beq.n	8001826 <HAL_ADC_Init+0xa2>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d102      	bne.n	800182c <HAL_ADC_Init+0xa8>
 8001826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182a:	e000      	b.n	800182e <HAL_ADC_Init+0xaa>
 800182c:	2300      	movs	r3, #0
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7d1b      	ldrb	r3, [r3, #20]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d119      	bne.n	8001870 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7b1b      	ldrb	r3, [r3, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d109      	bne.n	8001858 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	3b01      	subs	r3, #1
 800184a:	035a      	lsls	r2, r3, #13
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	e00b      	b.n	8001870 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	f043 0220 	orr.w	r2, r3, #32
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	f043 0201 	orr.w	r2, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	430a      	orrs	r2, r1
 8001882:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	4b28      	ldr	r3, [pc, #160]	; (800192c <HAL_ADC_Init+0x1a8>)
 800188c:	4013      	ands	r3, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	68b9      	ldr	r1, [r7, #8]
 8001894:	430b      	orrs	r3, r1
 8001896:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018a0:	d003      	beq.n	80018aa <HAL_ADC_Init+0x126>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d104      	bne.n	80018b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	051b      	lsls	r3, r3, #20
 80018b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_ADC_Init+0x1ac>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d10b      	bne.n	80018f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	f023 0303 	bic.w	r3, r3, #3
 80018e6:	f043 0201 	orr.w	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018ee:	e018      	b.n	8001922 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f4:	f023 0312 	bic.w	r3, r3, #18
 80018f8:	f043 0210 	orr.w	r2, r3, #16
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	f043 0201 	orr.w	r2, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001910:	e007      	b.n	8001922 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	f043 0210 	orr.w	r2, r3, #16
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001922:	7dfb      	ldrb	r3, [r7, #23]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	ffe1f7fd 	.word	0xffe1f7fd
 8001930:	ff1f0efe 	.word	0xff1f0efe

08001934 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_ADC_Start+0x1a>
 800194a:	2302      	movs	r3, #2
 800194c:	e098      	b.n	8001a80 <HAL_ADC_Start+0x14c>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 faa4 	bl	8001ea4 <ADC_Enable>
 800195c:	4603      	mov	r3, r0
 800195e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 8087 	bne.w	8001a76 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a41      	ldr	r2, [pc, #260]	; (8001a88 <HAL_ADC_Start+0x154>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d105      	bne.n	8001992 <HAL_ADC_Start+0x5e>
 8001986:	4b41      	ldr	r3, [pc, #260]	; (8001a8c <HAL_ADC_Start+0x158>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d115      	bne.n	80019be <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d026      	beq.n	80019fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019bc:	e01d      	b.n	80019fa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a2f      	ldr	r2, [pc, #188]	; (8001a8c <HAL_ADC_Start+0x158>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d004      	beq.n	80019de <HAL_ADC_Start+0xaa>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a2b      	ldr	r2, [pc, #172]	; (8001a88 <HAL_ADC_Start+0x154>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d10d      	bne.n	80019fa <HAL_ADC_Start+0xc6>
 80019de:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <HAL_ADC_Start+0x158>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d006      	beq.n	8001a14 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	f023 0206 	bic.w	r2, r3, #6
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a12:	e002      	b.n	8001a1a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f06f 0202 	mvn.w	r2, #2
 8001a2a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a3a:	d113      	bne.n	8001a64 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a40:	4a11      	ldr	r2, [pc, #68]	; (8001a88 <HAL_ADC_Start+0x154>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d105      	bne.n	8001a52 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_ADC_Start+0x158>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d108      	bne.n	8001a64 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	e00c      	b.n	8001a7e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	e003      	b.n	8001a7e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40012800 	.word	0x40012800
 8001a8c:	40012400 	.word	0x40012400

08001a90 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001aa6:	f7ff fe3f 	bl	8001728 <HAL_GetTick>
 8001aaa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00b      	beq.n	8001ad2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	f043 0220 	orr.w	r2, r3, #32
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e0d3      	b.n	8001c7a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d131      	bne.n	8001b44 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d12a      	bne.n	8001b44 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001aee:	e021      	b.n	8001b34 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af6:	d01d      	beq.n	8001b34 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <HAL_ADC_PollForConversion+0x7e>
 8001afe:	f7ff fe13 	bl	8001728 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d212      	bcs.n	8001b34 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10b      	bne.n	8001b34 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	f043 0204 	orr.w	r2, r3, #4
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e0a2      	b.n	8001c7a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0d6      	beq.n	8001af0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b42:	e070      	b.n	8001c26 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001b44:	4b4f      	ldr	r3, [pc, #316]	; (8001c84 <HAL_ADC_PollForConversion+0x1f4>)
 8001b46:	681c      	ldr	r4, [r3, #0]
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f001 f96d 	bl	8002e28 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6919      	ldr	r1, [r3, #16]
 8001b5a:	4b4b      	ldr	r3, [pc, #300]	; (8001c88 <HAL_ADC_PollForConversion+0x1f8>)
 8001b5c:	400b      	ands	r3, r1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d118      	bne.n	8001b94 <HAL_ADC_PollForConversion+0x104>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68d9      	ldr	r1, [r3, #12]
 8001b68:	4b48      	ldr	r3, [pc, #288]	; (8001c8c <HAL_ADC_PollForConversion+0x1fc>)
 8001b6a:	400b      	ands	r3, r1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d111      	bne.n	8001b94 <HAL_ADC_PollForConversion+0x104>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6919      	ldr	r1, [r3, #16]
 8001b76:	4b46      	ldr	r3, [pc, #280]	; (8001c90 <HAL_ADC_PollForConversion+0x200>)
 8001b78:	400b      	ands	r3, r1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d108      	bne.n	8001b90 <HAL_ADC_PollForConversion+0x100>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68d9      	ldr	r1, [r3, #12]
 8001b84:	4b43      	ldr	r3, [pc, #268]	; (8001c94 <HAL_ADC_PollForConversion+0x204>)
 8001b86:	400b      	ands	r3, r1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_ADC_PollForConversion+0x100>
 8001b8c:	2314      	movs	r3, #20
 8001b8e:	e020      	b.n	8001bd2 <HAL_ADC_PollForConversion+0x142>
 8001b90:	2329      	movs	r3, #41	; 0x29
 8001b92:	e01e      	b.n	8001bd2 <HAL_ADC_PollForConversion+0x142>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6919      	ldr	r1, [r3, #16]
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <HAL_ADC_PollForConversion+0x200>)
 8001b9c:	400b      	ands	r3, r1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_ADC_PollForConversion+0x120>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68d9      	ldr	r1, [r3, #12]
 8001ba8:	4b3a      	ldr	r3, [pc, #232]	; (8001c94 <HAL_ADC_PollForConversion+0x204>)
 8001baa:	400b      	ands	r3, r1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00d      	beq.n	8001bcc <HAL_ADC_PollForConversion+0x13c>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6919      	ldr	r1, [r3, #16]
 8001bb6:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <HAL_ADC_PollForConversion+0x208>)
 8001bb8:	400b      	ands	r3, r1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d108      	bne.n	8001bd0 <HAL_ADC_PollForConversion+0x140>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68d9      	ldr	r1, [r3, #12]
 8001bc4:	4b34      	ldr	r3, [pc, #208]	; (8001c98 <HAL_ADC_PollForConversion+0x208>)
 8001bc6:	400b      	ands	r3, r1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_ADC_PollForConversion+0x140>
 8001bcc:	2354      	movs	r3, #84	; 0x54
 8001bce:	e000      	b.n	8001bd2 <HAL_ADC_PollForConversion+0x142>
 8001bd0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001bd2:	fb02 f303 	mul.w	r3, r2, r3
 8001bd6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001bd8:	e021      	b.n	8001c1e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d01a      	beq.n	8001c18 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d007      	beq.n	8001bf8 <HAL_ADC_PollForConversion+0x168>
 8001be8:	f7ff fd9e 	bl	8001728 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d20f      	bcs.n	8001c18 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d90b      	bls.n	8001c18 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	f043 0204 	orr.w	r2, r3, #4
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e030      	b.n	8001c7a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d8d9      	bhi.n	8001bda <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f06f 0212 	mvn.w	r2, #18
 8001c2e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c46:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c4a:	d115      	bne.n	8001c78 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d111      	bne.n	8001c78 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	f043 0201 	orr.w	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	371c      	adds	r7, #28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd90      	pop	{r4, r7, pc}
 8001c82:	bf00      	nop
 8001c84:	2000000c 	.word	0x2000000c
 8001c88:	24924924 	.word	0x24924924
 8001c8c:	00924924 	.word	0x00924924
 8001c90:	12492492 	.word	0x12492492
 8001c94:	00492492 	.word	0x00492492
 8001c98:	00249249 	.word	0x00249249

08001c9c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x20>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e0dc      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x1da>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b06      	cmp	r3, #6
 8001ce2:	d81c      	bhi.n	8001d1e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3b05      	subs	r3, #5
 8001cf6:	221f      	movs	r2, #31
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	4019      	ands	r1, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3b05      	subs	r3, #5
 8001d10:	fa00 f203 	lsl.w	r2, r0, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	635a      	str	r2, [r3, #52]	; 0x34
 8001d1c:	e03c      	b.n	8001d98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b0c      	cmp	r3, #12
 8001d24:	d81c      	bhi.n	8001d60 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	3b23      	subs	r3, #35	; 0x23
 8001d38:	221f      	movs	r2, #31
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	4019      	ands	r1, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	3b23      	subs	r3, #35	; 0x23
 8001d52:	fa00 f203 	lsl.w	r2, r0, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d5e:	e01b      	b.n	8001d98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b41      	subs	r3, #65	; 0x41
 8001d72:	221f      	movs	r2, #31
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	4019      	ands	r1, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	3b41      	subs	r3, #65	; 0x41
 8001d8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b09      	cmp	r3, #9
 8001d9e:	d91c      	bls.n	8001dda <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68d9      	ldr	r1, [r3, #12]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	3b1e      	subs	r3, #30
 8001db2:	2207      	movs	r2, #7
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	4019      	ands	r1, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6898      	ldr	r0, [r3, #8]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	3b1e      	subs	r3, #30
 8001dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	60da      	str	r2, [r3, #12]
 8001dd8:	e019      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6919      	ldr	r1, [r3, #16]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	2207      	movs	r2, #7
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	4019      	ands	r1, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	6898      	ldr	r0, [r3, #8]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	fa00 f203 	lsl.w	r2, r0, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b10      	cmp	r3, #16
 8001e14:	d003      	beq.n	8001e1e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e1a:	2b11      	cmp	r3, #17
 8001e1c:	d132      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d125      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d126      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e44:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b10      	cmp	r3, #16
 8001e4c:	d11a      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <HAL_ADC_ConfigChannel+0x1e8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a13      	ldr	r2, [pc, #76]	; (8001ea0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	0c9a      	lsrs	r2, r3, #18
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e64:	e002      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f9      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x1b2>
 8001e72:	e007      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e78:	f043 0220 	orr.w	r2, r3, #32
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	40012400 	.word	0x40012400
 8001e9c:	2000000c 	.word	0x2000000c
 8001ea0:	431bde83 	.word	0x431bde83

08001ea4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d040      	beq.n	8001f44 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0201 	orr.w	r2, r2, #1
 8001ed0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <ADC_Enable+0xac>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a1f      	ldr	r2, [pc, #124]	; (8001f54 <ADC_Enable+0xb0>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	0c9b      	lsrs	r3, r3, #18
 8001ede:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ee0:	e002      	b.n	8001ee8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f9      	bne.n	8001ee2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eee:	f7ff fc1b 	bl	8001728 <HAL_GetTick>
 8001ef2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ef4:	e01f      	b.n	8001f36 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ef6:	f7ff fc17 	bl	8001728 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d918      	bls.n	8001f36 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d011      	beq.n	8001f36 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	f043 0210 	orr.w	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	f043 0201 	orr.w	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e007      	b.n	8001f46 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d1d8      	bne.n	8001ef6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	2000000c 	.word	0x2000000c
 8001f54:	431bde83 	.word	0x431bde83

08001f58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d12e      	bne.n	8001fd0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f82:	f7ff fbd1 	bl	8001728 <HAL_GetTick>
 8001f86:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f88:	e01b      	b.n	8001fc2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f8a:	f7ff fbcd 	bl	8001728 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d914      	bls.n	8001fc2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d10d      	bne.n	8001fc2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	f043 0210 	orr.w	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	f043 0201 	orr.w	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e007      	b.n	8001fd2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d0dc      	beq.n	8001f8a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200e:	4a04      	ldr	r2, [pc, #16]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	60d3      	str	r3, [r2, #12]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <__NVIC_GetPriorityGrouping+0x18>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	f003 0307 	and.w	r3, r3, #7
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db0a      	blt.n	800206a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	490c      	ldr	r1, [pc, #48]	; (800208c <__NVIC_SetPriority+0x4c>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	440b      	add	r3, r1
 8002064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002068:	e00a      	b.n	8002080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4908      	ldr	r1, [pc, #32]	; (8002090 <__NVIC_SetPriority+0x50>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3b04      	subs	r3, #4
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	440b      	add	r3, r1
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f1c3 0307 	rsb	r3, r3, #7
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf28      	it	cs
 80020b2:	2304      	movcs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <NVIC_EncodePriority+0x30>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3b03      	subs	r3, #3
 80020c2:	e000      	b.n	80020c6 <NVIC_EncodePriority+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	4313      	orrs	r3, r2
         );
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002108:	d301      	bcc.n	800210e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210a:	2301      	movs	r3, #1
 800210c:	e00f      	b.n	800212e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <SysTick_Config+0x40>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002116:	210f      	movs	r1, #15
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f7ff ff90 	bl	8002040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <SysTick_Config+0x40>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002126:	4b04      	ldr	r3, [pc, #16]	; (8002138 <SysTick_Config+0x40>)
 8002128:	2207      	movs	r2, #7
 800212a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	e000e010 	.word	0xe000e010

0800213c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff49 	bl	8001fdc <__NVIC_SetPriorityGrouping>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002164:	f7ff ff5e 	bl	8002024 <__NVIC_GetPriorityGrouping>
 8002168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f7ff ff90 	bl	8002094 <NVIC_EncodePriority>
 8002174:	4602      	mov	r2, r0
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff5f 	bl	8002040 <__NVIC_SetPriority>
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ffb0 	bl	80020f8 <SysTick_Config>
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b08b      	sub	sp, #44	; 0x2c
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ae:	2300      	movs	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b6:	e161      	b.n	800247c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021b8:	2201      	movs	r2, #1
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f040 8150 	bne.w	8002476 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4a97      	ldr	r2, [pc, #604]	; (8002438 <HAL_GPIO_Init+0x294>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d05e      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 80021e0:	4a95      	ldr	r2, [pc, #596]	; (8002438 <HAL_GPIO_Init+0x294>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d875      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 80021e6:	4a95      	ldr	r2, [pc, #596]	; (800243c <HAL_GPIO_Init+0x298>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d058      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 80021ec:	4a93      	ldr	r2, [pc, #588]	; (800243c <HAL_GPIO_Init+0x298>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d86f      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 80021f2:	4a93      	ldr	r2, [pc, #588]	; (8002440 <HAL_GPIO_Init+0x29c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d052      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 80021f8:	4a91      	ldr	r2, [pc, #580]	; (8002440 <HAL_GPIO_Init+0x29c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d869      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 80021fe:	4a91      	ldr	r2, [pc, #580]	; (8002444 <HAL_GPIO_Init+0x2a0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d04c      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 8002204:	4a8f      	ldr	r2, [pc, #572]	; (8002444 <HAL_GPIO_Init+0x2a0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d863      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 800220a:	4a8f      	ldr	r2, [pc, #572]	; (8002448 <HAL_GPIO_Init+0x2a4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d046      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 8002210:	4a8d      	ldr	r2, [pc, #564]	; (8002448 <HAL_GPIO_Init+0x2a4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d85d      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 8002216:	2b12      	cmp	r3, #18
 8002218:	d82a      	bhi.n	8002270 <HAL_GPIO_Init+0xcc>
 800221a:	2b12      	cmp	r3, #18
 800221c:	d859      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 800221e:	a201      	add	r2, pc, #4	; (adr r2, 8002224 <HAL_GPIO_Init+0x80>)
 8002220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002224:	0800229f 	.word	0x0800229f
 8002228:	08002279 	.word	0x08002279
 800222c:	0800228b 	.word	0x0800228b
 8002230:	080022cd 	.word	0x080022cd
 8002234:	080022d3 	.word	0x080022d3
 8002238:	080022d3 	.word	0x080022d3
 800223c:	080022d3 	.word	0x080022d3
 8002240:	080022d3 	.word	0x080022d3
 8002244:	080022d3 	.word	0x080022d3
 8002248:	080022d3 	.word	0x080022d3
 800224c:	080022d3 	.word	0x080022d3
 8002250:	080022d3 	.word	0x080022d3
 8002254:	080022d3 	.word	0x080022d3
 8002258:	080022d3 	.word	0x080022d3
 800225c:	080022d3 	.word	0x080022d3
 8002260:	080022d3 	.word	0x080022d3
 8002264:	080022d3 	.word	0x080022d3
 8002268:	08002281 	.word	0x08002281
 800226c:	08002295 	.word	0x08002295
 8002270:	4a76      	ldr	r2, [pc, #472]	; (800244c <HAL_GPIO_Init+0x2a8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d013      	beq.n	800229e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002276:	e02c      	b.n	80022d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	623b      	str	r3, [r7, #32]
          break;
 800227e:	e029      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	3304      	adds	r3, #4
 8002286:	623b      	str	r3, [r7, #32]
          break;
 8002288:	e024      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	3308      	adds	r3, #8
 8002290:	623b      	str	r3, [r7, #32]
          break;
 8002292:	e01f      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	330c      	adds	r3, #12
 800229a:	623b      	str	r3, [r7, #32]
          break;
 800229c:	e01a      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022a6:	2304      	movs	r3, #4
 80022a8:	623b      	str	r3, [r7, #32]
          break;
 80022aa:	e013      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d105      	bne.n	80022c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b4:	2308      	movs	r3, #8
 80022b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	611a      	str	r2, [r3, #16]
          break;
 80022be:	e009      	b.n	80022d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022c0:	2308      	movs	r3, #8
 80022c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	615a      	str	r2, [r3, #20]
          break;
 80022ca:	e003      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
          break;
 80022d0:	e000      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          break;
 80022d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2bff      	cmp	r3, #255	; 0xff
 80022d8:	d801      	bhi.n	80022de <HAL_GPIO_Init+0x13a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	e001      	b.n	80022e2 <HAL_GPIO_Init+0x13e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3304      	adds	r3, #4
 80022e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2bff      	cmp	r3, #255	; 0xff
 80022e8:	d802      	bhi.n	80022f0 <HAL_GPIO_Init+0x14c>
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	e002      	b.n	80022f6 <HAL_GPIO_Init+0x152>
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	3b08      	subs	r3, #8
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	210f      	movs	r1, #15
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	401a      	ands	r2, r3
 8002308:	6a39      	ldr	r1, [r7, #32]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	431a      	orrs	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80a9 	beq.w	8002476 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002324:	4b4a      	ldr	r3, [pc, #296]	; (8002450 <HAL_GPIO_Init+0x2ac>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	4a49      	ldr	r2, [pc, #292]	; (8002450 <HAL_GPIO_Init+0x2ac>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6193      	str	r3, [r2, #24]
 8002330:	4b47      	ldr	r3, [pc, #284]	; (8002450 <HAL_GPIO_Init+0x2ac>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800233c:	4a45      	ldr	r2, [pc, #276]	; (8002454 <HAL_GPIO_Init+0x2b0>)
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	3302      	adds	r3, #2
 8002344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002348:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	220f      	movs	r2, #15
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4013      	ands	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a3d      	ldr	r2, [pc, #244]	; (8002458 <HAL_GPIO_Init+0x2b4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d00d      	beq.n	8002384 <HAL_GPIO_Init+0x1e0>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a3c      	ldr	r2, [pc, #240]	; (800245c <HAL_GPIO_Init+0x2b8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d007      	beq.n	8002380 <HAL_GPIO_Init+0x1dc>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a3b      	ldr	r2, [pc, #236]	; (8002460 <HAL_GPIO_Init+0x2bc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d101      	bne.n	800237c <HAL_GPIO_Init+0x1d8>
 8002378:	2302      	movs	r3, #2
 800237a:	e004      	b.n	8002386 <HAL_GPIO_Init+0x1e2>
 800237c:	2303      	movs	r3, #3
 800237e:	e002      	b.n	8002386 <HAL_GPIO_Init+0x1e2>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <HAL_GPIO_Init+0x1e2>
 8002384:	2300      	movs	r3, #0
 8002386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002388:	f002 0203 	and.w	r2, r2, #3
 800238c:	0092      	lsls	r2, r2, #2
 800238e:	4093      	lsls	r3, r2
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002396:	492f      	ldr	r1, [pc, #188]	; (8002454 <HAL_GPIO_Init+0x2b0>)
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	3302      	adds	r3, #2
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d006      	beq.n	80023be <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023b0:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <HAL_GPIO_Init+0x2c0>)
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	492b      	ldr	r1, [pc, #172]	; (8002464 <HAL_GPIO_Init+0x2c0>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	608b      	str	r3, [r1, #8]
 80023bc:	e006      	b.n	80023cc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023be:	4b29      	ldr	r3, [pc, #164]	; (8002464 <HAL_GPIO_Init+0x2c0>)
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	4927      	ldr	r1, [pc, #156]	; (8002464 <HAL_GPIO_Init+0x2c0>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d006      	beq.n	80023e6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023d8:	4b22      	ldr	r3, [pc, #136]	; (8002464 <HAL_GPIO_Init+0x2c0>)
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	4921      	ldr	r1, [pc, #132]	; (8002464 <HAL_GPIO_Init+0x2c0>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60cb      	str	r3, [r1, #12]
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023e6:	4b1f      	ldr	r3, [pc, #124]	; (8002464 <HAL_GPIO_Init+0x2c0>)
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	491d      	ldr	r1, [pc, #116]	; (8002464 <HAL_GPIO_Init+0x2c0>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d006      	beq.n	800240e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002400:	4b18      	ldr	r3, [pc, #96]	; (8002464 <HAL_GPIO_Init+0x2c0>)
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	4917      	ldr	r1, [pc, #92]	; (8002464 <HAL_GPIO_Init+0x2c0>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
 800240c:	e006      	b.n	800241c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_GPIO_Init+0x2c0>)
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	43db      	mvns	r3, r3
 8002416:	4913      	ldr	r1, [pc, #76]	; (8002464 <HAL_GPIO_Init+0x2c0>)
 8002418:	4013      	ands	r3, r2
 800241a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01f      	beq.n	8002468 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002428:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <HAL_GPIO_Init+0x2c0>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	490d      	ldr	r1, [pc, #52]	; (8002464 <HAL_GPIO_Init+0x2c0>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	600b      	str	r3, [r1, #0]
 8002434:	e01f      	b.n	8002476 <HAL_GPIO_Init+0x2d2>
 8002436:	bf00      	nop
 8002438:	10320000 	.word	0x10320000
 800243c:	10310000 	.word	0x10310000
 8002440:	10220000 	.word	0x10220000
 8002444:	10210000 	.word	0x10210000
 8002448:	10120000 	.word	0x10120000
 800244c:	10110000 	.word	0x10110000
 8002450:	40021000 	.word	0x40021000
 8002454:	40010000 	.word	0x40010000
 8002458:	40010800 	.word	0x40010800
 800245c:	40010c00 	.word	0x40010c00
 8002460:	40011000 	.word	0x40011000
 8002464:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_GPIO_Init+0x2f4>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	43db      	mvns	r3, r3
 8002470:	4909      	ldr	r1, [pc, #36]	; (8002498 <HAL_GPIO_Init+0x2f4>)
 8002472:	4013      	ands	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	3301      	adds	r3, #1
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	f47f ae96 	bne.w	80021b8 <HAL_GPIO_Init+0x14>
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	372c      	adds	r7, #44	; 0x2c
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	40010400 	.word	0x40010400

0800249c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e272      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 8087 	beq.w	80025ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024bc:	4b92      	ldr	r3, [pc, #584]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d00c      	beq.n	80024e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024c8:	4b8f      	ldr	r3, [pc, #572]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d112      	bne.n	80024fa <HAL_RCC_OscConfig+0x5e>
 80024d4:	4b8c      	ldr	r3, [pc, #560]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e0:	d10b      	bne.n	80024fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e2:	4b89      	ldr	r3, [pc, #548]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d06c      	beq.n	80025c8 <HAL_RCC_OscConfig+0x12c>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d168      	bne.n	80025c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e24c      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x76>
 8002504:	4b80      	ldr	r3, [pc, #512]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a7f      	ldr	r2, [pc, #508]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800250a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	e02e      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x98>
 800251a:	4b7b      	ldr	r3, [pc, #492]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a7a      	ldr	r2, [pc, #488]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b78      	ldr	r3, [pc, #480]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a77      	ldr	r2, [pc, #476]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800252c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e01d      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800253c:	d10c      	bne.n	8002558 <HAL_RCC_OscConfig+0xbc>
 800253e:	4b72      	ldr	r3, [pc, #456]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a71      	ldr	r2, [pc, #452]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	4b6f      	ldr	r3, [pc, #444]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a6e      	ldr	r2, [pc, #440]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e00b      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002558:	4b6b      	ldr	r3, [pc, #428]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a6a      	ldr	r2, [pc, #424]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800255e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b68      	ldr	r3, [pc, #416]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a67      	ldr	r2, [pc, #412]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800256a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d013      	beq.n	80025a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff f8d6 	bl	8001728 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002580:	f7ff f8d2 	bl	8001728 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e200      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	4b5d      	ldr	r3, [pc, #372]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0xe4>
 800259e:	e014      	b.n	80025ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7ff f8c2 	bl	8001728 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a8:	f7ff f8be 	bl	8001728 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	; 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e1ec      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ba:	4b53      	ldr	r3, [pc, #332]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x10c>
 80025c6:	e000      	b.n	80025ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d063      	beq.n	800269e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025d6:	4b4c      	ldr	r3, [pc, #304]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00b      	beq.n	80025fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025e2:	4b49      	ldr	r3, [pc, #292]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d11c      	bne.n	8002628 <HAL_RCC_OscConfig+0x18c>
 80025ee:	4b46      	ldr	r3, [pc, #280]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d116      	bne.n	8002628 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	4b43      	ldr	r3, [pc, #268]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d005      	beq.n	8002612 <HAL_RCC_OscConfig+0x176>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d001      	beq.n	8002612 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e1c0      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002612:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4939      	ldr	r1, [pc, #228]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002626:	e03a      	b.n	800269e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002630:	4b36      	ldr	r3, [pc, #216]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7ff f877 	bl	8001728 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263e:	f7ff f873 	bl	8001728 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e1a1      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002650:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265c:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4927      	ldr	r1, [pc, #156]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 800266c:	4313      	orrs	r3, r2
 800266e:	600b      	str	r3, [r1, #0]
 8002670:	e015      	b.n	800269e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002672:	4b26      	ldr	r3, [pc, #152]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7ff f856 	bl	8001728 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002680:	f7ff f852 	bl	8001728 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e180      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002692:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d03a      	beq.n	8002720 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d019      	beq.n	80026e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b2:	4b17      	ldr	r3, [pc, #92]	; (8002710 <HAL_RCC_OscConfig+0x274>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b8:	f7ff f836 	bl	8001728 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c0:	f7ff f832 	bl	8001728 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e160      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d2:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026de:	2001      	movs	r0, #1
 80026e0:	f000 face 	bl	8002c80 <RCC_Delay>
 80026e4:	e01c      	b.n	8002720 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_RCC_OscConfig+0x274>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ec:	f7ff f81c 	bl	8001728 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f2:	e00f      	b.n	8002714 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f4:	f7ff f818 	bl	8001728 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d908      	bls.n	8002714 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e146      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	42420000 	.word	0x42420000
 8002710:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002714:	4b92      	ldr	r3, [pc, #584]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1e9      	bne.n	80026f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80a6 	beq.w	800287a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002732:	4b8b      	ldr	r3, [pc, #556]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10d      	bne.n	800275a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273e:	4b88      	ldr	r3, [pc, #544]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	4a87      	ldr	r2, [pc, #540]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002748:	61d3      	str	r3, [r2, #28]
 800274a:	4b85      	ldr	r3, [pc, #532]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002756:	2301      	movs	r3, #1
 8002758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275a:	4b82      	ldr	r3, [pc, #520]	; (8002964 <HAL_RCC_OscConfig+0x4c8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d118      	bne.n	8002798 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002766:	4b7f      	ldr	r3, [pc, #508]	; (8002964 <HAL_RCC_OscConfig+0x4c8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a7e      	ldr	r2, [pc, #504]	; (8002964 <HAL_RCC_OscConfig+0x4c8>)
 800276c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002772:	f7fe ffd9 	bl	8001728 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277a:	f7fe ffd5 	bl	8001728 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b64      	cmp	r3, #100	; 0x64
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e103      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	4b75      	ldr	r3, [pc, #468]	; (8002964 <HAL_RCC_OscConfig+0x4c8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d106      	bne.n	80027ae <HAL_RCC_OscConfig+0x312>
 80027a0:	4b6f      	ldr	r3, [pc, #444]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4a6e      	ldr	r2, [pc, #440]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6213      	str	r3, [r2, #32]
 80027ac:	e02d      	b.n	800280a <HAL_RCC_OscConfig+0x36e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x334>
 80027b6:	4b6a      	ldr	r3, [pc, #424]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4a69      	ldr	r2, [pc, #420]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	6213      	str	r3, [r2, #32]
 80027c2:	4b67      	ldr	r3, [pc, #412]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	4a66      	ldr	r2, [pc, #408]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	f023 0304 	bic.w	r3, r3, #4
 80027cc:	6213      	str	r3, [r2, #32]
 80027ce:	e01c      	b.n	800280a <HAL_RCC_OscConfig+0x36e>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d10c      	bne.n	80027f2 <HAL_RCC_OscConfig+0x356>
 80027d8:	4b61      	ldr	r3, [pc, #388]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4a60      	ldr	r2, [pc, #384]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	6213      	str	r3, [r2, #32]
 80027e4:	4b5e      	ldr	r3, [pc, #376]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4a5d      	ldr	r2, [pc, #372]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6213      	str	r3, [r2, #32]
 80027f0:	e00b      	b.n	800280a <HAL_RCC_OscConfig+0x36e>
 80027f2:	4b5b      	ldr	r3, [pc, #364]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4a5a      	ldr	r2, [pc, #360]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	6213      	str	r3, [r2, #32]
 80027fe:	4b58      	ldr	r3, [pc, #352]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4a57      	ldr	r2, [pc, #348]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002812:	f7fe ff89 	bl	8001728 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7fe ff85 	bl	8001728 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	; 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0b1      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002830:	4b4b      	ldr	r3, [pc, #300]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0ee      	beq.n	800281a <HAL_RCC_OscConfig+0x37e>
 800283c:	e014      	b.n	8002868 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7fe ff73 	bl	8001728 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002844:	e00a      	b.n	800285c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7fe ff6f 	bl	8001728 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	; 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e09b      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285c:	4b40      	ldr	r3, [pc, #256]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1ee      	bne.n	8002846 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002868:	7dfb      	ldrb	r3, [r7, #23]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d105      	bne.n	800287a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286e:	4b3c      	ldr	r3, [pc, #240]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4a3b      	ldr	r2, [pc, #236]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002878:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8087 	beq.w	8002992 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002884:	4b36      	ldr	r3, [pc, #216]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b08      	cmp	r3, #8
 800288e:	d061      	beq.n	8002954 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d146      	bne.n	8002926 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002898:	4b33      	ldr	r3, [pc, #204]	; (8002968 <HAL_RCC_OscConfig+0x4cc>)
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7fe ff43 	bl	8001728 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a6:	f7fe ff3f 	bl	8001728 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e06d      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b8:	4b29      	ldr	r3, [pc, #164]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028cc:	d108      	bne.n	80028e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ce:	4b24      	ldr	r3, [pc, #144]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4921      	ldr	r1, [pc, #132]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e0:	4b1f      	ldr	r3, [pc, #124]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a19      	ldr	r1, [r3, #32]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	430b      	orrs	r3, r1
 80028f2:	491b      	ldr	r1, [pc, #108]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f8:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <HAL_RCC_OscConfig+0x4cc>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7fe ff13 	bl	8001728 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002906:	f7fe ff0f 	bl	8001728 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e03d      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002918:	4b11      	ldr	r3, [pc, #68]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x46a>
 8002924:	e035      	b.n	8002992 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_RCC_OscConfig+0x4cc>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7fe fefc 	bl	8001728 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7fe fef8 	bl	8001728 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e026      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x498>
 8002952:	e01e      	b.n	8002992 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d107      	bne.n	800296c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e019      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
 8002960:	40021000 	.word	0x40021000
 8002964:	40007000 	.word	0x40007000
 8002968:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_OscConfig+0x500>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	429a      	cmp	r2, r3
 800297e:	d106      	bne.n	800298e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298a:	429a      	cmp	r2, r3
 800298c:	d001      	beq.n	8002992 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0d0      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029b4:	4b6a      	ldr	r3, [pc, #424]	; (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d910      	bls.n	80029e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	4b67      	ldr	r3, [pc, #412]	; (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 0207 	bic.w	r2, r3, #7
 80029ca:	4965      	ldr	r1, [pc, #404]	; (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b63      	ldr	r3, [pc, #396]	; (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0b8      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d020      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029fc:	4b59      	ldr	r3, [pc, #356]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4a58      	ldr	r2, [pc, #352]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a14:	4b53      	ldr	r3, [pc, #332]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4a52      	ldr	r2, [pc, #328]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a20:	4b50      	ldr	r3, [pc, #320]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	494d      	ldr	r1, [pc, #308]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d040      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d115      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e07f      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5e:	4b41      	ldr	r3, [pc, #260]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e073      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6e:	4b3d      	ldr	r3, [pc, #244]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e06b      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a7e:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f023 0203 	bic.w	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4936      	ldr	r1, [pc, #216]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a90:	f7fe fe4a 	bl	8001728 <HAL_GetTick>
 8002a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a98:	f7fe fe46 	bl	8001728 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e053      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 020c 	and.w	r2, r3, #12
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d1eb      	bne.n	8002a98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d210      	bcs.n	8002af0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 0207 	bic.w	r2, r3, #7
 8002ad6:	4922      	ldr	r1, [pc, #136]	; (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b20      	ldr	r3, [pc, #128]	; (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e032      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002afc:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4916      	ldr	r1, [pc, #88]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d009      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b1a:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	490e      	ldr	r1, [pc, #56]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b2e:	f000 f821 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8002b32:	4602      	mov	r2, r0
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	490a      	ldr	r1, [pc, #40]	; (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002b40:	5ccb      	ldrb	r3, [r1, r3]
 8002b42:	fa22 f303 	lsr.w	r3, r2, r3
 8002b46:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <HAL_RCC_ClockConfig+0x1cc>)
 8002b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_RCC_ClockConfig+0x1d0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe fda8 	bl	80016a4 <HAL_InitTick>

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40022000 	.word	0x40022000
 8002b64:	40021000 	.word	0x40021000
 8002b68:	08006068 	.word	0x08006068
 8002b6c:	2000000c 	.word	0x2000000c
 8002b70:	20000010 	.word	0x20000010

08002b74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d002      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x30>
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_GetSysClockFreq+0x36>
 8002ba2:	e027      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ba6:	613b      	str	r3, [r7, #16]
      break;
 8002ba8:	e027      	b.n	8002bfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	0c9b      	lsrs	r3, r3, #18
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	4a17      	ldr	r2, [pc, #92]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bb4:	5cd3      	ldrb	r3, [r2, r3]
 8002bb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d010      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	0c5b      	lsrs	r3, r3, #17
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	4a11      	ldr	r2, [pc, #68]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bce:	5cd3      	ldrb	r3, [r2, r3]
 8002bd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002bd6:	fb03 f202 	mul.w	r2, r3, r2
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	e004      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a0c      	ldr	r2, [pc, #48]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	613b      	str	r3, [r7, #16]
      break;
 8002bf2:	e002      	b.n	8002bfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002bf6:	613b      	str	r3, [r7, #16]
      break;
 8002bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bfa:	693b      	ldr	r3, [r7, #16]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	007a1200 	.word	0x007a1200
 8002c10:	08006080 	.word	0x08006080
 8002c14:	08006090 	.word	0x08006090
 8002c18:	003d0900 	.word	0x003d0900

08002c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c20:	4b02      	ldr	r3, [pc, #8]	; (8002c2c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	2000000c 	.word	0x2000000c

08002c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c34:	f7ff fff2 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	4903      	ldr	r1, [pc, #12]	; (8002c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c46:	5ccb      	ldrb	r3, [r1, r3]
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40021000 	.word	0x40021000
 8002c54:	08006078 	.word	0x08006078

08002c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c5c:	f7ff ffde 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	0adb      	lsrs	r3, r3, #11
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	4903      	ldr	r1, [pc, #12]	; (8002c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c6e:	5ccb      	ldrb	r3, [r1, r3]
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	08006078 	.word	0x08006078

08002c80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <RCC_Delay+0x34>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <RCC_Delay+0x38>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0a5b      	lsrs	r3, r3, #9
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c9c:	bf00      	nop
  }
  while (Delay --);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1e5a      	subs	r2, r3, #1
 8002ca2:	60fa      	str	r2, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f9      	bne.n	8002c9c <RCC_Delay+0x1c>
}
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	2000000c 	.word	0x2000000c
 8002cb8:	10624dd3 	.word	0x10624dd3

08002cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d07d      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cdc:	4b4f      	ldr	r3, [pc, #316]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10d      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce8:	4b4c      	ldr	r3, [pc, #304]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	4a4b      	ldr	r2, [pc, #300]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	61d3      	str	r3, [r2, #28]
 8002cf4:	4b49      	ldr	r3, [pc, #292]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d00:	2301      	movs	r3, #1
 8002d02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	4b46      	ldr	r3, [pc, #280]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d118      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d10:	4b43      	ldr	r3, [pc, #268]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a42      	ldr	r2, [pc, #264]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1c:	f7fe fd04 	bl	8001728 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d22:	e008      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d24:	f7fe fd00 	bl	8001728 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e06d      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d36:	4b3a      	ldr	r3, [pc, #232]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d42:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d02e      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d027      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d60:	4b2e      	ldr	r3, [pc, #184]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d6a:	4b2e      	ldr	r3, [pc, #184]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d70:	4b2c      	ldr	r3, [pc, #176]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d76:	4a29      	ldr	r2, [pc, #164]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d014      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7fe fccf 	bl	8001728 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fe fccb 	bl	8001728 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e036      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da4:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ee      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db0:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	4917      	ldr	r1, [pc, #92]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d105      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	4a13      	ldr	r2, [pc, #76]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002de0:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	490b      	ldr	r1, [pc, #44]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dfe:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	4904      	ldr	r1, [pc, #16]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40007000 	.word	0x40007000
 8002e24:	42420440 	.word	0x42420440

08002e28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	2300      	movs	r3, #0
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	2300      	movs	r3, #0
 8002e42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d00a      	beq.n	8002e60 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b10      	cmp	r3, #16
 8002e4e:	f200 808a 	bhi.w	8002f66 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d045      	beq.n	8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d075      	beq.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e5e:	e082      	b.n	8002f66 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002e60:	4b46      	ldr	r3, [pc, #280]	; (8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e66:	4b45      	ldr	r3, [pc, #276]	; (8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d07b      	beq.n	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	0c9b      	lsrs	r3, r3, #18
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	4a41      	ldr	r2, [pc, #260]	; (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002e7c:	5cd3      	ldrb	r3, [r2, r3]
 8002e7e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d015      	beq.n	8002eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e8a:	4b3c      	ldr	r3, [pc, #240]	; (8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	0c5b      	lsrs	r3, r3, #17
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	4a3b      	ldr	r2, [pc, #236]	; (8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002e96:	5cd3      	ldrb	r3, [r2, r3]
 8002e98:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00d      	beq.n	8002ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ea4:	4a38      	ldr	r2, [pc, #224]	; (8002f88 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	61fb      	str	r3, [r7, #28]
 8002eb4:	e004      	b.n	8002ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4a34      	ldr	r2, [pc, #208]	; (8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002ec0:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ecc:	d102      	bne.n	8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	61bb      	str	r3, [r7, #24]
      break;
 8002ed2:	e04a      	b.n	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4a2d      	ldr	r2, [pc, #180]	; (8002f90 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	085b      	lsrs	r3, r3, #1
 8002ee0:	61bb      	str	r3, [r7, #24]
      break;
 8002ee2:	e042      	b.n	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002ee4:	4b25      	ldr	r3, [pc, #148]	; (8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef4:	d108      	bne.n	8002f08 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002f00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	e01f      	b.n	8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f12:	d109      	bne.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002f14:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002f20:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	e00f      	b.n	8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f32:	d11c      	bne.n	8002f6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002f34:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d016      	beq.n	8002f6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002f40:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002f44:	61bb      	str	r3, [r7, #24]
      break;
 8002f46:	e012      	b.n	8002f6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002f48:	e011      	b.n	8002f6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f4a:	f7ff fe85 	bl	8002c58 <HAL_RCC_GetPCLK2Freq>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	0b9b      	lsrs	r3, r3, #14
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	61bb      	str	r3, [r7, #24]
      break;
 8002f64:	e004      	b.n	8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f66:	bf00      	nop
 8002f68:	e002      	b.n	8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f6a:	bf00      	nop
 8002f6c:	e000      	b.n	8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f6e:	bf00      	nop
    }
  }
  return (frequency);
 8002f70:	69bb      	ldr	r3, [r7, #24]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	08006094 	.word	0x08006094
 8002f84:	080060a4 	.word	0x080060a4
 8002f88:	007a1200 	.word	0x007a1200
 8002f8c:	003d0900 	.word	0x003d0900
 8002f90:	aaaaaaab 	.word	0xaaaaaaab

08002f94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e042      	b.n	800302c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fe f9fc 	bl	80013b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2224      	movs	r2, #36	; 0x24
 8002fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f91d 	bl	8003218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ffc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800300c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	; 0x28
 8003038:	af02      	add	r7, sp, #8
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b20      	cmp	r3, #32
 8003052:	d16d      	bne.n	8003130 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_UART_Transmit+0x2c>
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e066      	b.n	8003132 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2221      	movs	r2, #33	; 0x21
 800306e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003072:	f7fe fb59 	bl	8001728 <HAL_GetTick>
 8003076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	88fa      	ldrh	r2, [r7, #6]
 800307c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	88fa      	ldrh	r2, [r7, #6]
 8003082:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308c:	d108      	bne.n	80030a0 <HAL_UART_Transmit+0x6c>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d104      	bne.n	80030a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	61bb      	str	r3, [r7, #24]
 800309e:	e003      	b.n	80030a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030a8:	e02a      	b.n	8003100 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2200      	movs	r2, #0
 80030b2:	2180      	movs	r1, #128	; 0x80
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f840 	bl	800313a <UART_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e036      	b.n	8003132 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10b      	bne.n	80030e2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	3302      	adds	r3, #2
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	e007      	b.n	80030f2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	781a      	ldrb	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	3301      	adds	r3, #1
 80030f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1cf      	bne.n	80030aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2200      	movs	r2, #0
 8003112:	2140      	movs	r1, #64	; 0x40
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f810 	bl	800313a <UART_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e006      	b.n	8003132 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	e000      	b.n	8003132 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003130:	2302      	movs	r3, #2
  }
}
 8003132:	4618      	mov	r0, r3
 8003134:	3720      	adds	r7, #32
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b090      	sub	sp, #64	; 0x40
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	4613      	mov	r3, r2
 8003148:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800314a:	e050      	b.n	80031ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800314e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003152:	d04c      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003156:	2b00      	cmp	r3, #0
 8003158:	d007      	beq.n	800316a <UART_WaitOnFlagUntilTimeout+0x30>
 800315a:	f7fe fae5 	bl	8001728 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003166:	429a      	cmp	r2, r3
 8003168:	d241      	bcs.n	80031ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	330c      	adds	r3, #12
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003174:	e853 3f00 	ldrex	r3, [r3]
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	330c      	adds	r3, #12
 8003188:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800318a:	637a      	str	r2, [r7, #52]	; 0x34
 800318c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003192:	e841 2300 	strex	r3, r2, [r1]
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1e5      	bne.n	800316a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3314      	adds	r3, #20
 80031a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	e853 3f00 	ldrex	r3, [r3]
 80031ac:	613b      	str	r3, [r7, #16]
   return(result);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3314      	adds	r3, #20
 80031bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031be:	623a      	str	r2, [r7, #32]
 80031c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c2:	69f9      	ldr	r1, [r7, #28]
 80031c4:	6a3a      	ldr	r2, [r7, #32]
 80031c6:	e841 2300 	strex	r3, r2, [r1]
 80031ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1e5      	bne.n	800319e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e00f      	b.n	800320e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4013      	ands	r3, r2
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	429a      	cmp	r2, r3
 800320a:	d09f      	beq.n	800314c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3740      	adds	r7, #64	; 0x40
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003252:	f023 030c 	bic.w	r3, r3, #12
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	430b      	orrs	r3, r1
 800325e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a2c      	ldr	r2, [pc, #176]	; (800332c <UART_SetConfig+0x114>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d103      	bne.n	8003288 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003280:	f7ff fcea 	bl	8002c58 <HAL_RCC_GetPCLK2Freq>
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	e002      	b.n	800328e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003288:	f7ff fcd2 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 800328c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	009a      	lsls	r2, r3, #2
 8003298:	441a      	add	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	4a22      	ldr	r2, [pc, #136]	; (8003330 <UART_SetConfig+0x118>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	0119      	lsls	r1, r3, #4
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	009a      	lsls	r2, r3, #2
 80032b8:	441a      	add	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c4:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <UART_SetConfig+0x118>)
 80032c6:	fba3 0302 	umull	r0, r3, r3, r2
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	2064      	movs	r0, #100	; 0x64
 80032ce:	fb00 f303 	mul.w	r3, r0, r3
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	3332      	adds	r3, #50	; 0x32
 80032d8:	4a15      	ldr	r2, [pc, #84]	; (8003330 <UART_SetConfig+0x118>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032e4:	4419      	add	r1, r3
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	009a      	lsls	r2, r3, #2
 80032f0:	441a      	add	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <UART_SetConfig+0x118>)
 80032fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	2064      	movs	r0, #100	; 0x64
 8003306:	fb00 f303 	mul.w	r3, r0, r3
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	3332      	adds	r3, #50	; 0x32
 8003310:	4a07      	ldr	r2, [pc, #28]	; (8003330 <UART_SetConfig+0x118>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	f003 020f 	and.w	r2, r3, #15
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	440a      	add	r2, r1
 8003322:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003324:	bf00      	nop
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40013800 	.word	0x40013800
 8003330:	51eb851f 	.word	0x51eb851f

08003334 <__cvt>:
 8003334:	2b00      	cmp	r3, #0
 8003336:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800333a:	461f      	mov	r7, r3
 800333c:	bfbb      	ittet	lt
 800333e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003342:	461f      	movlt	r7, r3
 8003344:	2300      	movge	r3, #0
 8003346:	232d      	movlt	r3, #45	; 0x2d
 8003348:	b088      	sub	sp, #32
 800334a:	4614      	mov	r4, r2
 800334c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800334e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003350:	7013      	strb	r3, [r2, #0]
 8003352:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003354:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003358:	f023 0820 	bic.w	r8, r3, #32
 800335c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003360:	d005      	beq.n	800336e <__cvt+0x3a>
 8003362:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003366:	d100      	bne.n	800336a <__cvt+0x36>
 8003368:	3501      	adds	r5, #1
 800336a:	2302      	movs	r3, #2
 800336c:	e000      	b.n	8003370 <__cvt+0x3c>
 800336e:	2303      	movs	r3, #3
 8003370:	aa07      	add	r2, sp, #28
 8003372:	9204      	str	r2, [sp, #16]
 8003374:	aa06      	add	r2, sp, #24
 8003376:	e9cd a202 	strd	sl, r2, [sp, #8]
 800337a:	e9cd 3500 	strd	r3, r5, [sp]
 800337e:	4622      	mov	r2, r4
 8003380:	463b      	mov	r3, r7
 8003382:	f000 fe71 	bl	8004068 <_dtoa_r>
 8003386:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800338a:	4606      	mov	r6, r0
 800338c:	d102      	bne.n	8003394 <__cvt+0x60>
 800338e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003390:	07db      	lsls	r3, r3, #31
 8003392:	d522      	bpl.n	80033da <__cvt+0xa6>
 8003394:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003398:	eb06 0905 	add.w	r9, r6, r5
 800339c:	d110      	bne.n	80033c0 <__cvt+0x8c>
 800339e:	7833      	ldrb	r3, [r6, #0]
 80033a0:	2b30      	cmp	r3, #48	; 0x30
 80033a2:	d10a      	bne.n	80033ba <__cvt+0x86>
 80033a4:	2200      	movs	r2, #0
 80033a6:	2300      	movs	r3, #0
 80033a8:	4620      	mov	r0, r4
 80033aa:	4639      	mov	r1, r7
 80033ac:	f7fd fafc 	bl	80009a8 <__aeabi_dcmpeq>
 80033b0:	b918      	cbnz	r0, 80033ba <__cvt+0x86>
 80033b2:	f1c5 0501 	rsb	r5, r5, #1
 80033b6:	f8ca 5000 	str.w	r5, [sl]
 80033ba:	f8da 3000 	ldr.w	r3, [sl]
 80033be:	4499      	add	r9, r3
 80033c0:	2200      	movs	r2, #0
 80033c2:	2300      	movs	r3, #0
 80033c4:	4620      	mov	r0, r4
 80033c6:	4639      	mov	r1, r7
 80033c8:	f7fd faee 	bl	80009a8 <__aeabi_dcmpeq>
 80033cc:	b108      	cbz	r0, 80033d2 <__cvt+0x9e>
 80033ce:	f8cd 901c 	str.w	r9, [sp, #28]
 80033d2:	2230      	movs	r2, #48	; 0x30
 80033d4:	9b07      	ldr	r3, [sp, #28]
 80033d6:	454b      	cmp	r3, r9
 80033d8:	d307      	bcc.n	80033ea <__cvt+0xb6>
 80033da:	4630      	mov	r0, r6
 80033dc:	9b07      	ldr	r3, [sp, #28]
 80033de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80033e0:	1b9b      	subs	r3, r3, r6
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	b008      	add	sp, #32
 80033e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ea:	1c59      	adds	r1, r3, #1
 80033ec:	9107      	str	r1, [sp, #28]
 80033ee:	701a      	strb	r2, [r3, #0]
 80033f0:	e7f0      	b.n	80033d4 <__cvt+0xa0>

080033f2 <__exponent>:
 80033f2:	4603      	mov	r3, r0
 80033f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033f6:	2900      	cmp	r1, #0
 80033f8:	f803 2b02 	strb.w	r2, [r3], #2
 80033fc:	bfb6      	itet	lt
 80033fe:	222d      	movlt	r2, #45	; 0x2d
 8003400:	222b      	movge	r2, #43	; 0x2b
 8003402:	4249      	neglt	r1, r1
 8003404:	2909      	cmp	r1, #9
 8003406:	7042      	strb	r2, [r0, #1]
 8003408:	dd2a      	ble.n	8003460 <__exponent+0x6e>
 800340a:	f10d 0207 	add.w	r2, sp, #7
 800340e:	4617      	mov	r7, r2
 8003410:	260a      	movs	r6, #10
 8003412:	fb91 f5f6 	sdiv	r5, r1, r6
 8003416:	4694      	mov	ip, r2
 8003418:	fb06 1415 	mls	r4, r6, r5, r1
 800341c:	3430      	adds	r4, #48	; 0x30
 800341e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003422:	460c      	mov	r4, r1
 8003424:	2c63      	cmp	r4, #99	; 0x63
 8003426:	4629      	mov	r1, r5
 8003428:	f102 32ff 	add.w	r2, r2, #4294967295
 800342c:	dcf1      	bgt.n	8003412 <__exponent+0x20>
 800342e:	3130      	adds	r1, #48	; 0x30
 8003430:	f1ac 0402 	sub.w	r4, ip, #2
 8003434:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003438:	4622      	mov	r2, r4
 800343a:	1c41      	adds	r1, r0, #1
 800343c:	42ba      	cmp	r2, r7
 800343e:	d30a      	bcc.n	8003456 <__exponent+0x64>
 8003440:	f10d 0209 	add.w	r2, sp, #9
 8003444:	eba2 020c 	sub.w	r2, r2, ip
 8003448:	42bc      	cmp	r4, r7
 800344a:	bf88      	it	hi
 800344c:	2200      	movhi	r2, #0
 800344e:	4413      	add	r3, r2
 8003450:	1a18      	subs	r0, r3, r0
 8003452:	b003      	add	sp, #12
 8003454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003456:	f812 5b01 	ldrb.w	r5, [r2], #1
 800345a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800345e:	e7ed      	b.n	800343c <__exponent+0x4a>
 8003460:	2330      	movs	r3, #48	; 0x30
 8003462:	3130      	adds	r1, #48	; 0x30
 8003464:	7083      	strb	r3, [r0, #2]
 8003466:	70c1      	strb	r1, [r0, #3]
 8003468:	1d03      	adds	r3, r0, #4
 800346a:	e7f1      	b.n	8003450 <__exponent+0x5e>

0800346c <_printf_float>:
 800346c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003470:	b091      	sub	sp, #68	; 0x44
 8003472:	460c      	mov	r4, r1
 8003474:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003478:	4616      	mov	r6, r2
 800347a:	461f      	mov	r7, r3
 800347c:	4605      	mov	r5, r0
 800347e:	f000 fce5 	bl	8003e4c <_localeconv_r>
 8003482:	6803      	ldr	r3, [r0, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	9309      	str	r3, [sp, #36]	; 0x24
 8003488:	f7fc fe62 	bl	8000150 <strlen>
 800348c:	2300      	movs	r3, #0
 800348e:	930e      	str	r3, [sp, #56]	; 0x38
 8003490:	f8d8 3000 	ldr.w	r3, [r8]
 8003494:	900a      	str	r0, [sp, #40]	; 0x28
 8003496:	3307      	adds	r3, #7
 8003498:	f023 0307 	bic.w	r3, r3, #7
 800349c:	f103 0208 	add.w	r2, r3, #8
 80034a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80034a4:	f8d4 b000 	ldr.w	fp, [r4]
 80034a8:	f8c8 2000 	str.w	r2, [r8]
 80034ac:	e9d3 a800 	ldrd	sl, r8, [r3]
 80034b0:	4652      	mov	r2, sl
 80034b2:	4643      	mov	r3, r8
 80034b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80034b8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80034bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80034be:	f04f 32ff 	mov.w	r2, #4294967295
 80034c2:	4650      	mov	r0, sl
 80034c4:	4b9c      	ldr	r3, [pc, #624]	; (8003738 <_printf_float+0x2cc>)
 80034c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034c8:	f7fd faa0 	bl	8000a0c <__aeabi_dcmpun>
 80034cc:	bb70      	cbnz	r0, 800352c <_printf_float+0xc0>
 80034ce:	f04f 32ff 	mov.w	r2, #4294967295
 80034d2:	4650      	mov	r0, sl
 80034d4:	4b98      	ldr	r3, [pc, #608]	; (8003738 <_printf_float+0x2cc>)
 80034d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034d8:	f7fd fa7a 	bl	80009d0 <__aeabi_dcmple>
 80034dc:	bb30      	cbnz	r0, 800352c <_printf_float+0xc0>
 80034de:	2200      	movs	r2, #0
 80034e0:	2300      	movs	r3, #0
 80034e2:	4650      	mov	r0, sl
 80034e4:	4641      	mov	r1, r8
 80034e6:	f7fd fa69 	bl	80009bc <__aeabi_dcmplt>
 80034ea:	b110      	cbz	r0, 80034f2 <_printf_float+0x86>
 80034ec:	232d      	movs	r3, #45	; 0x2d
 80034ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034f2:	4a92      	ldr	r2, [pc, #584]	; (800373c <_printf_float+0x2d0>)
 80034f4:	4b92      	ldr	r3, [pc, #584]	; (8003740 <_printf_float+0x2d4>)
 80034f6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80034fa:	bf94      	ite	ls
 80034fc:	4690      	movls	r8, r2
 80034fe:	4698      	movhi	r8, r3
 8003500:	2303      	movs	r3, #3
 8003502:	f04f 0a00 	mov.w	sl, #0
 8003506:	6123      	str	r3, [r4, #16]
 8003508:	f02b 0304 	bic.w	r3, fp, #4
 800350c:	6023      	str	r3, [r4, #0]
 800350e:	4633      	mov	r3, r6
 8003510:	4621      	mov	r1, r4
 8003512:	4628      	mov	r0, r5
 8003514:	9700      	str	r7, [sp, #0]
 8003516:	aa0f      	add	r2, sp, #60	; 0x3c
 8003518:	f000 f9d6 	bl	80038c8 <_printf_common>
 800351c:	3001      	adds	r0, #1
 800351e:	f040 8090 	bne.w	8003642 <_printf_float+0x1d6>
 8003522:	f04f 30ff 	mov.w	r0, #4294967295
 8003526:	b011      	add	sp, #68	; 0x44
 8003528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800352c:	4652      	mov	r2, sl
 800352e:	4643      	mov	r3, r8
 8003530:	4650      	mov	r0, sl
 8003532:	4641      	mov	r1, r8
 8003534:	f7fd fa6a 	bl	8000a0c <__aeabi_dcmpun>
 8003538:	b148      	cbz	r0, 800354e <_printf_float+0xe2>
 800353a:	f1b8 0f00 	cmp.w	r8, #0
 800353e:	bfb8      	it	lt
 8003540:	232d      	movlt	r3, #45	; 0x2d
 8003542:	4a80      	ldr	r2, [pc, #512]	; (8003744 <_printf_float+0x2d8>)
 8003544:	bfb8      	it	lt
 8003546:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800354a:	4b7f      	ldr	r3, [pc, #508]	; (8003748 <_printf_float+0x2dc>)
 800354c:	e7d3      	b.n	80034f6 <_printf_float+0x8a>
 800354e:	6863      	ldr	r3, [r4, #4]
 8003550:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	d142      	bne.n	80035de <_printf_float+0x172>
 8003558:	2306      	movs	r3, #6
 800355a:	6063      	str	r3, [r4, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	9206      	str	r2, [sp, #24]
 8003560:	aa0e      	add	r2, sp, #56	; 0x38
 8003562:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003566:	aa0d      	add	r2, sp, #52	; 0x34
 8003568:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800356c:	9203      	str	r2, [sp, #12]
 800356e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003572:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003576:	6023      	str	r3, [r4, #0]
 8003578:	6863      	ldr	r3, [r4, #4]
 800357a:	4652      	mov	r2, sl
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	4628      	mov	r0, r5
 8003580:	4643      	mov	r3, r8
 8003582:	910b      	str	r1, [sp, #44]	; 0x2c
 8003584:	f7ff fed6 	bl	8003334 <__cvt>
 8003588:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800358a:	4680      	mov	r8, r0
 800358c:	2947      	cmp	r1, #71	; 0x47
 800358e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003590:	d108      	bne.n	80035a4 <_printf_float+0x138>
 8003592:	1cc8      	adds	r0, r1, #3
 8003594:	db02      	blt.n	800359c <_printf_float+0x130>
 8003596:	6863      	ldr	r3, [r4, #4]
 8003598:	4299      	cmp	r1, r3
 800359a:	dd40      	ble.n	800361e <_printf_float+0x1b2>
 800359c:	f1a9 0902 	sub.w	r9, r9, #2
 80035a0:	fa5f f989 	uxtb.w	r9, r9
 80035a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80035a8:	d81f      	bhi.n	80035ea <_printf_float+0x17e>
 80035aa:	464a      	mov	r2, r9
 80035ac:	3901      	subs	r1, #1
 80035ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80035b2:	910d      	str	r1, [sp, #52]	; 0x34
 80035b4:	f7ff ff1d 	bl	80033f2 <__exponent>
 80035b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035ba:	4682      	mov	sl, r0
 80035bc:	1813      	adds	r3, r2, r0
 80035be:	2a01      	cmp	r2, #1
 80035c0:	6123      	str	r3, [r4, #16]
 80035c2:	dc02      	bgt.n	80035ca <_printf_float+0x15e>
 80035c4:	6822      	ldr	r2, [r4, #0]
 80035c6:	07d2      	lsls	r2, r2, #31
 80035c8:	d501      	bpl.n	80035ce <_printf_float+0x162>
 80035ca:	3301      	adds	r3, #1
 80035cc:	6123      	str	r3, [r4, #16]
 80035ce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d09b      	beq.n	800350e <_printf_float+0xa2>
 80035d6:	232d      	movs	r3, #45	; 0x2d
 80035d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035dc:	e797      	b.n	800350e <_printf_float+0xa2>
 80035de:	2947      	cmp	r1, #71	; 0x47
 80035e0:	d1bc      	bne.n	800355c <_printf_float+0xf0>
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1ba      	bne.n	800355c <_printf_float+0xf0>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e7b7      	b.n	800355a <_printf_float+0xee>
 80035ea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80035ee:	d118      	bne.n	8003622 <_printf_float+0x1b6>
 80035f0:	2900      	cmp	r1, #0
 80035f2:	6863      	ldr	r3, [r4, #4]
 80035f4:	dd0b      	ble.n	800360e <_printf_float+0x1a2>
 80035f6:	6121      	str	r1, [r4, #16]
 80035f8:	b913      	cbnz	r3, 8003600 <_printf_float+0x194>
 80035fa:	6822      	ldr	r2, [r4, #0]
 80035fc:	07d0      	lsls	r0, r2, #31
 80035fe:	d502      	bpl.n	8003606 <_printf_float+0x19a>
 8003600:	3301      	adds	r3, #1
 8003602:	440b      	add	r3, r1
 8003604:	6123      	str	r3, [r4, #16]
 8003606:	f04f 0a00 	mov.w	sl, #0
 800360a:	65a1      	str	r1, [r4, #88]	; 0x58
 800360c:	e7df      	b.n	80035ce <_printf_float+0x162>
 800360e:	b913      	cbnz	r3, 8003616 <_printf_float+0x1aa>
 8003610:	6822      	ldr	r2, [r4, #0]
 8003612:	07d2      	lsls	r2, r2, #31
 8003614:	d501      	bpl.n	800361a <_printf_float+0x1ae>
 8003616:	3302      	adds	r3, #2
 8003618:	e7f4      	b.n	8003604 <_printf_float+0x198>
 800361a:	2301      	movs	r3, #1
 800361c:	e7f2      	b.n	8003604 <_printf_float+0x198>
 800361e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003624:	4299      	cmp	r1, r3
 8003626:	db05      	blt.n	8003634 <_printf_float+0x1c8>
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	6121      	str	r1, [r4, #16]
 800362c:	07d8      	lsls	r0, r3, #31
 800362e:	d5ea      	bpl.n	8003606 <_printf_float+0x19a>
 8003630:	1c4b      	adds	r3, r1, #1
 8003632:	e7e7      	b.n	8003604 <_printf_float+0x198>
 8003634:	2900      	cmp	r1, #0
 8003636:	bfcc      	ite	gt
 8003638:	2201      	movgt	r2, #1
 800363a:	f1c1 0202 	rsble	r2, r1, #2
 800363e:	4413      	add	r3, r2
 8003640:	e7e0      	b.n	8003604 <_printf_float+0x198>
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	055a      	lsls	r2, r3, #21
 8003646:	d407      	bmi.n	8003658 <_printf_float+0x1ec>
 8003648:	6923      	ldr	r3, [r4, #16]
 800364a:	4642      	mov	r2, r8
 800364c:	4631      	mov	r1, r6
 800364e:	4628      	mov	r0, r5
 8003650:	47b8      	blx	r7
 8003652:	3001      	adds	r0, #1
 8003654:	d12b      	bne.n	80036ae <_printf_float+0x242>
 8003656:	e764      	b.n	8003522 <_printf_float+0xb6>
 8003658:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800365c:	f240 80dd 	bls.w	800381a <_printf_float+0x3ae>
 8003660:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003664:	2200      	movs	r2, #0
 8003666:	2300      	movs	r3, #0
 8003668:	f7fd f99e 	bl	80009a8 <__aeabi_dcmpeq>
 800366c:	2800      	cmp	r0, #0
 800366e:	d033      	beq.n	80036d8 <_printf_float+0x26c>
 8003670:	2301      	movs	r3, #1
 8003672:	4631      	mov	r1, r6
 8003674:	4628      	mov	r0, r5
 8003676:	4a35      	ldr	r2, [pc, #212]	; (800374c <_printf_float+0x2e0>)
 8003678:	47b8      	blx	r7
 800367a:	3001      	adds	r0, #1
 800367c:	f43f af51 	beq.w	8003522 <_printf_float+0xb6>
 8003680:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003684:	429a      	cmp	r2, r3
 8003686:	db02      	blt.n	800368e <_printf_float+0x222>
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	07d8      	lsls	r0, r3, #31
 800368c:	d50f      	bpl.n	80036ae <_printf_float+0x242>
 800368e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003692:	4631      	mov	r1, r6
 8003694:	4628      	mov	r0, r5
 8003696:	47b8      	blx	r7
 8003698:	3001      	adds	r0, #1
 800369a:	f43f af42 	beq.w	8003522 <_printf_float+0xb6>
 800369e:	f04f 0800 	mov.w	r8, #0
 80036a2:	f104 091a 	add.w	r9, r4, #26
 80036a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036a8:	3b01      	subs	r3, #1
 80036aa:	4543      	cmp	r3, r8
 80036ac:	dc09      	bgt.n	80036c2 <_printf_float+0x256>
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	079b      	lsls	r3, r3, #30
 80036b2:	f100 8104 	bmi.w	80038be <_printf_float+0x452>
 80036b6:	68e0      	ldr	r0, [r4, #12]
 80036b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80036ba:	4298      	cmp	r0, r3
 80036bc:	bfb8      	it	lt
 80036be:	4618      	movlt	r0, r3
 80036c0:	e731      	b.n	8003526 <_printf_float+0xba>
 80036c2:	2301      	movs	r3, #1
 80036c4:	464a      	mov	r2, r9
 80036c6:	4631      	mov	r1, r6
 80036c8:	4628      	mov	r0, r5
 80036ca:	47b8      	blx	r7
 80036cc:	3001      	adds	r0, #1
 80036ce:	f43f af28 	beq.w	8003522 <_printf_float+0xb6>
 80036d2:	f108 0801 	add.w	r8, r8, #1
 80036d6:	e7e6      	b.n	80036a6 <_printf_float+0x23a>
 80036d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036da:	2b00      	cmp	r3, #0
 80036dc:	dc38      	bgt.n	8003750 <_printf_float+0x2e4>
 80036de:	2301      	movs	r3, #1
 80036e0:	4631      	mov	r1, r6
 80036e2:	4628      	mov	r0, r5
 80036e4:	4a19      	ldr	r2, [pc, #100]	; (800374c <_printf_float+0x2e0>)
 80036e6:	47b8      	blx	r7
 80036e8:	3001      	adds	r0, #1
 80036ea:	f43f af1a 	beq.w	8003522 <_printf_float+0xb6>
 80036ee:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80036f2:	4313      	orrs	r3, r2
 80036f4:	d102      	bne.n	80036fc <_printf_float+0x290>
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	07d9      	lsls	r1, r3, #31
 80036fa:	d5d8      	bpl.n	80036ae <_printf_float+0x242>
 80036fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003700:	4631      	mov	r1, r6
 8003702:	4628      	mov	r0, r5
 8003704:	47b8      	blx	r7
 8003706:	3001      	adds	r0, #1
 8003708:	f43f af0b 	beq.w	8003522 <_printf_float+0xb6>
 800370c:	f04f 0900 	mov.w	r9, #0
 8003710:	f104 0a1a 	add.w	sl, r4, #26
 8003714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003716:	425b      	negs	r3, r3
 8003718:	454b      	cmp	r3, r9
 800371a:	dc01      	bgt.n	8003720 <_printf_float+0x2b4>
 800371c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800371e:	e794      	b.n	800364a <_printf_float+0x1de>
 8003720:	2301      	movs	r3, #1
 8003722:	4652      	mov	r2, sl
 8003724:	4631      	mov	r1, r6
 8003726:	4628      	mov	r0, r5
 8003728:	47b8      	blx	r7
 800372a:	3001      	adds	r0, #1
 800372c:	f43f aef9 	beq.w	8003522 <_printf_float+0xb6>
 8003730:	f109 0901 	add.w	r9, r9, #1
 8003734:	e7ee      	b.n	8003714 <_printf_float+0x2a8>
 8003736:	bf00      	nop
 8003738:	7fefffff 	.word	0x7fefffff
 800373c:	080060a6 	.word	0x080060a6
 8003740:	080060aa 	.word	0x080060aa
 8003744:	080060ae 	.word	0x080060ae
 8003748:	080060b2 	.word	0x080060b2
 800374c:	080060b6 	.word	0x080060b6
 8003750:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003752:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003754:	429a      	cmp	r2, r3
 8003756:	bfa8      	it	ge
 8003758:	461a      	movge	r2, r3
 800375a:	2a00      	cmp	r2, #0
 800375c:	4691      	mov	r9, r2
 800375e:	dc37      	bgt.n	80037d0 <_printf_float+0x364>
 8003760:	f04f 0b00 	mov.w	fp, #0
 8003764:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003768:	f104 021a 	add.w	r2, r4, #26
 800376c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003770:	ebaa 0309 	sub.w	r3, sl, r9
 8003774:	455b      	cmp	r3, fp
 8003776:	dc33      	bgt.n	80037e0 <_printf_float+0x374>
 8003778:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800377c:	429a      	cmp	r2, r3
 800377e:	db3b      	blt.n	80037f8 <_printf_float+0x38c>
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	07da      	lsls	r2, r3, #31
 8003784:	d438      	bmi.n	80037f8 <_printf_float+0x38c>
 8003786:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800378a:	eba2 0903 	sub.w	r9, r2, r3
 800378e:	eba2 020a 	sub.w	r2, r2, sl
 8003792:	4591      	cmp	r9, r2
 8003794:	bfa8      	it	ge
 8003796:	4691      	movge	r9, r2
 8003798:	f1b9 0f00 	cmp.w	r9, #0
 800379c:	dc34      	bgt.n	8003808 <_printf_float+0x39c>
 800379e:	f04f 0800 	mov.w	r8, #0
 80037a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037a6:	f104 0a1a 	add.w	sl, r4, #26
 80037aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	eba3 0309 	sub.w	r3, r3, r9
 80037b4:	4543      	cmp	r3, r8
 80037b6:	f77f af7a 	ble.w	80036ae <_printf_float+0x242>
 80037ba:	2301      	movs	r3, #1
 80037bc:	4652      	mov	r2, sl
 80037be:	4631      	mov	r1, r6
 80037c0:	4628      	mov	r0, r5
 80037c2:	47b8      	blx	r7
 80037c4:	3001      	adds	r0, #1
 80037c6:	f43f aeac 	beq.w	8003522 <_printf_float+0xb6>
 80037ca:	f108 0801 	add.w	r8, r8, #1
 80037ce:	e7ec      	b.n	80037aa <_printf_float+0x33e>
 80037d0:	4613      	mov	r3, r2
 80037d2:	4631      	mov	r1, r6
 80037d4:	4642      	mov	r2, r8
 80037d6:	4628      	mov	r0, r5
 80037d8:	47b8      	blx	r7
 80037da:	3001      	adds	r0, #1
 80037dc:	d1c0      	bne.n	8003760 <_printf_float+0x2f4>
 80037de:	e6a0      	b.n	8003522 <_printf_float+0xb6>
 80037e0:	2301      	movs	r3, #1
 80037e2:	4631      	mov	r1, r6
 80037e4:	4628      	mov	r0, r5
 80037e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80037e8:	47b8      	blx	r7
 80037ea:	3001      	adds	r0, #1
 80037ec:	f43f ae99 	beq.w	8003522 <_printf_float+0xb6>
 80037f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80037f2:	f10b 0b01 	add.w	fp, fp, #1
 80037f6:	e7b9      	b.n	800376c <_printf_float+0x300>
 80037f8:	4631      	mov	r1, r6
 80037fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037fe:	4628      	mov	r0, r5
 8003800:	47b8      	blx	r7
 8003802:	3001      	adds	r0, #1
 8003804:	d1bf      	bne.n	8003786 <_printf_float+0x31a>
 8003806:	e68c      	b.n	8003522 <_printf_float+0xb6>
 8003808:	464b      	mov	r3, r9
 800380a:	4631      	mov	r1, r6
 800380c:	4628      	mov	r0, r5
 800380e:	eb08 020a 	add.w	r2, r8, sl
 8003812:	47b8      	blx	r7
 8003814:	3001      	adds	r0, #1
 8003816:	d1c2      	bne.n	800379e <_printf_float+0x332>
 8003818:	e683      	b.n	8003522 <_printf_float+0xb6>
 800381a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800381c:	2a01      	cmp	r2, #1
 800381e:	dc01      	bgt.n	8003824 <_printf_float+0x3b8>
 8003820:	07db      	lsls	r3, r3, #31
 8003822:	d539      	bpl.n	8003898 <_printf_float+0x42c>
 8003824:	2301      	movs	r3, #1
 8003826:	4642      	mov	r2, r8
 8003828:	4631      	mov	r1, r6
 800382a:	4628      	mov	r0, r5
 800382c:	47b8      	blx	r7
 800382e:	3001      	adds	r0, #1
 8003830:	f43f ae77 	beq.w	8003522 <_printf_float+0xb6>
 8003834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003838:	4631      	mov	r1, r6
 800383a:	4628      	mov	r0, r5
 800383c:	47b8      	blx	r7
 800383e:	3001      	adds	r0, #1
 8003840:	f43f ae6f 	beq.w	8003522 <_printf_float+0xb6>
 8003844:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003848:	2200      	movs	r2, #0
 800384a:	2300      	movs	r3, #0
 800384c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8003850:	f7fd f8aa 	bl	80009a8 <__aeabi_dcmpeq>
 8003854:	b9d8      	cbnz	r0, 800388e <_printf_float+0x422>
 8003856:	f109 33ff 	add.w	r3, r9, #4294967295
 800385a:	f108 0201 	add.w	r2, r8, #1
 800385e:	4631      	mov	r1, r6
 8003860:	4628      	mov	r0, r5
 8003862:	47b8      	blx	r7
 8003864:	3001      	adds	r0, #1
 8003866:	d10e      	bne.n	8003886 <_printf_float+0x41a>
 8003868:	e65b      	b.n	8003522 <_printf_float+0xb6>
 800386a:	2301      	movs	r3, #1
 800386c:	464a      	mov	r2, r9
 800386e:	4631      	mov	r1, r6
 8003870:	4628      	mov	r0, r5
 8003872:	47b8      	blx	r7
 8003874:	3001      	adds	r0, #1
 8003876:	f43f ae54 	beq.w	8003522 <_printf_float+0xb6>
 800387a:	f108 0801 	add.w	r8, r8, #1
 800387e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003880:	3b01      	subs	r3, #1
 8003882:	4543      	cmp	r3, r8
 8003884:	dcf1      	bgt.n	800386a <_printf_float+0x3fe>
 8003886:	4653      	mov	r3, sl
 8003888:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800388c:	e6de      	b.n	800364c <_printf_float+0x1e0>
 800388e:	f04f 0800 	mov.w	r8, #0
 8003892:	f104 091a 	add.w	r9, r4, #26
 8003896:	e7f2      	b.n	800387e <_printf_float+0x412>
 8003898:	2301      	movs	r3, #1
 800389a:	4642      	mov	r2, r8
 800389c:	e7df      	b.n	800385e <_printf_float+0x3f2>
 800389e:	2301      	movs	r3, #1
 80038a0:	464a      	mov	r2, r9
 80038a2:	4631      	mov	r1, r6
 80038a4:	4628      	mov	r0, r5
 80038a6:	47b8      	blx	r7
 80038a8:	3001      	adds	r0, #1
 80038aa:	f43f ae3a 	beq.w	8003522 <_printf_float+0xb6>
 80038ae:	f108 0801 	add.w	r8, r8, #1
 80038b2:	68e3      	ldr	r3, [r4, #12]
 80038b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80038b6:	1a5b      	subs	r3, r3, r1
 80038b8:	4543      	cmp	r3, r8
 80038ba:	dcf0      	bgt.n	800389e <_printf_float+0x432>
 80038bc:	e6fb      	b.n	80036b6 <_printf_float+0x24a>
 80038be:	f04f 0800 	mov.w	r8, #0
 80038c2:	f104 0919 	add.w	r9, r4, #25
 80038c6:	e7f4      	b.n	80038b2 <_printf_float+0x446>

080038c8 <_printf_common>:
 80038c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038cc:	4616      	mov	r6, r2
 80038ce:	4699      	mov	r9, r3
 80038d0:	688a      	ldr	r2, [r1, #8]
 80038d2:	690b      	ldr	r3, [r1, #16]
 80038d4:	4607      	mov	r7, r0
 80038d6:	4293      	cmp	r3, r2
 80038d8:	bfb8      	it	lt
 80038da:	4613      	movlt	r3, r2
 80038dc:	6033      	str	r3, [r6, #0]
 80038de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038e2:	460c      	mov	r4, r1
 80038e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038e8:	b10a      	cbz	r2, 80038ee <_printf_common+0x26>
 80038ea:	3301      	adds	r3, #1
 80038ec:	6033      	str	r3, [r6, #0]
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	0699      	lsls	r1, r3, #26
 80038f2:	bf42      	ittt	mi
 80038f4:	6833      	ldrmi	r3, [r6, #0]
 80038f6:	3302      	addmi	r3, #2
 80038f8:	6033      	strmi	r3, [r6, #0]
 80038fa:	6825      	ldr	r5, [r4, #0]
 80038fc:	f015 0506 	ands.w	r5, r5, #6
 8003900:	d106      	bne.n	8003910 <_printf_common+0x48>
 8003902:	f104 0a19 	add.w	sl, r4, #25
 8003906:	68e3      	ldr	r3, [r4, #12]
 8003908:	6832      	ldr	r2, [r6, #0]
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	42ab      	cmp	r3, r5
 800390e:	dc2b      	bgt.n	8003968 <_printf_common+0xa0>
 8003910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003914:	1e13      	subs	r3, r2, #0
 8003916:	6822      	ldr	r2, [r4, #0]
 8003918:	bf18      	it	ne
 800391a:	2301      	movne	r3, #1
 800391c:	0692      	lsls	r2, r2, #26
 800391e:	d430      	bmi.n	8003982 <_printf_common+0xba>
 8003920:	4649      	mov	r1, r9
 8003922:	4638      	mov	r0, r7
 8003924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003928:	47c0      	blx	r8
 800392a:	3001      	adds	r0, #1
 800392c:	d023      	beq.n	8003976 <_printf_common+0xae>
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	6922      	ldr	r2, [r4, #16]
 8003932:	f003 0306 	and.w	r3, r3, #6
 8003936:	2b04      	cmp	r3, #4
 8003938:	bf14      	ite	ne
 800393a:	2500      	movne	r5, #0
 800393c:	6833      	ldreq	r3, [r6, #0]
 800393e:	f04f 0600 	mov.w	r6, #0
 8003942:	bf08      	it	eq
 8003944:	68e5      	ldreq	r5, [r4, #12]
 8003946:	f104 041a 	add.w	r4, r4, #26
 800394a:	bf08      	it	eq
 800394c:	1aed      	subeq	r5, r5, r3
 800394e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003952:	bf08      	it	eq
 8003954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003958:	4293      	cmp	r3, r2
 800395a:	bfc4      	itt	gt
 800395c:	1a9b      	subgt	r3, r3, r2
 800395e:	18ed      	addgt	r5, r5, r3
 8003960:	42b5      	cmp	r5, r6
 8003962:	d11a      	bne.n	800399a <_printf_common+0xd2>
 8003964:	2000      	movs	r0, #0
 8003966:	e008      	b.n	800397a <_printf_common+0xb2>
 8003968:	2301      	movs	r3, #1
 800396a:	4652      	mov	r2, sl
 800396c:	4649      	mov	r1, r9
 800396e:	4638      	mov	r0, r7
 8003970:	47c0      	blx	r8
 8003972:	3001      	adds	r0, #1
 8003974:	d103      	bne.n	800397e <_printf_common+0xb6>
 8003976:	f04f 30ff 	mov.w	r0, #4294967295
 800397a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800397e:	3501      	adds	r5, #1
 8003980:	e7c1      	b.n	8003906 <_printf_common+0x3e>
 8003982:	2030      	movs	r0, #48	; 0x30
 8003984:	18e1      	adds	r1, r4, r3
 8003986:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003990:	4422      	add	r2, r4
 8003992:	3302      	adds	r3, #2
 8003994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003998:	e7c2      	b.n	8003920 <_printf_common+0x58>
 800399a:	2301      	movs	r3, #1
 800399c:	4622      	mov	r2, r4
 800399e:	4649      	mov	r1, r9
 80039a0:	4638      	mov	r0, r7
 80039a2:	47c0      	blx	r8
 80039a4:	3001      	adds	r0, #1
 80039a6:	d0e6      	beq.n	8003976 <_printf_common+0xae>
 80039a8:	3601      	adds	r6, #1
 80039aa:	e7d9      	b.n	8003960 <_printf_common+0x98>

080039ac <_printf_i>:
 80039ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039b0:	7e0f      	ldrb	r7, [r1, #24]
 80039b2:	4691      	mov	r9, r2
 80039b4:	2f78      	cmp	r7, #120	; 0x78
 80039b6:	4680      	mov	r8, r0
 80039b8:	460c      	mov	r4, r1
 80039ba:	469a      	mov	sl, r3
 80039bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039c2:	d807      	bhi.n	80039d4 <_printf_i+0x28>
 80039c4:	2f62      	cmp	r7, #98	; 0x62
 80039c6:	d80a      	bhi.n	80039de <_printf_i+0x32>
 80039c8:	2f00      	cmp	r7, #0
 80039ca:	f000 80d5 	beq.w	8003b78 <_printf_i+0x1cc>
 80039ce:	2f58      	cmp	r7, #88	; 0x58
 80039d0:	f000 80c1 	beq.w	8003b56 <_printf_i+0x1aa>
 80039d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039dc:	e03a      	b.n	8003a54 <_printf_i+0xa8>
 80039de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039e2:	2b15      	cmp	r3, #21
 80039e4:	d8f6      	bhi.n	80039d4 <_printf_i+0x28>
 80039e6:	a101      	add	r1, pc, #4	; (adr r1, 80039ec <_printf_i+0x40>)
 80039e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039ec:	08003a45 	.word	0x08003a45
 80039f0:	08003a59 	.word	0x08003a59
 80039f4:	080039d5 	.word	0x080039d5
 80039f8:	080039d5 	.word	0x080039d5
 80039fc:	080039d5 	.word	0x080039d5
 8003a00:	080039d5 	.word	0x080039d5
 8003a04:	08003a59 	.word	0x08003a59
 8003a08:	080039d5 	.word	0x080039d5
 8003a0c:	080039d5 	.word	0x080039d5
 8003a10:	080039d5 	.word	0x080039d5
 8003a14:	080039d5 	.word	0x080039d5
 8003a18:	08003b5f 	.word	0x08003b5f
 8003a1c:	08003a85 	.word	0x08003a85
 8003a20:	08003b19 	.word	0x08003b19
 8003a24:	080039d5 	.word	0x080039d5
 8003a28:	080039d5 	.word	0x080039d5
 8003a2c:	08003b81 	.word	0x08003b81
 8003a30:	080039d5 	.word	0x080039d5
 8003a34:	08003a85 	.word	0x08003a85
 8003a38:	080039d5 	.word	0x080039d5
 8003a3c:	080039d5 	.word	0x080039d5
 8003a40:	08003b21 	.word	0x08003b21
 8003a44:	682b      	ldr	r3, [r5, #0]
 8003a46:	1d1a      	adds	r2, r3, #4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	602a      	str	r2, [r5, #0]
 8003a4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0a0      	b.n	8003b9a <_printf_i+0x1ee>
 8003a58:	6820      	ldr	r0, [r4, #0]
 8003a5a:	682b      	ldr	r3, [r5, #0]
 8003a5c:	0607      	lsls	r7, r0, #24
 8003a5e:	f103 0104 	add.w	r1, r3, #4
 8003a62:	6029      	str	r1, [r5, #0]
 8003a64:	d501      	bpl.n	8003a6a <_printf_i+0xbe>
 8003a66:	681e      	ldr	r6, [r3, #0]
 8003a68:	e003      	b.n	8003a72 <_printf_i+0xc6>
 8003a6a:	0646      	lsls	r6, r0, #25
 8003a6c:	d5fb      	bpl.n	8003a66 <_printf_i+0xba>
 8003a6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003a72:	2e00      	cmp	r6, #0
 8003a74:	da03      	bge.n	8003a7e <_printf_i+0xd2>
 8003a76:	232d      	movs	r3, #45	; 0x2d
 8003a78:	4276      	negs	r6, r6
 8003a7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a7e:	230a      	movs	r3, #10
 8003a80:	4859      	ldr	r0, [pc, #356]	; (8003be8 <_printf_i+0x23c>)
 8003a82:	e012      	b.n	8003aaa <_printf_i+0xfe>
 8003a84:	682b      	ldr	r3, [r5, #0]
 8003a86:	6820      	ldr	r0, [r4, #0]
 8003a88:	1d19      	adds	r1, r3, #4
 8003a8a:	6029      	str	r1, [r5, #0]
 8003a8c:	0605      	lsls	r5, r0, #24
 8003a8e:	d501      	bpl.n	8003a94 <_printf_i+0xe8>
 8003a90:	681e      	ldr	r6, [r3, #0]
 8003a92:	e002      	b.n	8003a9a <_printf_i+0xee>
 8003a94:	0641      	lsls	r1, r0, #25
 8003a96:	d5fb      	bpl.n	8003a90 <_printf_i+0xe4>
 8003a98:	881e      	ldrh	r6, [r3, #0]
 8003a9a:	2f6f      	cmp	r7, #111	; 0x6f
 8003a9c:	bf0c      	ite	eq
 8003a9e:	2308      	moveq	r3, #8
 8003aa0:	230a      	movne	r3, #10
 8003aa2:	4851      	ldr	r0, [pc, #324]	; (8003be8 <_printf_i+0x23c>)
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003aaa:	6865      	ldr	r5, [r4, #4]
 8003aac:	2d00      	cmp	r5, #0
 8003aae:	bfa8      	it	ge
 8003ab0:	6821      	ldrge	r1, [r4, #0]
 8003ab2:	60a5      	str	r5, [r4, #8]
 8003ab4:	bfa4      	itt	ge
 8003ab6:	f021 0104 	bicge.w	r1, r1, #4
 8003aba:	6021      	strge	r1, [r4, #0]
 8003abc:	b90e      	cbnz	r6, 8003ac2 <_printf_i+0x116>
 8003abe:	2d00      	cmp	r5, #0
 8003ac0:	d04b      	beq.n	8003b5a <_printf_i+0x1ae>
 8003ac2:	4615      	mov	r5, r2
 8003ac4:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ac8:	fb03 6711 	mls	r7, r3, r1, r6
 8003acc:	5dc7      	ldrb	r7, [r0, r7]
 8003ace:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ad2:	4637      	mov	r7, r6
 8003ad4:	42bb      	cmp	r3, r7
 8003ad6:	460e      	mov	r6, r1
 8003ad8:	d9f4      	bls.n	8003ac4 <_printf_i+0x118>
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d10b      	bne.n	8003af6 <_printf_i+0x14a>
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	07de      	lsls	r6, r3, #31
 8003ae2:	d508      	bpl.n	8003af6 <_printf_i+0x14a>
 8003ae4:	6923      	ldr	r3, [r4, #16]
 8003ae6:	6861      	ldr	r1, [r4, #4]
 8003ae8:	4299      	cmp	r1, r3
 8003aea:	bfde      	ittt	le
 8003aec:	2330      	movle	r3, #48	; 0x30
 8003aee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003af2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003af6:	1b52      	subs	r2, r2, r5
 8003af8:	6122      	str	r2, [r4, #16]
 8003afa:	464b      	mov	r3, r9
 8003afc:	4621      	mov	r1, r4
 8003afe:	4640      	mov	r0, r8
 8003b00:	f8cd a000 	str.w	sl, [sp]
 8003b04:	aa03      	add	r2, sp, #12
 8003b06:	f7ff fedf 	bl	80038c8 <_printf_common>
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	d14a      	bne.n	8003ba4 <_printf_i+0x1f8>
 8003b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b12:	b004      	add	sp, #16
 8003b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	f043 0320 	orr.w	r3, r3, #32
 8003b1e:	6023      	str	r3, [r4, #0]
 8003b20:	2778      	movs	r7, #120	; 0x78
 8003b22:	4832      	ldr	r0, [pc, #200]	; (8003bec <_printf_i+0x240>)
 8003b24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	6829      	ldr	r1, [r5, #0]
 8003b2c:	061f      	lsls	r7, r3, #24
 8003b2e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b32:	d402      	bmi.n	8003b3a <_printf_i+0x18e>
 8003b34:	065f      	lsls	r7, r3, #25
 8003b36:	bf48      	it	mi
 8003b38:	b2b6      	uxthmi	r6, r6
 8003b3a:	07df      	lsls	r7, r3, #31
 8003b3c:	bf48      	it	mi
 8003b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8003b42:	6029      	str	r1, [r5, #0]
 8003b44:	bf48      	it	mi
 8003b46:	6023      	strmi	r3, [r4, #0]
 8003b48:	b91e      	cbnz	r6, 8003b52 <_printf_i+0x1a6>
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	f023 0320 	bic.w	r3, r3, #32
 8003b50:	6023      	str	r3, [r4, #0]
 8003b52:	2310      	movs	r3, #16
 8003b54:	e7a6      	b.n	8003aa4 <_printf_i+0xf8>
 8003b56:	4824      	ldr	r0, [pc, #144]	; (8003be8 <_printf_i+0x23c>)
 8003b58:	e7e4      	b.n	8003b24 <_printf_i+0x178>
 8003b5a:	4615      	mov	r5, r2
 8003b5c:	e7bd      	b.n	8003ada <_printf_i+0x12e>
 8003b5e:	682b      	ldr	r3, [r5, #0]
 8003b60:	6826      	ldr	r6, [r4, #0]
 8003b62:	1d18      	adds	r0, r3, #4
 8003b64:	6961      	ldr	r1, [r4, #20]
 8003b66:	6028      	str	r0, [r5, #0]
 8003b68:	0635      	lsls	r5, r6, #24
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	d501      	bpl.n	8003b72 <_printf_i+0x1c6>
 8003b6e:	6019      	str	r1, [r3, #0]
 8003b70:	e002      	b.n	8003b78 <_printf_i+0x1cc>
 8003b72:	0670      	lsls	r0, r6, #25
 8003b74:	d5fb      	bpl.n	8003b6e <_printf_i+0x1c2>
 8003b76:	8019      	strh	r1, [r3, #0]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	4615      	mov	r5, r2
 8003b7c:	6123      	str	r3, [r4, #16]
 8003b7e:	e7bc      	b.n	8003afa <_printf_i+0x14e>
 8003b80:	682b      	ldr	r3, [r5, #0]
 8003b82:	2100      	movs	r1, #0
 8003b84:	1d1a      	adds	r2, r3, #4
 8003b86:	602a      	str	r2, [r5, #0]
 8003b88:	681d      	ldr	r5, [r3, #0]
 8003b8a:	6862      	ldr	r2, [r4, #4]
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	f000 f9d4 	bl	8003f3a <memchr>
 8003b92:	b108      	cbz	r0, 8003b98 <_printf_i+0x1ec>
 8003b94:	1b40      	subs	r0, r0, r5
 8003b96:	6060      	str	r0, [r4, #4]
 8003b98:	6863      	ldr	r3, [r4, #4]
 8003b9a:	6123      	str	r3, [r4, #16]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ba2:	e7aa      	b.n	8003afa <_printf_i+0x14e>
 8003ba4:	462a      	mov	r2, r5
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	4640      	mov	r0, r8
 8003baa:	6923      	ldr	r3, [r4, #16]
 8003bac:	47d0      	blx	sl
 8003bae:	3001      	adds	r0, #1
 8003bb0:	d0ad      	beq.n	8003b0e <_printf_i+0x162>
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	079b      	lsls	r3, r3, #30
 8003bb6:	d413      	bmi.n	8003be0 <_printf_i+0x234>
 8003bb8:	68e0      	ldr	r0, [r4, #12]
 8003bba:	9b03      	ldr	r3, [sp, #12]
 8003bbc:	4298      	cmp	r0, r3
 8003bbe:	bfb8      	it	lt
 8003bc0:	4618      	movlt	r0, r3
 8003bc2:	e7a6      	b.n	8003b12 <_printf_i+0x166>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	4632      	mov	r2, r6
 8003bc8:	4649      	mov	r1, r9
 8003bca:	4640      	mov	r0, r8
 8003bcc:	47d0      	blx	sl
 8003bce:	3001      	adds	r0, #1
 8003bd0:	d09d      	beq.n	8003b0e <_printf_i+0x162>
 8003bd2:	3501      	adds	r5, #1
 8003bd4:	68e3      	ldr	r3, [r4, #12]
 8003bd6:	9903      	ldr	r1, [sp, #12]
 8003bd8:	1a5b      	subs	r3, r3, r1
 8003bda:	42ab      	cmp	r3, r5
 8003bdc:	dcf2      	bgt.n	8003bc4 <_printf_i+0x218>
 8003bde:	e7eb      	b.n	8003bb8 <_printf_i+0x20c>
 8003be0:	2500      	movs	r5, #0
 8003be2:	f104 0619 	add.w	r6, r4, #25
 8003be6:	e7f5      	b.n	8003bd4 <_printf_i+0x228>
 8003be8:	080060b8 	.word	0x080060b8
 8003bec:	080060c9 	.word	0x080060c9

08003bf0 <std>:
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	b510      	push	{r4, lr}
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	e9c0 3300 	strd	r3, r3, [r0]
 8003bfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bfe:	6083      	str	r3, [r0, #8]
 8003c00:	8181      	strh	r1, [r0, #12]
 8003c02:	6643      	str	r3, [r0, #100]	; 0x64
 8003c04:	81c2      	strh	r2, [r0, #14]
 8003c06:	6183      	str	r3, [r0, #24]
 8003c08:	4619      	mov	r1, r3
 8003c0a:	2208      	movs	r2, #8
 8003c0c:	305c      	adds	r0, #92	; 0x5c
 8003c0e:	f000 f914 	bl	8003e3a <memset>
 8003c12:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <std+0x58>)
 8003c14:	6224      	str	r4, [r4, #32]
 8003c16:	6263      	str	r3, [r4, #36]	; 0x24
 8003c18:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <std+0x5c>)
 8003c1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <std+0x60>)
 8003c1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c20:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <std+0x64>)
 8003c22:	6323      	str	r3, [r4, #48]	; 0x30
 8003c24:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <std+0x68>)
 8003c26:	429c      	cmp	r4, r3
 8003c28:	d006      	beq.n	8003c38 <std+0x48>
 8003c2a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003c2e:	4294      	cmp	r4, r2
 8003c30:	d002      	beq.n	8003c38 <std+0x48>
 8003c32:	33d0      	adds	r3, #208	; 0xd0
 8003c34:	429c      	cmp	r4, r3
 8003c36:	d105      	bne.n	8003c44 <std+0x54>
 8003c38:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c40:	f000 b978 	b.w	8003f34 <__retarget_lock_init_recursive>
 8003c44:	bd10      	pop	{r4, pc}
 8003c46:	bf00      	nop
 8003c48:	08003db5 	.word	0x08003db5
 8003c4c:	08003dd7 	.word	0x08003dd7
 8003c50:	08003e0f 	.word	0x08003e0f
 8003c54:	08003e33 	.word	0x08003e33
 8003c58:	200002ec 	.word	0x200002ec

08003c5c <stdio_exit_handler>:
 8003c5c:	4a02      	ldr	r2, [pc, #8]	; (8003c68 <stdio_exit_handler+0xc>)
 8003c5e:	4903      	ldr	r1, [pc, #12]	; (8003c6c <stdio_exit_handler+0x10>)
 8003c60:	4803      	ldr	r0, [pc, #12]	; (8003c70 <stdio_exit_handler+0x14>)
 8003c62:	f000 b869 	b.w	8003d38 <_fwalk_sglue>
 8003c66:	bf00      	nop
 8003c68:	20000018 	.word	0x20000018
 8003c6c:	080058cd 	.word	0x080058cd
 8003c70:	20000024 	.word	0x20000024

08003c74 <cleanup_stdio>:
 8003c74:	6841      	ldr	r1, [r0, #4]
 8003c76:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <cleanup_stdio+0x34>)
 8003c78:	b510      	push	{r4, lr}
 8003c7a:	4299      	cmp	r1, r3
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	d001      	beq.n	8003c84 <cleanup_stdio+0x10>
 8003c80:	f001 fe24 	bl	80058cc <_fflush_r>
 8003c84:	68a1      	ldr	r1, [r4, #8]
 8003c86:	4b09      	ldr	r3, [pc, #36]	; (8003cac <cleanup_stdio+0x38>)
 8003c88:	4299      	cmp	r1, r3
 8003c8a:	d002      	beq.n	8003c92 <cleanup_stdio+0x1e>
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f001 fe1d 	bl	80058cc <_fflush_r>
 8003c92:	68e1      	ldr	r1, [r4, #12]
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <cleanup_stdio+0x3c>)
 8003c96:	4299      	cmp	r1, r3
 8003c98:	d004      	beq.n	8003ca4 <cleanup_stdio+0x30>
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ca0:	f001 be14 	b.w	80058cc <_fflush_r>
 8003ca4:	bd10      	pop	{r4, pc}
 8003ca6:	bf00      	nop
 8003ca8:	200002ec 	.word	0x200002ec
 8003cac:	20000354 	.word	0x20000354
 8003cb0:	200003bc 	.word	0x200003bc

08003cb4 <global_stdio_init.part.0>:
 8003cb4:	b510      	push	{r4, lr}
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <global_stdio_init.part.0+0x30>)
 8003cb8:	4c0b      	ldr	r4, [pc, #44]	; (8003ce8 <global_stdio_init.part.0+0x34>)
 8003cba:	4a0c      	ldr	r2, [pc, #48]	; (8003cec <global_stdio_init.part.0+0x38>)
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	2104      	movs	r1, #4
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f7ff ff94 	bl	8003bf0 <std>
 8003cc8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003ccc:	2201      	movs	r2, #1
 8003cce:	2109      	movs	r1, #9
 8003cd0:	f7ff ff8e 	bl	8003bf0 <std>
 8003cd4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003cd8:	2202      	movs	r2, #2
 8003cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cde:	2112      	movs	r1, #18
 8003ce0:	f7ff bf86 	b.w	8003bf0 <std>
 8003ce4:	20000424 	.word	0x20000424
 8003ce8:	200002ec 	.word	0x200002ec
 8003cec:	08003c5d 	.word	0x08003c5d

08003cf0 <__sfp_lock_acquire>:
 8003cf0:	4801      	ldr	r0, [pc, #4]	; (8003cf8 <__sfp_lock_acquire+0x8>)
 8003cf2:	f000 b920 	b.w	8003f36 <__retarget_lock_acquire_recursive>
 8003cf6:	bf00      	nop
 8003cf8:	2000042d 	.word	0x2000042d

08003cfc <__sfp_lock_release>:
 8003cfc:	4801      	ldr	r0, [pc, #4]	; (8003d04 <__sfp_lock_release+0x8>)
 8003cfe:	f000 b91b 	b.w	8003f38 <__retarget_lock_release_recursive>
 8003d02:	bf00      	nop
 8003d04:	2000042d 	.word	0x2000042d

08003d08 <__sinit>:
 8003d08:	b510      	push	{r4, lr}
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	f7ff fff0 	bl	8003cf0 <__sfp_lock_acquire>
 8003d10:	6a23      	ldr	r3, [r4, #32]
 8003d12:	b11b      	cbz	r3, 8003d1c <__sinit+0x14>
 8003d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d18:	f7ff bff0 	b.w	8003cfc <__sfp_lock_release>
 8003d1c:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <__sinit+0x28>)
 8003d1e:	6223      	str	r3, [r4, #32]
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <__sinit+0x2c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f5      	bne.n	8003d14 <__sinit+0xc>
 8003d28:	f7ff ffc4 	bl	8003cb4 <global_stdio_init.part.0>
 8003d2c:	e7f2      	b.n	8003d14 <__sinit+0xc>
 8003d2e:	bf00      	nop
 8003d30:	08003c75 	.word	0x08003c75
 8003d34:	20000424 	.word	0x20000424

08003d38 <_fwalk_sglue>:
 8003d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d3c:	4607      	mov	r7, r0
 8003d3e:	4688      	mov	r8, r1
 8003d40:	4614      	mov	r4, r2
 8003d42:	2600      	movs	r6, #0
 8003d44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d48:	f1b9 0901 	subs.w	r9, r9, #1
 8003d4c:	d505      	bpl.n	8003d5a <_fwalk_sglue+0x22>
 8003d4e:	6824      	ldr	r4, [r4, #0]
 8003d50:	2c00      	cmp	r4, #0
 8003d52:	d1f7      	bne.n	8003d44 <_fwalk_sglue+0xc>
 8003d54:	4630      	mov	r0, r6
 8003d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d5a:	89ab      	ldrh	r3, [r5, #12]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d907      	bls.n	8003d70 <_fwalk_sglue+0x38>
 8003d60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d64:	3301      	adds	r3, #1
 8003d66:	d003      	beq.n	8003d70 <_fwalk_sglue+0x38>
 8003d68:	4629      	mov	r1, r5
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	47c0      	blx	r8
 8003d6e:	4306      	orrs	r6, r0
 8003d70:	3568      	adds	r5, #104	; 0x68
 8003d72:	e7e9      	b.n	8003d48 <_fwalk_sglue+0x10>

08003d74 <siprintf>:
 8003d74:	b40e      	push	{r1, r2, r3}
 8003d76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d7a:	b500      	push	{lr}
 8003d7c:	b09c      	sub	sp, #112	; 0x70
 8003d7e:	ab1d      	add	r3, sp, #116	; 0x74
 8003d80:	9002      	str	r0, [sp, #8]
 8003d82:	9006      	str	r0, [sp, #24]
 8003d84:	9107      	str	r1, [sp, #28]
 8003d86:	9104      	str	r1, [sp, #16]
 8003d88:	4808      	ldr	r0, [pc, #32]	; (8003dac <siprintf+0x38>)
 8003d8a:	4909      	ldr	r1, [pc, #36]	; (8003db0 <siprintf+0x3c>)
 8003d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d90:	9105      	str	r1, [sp, #20]
 8003d92:	6800      	ldr	r0, [r0, #0]
 8003d94:	a902      	add	r1, sp, #8
 8003d96:	9301      	str	r3, [sp, #4]
 8003d98:	f001 fc18 	bl	80055cc <_svfiprintf_r>
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	9b02      	ldr	r3, [sp, #8]
 8003da0:	701a      	strb	r2, [r3, #0]
 8003da2:	b01c      	add	sp, #112	; 0x70
 8003da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003da8:	b003      	add	sp, #12
 8003daa:	4770      	bx	lr
 8003dac:	20000070 	.word	0x20000070
 8003db0:	ffff0208 	.word	0xffff0208

08003db4 <__sread>:
 8003db4:	b510      	push	{r4, lr}
 8003db6:	460c      	mov	r4, r1
 8003db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dbc:	f000 f86c 	bl	8003e98 <_read_r>
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	bfab      	itete	ge
 8003dc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003dc6:	89a3      	ldrhlt	r3, [r4, #12]
 8003dc8:	181b      	addge	r3, r3, r0
 8003dca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003dce:	bfac      	ite	ge
 8003dd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003dd2:	81a3      	strhlt	r3, [r4, #12]
 8003dd4:	bd10      	pop	{r4, pc}

08003dd6 <__swrite>:
 8003dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dda:	461f      	mov	r7, r3
 8003ddc:	898b      	ldrh	r3, [r1, #12]
 8003dde:	4605      	mov	r5, r0
 8003de0:	05db      	lsls	r3, r3, #23
 8003de2:	460c      	mov	r4, r1
 8003de4:	4616      	mov	r6, r2
 8003de6:	d505      	bpl.n	8003df4 <__swrite+0x1e>
 8003de8:	2302      	movs	r3, #2
 8003dea:	2200      	movs	r2, #0
 8003dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df0:	f000 f840 	bl	8003e74 <_lseek_r>
 8003df4:	89a3      	ldrh	r3, [r4, #12]
 8003df6:	4632      	mov	r2, r6
 8003df8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dfc:	81a3      	strh	r3, [r4, #12]
 8003dfe:	4628      	mov	r0, r5
 8003e00:	463b      	mov	r3, r7
 8003e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e0a:	f000 b857 	b.w	8003ebc <_write_r>

08003e0e <__sseek>:
 8003e0e:	b510      	push	{r4, lr}
 8003e10:	460c      	mov	r4, r1
 8003e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e16:	f000 f82d 	bl	8003e74 <_lseek_r>
 8003e1a:	1c43      	adds	r3, r0, #1
 8003e1c:	89a3      	ldrh	r3, [r4, #12]
 8003e1e:	bf15      	itete	ne
 8003e20:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e2a:	81a3      	strheq	r3, [r4, #12]
 8003e2c:	bf18      	it	ne
 8003e2e:	81a3      	strhne	r3, [r4, #12]
 8003e30:	bd10      	pop	{r4, pc}

08003e32 <__sclose>:
 8003e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e36:	f000 b80d 	b.w	8003e54 <_close_r>

08003e3a <memset>:
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4402      	add	r2, r0
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d100      	bne.n	8003e44 <memset+0xa>
 8003e42:	4770      	bx	lr
 8003e44:	f803 1b01 	strb.w	r1, [r3], #1
 8003e48:	e7f9      	b.n	8003e3e <memset+0x4>
	...

08003e4c <_localeconv_r>:
 8003e4c:	4800      	ldr	r0, [pc, #0]	; (8003e50 <_localeconv_r+0x4>)
 8003e4e:	4770      	bx	lr
 8003e50:	20000164 	.word	0x20000164

08003e54 <_close_r>:
 8003e54:	b538      	push	{r3, r4, r5, lr}
 8003e56:	2300      	movs	r3, #0
 8003e58:	4d05      	ldr	r5, [pc, #20]	; (8003e70 <_close_r+0x1c>)
 8003e5a:	4604      	mov	r4, r0
 8003e5c:	4608      	mov	r0, r1
 8003e5e:	602b      	str	r3, [r5, #0]
 8003e60:	f7fd fb77 	bl	8001552 <_close>
 8003e64:	1c43      	adds	r3, r0, #1
 8003e66:	d102      	bne.n	8003e6e <_close_r+0x1a>
 8003e68:	682b      	ldr	r3, [r5, #0]
 8003e6a:	b103      	cbz	r3, 8003e6e <_close_r+0x1a>
 8003e6c:	6023      	str	r3, [r4, #0]
 8003e6e:	bd38      	pop	{r3, r4, r5, pc}
 8003e70:	20000428 	.word	0x20000428

08003e74 <_lseek_r>:
 8003e74:	b538      	push	{r3, r4, r5, lr}
 8003e76:	4604      	mov	r4, r0
 8003e78:	4608      	mov	r0, r1
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	4d05      	ldr	r5, [pc, #20]	; (8003e94 <_lseek_r+0x20>)
 8003e80:	602a      	str	r2, [r5, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	f7fd fb89 	bl	800159a <_lseek>
 8003e88:	1c43      	adds	r3, r0, #1
 8003e8a:	d102      	bne.n	8003e92 <_lseek_r+0x1e>
 8003e8c:	682b      	ldr	r3, [r5, #0]
 8003e8e:	b103      	cbz	r3, 8003e92 <_lseek_r+0x1e>
 8003e90:	6023      	str	r3, [r4, #0]
 8003e92:	bd38      	pop	{r3, r4, r5, pc}
 8003e94:	20000428 	.word	0x20000428

08003e98 <_read_r>:
 8003e98:	b538      	push	{r3, r4, r5, lr}
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	4d05      	ldr	r5, [pc, #20]	; (8003eb8 <_read_r+0x20>)
 8003ea4:	602a      	str	r2, [r5, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f7fd fb1a 	bl	80014e0 <_read>
 8003eac:	1c43      	adds	r3, r0, #1
 8003eae:	d102      	bne.n	8003eb6 <_read_r+0x1e>
 8003eb0:	682b      	ldr	r3, [r5, #0]
 8003eb2:	b103      	cbz	r3, 8003eb6 <_read_r+0x1e>
 8003eb4:	6023      	str	r3, [r4, #0]
 8003eb6:	bd38      	pop	{r3, r4, r5, pc}
 8003eb8:	20000428 	.word	0x20000428

08003ebc <_write_r>:
 8003ebc:	b538      	push	{r3, r4, r5, lr}
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	4608      	mov	r0, r1
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	4d05      	ldr	r5, [pc, #20]	; (8003edc <_write_r+0x20>)
 8003ec8:	602a      	str	r2, [r5, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f7fd fb25 	bl	800151a <_write>
 8003ed0:	1c43      	adds	r3, r0, #1
 8003ed2:	d102      	bne.n	8003eda <_write_r+0x1e>
 8003ed4:	682b      	ldr	r3, [r5, #0]
 8003ed6:	b103      	cbz	r3, 8003eda <_write_r+0x1e>
 8003ed8:	6023      	str	r3, [r4, #0]
 8003eda:	bd38      	pop	{r3, r4, r5, pc}
 8003edc:	20000428 	.word	0x20000428

08003ee0 <__errno>:
 8003ee0:	4b01      	ldr	r3, [pc, #4]	; (8003ee8 <__errno+0x8>)
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	20000070 	.word	0x20000070

08003eec <__libc_init_array>:
 8003eec:	b570      	push	{r4, r5, r6, lr}
 8003eee:	2600      	movs	r6, #0
 8003ef0:	4d0c      	ldr	r5, [pc, #48]	; (8003f24 <__libc_init_array+0x38>)
 8003ef2:	4c0d      	ldr	r4, [pc, #52]	; (8003f28 <__libc_init_array+0x3c>)
 8003ef4:	1b64      	subs	r4, r4, r5
 8003ef6:	10a4      	asrs	r4, r4, #2
 8003ef8:	42a6      	cmp	r6, r4
 8003efa:	d109      	bne.n	8003f10 <__libc_init_array+0x24>
 8003efc:	f002 f886 	bl	800600c <_init>
 8003f00:	2600      	movs	r6, #0
 8003f02:	4d0a      	ldr	r5, [pc, #40]	; (8003f2c <__libc_init_array+0x40>)
 8003f04:	4c0a      	ldr	r4, [pc, #40]	; (8003f30 <__libc_init_array+0x44>)
 8003f06:	1b64      	subs	r4, r4, r5
 8003f08:	10a4      	asrs	r4, r4, #2
 8003f0a:	42a6      	cmp	r6, r4
 8003f0c:	d105      	bne.n	8003f1a <__libc_init_array+0x2e>
 8003f0e:	bd70      	pop	{r4, r5, r6, pc}
 8003f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f14:	4798      	blx	r3
 8003f16:	3601      	adds	r6, #1
 8003f18:	e7ee      	b.n	8003ef8 <__libc_init_array+0xc>
 8003f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f1e:	4798      	blx	r3
 8003f20:	3601      	adds	r6, #1
 8003f22:	e7f2      	b.n	8003f0a <__libc_init_array+0x1e>
 8003f24:	08006414 	.word	0x08006414
 8003f28:	08006414 	.word	0x08006414
 8003f2c:	08006414 	.word	0x08006414
 8003f30:	08006418 	.word	0x08006418

08003f34 <__retarget_lock_init_recursive>:
 8003f34:	4770      	bx	lr

08003f36 <__retarget_lock_acquire_recursive>:
 8003f36:	4770      	bx	lr

08003f38 <__retarget_lock_release_recursive>:
 8003f38:	4770      	bx	lr

08003f3a <memchr>:
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	b510      	push	{r4, lr}
 8003f3e:	b2c9      	uxtb	r1, r1
 8003f40:	4402      	add	r2, r0
 8003f42:	4293      	cmp	r3, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	d101      	bne.n	8003f4c <memchr+0x12>
 8003f48:	2000      	movs	r0, #0
 8003f4a:	e003      	b.n	8003f54 <memchr+0x1a>
 8003f4c:	7804      	ldrb	r4, [r0, #0]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	428c      	cmp	r4, r1
 8003f52:	d1f6      	bne.n	8003f42 <memchr+0x8>
 8003f54:	bd10      	pop	{r4, pc}

08003f56 <quorem>:
 8003f56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f5a:	6903      	ldr	r3, [r0, #16]
 8003f5c:	690c      	ldr	r4, [r1, #16]
 8003f5e:	4607      	mov	r7, r0
 8003f60:	42a3      	cmp	r3, r4
 8003f62:	db7f      	blt.n	8004064 <quorem+0x10e>
 8003f64:	3c01      	subs	r4, #1
 8003f66:	f100 0514 	add.w	r5, r0, #20
 8003f6a:	f101 0814 	add.w	r8, r1, #20
 8003f6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003f78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003f88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003f8c:	d331      	bcc.n	8003ff2 <quorem+0x9c>
 8003f8e:	f04f 0e00 	mov.w	lr, #0
 8003f92:	4640      	mov	r0, r8
 8003f94:	46ac      	mov	ip, r5
 8003f96:	46f2      	mov	sl, lr
 8003f98:	f850 2b04 	ldr.w	r2, [r0], #4
 8003f9c:	b293      	uxth	r3, r2
 8003f9e:	fb06 e303 	mla	r3, r6, r3, lr
 8003fa2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003fa6:	0c1a      	lsrs	r2, r3, #16
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	fb06 220e 	mla	r2, r6, lr, r2
 8003fae:	ebaa 0303 	sub.w	r3, sl, r3
 8003fb2:	f8dc a000 	ldr.w	sl, [ip]
 8003fb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003fba:	fa1f fa8a 	uxth.w	sl, sl
 8003fbe:	4453      	add	r3, sl
 8003fc0:	f8dc a000 	ldr.w	sl, [ip]
 8003fc4:	b292      	uxth	r2, r2
 8003fc6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003fca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fd4:	4581      	cmp	r9, r0
 8003fd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003fda:	f84c 3b04 	str.w	r3, [ip], #4
 8003fde:	d2db      	bcs.n	8003f98 <quorem+0x42>
 8003fe0:	f855 300b 	ldr.w	r3, [r5, fp]
 8003fe4:	b92b      	cbnz	r3, 8003ff2 <quorem+0x9c>
 8003fe6:	9b01      	ldr	r3, [sp, #4]
 8003fe8:	3b04      	subs	r3, #4
 8003fea:	429d      	cmp	r5, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	d32d      	bcc.n	800404c <quorem+0xf6>
 8003ff0:	613c      	str	r4, [r7, #16]
 8003ff2:	4638      	mov	r0, r7
 8003ff4:	f001 f992 	bl	800531c <__mcmp>
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	db23      	blt.n	8004044 <quorem+0xee>
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	2000      	movs	r0, #0
 8004000:	3601      	adds	r6, #1
 8004002:	f858 2b04 	ldr.w	r2, [r8], #4
 8004006:	f8d1 c000 	ldr.w	ip, [r1]
 800400a:	b293      	uxth	r3, r2
 800400c:	1ac3      	subs	r3, r0, r3
 800400e:	0c12      	lsrs	r2, r2, #16
 8004010:	fa1f f08c 	uxth.w	r0, ip
 8004014:	4403      	add	r3, r0
 8004016:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800401a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800401e:	b29b      	uxth	r3, r3
 8004020:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004024:	45c1      	cmp	r9, r8
 8004026:	ea4f 4022 	mov.w	r0, r2, asr #16
 800402a:	f841 3b04 	str.w	r3, [r1], #4
 800402e:	d2e8      	bcs.n	8004002 <quorem+0xac>
 8004030:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004034:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004038:	b922      	cbnz	r2, 8004044 <quorem+0xee>
 800403a:	3b04      	subs	r3, #4
 800403c:	429d      	cmp	r5, r3
 800403e:	461a      	mov	r2, r3
 8004040:	d30a      	bcc.n	8004058 <quorem+0x102>
 8004042:	613c      	str	r4, [r7, #16]
 8004044:	4630      	mov	r0, r6
 8004046:	b003      	add	sp, #12
 8004048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	3b04      	subs	r3, #4
 8004050:	2a00      	cmp	r2, #0
 8004052:	d1cd      	bne.n	8003ff0 <quorem+0x9a>
 8004054:	3c01      	subs	r4, #1
 8004056:	e7c8      	b.n	8003fea <quorem+0x94>
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	3b04      	subs	r3, #4
 800405c:	2a00      	cmp	r2, #0
 800405e:	d1f0      	bne.n	8004042 <quorem+0xec>
 8004060:	3c01      	subs	r4, #1
 8004062:	e7eb      	b.n	800403c <quorem+0xe6>
 8004064:	2000      	movs	r0, #0
 8004066:	e7ee      	b.n	8004046 <quorem+0xf0>

08004068 <_dtoa_r>:
 8004068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800406c:	4616      	mov	r6, r2
 800406e:	461f      	mov	r7, r3
 8004070:	69c4      	ldr	r4, [r0, #28]
 8004072:	b099      	sub	sp, #100	; 0x64
 8004074:	4605      	mov	r5, r0
 8004076:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800407a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800407e:	b974      	cbnz	r4, 800409e <_dtoa_r+0x36>
 8004080:	2010      	movs	r0, #16
 8004082:	f000 fe1d 	bl	8004cc0 <malloc>
 8004086:	4602      	mov	r2, r0
 8004088:	61e8      	str	r0, [r5, #28]
 800408a:	b920      	cbnz	r0, 8004096 <_dtoa_r+0x2e>
 800408c:	21ef      	movs	r1, #239	; 0xef
 800408e:	4bac      	ldr	r3, [pc, #688]	; (8004340 <_dtoa_r+0x2d8>)
 8004090:	48ac      	ldr	r0, [pc, #688]	; (8004344 <_dtoa_r+0x2dc>)
 8004092:	f001 fc7b 	bl	800598c <__assert_func>
 8004096:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800409a:	6004      	str	r4, [r0, #0]
 800409c:	60c4      	str	r4, [r0, #12]
 800409e:	69eb      	ldr	r3, [r5, #28]
 80040a0:	6819      	ldr	r1, [r3, #0]
 80040a2:	b151      	cbz	r1, 80040ba <_dtoa_r+0x52>
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	2301      	movs	r3, #1
 80040a8:	4093      	lsls	r3, r2
 80040aa:	604a      	str	r2, [r1, #4]
 80040ac:	608b      	str	r3, [r1, #8]
 80040ae:	4628      	mov	r0, r5
 80040b0:	f000 fefa 	bl	8004ea8 <_Bfree>
 80040b4:	2200      	movs	r2, #0
 80040b6:	69eb      	ldr	r3, [r5, #28]
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	1e3b      	subs	r3, r7, #0
 80040bc:	bfaf      	iteee	ge
 80040be:	2300      	movge	r3, #0
 80040c0:	2201      	movlt	r2, #1
 80040c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80040c6:	9305      	strlt	r3, [sp, #20]
 80040c8:	bfa8      	it	ge
 80040ca:	f8c8 3000 	strge.w	r3, [r8]
 80040ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80040d2:	4b9d      	ldr	r3, [pc, #628]	; (8004348 <_dtoa_r+0x2e0>)
 80040d4:	bfb8      	it	lt
 80040d6:	f8c8 2000 	strlt.w	r2, [r8]
 80040da:	ea33 0309 	bics.w	r3, r3, r9
 80040de:	d119      	bne.n	8004114 <_dtoa_r+0xac>
 80040e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80040e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80040ec:	4333      	orrs	r3, r6
 80040ee:	f000 8589 	beq.w	8004c04 <_dtoa_r+0xb9c>
 80040f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80040f4:	b953      	cbnz	r3, 800410c <_dtoa_r+0xa4>
 80040f6:	4b95      	ldr	r3, [pc, #596]	; (800434c <_dtoa_r+0x2e4>)
 80040f8:	e023      	b.n	8004142 <_dtoa_r+0xda>
 80040fa:	4b95      	ldr	r3, [pc, #596]	; (8004350 <_dtoa_r+0x2e8>)
 80040fc:	9303      	str	r3, [sp, #12]
 80040fe:	3308      	adds	r3, #8
 8004100:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	9803      	ldr	r0, [sp, #12]
 8004106:	b019      	add	sp, #100	; 0x64
 8004108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410c:	4b8f      	ldr	r3, [pc, #572]	; (800434c <_dtoa_r+0x2e4>)
 800410e:	9303      	str	r3, [sp, #12]
 8004110:	3303      	adds	r3, #3
 8004112:	e7f5      	b.n	8004100 <_dtoa_r+0x98>
 8004114:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004118:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800411c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004120:	2200      	movs	r2, #0
 8004122:	2300      	movs	r3, #0
 8004124:	f7fc fc40 	bl	80009a8 <__aeabi_dcmpeq>
 8004128:	4680      	mov	r8, r0
 800412a:	b160      	cbz	r0, 8004146 <_dtoa_r+0xde>
 800412c:	2301      	movs	r3, #1
 800412e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8562 	beq.w	8004bfe <_dtoa_r+0xb96>
 800413a:	4b86      	ldr	r3, [pc, #536]	; (8004354 <_dtoa_r+0x2ec>)
 800413c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	3b01      	subs	r3, #1
 8004142:	9303      	str	r3, [sp, #12]
 8004144:	e7de      	b.n	8004104 <_dtoa_r+0x9c>
 8004146:	ab16      	add	r3, sp, #88	; 0x58
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	ab17      	add	r3, sp, #92	; 0x5c
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	4628      	mov	r0, r5
 8004150:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004154:	f001 f98a 	bl	800546c <__d2b>
 8004158:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800415c:	4682      	mov	sl, r0
 800415e:	2c00      	cmp	r4, #0
 8004160:	d07e      	beq.n	8004260 <_dtoa_r+0x1f8>
 8004162:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004168:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800416c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004170:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004174:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004178:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800417c:	4619      	mov	r1, r3
 800417e:	2200      	movs	r2, #0
 8004180:	4b75      	ldr	r3, [pc, #468]	; (8004358 <_dtoa_r+0x2f0>)
 8004182:	f7fb fff1 	bl	8000168 <__aeabi_dsub>
 8004186:	a368      	add	r3, pc, #416	; (adr r3, 8004328 <_dtoa_r+0x2c0>)
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f7fc f9a4 	bl	80004d8 <__aeabi_dmul>
 8004190:	a367      	add	r3, pc, #412	; (adr r3, 8004330 <_dtoa_r+0x2c8>)
 8004192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004196:	f7fb ffe9 	bl	800016c <__adddf3>
 800419a:	4606      	mov	r6, r0
 800419c:	4620      	mov	r0, r4
 800419e:	460f      	mov	r7, r1
 80041a0:	f7fc f930 	bl	8000404 <__aeabi_i2d>
 80041a4:	a364      	add	r3, pc, #400	; (adr r3, 8004338 <_dtoa_r+0x2d0>)
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	f7fc f995 	bl	80004d8 <__aeabi_dmul>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4630      	mov	r0, r6
 80041b4:	4639      	mov	r1, r7
 80041b6:	f7fb ffd9 	bl	800016c <__adddf3>
 80041ba:	4606      	mov	r6, r0
 80041bc:	460f      	mov	r7, r1
 80041be:	f7fc fc3b 	bl	8000a38 <__aeabi_d2iz>
 80041c2:	2200      	movs	r2, #0
 80041c4:	4683      	mov	fp, r0
 80041c6:	2300      	movs	r3, #0
 80041c8:	4630      	mov	r0, r6
 80041ca:	4639      	mov	r1, r7
 80041cc:	f7fc fbf6 	bl	80009bc <__aeabi_dcmplt>
 80041d0:	b148      	cbz	r0, 80041e6 <_dtoa_r+0x17e>
 80041d2:	4658      	mov	r0, fp
 80041d4:	f7fc f916 	bl	8000404 <__aeabi_i2d>
 80041d8:	4632      	mov	r2, r6
 80041da:	463b      	mov	r3, r7
 80041dc:	f7fc fbe4 	bl	80009a8 <__aeabi_dcmpeq>
 80041e0:	b908      	cbnz	r0, 80041e6 <_dtoa_r+0x17e>
 80041e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80041e6:	f1bb 0f16 	cmp.w	fp, #22
 80041ea:	d857      	bhi.n	800429c <_dtoa_r+0x234>
 80041ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80041f0:	4b5a      	ldr	r3, [pc, #360]	; (800435c <_dtoa_r+0x2f4>)
 80041f2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80041f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fa:	f7fc fbdf 	bl	80009bc <__aeabi_dcmplt>
 80041fe:	2800      	cmp	r0, #0
 8004200:	d04e      	beq.n	80042a0 <_dtoa_r+0x238>
 8004202:	2300      	movs	r3, #0
 8004204:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004208:	930f      	str	r3, [sp, #60]	; 0x3c
 800420a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800420c:	1b1b      	subs	r3, r3, r4
 800420e:	1e5a      	subs	r2, r3, #1
 8004210:	bf46      	itte	mi
 8004212:	f1c3 0901 	rsbmi	r9, r3, #1
 8004216:	2300      	movmi	r3, #0
 8004218:	f04f 0900 	movpl.w	r9, #0
 800421c:	9209      	str	r2, [sp, #36]	; 0x24
 800421e:	bf48      	it	mi
 8004220:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004222:	f1bb 0f00 	cmp.w	fp, #0
 8004226:	db3d      	blt.n	80042a4 <_dtoa_r+0x23c>
 8004228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800422a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800422e:	445b      	add	r3, fp
 8004230:	9309      	str	r3, [sp, #36]	; 0x24
 8004232:	2300      	movs	r3, #0
 8004234:	930a      	str	r3, [sp, #40]	; 0x28
 8004236:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004238:	2b09      	cmp	r3, #9
 800423a:	d867      	bhi.n	800430c <_dtoa_r+0x2a4>
 800423c:	2b05      	cmp	r3, #5
 800423e:	bfc4      	itt	gt
 8004240:	3b04      	subgt	r3, #4
 8004242:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004244:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004246:	bfc8      	it	gt
 8004248:	2400      	movgt	r4, #0
 800424a:	f1a3 0302 	sub.w	r3, r3, #2
 800424e:	bfd8      	it	le
 8004250:	2401      	movle	r4, #1
 8004252:	2b03      	cmp	r3, #3
 8004254:	f200 8086 	bhi.w	8004364 <_dtoa_r+0x2fc>
 8004258:	e8df f003 	tbb	[pc, r3]
 800425c:	5637392c 	.word	0x5637392c
 8004260:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004264:	441c      	add	r4, r3
 8004266:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800426a:	2b20      	cmp	r3, #32
 800426c:	bfc1      	itttt	gt
 800426e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004272:	fa09 f903 	lslgt.w	r9, r9, r3
 8004276:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800427a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800427e:	bfd6      	itet	le
 8004280:	f1c3 0320 	rsble	r3, r3, #32
 8004284:	ea49 0003 	orrgt.w	r0, r9, r3
 8004288:	fa06 f003 	lslle.w	r0, r6, r3
 800428c:	f7fc f8aa 	bl	80003e4 <__aeabi_ui2d>
 8004290:	2201      	movs	r2, #1
 8004292:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004296:	3c01      	subs	r4, #1
 8004298:	9213      	str	r2, [sp, #76]	; 0x4c
 800429a:	e76f      	b.n	800417c <_dtoa_r+0x114>
 800429c:	2301      	movs	r3, #1
 800429e:	e7b3      	b.n	8004208 <_dtoa_r+0x1a0>
 80042a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80042a2:	e7b2      	b.n	800420a <_dtoa_r+0x1a2>
 80042a4:	f1cb 0300 	rsb	r3, fp, #0
 80042a8:	930a      	str	r3, [sp, #40]	; 0x28
 80042aa:	2300      	movs	r3, #0
 80042ac:	eba9 090b 	sub.w	r9, r9, fp
 80042b0:	930e      	str	r3, [sp, #56]	; 0x38
 80042b2:	e7c0      	b.n	8004236 <_dtoa_r+0x1ce>
 80042b4:	2300      	movs	r3, #0
 80042b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80042b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	dc55      	bgt.n	800436a <_dtoa_r+0x302>
 80042be:	2301      	movs	r3, #1
 80042c0:	461a      	mov	r2, r3
 80042c2:	9306      	str	r3, [sp, #24]
 80042c4:	9308      	str	r3, [sp, #32]
 80042c6:	9223      	str	r2, [sp, #140]	; 0x8c
 80042c8:	e00b      	b.n	80042e2 <_dtoa_r+0x27a>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e7f3      	b.n	80042b6 <_dtoa_r+0x24e>
 80042ce:	2300      	movs	r3, #0
 80042d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80042d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80042d4:	445b      	add	r3, fp
 80042d6:	9306      	str	r3, [sp, #24]
 80042d8:	3301      	adds	r3, #1
 80042da:	2b01      	cmp	r3, #1
 80042dc:	9308      	str	r3, [sp, #32]
 80042de:	bfb8      	it	lt
 80042e0:	2301      	movlt	r3, #1
 80042e2:	2100      	movs	r1, #0
 80042e4:	2204      	movs	r2, #4
 80042e6:	69e8      	ldr	r0, [r5, #28]
 80042e8:	f102 0614 	add.w	r6, r2, #20
 80042ec:	429e      	cmp	r6, r3
 80042ee:	d940      	bls.n	8004372 <_dtoa_r+0x30a>
 80042f0:	6041      	str	r1, [r0, #4]
 80042f2:	4628      	mov	r0, r5
 80042f4:	f000 fd98 	bl	8004e28 <_Balloc>
 80042f8:	9003      	str	r0, [sp, #12]
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d13c      	bne.n	8004378 <_dtoa_r+0x310>
 80042fe:	4602      	mov	r2, r0
 8004300:	f240 11af 	movw	r1, #431	; 0x1af
 8004304:	4b16      	ldr	r3, [pc, #88]	; (8004360 <_dtoa_r+0x2f8>)
 8004306:	e6c3      	b.n	8004090 <_dtoa_r+0x28>
 8004308:	2301      	movs	r3, #1
 800430a:	e7e1      	b.n	80042d0 <_dtoa_r+0x268>
 800430c:	2401      	movs	r4, #1
 800430e:	2300      	movs	r3, #0
 8004310:	940b      	str	r4, [sp, #44]	; 0x2c
 8004312:	9322      	str	r3, [sp, #136]	; 0x88
 8004314:	f04f 33ff 	mov.w	r3, #4294967295
 8004318:	2200      	movs	r2, #0
 800431a:	9306      	str	r3, [sp, #24]
 800431c:	9308      	str	r3, [sp, #32]
 800431e:	2312      	movs	r3, #18
 8004320:	e7d1      	b.n	80042c6 <_dtoa_r+0x25e>
 8004322:	bf00      	nop
 8004324:	f3af 8000 	nop.w
 8004328:	636f4361 	.word	0x636f4361
 800432c:	3fd287a7 	.word	0x3fd287a7
 8004330:	8b60c8b3 	.word	0x8b60c8b3
 8004334:	3fc68a28 	.word	0x3fc68a28
 8004338:	509f79fb 	.word	0x509f79fb
 800433c:	3fd34413 	.word	0x3fd34413
 8004340:	080060e7 	.word	0x080060e7
 8004344:	080060fe 	.word	0x080060fe
 8004348:	7ff00000 	.word	0x7ff00000
 800434c:	080060e3 	.word	0x080060e3
 8004350:	080060da 	.word	0x080060da
 8004354:	080060b7 	.word	0x080060b7
 8004358:	3ff80000 	.word	0x3ff80000
 800435c:	080061e8 	.word	0x080061e8
 8004360:	08006156 	.word	0x08006156
 8004364:	2301      	movs	r3, #1
 8004366:	930b      	str	r3, [sp, #44]	; 0x2c
 8004368:	e7d4      	b.n	8004314 <_dtoa_r+0x2ac>
 800436a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800436c:	9306      	str	r3, [sp, #24]
 800436e:	9308      	str	r3, [sp, #32]
 8004370:	e7b7      	b.n	80042e2 <_dtoa_r+0x27a>
 8004372:	3101      	adds	r1, #1
 8004374:	0052      	lsls	r2, r2, #1
 8004376:	e7b7      	b.n	80042e8 <_dtoa_r+0x280>
 8004378:	69eb      	ldr	r3, [r5, #28]
 800437a:	9a03      	ldr	r2, [sp, #12]
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	9b08      	ldr	r3, [sp, #32]
 8004380:	2b0e      	cmp	r3, #14
 8004382:	f200 80a8 	bhi.w	80044d6 <_dtoa_r+0x46e>
 8004386:	2c00      	cmp	r4, #0
 8004388:	f000 80a5 	beq.w	80044d6 <_dtoa_r+0x46e>
 800438c:	f1bb 0f00 	cmp.w	fp, #0
 8004390:	dd34      	ble.n	80043fc <_dtoa_r+0x394>
 8004392:	4b9a      	ldr	r3, [pc, #616]	; (80045fc <_dtoa_r+0x594>)
 8004394:	f00b 020f 	and.w	r2, fp, #15
 8004398:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800439c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80043a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80043a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80043a8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80043ac:	d016      	beq.n	80043dc <_dtoa_r+0x374>
 80043ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80043b2:	4b93      	ldr	r3, [pc, #588]	; (8004600 <_dtoa_r+0x598>)
 80043b4:	2703      	movs	r7, #3
 80043b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80043ba:	f7fc f9b7 	bl	800072c <__aeabi_ddiv>
 80043be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043c2:	f004 040f 	and.w	r4, r4, #15
 80043c6:	4e8e      	ldr	r6, [pc, #568]	; (8004600 <_dtoa_r+0x598>)
 80043c8:	b954      	cbnz	r4, 80043e0 <_dtoa_r+0x378>
 80043ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80043ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043d2:	f7fc f9ab 	bl	800072c <__aeabi_ddiv>
 80043d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043da:	e029      	b.n	8004430 <_dtoa_r+0x3c8>
 80043dc:	2702      	movs	r7, #2
 80043de:	e7f2      	b.n	80043c6 <_dtoa_r+0x35e>
 80043e0:	07e1      	lsls	r1, r4, #31
 80043e2:	d508      	bpl.n	80043f6 <_dtoa_r+0x38e>
 80043e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80043e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80043ec:	f7fc f874 	bl	80004d8 <__aeabi_dmul>
 80043f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80043f4:	3701      	adds	r7, #1
 80043f6:	1064      	asrs	r4, r4, #1
 80043f8:	3608      	adds	r6, #8
 80043fa:	e7e5      	b.n	80043c8 <_dtoa_r+0x360>
 80043fc:	f000 80a5 	beq.w	800454a <_dtoa_r+0x4e2>
 8004400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004404:	f1cb 0400 	rsb	r4, fp, #0
 8004408:	4b7c      	ldr	r3, [pc, #496]	; (80045fc <_dtoa_r+0x594>)
 800440a:	f004 020f 	and.w	r2, r4, #15
 800440e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004416:	f7fc f85f 	bl	80004d8 <__aeabi_dmul>
 800441a:	2702      	movs	r7, #2
 800441c:	2300      	movs	r3, #0
 800441e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004422:	4e77      	ldr	r6, [pc, #476]	; (8004600 <_dtoa_r+0x598>)
 8004424:	1124      	asrs	r4, r4, #4
 8004426:	2c00      	cmp	r4, #0
 8004428:	f040 8084 	bne.w	8004534 <_dtoa_r+0x4cc>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1d2      	bne.n	80043d6 <_dtoa_r+0x36e>
 8004430:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004434:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004438:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 8087 	beq.w	800454e <_dtoa_r+0x4e6>
 8004440:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004444:	2200      	movs	r2, #0
 8004446:	4b6f      	ldr	r3, [pc, #444]	; (8004604 <_dtoa_r+0x59c>)
 8004448:	f7fc fab8 	bl	80009bc <__aeabi_dcmplt>
 800444c:	2800      	cmp	r0, #0
 800444e:	d07e      	beq.n	800454e <_dtoa_r+0x4e6>
 8004450:	9b08      	ldr	r3, [sp, #32]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d07b      	beq.n	800454e <_dtoa_r+0x4e6>
 8004456:	9b06      	ldr	r3, [sp, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	dd38      	ble.n	80044ce <_dtoa_r+0x466>
 800445c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004460:	2200      	movs	r2, #0
 8004462:	4b69      	ldr	r3, [pc, #420]	; (8004608 <_dtoa_r+0x5a0>)
 8004464:	f7fc f838 	bl	80004d8 <__aeabi_dmul>
 8004468:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800446c:	9c06      	ldr	r4, [sp, #24]
 800446e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8004472:	3701      	adds	r7, #1
 8004474:	4638      	mov	r0, r7
 8004476:	f7fb ffc5 	bl	8000404 <__aeabi_i2d>
 800447a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800447e:	f7fc f82b 	bl	80004d8 <__aeabi_dmul>
 8004482:	2200      	movs	r2, #0
 8004484:	4b61      	ldr	r3, [pc, #388]	; (800460c <_dtoa_r+0x5a4>)
 8004486:	f7fb fe71 	bl	800016c <__adddf3>
 800448a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800448e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004492:	9611      	str	r6, [sp, #68]	; 0x44
 8004494:	2c00      	cmp	r4, #0
 8004496:	d15d      	bne.n	8004554 <_dtoa_r+0x4ec>
 8004498:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800449c:	2200      	movs	r2, #0
 800449e:	4b5c      	ldr	r3, [pc, #368]	; (8004610 <_dtoa_r+0x5a8>)
 80044a0:	f7fb fe62 	bl	8000168 <__aeabi_dsub>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80044ac:	4633      	mov	r3, r6
 80044ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80044b0:	f7fc faa2 	bl	80009f8 <__aeabi_dcmpgt>
 80044b4:	2800      	cmp	r0, #0
 80044b6:	f040 8295 	bne.w	80049e4 <_dtoa_r+0x97c>
 80044ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80044c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80044c4:	f7fc fa7a 	bl	80009bc <__aeabi_dcmplt>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	f040 8289 	bne.w	80049e0 <_dtoa_r+0x978>
 80044ce:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80044d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80044d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f2c0 8151 	blt.w	8004780 <_dtoa_r+0x718>
 80044de:	f1bb 0f0e 	cmp.w	fp, #14
 80044e2:	f300 814d 	bgt.w	8004780 <_dtoa_r+0x718>
 80044e6:	4b45      	ldr	r3, [pc, #276]	; (80045fc <_dtoa_r+0x594>)
 80044e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80044ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044f0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80044f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f280 80da 	bge.w	80046b0 <_dtoa_r+0x648>
 80044fc:	9b08      	ldr	r3, [sp, #32]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f300 80d6 	bgt.w	80046b0 <_dtoa_r+0x648>
 8004504:	f040 826b 	bne.w	80049de <_dtoa_r+0x976>
 8004508:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800450c:	2200      	movs	r2, #0
 800450e:	4b40      	ldr	r3, [pc, #256]	; (8004610 <_dtoa_r+0x5a8>)
 8004510:	f7fb ffe2 	bl	80004d8 <__aeabi_dmul>
 8004514:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004518:	f7fc fa64 	bl	80009e4 <__aeabi_dcmpge>
 800451c:	9c08      	ldr	r4, [sp, #32]
 800451e:	4626      	mov	r6, r4
 8004520:	2800      	cmp	r0, #0
 8004522:	f040 8241 	bne.w	80049a8 <_dtoa_r+0x940>
 8004526:	2331      	movs	r3, #49	; 0x31
 8004528:	9f03      	ldr	r7, [sp, #12]
 800452a:	f10b 0b01 	add.w	fp, fp, #1
 800452e:	f807 3b01 	strb.w	r3, [r7], #1
 8004532:	e23d      	b.n	80049b0 <_dtoa_r+0x948>
 8004534:	07e2      	lsls	r2, r4, #31
 8004536:	d505      	bpl.n	8004544 <_dtoa_r+0x4dc>
 8004538:	e9d6 2300 	ldrd	r2, r3, [r6]
 800453c:	f7fb ffcc 	bl	80004d8 <__aeabi_dmul>
 8004540:	2301      	movs	r3, #1
 8004542:	3701      	adds	r7, #1
 8004544:	1064      	asrs	r4, r4, #1
 8004546:	3608      	adds	r6, #8
 8004548:	e76d      	b.n	8004426 <_dtoa_r+0x3be>
 800454a:	2702      	movs	r7, #2
 800454c:	e770      	b.n	8004430 <_dtoa_r+0x3c8>
 800454e:	46d8      	mov	r8, fp
 8004550:	9c08      	ldr	r4, [sp, #32]
 8004552:	e78f      	b.n	8004474 <_dtoa_r+0x40c>
 8004554:	9903      	ldr	r1, [sp, #12]
 8004556:	4b29      	ldr	r3, [pc, #164]	; (80045fc <_dtoa_r+0x594>)
 8004558:	4421      	add	r1, r4
 800455a:	9112      	str	r1, [sp, #72]	; 0x48
 800455c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800455e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004562:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004566:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800456a:	2900      	cmp	r1, #0
 800456c:	d054      	beq.n	8004618 <_dtoa_r+0x5b0>
 800456e:	2000      	movs	r0, #0
 8004570:	4928      	ldr	r1, [pc, #160]	; (8004614 <_dtoa_r+0x5ac>)
 8004572:	f7fc f8db 	bl	800072c <__aeabi_ddiv>
 8004576:	463b      	mov	r3, r7
 8004578:	4632      	mov	r2, r6
 800457a:	f7fb fdf5 	bl	8000168 <__aeabi_dsub>
 800457e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004582:	9f03      	ldr	r7, [sp, #12]
 8004584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004588:	f7fc fa56 	bl	8000a38 <__aeabi_d2iz>
 800458c:	4604      	mov	r4, r0
 800458e:	f7fb ff39 	bl	8000404 <__aeabi_i2d>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800459a:	f7fb fde5 	bl	8000168 <__aeabi_dsub>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	3430      	adds	r4, #48	; 0x30
 80045a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80045a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80045ac:	f807 4b01 	strb.w	r4, [r7], #1
 80045b0:	f7fc fa04 	bl	80009bc <__aeabi_dcmplt>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d173      	bne.n	80046a0 <_dtoa_r+0x638>
 80045b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045bc:	2000      	movs	r0, #0
 80045be:	4911      	ldr	r1, [pc, #68]	; (8004604 <_dtoa_r+0x59c>)
 80045c0:	f7fb fdd2 	bl	8000168 <__aeabi_dsub>
 80045c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80045c8:	f7fc f9f8 	bl	80009bc <__aeabi_dcmplt>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	f040 80b6 	bne.w	800473e <_dtoa_r+0x6d6>
 80045d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80045d4:	429f      	cmp	r7, r3
 80045d6:	f43f af7a 	beq.w	80044ce <_dtoa_r+0x466>
 80045da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80045de:	2200      	movs	r2, #0
 80045e0:	4b09      	ldr	r3, [pc, #36]	; (8004608 <_dtoa_r+0x5a0>)
 80045e2:	f7fb ff79 	bl	80004d8 <__aeabi_dmul>
 80045e6:	2200      	movs	r2, #0
 80045e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80045ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <_dtoa_r+0x5a0>)
 80045f2:	f7fb ff71 	bl	80004d8 <__aeabi_dmul>
 80045f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045fa:	e7c3      	b.n	8004584 <_dtoa_r+0x51c>
 80045fc:	080061e8 	.word	0x080061e8
 8004600:	080061c0 	.word	0x080061c0
 8004604:	3ff00000 	.word	0x3ff00000
 8004608:	40240000 	.word	0x40240000
 800460c:	401c0000 	.word	0x401c0000
 8004610:	40140000 	.word	0x40140000
 8004614:	3fe00000 	.word	0x3fe00000
 8004618:	4630      	mov	r0, r6
 800461a:	4639      	mov	r1, r7
 800461c:	f7fb ff5c 	bl	80004d8 <__aeabi_dmul>
 8004620:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004622:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004626:	9c03      	ldr	r4, [sp, #12]
 8004628:	9314      	str	r3, [sp, #80]	; 0x50
 800462a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800462e:	f7fc fa03 	bl	8000a38 <__aeabi_d2iz>
 8004632:	9015      	str	r0, [sp, #84]	; 0x54
 8004634:	f7fb fee6 	bl	8000404 <__aeabi_i2d>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004640:	f7fb fd92 	bl	8000168 <__aeabi_dsub>
 8004644:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004646:	4606      	mov	r6, r0
 8004648:	3330      	adds	r3, #48	; 0x30
 800464a:	f804 3b01 	strb.w	r3, [r4], #1
 800464e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004650:	460f      	mov	r7, r1
 8004652:	429c      	cmp	r4, r3
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	d124      	bne.n	80046a4 <_dtoa_r+0x63c>
 800465a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800465e:	4baf      	ldr	r3, [pc, #700]	; (800491c <_dtoa_r+0x8b4>)
 8004660:	f7fb fd84 	bl	800016c <__adddf3>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4630      	mov	r0, r6
 800466a:	4639      	mov	r1, r7
 800466c:	f7fc f9c4 	bl	80009f8 <__aeabi_dcmpgt>
 8004670:	2800      	cmp	r0, #0
 8004672:	d163      	bne.n	800473c <_dtoa_r+0x6d4>
 8004674:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004678:	2000      	movs	r0, #0
 800467a:	49a8      	ldr	r1, [pc, #672]	; (800491c <_dtoa_r+0x8b4>)
 800467c:	f7fb fd74 	bl	8000168 <__aeabi_dsub>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4630      	mov	r0, r6
 8004686:	4639      	mov	r1, r7
 8004688:	f7fc f998 	bl	80009bc <__aeabi_dcmplt>
 800468c:	2800      	cmp	r0, #0
 800468e:	f43f af1e 	beq.w	80044ce <_dtoa_r+0x466>
 8004692:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004694:	1e7b      	subs	r3, r7, #1
 8004696:	9314      	str	r3, [sp, #80]	; 0x50
 8004698:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800469c:	2b30      	cmp	r3, #48	; 0x30
 800469e:	d0f8      	beq.n	8004692 <_dtoa_r+0x62a>
 80046a0:	46c3      	mov	fp, r8
 80046a2:	e03b      	b.n	800471c <_dtoa_r+0x6b4>
 80046a4:	4b9e      	ldr	r3, [pc, #632]	; (8004920 <_dtoa_r+0x8b8>)
 80046a6:	f7fb ff17 	bl	80004d8 <__aeabi_dmul>
 80046aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046ae:	e7bc      	b.n	800462a <_dtoa_r+0x5c2>
 80046b0:	9f03      	ldr	r7, [sp, #12]
 80046b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80046b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80046ba:	4640      	mov	r0, r8
 80046bc:	4649      	mov	r1, r9
 80046be:	f7fc f835 	bl	800072c <__aeabi_ddiv>
 80046c2:	f7fc f9b9 	bl	8000a38 <__aeabi_d2iz>
 80046c6:	4604      	mov	r4, r0
 80046c8:	f7fb fe9c 	bl	8000404 <__aeabi_i2d>
 80046cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80046d0:	f7fb ff02 	bl	80004d8 <__aeabi_dmul>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4640      	mov	r0, r8
 80046da:	4649      	mov	r1, r9
 80046dc:	f7fb fd44 	bl	8000168 <__aeabi_dsub>
 80046e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80046e4:	f807 6b01 	strb.w	r6, [r7], #1
 80046e8:	9e03      	ldr	r6, [sp, #12]
 80046ea:	f8dd c020 	ldr.w	ip, [sp, #32]
 80046ee:	1bbe      	subs	r6, r7, r6
 80046f0:	45b4      	cmp	ip, r6
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	d136      	bne.n	8004766 <_dtoa_r+0x6fe>
 80046f8:	f7fb fd38 	bl	800016c <__adddf3>
 80046fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004700:	4680      	mov	r8, r0
 8004702:	4689      	mov	r9, r1
 8004704:	f7fc f978 	bl	80009f8 <__aeabi_dcmpgt>
 8004708:	bb58      	cbnz	r0, 8004762 <_dtoa_r+0x6fa>
 800470a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800470e:	4640      	mov	r0, r8
 8004710:	4649      	mov	r1, r9
 8004712:	f7fc f949 	bl	80009a8 <__aeabi_dcmpeq>
 8004716:	b108      	cbz	r0, 800471c <_dtoa_r+0x6b4>
 8004718:	07e3      	lsls	r3, r4, #31
 800471a:	d422      	bmi.n	8004762 <_dtoa_r+0x6fa>
 800471c:	4651      	mov	r1, sl
 800471e:	4628      	mov	r0, r5
 8004720:	f000 fbc2 	bl	8004ea8 <_Bfree>
 8004724:	2300      	movs	r3, #0
 8004726:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004728:	703b      	strb	r3, [r7, #0]
 800472a:	f10b 0301 	add.w	r3, fp, #1
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004732:	2b00      	cmp	r3, #0
 8004734:	f43f ace6 	beq.w	8004104 <_dtoa_r+0x9c>
 8004738:	601f      	str	r7, [r3, #0]
 800473a:	e4e3      	b.n	8004104 <_dtoa_r+0x9c>
 800473c:	4627      	mov	r7, r4
 800473e:	463b      	mov	r3, r7
 8004740:	461f      	mov	r7, r3
 8004742:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004746:	2a39      	cmp	r2, #57	; 0x39
 8004748:	d107      	bne.n	800475a <_dtoa_r+0x6f2>
 800474a:	9a03      	ldr	r2, [sp, #12]
 800474c:	429a      	cmp	r2, r3
 800474e:	d1f7      	bne.n	8004740 <_dtoa_r+0x6d8>
 8004750:	2230      	movs	r2, #48	; 0x30
 8004752:	9903      	ldr	r1, [sp, #12]
 8004754:	f108 0801 	add.w	r8, r8, #1
 8004758:	700a      	strb	r2, [r1, #0]
 800475a:	781a      	ldrb	r2, [r3, #0]
 800475c:	3201      	adds	r2, #1
 800475e:	701a      	strb	r2, [r3, #0]
 8004760:	e79e      	b.n	80046a0 <_dtoa_r+0x638>
 8004762:	46d8      	mov	r8, fp
 8004764:	e7eb      	b.n	800473e <_dtoa_r+0x6d6>
 8004766:	2200      	movs	r2, #0
 8004768:	4b6d      	ldr	r3, [pc, #436]	; (8004920 <_dtoa_r+0x8b8>)
 800476a:	f7fb feb5 	bl	80004d8 <__aeabi_dmul>
 800476e:	2200      	movs	r2, #0
 8004770:	2300      	movs	r3, #0
 8004772:	4680      	mov	r8, r0
 8004774:	4689      	mov	r9, r1
 8004776:	f7fc f917 	bl	80009a8 <__aeabi_dcmpeq>
 800477a:	2800      	cmp	r0, #0
 800477c:	d09b      	beq.n	80046b6 <_dtoa_r+0x64e>
 800477e:	e7cd      	b.n	800471c <_dtoa_r+0x6b4>
 8004780:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004782:	2a00      	cmp	r2, #0
 8004784:	f000 80c4 	beq.w	8004910 <_dtoa_r+0x8a8>
 8004788:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800478a:	2a01      	cmp	r2, #1
 800478c:	f300 80a8 	bgt.w	80048e0 <_dtoa_r+0x878>
 8004790:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004792:	2a00      	cmp	r2, #0
 8004794:	f000 80a0 	beq.w	80048d8 <_dtoa_r+0x870>
 8004798:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800479c:	464f      	mov	r7, r9
 800479e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80047a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047a2:	2101      	movs	r1, #1
 80047a4:	441a      	add	r2, r3
 80047a6:	4628      	mov	r0, r5
 80047a8:	4499      	add	r9, r3
 80047aa:	9209      	str	r2, [sp, #36]	; 0x24
 80047ac:	f000 fc32 	bl	8005014 <__i2b>
 80047b0:	4606      	mov	r6, r0
 80047b2:	b15f      	cbz	r7, 80047cc <_dtoa_r+0x764>
 80047b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	dd08      	ble.n	80047cc <_dtoa_r+0x764>
 80047ba:	42bb      	cmp	r3, r7
 80047bc:	bfa8      	it	ge
 80047be:	463b      	movge	r3, r7
 80047c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047c2:	eba9 0903 	sub.w	r9, r9, r3
 80047c6:	1aff      	subs	r7, r7, r3
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	9309      	str	r3, [sp, #36]	; 0x24
 80047cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ce:	b1f3      	cbz	r3, 800480e <_dtoa_r+0x7a6>
 80047d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 80a0 	beq.w	8004918 <_dtoa_r+0x8b0>
 80047d8:	2c00      	cmp	r4, #0
 80047da:	dd10      	ble.n	80047fe <_dtoa_r+0x796>
 80047dc:	4631      	mov	r1, r6
 80047de:	4622      	mov	r2, r4
 80047e0:	4628      	mov	r0, r5
 80047e2:	f000 fcd5 	bl	8005190 <__pow5mult>
 80047e6:	4652      	mov	r2, sl
 80047e8:	4601      	mov	r1, r0
 80047ea:	4606      	mov	r6, r0
 80047ec:	4628      	mov	r0, r5
 80047ee:	f000 fc27 	bl	8005040 <__multiply>
 80047f2:	4680      	mov	r8, r0
 80047f4:	4651      	mov	r1, sl
 80047f6:	4628      	mov	r0, r5
 80047f8:	f000 fb56 	bl	8004ea8 <_Bfree>
 80047fc:	46c2      	mov	sl, r8
 80047fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004800:	1b1a      	subs	r2, r3, r4
 8004802:	d004      	beq.n	800480e <_dtoa_r+0x7a6>
 8004804:	4651      	mov	r1, sl
 8004806:	4628      	mov	r0, r5
 8004808:	f000 fcc2 	bl	8005190 <__pow5mult>
 800480c:	4682      	mov	sl, r0
 800480e:	2101      	movs	r1, #1
 8004810:	4628      	mov	r0, r5
 8004812:	f000 fbff 	bl	8005014 <__i2b>
 8004816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004818:	4604      	mov	r4, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	f340 8082 	ble.w	8004924 <_dtoa_r+0x8bc>
 8004820:	461a      	mov	r2, r3
 8004822:	4601      	mov	r1, r0
 8004824:	4628      	mov	r0, r5
 8004826:	f000 fcb3 	bl	8005190 <__pow5mult>
 800482a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800482c:	4604      	mov	r4, r0
 800482e:	2b01      	cmp	r3, #1
 8004830:	dd7b      	ble.n	800492a <_dtoa_r+0x8c2>
 8004832:	f04f 0800 	mov.w	r8, #0
 8004836:	6923      	ldr	r3, [r4, #16]
 8004838:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800483c:	6918      	ldr	r0, [r3, #16]
 800483e:	f000 fb9b 	bl	8004f78 <__hi0bits>
 8004842:	f1c0 0020 	rsb	r0, r0, #32
 8004846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004848:	4418      	add	r0, r3
 800484a:	f010 001f 	ands.w	r0, r0, #31
 800484e:	f000 8092 	beq.w	8004976 <_dtoa_r+0x90e>
 8004852:	f1c0 0320 	rsb	r3, r0, #32
 8004856:	2b04      	cmp	r3, #4
 8004858:	f340 8085 	ble.w	8004966 <_dtoa_r+0x8fe>
 800485c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800485e:	f1c0 001c 	rsb	r0, r0, #28
 8004862:	4403      	add	r3, r0
 8004864:	4481      	add	r9, r0
 8004866:	4407      	add	r7, r0
 8004868:	9309      	str	r3, [sp, #36]	; 0x24
 800486a:	f1b9 0f00 	cmp.w	r9, #0
 800486e:	dd05      	ble.n	800487c <_dtoa_r+0x814>
 8004870:	4651      	mov	r1, sl
 8004872:	464a      	mov	r2, r9
 8004874:	4628      	mov	r0, r5
 8004876:	f000 fce5 	bl	8005244 <__lshift>
 800487a:	4682      	mov	sl, r0
 800487c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800487e:	2b00      	cmp	r3, #0
 8004880:	dd05      	ble.n	800488e <_dtoa_r+0x826>
 8004882:	4621      	mov	r1, r4
 8004884:	461a      	mov	r2, r3
 8004886:	4628      	mov	r0, r5
 8004888:	f000 fcdc 	bl	8005244 <__lshift>
 800488c:	4604      	mov	r4, r0
 800488e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004890:	2b00      	cmp	r3, #0
 8004892:	d072      	beq.n	800497a <_dtoa_r+0x912>
 8004894:	4621      	mov	r1, r4
 8004896:	4650      	mov	r0, sl
 8004898:	f000 fd40 	bl	800531c <__mcmp>
 800489c:	2800      	cmp	r0, #0
 800489e:	da6c      	bge.n	800497a <_dtoa_r+0x912>
 80048a0:	2300      	movs	r3, #0
 80048a2:	4651      	mov	r1, sl
 80048a4:	220a      	movs	r2, #10
 80048a6:	4628      	mov	r0, r5
 80048a8:	f000 fb20 	bl	8004eec <__multadd>
 80048ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048ae:	4682      	mov	sl, r0
 80048b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 81ac 	beq.w	8004c12 <_dtoa_r+0xbaa>
 80048ba:	2300      	movs	r3, #0
 80048bc:	4631      	mov	r1, r6
 80048be:	220a      	movs	r2, #10
 80048c0:	4628      	mov	r0, r5
 80048c2:	f000 fb13 	bl	8004eec <__multadd>
 80048c6:	9b06      	ldr	r3, [sp, #24]
 80048c8:	4606      	mov	r6, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f300 8093 	bgt.w	80049f6 <_dtoa_r+0x98e>
 80048d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	dc59      	bgt.n	800498a <_dtoa_r+0x922>
 80048d6:	e08e      	b.n	80049f6 <_dtoa_r+0x98e>
 80048d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80048da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80048de:	e75d      	b.n	800479c <_dtoa_r+0x734>
 80048e0:	9b08      	ldr	r3, [sp, #32]
 80048e2:	1e5c      	subs	r4, r3, #1
 80048e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048e6:	42a3      	cmp	r3, r4
 80048e8:	bfbf      	itttt	lt
 80048ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80048ec:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80048ee:	1ae3      	sublt	r3, r4, r3
 80048f0:	18d2      	addlt	r2, r2, r3
 80048f2:	bfa8      	it	ge
 80048f4:	1b1c      	subge	r4, r3, r4
 80048f6:	9b08      	ldr	r3, [sp, #32]
 80048f8:	bfbe      	ittt	lt
 80048fa:	940a      	strlt	r4, [sp, #40]	; 0x28
 80048fc:	920e      	strlt	r2, [sp, #56]	; 0x38
 80048fe:	2400      	movlt	r4, #0
 8004900:	2b00      	cmp	r3, #0
 8004902:	bfb5      	itete	lt
 8004904:	eba9 0703 	sublt.w	r7, r9, r3
 8004908:	464f      	movge	r7, r9
 800490a:	2300      	movlt	r3, #0
 800490c:	9b08      	ldrge	r3, [sp, #32]
 800490e:	e747      	b.n	80047a0 <_dtoa_r+0x738>
 8004910:	464f      	mov	r7, r9
 8004912:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004914:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004916:	e74c      	b.n	80047b2 <_dtoa_r+0x74a>
 8004918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800491a:	e773      	b.n	8004804 <_dtoa_r+0x79c>
 800491c:	3fe00000 	.word	0x3fe00000
 8004920:	40240000 	.word	0x40240000
 8004924:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004926:	2b01      	cmp	r3, #1
 8004928:	dc18      	bgt.n	800495c <_dtoa_r+0x8f4>
 800492a:	9b04      	ldr	r3, [sp, #16]
 800492c:	b9b3      	cbnz	r3, 800495c <_dtoa_r+0x8f4>
 800492e:	9b05      	ldr	r3, [sp, #20]
 8004930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004934:	b993      	cbnz	r3, 800495c <_dtoa_r+0x8f4>
 8004936:	9b05      	ldr	r3, [sp, #20]
 8004938:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800493c:	0d1b      	lsrs	r3, r3, #20
 800493e:	051b      	lsls	r3, r3, #20
 8004940:	b17b      	cbz	r3, 8004962 <_dtoa_r+0x8fa>
 8004942:	f04f 0801 	mov.w	r8, #1
 8004946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004948:	f109 0901 	add.w	r9, r9, #1
 800494c:	3301      	adds	r3, #1
 800494e:	9309      	str	r3, [sp, #36]	; 0x24
 8004950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004952:	2b00      	cmp	r3, #0
 8004954:	f47f af6f 	bne.w	8004836 <_dtoa_r+0x7ce>
 8004958:	2001      	movs	r0, #1
 800495a:	e774      	b.n	8004846 <_dtoa_r+0x7de>
 800495c:	f04f 0800 	mov.w	r8, #0
 8004960:	e7f6      	b.n	8004950 <_dtoa_r+0x8e8>
 8004962:	4698      	mov	r8, r3
 8004964:	e7f4      	b.n	8004950 <_dtoa_r+0x8e8>
 8004966:	d080      	beq.n	800486a <_dtoa_r+0x802>
 8004968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800496a:	331c      	adds	r3, #28
 800496c:	441a      	add	r2, r3
 800496e:	4499      	add	r9, r3
 8004970:	441f      	add	r7, r3
 8004972:	9209      	str	r2, [sp, #36]	; 0x24
 8004974:	e779      	b.n	800486a <_dtoa_r+0x802>
 8004976:	4603      	mov	r3, r0
 8004978:	e7f6      	b.n	8004968 <_dtoa_r+0x900>
 800497a:	9b08      	ldr	r3, [sp, #32]
 800497c:	2b00      	cmp	r3, #0
 800497e:	dc34      	bgt.n	80049ea <_dtoa_r+0x982>
 8004980:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004982:	2b02      	cmp	r3, #2
 8004984:	dd31      	ble.n	80049ea <_dtoa_r+0x982>
 8004986:	9b08      	ldr	r3, [sp, #32]
 8004988:	9306      	str	r3, [sp, #24]
 800498a:	9b06      	ldr	r3, [sp, #24]
 800498c:	b963      	cbnz	r3, 80049a8 <_dtoa_r+0x940>
 800498e:	4621      	mov	r1, r4
 8004990:	2205      	movs	r2, #5
 8004992:	4628      	mov	r0, r5
 8004994:	f000 faaa 	bl	8004eec <__multadd>
 8004998:	4601      	mov	r1, r0
 800499a:	4604      	mov	r4, r0
 800499c:	4650      	mov	r0, sl
 800499e:	f000 fcbd 	bl	800531c <__mcmp>
 80049a2:	2800      	cmp	r0, #0
 80049a4:	f73f adbf 	bgt.w	8004526 <_dtoa_r+0x4be>
 80049a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80049aa:	9f03      	ldr	r7, [sp, #12]
 80049ac:	ea6f 0b03 	mvn.w	fp, r3
 80049b0:	f04f 0800 	mov.w	r8, #0
 80049b4:	4621      	mov	r1, r4
 80049b6:	4628      	mov	r0, r5
 80049b8:	f000 fa76 	bl	8004ea8 <_Bfree>
 80049bc:	2e00      	cmp	r6, #0
 80049be:	f43f aead 	beq.w	800471c <_dtoa_r+0x6b4>
 80049c2:	f1b8 0f00 	cmp.w	r8, #0
 80049c6:	d005      	beq.n	80049d4 <_dtoa_r+0x96c>
 80049c8:	45b0      	cmp	r8, r6
 80049ca:	d003      	beq.n	80049d4 <_dtoa_r+0x96c>
 80049cc:	4641      	mov	r1, r8
 80049ce:	4628      	mov	r0, r5
 80049d0:	f000 fa6a 	bl	8004ea8 <_Bfree>
 80049d4:	4631      	mov	r1, r6
 80049d6:	4628      	mov	r0, r5
 80049d8:	f000 fa66 	bl	8004ea8 <_Bfree>
 80049dc:	e69e      	b.n	800471c <_dtoa_r+0x6b4>
 80049de:	2400      	movs	r4, #0
 80049e0:	4626      	mov	r6, r4
 80049e2:	e7e1      	b.n	80049a8 <_dtoa_r+0x940>
 80049e4:	46c3      	mov	fp, r8
 80049e6:	4626      	mov	r6, r4
 80049e8:	e59d      	b.n	8004526 <_dtoa_r+0x4be>
 80049ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 80c8 	beq.w	8004b82 <_dtoa_r+0xb1a>
 80049f2:	9b08      	ldr	r3, [sp, #32]
 80049f4:	9306      	str	r3, [sp, #24]
 80049f6:	2f00      	cmp	r7, #0
 80049f8:	dd05      	ble.n	8004a06 <_dtoa_r+0x99e>
 80049fa:	4631      	mov	r1, r6
 80049fc:	463a      	mov	r2, r7
 80049fe:	4628      	mov	r0, r5
 8004a00:	f000 fc20 	bl	8005244 <__lshift>
 8004a04:	4606      	mov	r6, r0
 8004a06:	f1b8 0f00 	cmp.w	r8, #0
 8004a0a:	d05b      	beq.n	8004ac4 <_dtoa_r+0xa5c>
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	6871      	ldr	r1, [r6, #4]
 8004a10:	f000 fa0a 	bl	8004e28 <_Balloc>
 8004a14:	4607      	mov	r7, r0
 8004a16:	b928      	cbnz	r0, 8004a24 <_dtoa_r+0x9bc>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004a1e:	4b81      	ldr	r3, [pc, #516]	; (8004c24 <_dtoa_r+0xbbc>)
 8004a20:	f7ff bb36 	b.w	8004090 <_dtoa_r+0x28>
 8004a24:	6932      	ldr	r2, [r6, #16]
 8004a26:	f106 010c 	add.w	r1, r6, #12
 8004a2a:	3202      	adds	r2, #2
 8004a2c:	0092      	lsls	r2, r2, #2
 8004a2e:	300c      	adds	r0, #12
 8004a30:	f000 ff9e 	bl	8005970 <memcpy>
 8004a34:	2201      	movs	r2, #1
 8004a36:	4639      	mov	r1, r7
 8004a38:	4628      	mov	r0, r5
 8004a3a:	f000 fc03 	bl	8005244 <__lshift>
 8004a3e:	46b0      	mov	r8, r6
 8004a40:	4606      	mov	r6, r0
 8004a42:	9b03      	ldr	r3, [sp, #12]
 8004a44:	9a03      	ldr	r2, [sp, #12]
 8004a46:	3301      	adds	r3, #1
 8004a48:	9308      	str	r3, [sp, #32]
 8004a4a:	9b06      	ldr	r3, [sp, #24]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a50:	9b04      	ldr	r3, [sp, #16]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	930a      	str	r3, [sp, #40]	; 0x28
 8004a58:	9b08      	ldr	r3, [sp, #32]
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	4650      	mov	r0, sl
 8004a60:	9304      	str	r3, [sp, #16]
 8004a62:	f7ff fa78 	bl	8003f56 <quorem>
 8004a66:	4641      	mov	r1, r8
 8004a68:	9006      	str	r0, [sp, #24]
 8004a6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004a6e:	4650      	mov	r0, sl
 8004a70:	f000 fc54 	bl	800531c <__mcmp>
 8004a74:	4632      	mov	r2, r6
 8004a76:	9009      	str	r0, [sp, #36]	; 0x24
 8004a78:	4621      	mov	r1, r4
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	f000 fc6a 	bl	8005354 <__mdiff>
 8004a80:	68c2      	ldr	r2, [r0, #12]
 8004a82:	4607      	mov	r7, r0
 8004a84:	bb02      	cbnz	r2, 8004ac8 <_dtoa_r+0xa60>
 8004a86:	4601      	mov	r1, r0
 8004a88:	4650      	mov	r0, sl
 8004a8a:	f000 fc47 	bl	800531c <__mcmp>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	4639      	mov	r1, r7
 8004a92:	4628      	mov	r0, r5
 8004a94:	920c      	str	r2, [sp, #48]	; 0x30
 8004a96:	f000 fa07 	bl	8004ea8 <_Bfree>
 8004a9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a9e:	9f08      	ldr	r7, [sp, #32]
 8004aa0:	ea43 0102 	orr.w	r1, r3, r2
 8004aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aa6:	4319      	orrs	r1, r3
 8004aa8:	d110      	bne.n	8004acc <_dtoa_r+0xa64>
 8004aaa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004aae:	d029      	beq.n	8004b04 <_dtoa_r+0xa9c>
 8004ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	dd02      	ble.n	8004abc <_dtoa_r+0xa54>
 8004ab6:	9b06      	ldr	r3, [sp, #24]
 8004ab8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004abc:	9b04      	ldr	r3, [sp, #16]
 8004abe:	f883 9000 	strb.w	r9, [r3]
 8004ac2:	e777      	b.n	80049b4 <_dtoa_r+0x94c>
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	e7ba      	b.n	8004a3e <_dtoa_r+0x9d6>
 8004ac8:	2201      	movs	r2, #1
 8004aca:	e7e1      	b.n	8004a90 <_dtoa_r+0xa28>
 8004acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	db04      	blt.n	8004adc <_dtoa_r+0xa74>
 8004ad2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	d120      	bne.n	8004b1e <_dtoa_r+0xab6>
 8004adc:	2a00      	cmp	r2, #0
 8004ade:	dded      	ble.n	8004abc <_dtoa_r+0xa54>
 8004ae0:	4651      	mov	r1, sl
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	f000 fbad 	bl	8005244 <__lshift>
 8004aea:	4621      	mov	r1, r4
 8004aec:	4682      	mov	sl, r0
 8004aee:	f000 fc15 	bl	800531c <__mcmp>
 8004af2:	2800      	cmp	r0, #0
 8004af4:	dc03      	bgt.n	8004afe <_dtoa_r+0xa96>
 8004af6:	d1e1      	bne.n	8004abc <_dtoa_r+0xa54>
 8004af8:	f019 0f01 	tst.w	r9, #1
 8004afc:	d0de      	beq.n	8004abc <_dtoa_r+0xa54>
 8004afe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004b02:	d1d8      	bne.n	8004ab6 <_dtoa_r+0xa4e>
 8004b04:	2339      	movs	r3, #57	; 0x39
 8004b06:	9a04      	ldr	r2, [sp, #16]
 8004b08:	7013      	strb	r3, [r2, #0]
 8004b0a:	463b      	mov	r3, r7
 8004b0c:	461f      	mov	r7, r3
 8004b0e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	2a39      	cmp	r2, #57	; 0x39
 8004b16:	d06b      	beq.n	8004bf0 <_dtoa_r+0xb88>
 8004b18:	3201      	adds	r2, #1
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	e74a      	b.n	80049b4 <_dtoa_r+0x94c>
 8004b1e:	2a00      	cmp	r2, #0
 8004b20:	dd07      	ble.n	8004b32 <_dtoa_r+0xaca>
 8004b22:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004b26:	d0ed      	beq.n	8004b04 <_dtoa_r+0xa9c>
 8004b28:	9a04      	ldr	r2, [sp, #16]
 8004b2a:	f109 0301 	add.w	r3, r9, #1
 8004b2e:	7013      	strb	r3, [r2, #0]
 8004b30:	e740      	b.n	80049b4 <_dtoa_r+0x94c>
 8004b32:	9b08      	ldr	r3, [sp, #32]
 8004b34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b36:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d042      	beq.n	8004bc4 <_dtoa_r+0xb5c>
 8004b3e:	4651      	mov	r1, sl
 8004b40:	2300      	movs	r3, #0
 8004b42:	220a      	movs	r2, #10
 8004b44:	4628      	mov	r0, r5
 8004b46:	f000 f9d1 	bl	8004eec <__multadd>
 8004b4a:	45b0      	cmp	r8, r6
 8004b4c:	4682      	mov	sl, r0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	f04f 020a 	mov.w	r2, #10
 8004b56:	4641      	mov	r1, r8
 8004b58:	4628      	mov	r0, r5
 8004b5a:	d107      	bne.n	8004b6c <_dtoa_r+0xb04>
 8004b5c:	f000 f9c6 	bl	8004eec <__multadd>
 8004b60:	4680      	mov	r8, r0
 8004b62:	4606      	mov	r6, r0
 8004b64:	9b08      	ldr	r3, [sp, #32]
 8004b66:	3301      	adds	r3, #1
 8004b68:	9308      	str	r3, [sp, #32]
 8004b6a:	e775      	b.n	8004a58 <_dtoa_r+0x9f0>
 8004b6c:	f000 f9be 	bl	8004eec <__multadd>
 8004b70:	4631      	mov	r1, r6
 8004b72:	4680      	mov	r8, r0
 8004b74:	2300      	movs	r3, #0
 8004b76:	220a      	movs	r2, #10
 8004b78:	4628      	mov	r0, r5
 8004b7a:	f000 f9b7 	bl	8004eec <__multadd>
 8004b7e:	4606      	mov	r6, r0
 8004b80:	e7f0      	b.n	8004b64 <_dtoa_r+0xafc>
 8004b82:	9b08      	ldr	r3, [sp, #32]
 8004b84:	9306      	str	r3, [sp, #24]
 8004b86:	9f03      	ldr	r7, [sp, #12]
 8004b88:	4621      	mov	r1, r4
 8004b8a:	4650      	mov	r0, sl
 8004b8c:	f7ff f9e3 	bl	8003f56 <quorem>
 8004b90:	9b03      	ldr	r3, [sp, #12]
 8004b92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004b96:	f807 9b01 	strb.w	r9, [r7], #1
 8004b9a:	1afa      	subs	r2, r7, r3
 8004b9c:	9b06      	ldr	r3, [sp, #24]
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	dd07      	ble.n	8004bb2 <_dtoa_r+0xb4a>
 8004ba2:	4651      	mov	r1, sl
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	220a      	movs	r2, #10
 8004ba8:	4628      	mov	r0, r5
 8004baa:	f000 f99f 	bl	8004eec <__multadd>
 8004bae:	4682      	mov	sl, r0
 8004bb0:	e7ea      	b.n	8004b88 <_dtoa_r+0xb20>
 8004bb2:	9b06      	ldr	r3, [sp, #24]
 8004bb4:	f04f 0800 	mov.w	r8, #0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bfcc      	ite	gt
 8004bbc:	461f      	movgt	r7, r3
 8004bbe:	2701      	movle	r7, #1
 8004bc0:	9b03      	ldr	r3, [sp, #12]
 8004bc2:	441f      	add	r7, r3
 8004bc4:	4651      	mov	r1, sl
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	4628      	mov	r0, r5
 8004bca:	f000 fb3b 	bl	8005244 <__lshift>
 8004bce:	4621      	mov	r1, r4
 8004bd0:	4682      	mov	sl, r0
 8004bd2:	f000 fba3 	bl	800531c <__mcmp>
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	dc97      	bgt.n	8004b0a <_dtoa_r+0xaa2>
 8004bda:	d102      	bne.n	8004be2 <_dtoa_r+0xb7a>
 8004bdc:	f019 0f01 	tst.w	r9, #1
 8004be0:	d193      	bne.n	8004b0a <_dtoa_r+0xaa2>
 8004be2:	463b      	mov	r3, r7
 8004be4:	461f      	mov	r7, r3
 8004be6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004bea:	2a30      	cmp	r2, #48	; 0x30
 8004bec:	d0fa      	beq.n	8004be4 <_dtoa_r+0xb7c>
 8004bee:	e6e1      	b.n	80049b4 <_dtoa_r+0x94c>
 8004bf0:	9a03      	ldr	r2, [sp, #12]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d18a      	bne.n	8004b0c <_dtoa_r+0xaa4>
 8004bf6:	2331      	movs	r3, #49	; 0x31
 8004bf8:	f10b 0b01 	add.w	fp, fp, #1
 8004bfc:	e797      	b.n	8004b2e <_dtoa_r+0xac6>
 8004bfe:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <_dtoa_r+0xbc0>)
 8004c00:	f7ff ba9f 	b.w	8004142 <_dtoa_r+0xda>
 8004c04:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f47f aa77 	bne.w	80040fa <_dtoa_r+0x92>
 8004c0c:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <_dtoa_r+0xbc4>)
 8004c0e:	f7ff ba98 	b.w	8004142 <_dtoa_r+0xda>
 8004c12:	9b06      	ldr	r3, [sp, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	dcb6      	bgt.n	8004b86 <_dtoa_r+0xb1e>
 8004c18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	f73f aeb5 	bgt.w	800498a <_dtoa_r+0x922>
 8004c20:	e7b1      	b.n	8004b86 <_dtoa_r+0xb1e>
 8004c22:	bf00      	nop
 8004c24:	08006156 	.word	0x08006156
 8004c28:	080060b6 	.word	0x080060b6
 8004c2c:	080060da 	.word	0x080060da

08004c30 <_free_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4605      	mov	r5, r0
 8004c34:	2900      	cmp	r1, #0
 8004c36:	d040      	beq.n	8004cba <_free_r+0x8a>
 8004c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c3c:	1f0c      	subs	r4, r1, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	bfb8      	it	lt
 8004c42:	18e4      	addlt	r4, r4, r3
 8004c44:	f000 f8e4 	bl	8004e10 <__malloc_lock>
 8004c48:	4a1c      	ldr	r2, [pc, #112]	; (8004cbc <_free_r+0x8c>)
 8004c4a:	6813      	ldr	r3, [r2, #0]
 8004c4c:	b933      	cbnz	r3, 8004c5c <_free_r+0x2c>
 8004c4e:	6063      	str	r3, [r4, #4]
 8004c50:	6014      	str	r4, [r2, #0]
 8004c52:	4628      	mov	r0, r5
 8004c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c58:	f000 b8e0 	b.w	8004e1c <__malloc_unlock>
 8004c5c:	42a3      	cmp	r3, r4
 8004c5e:	d908      	bls.n	8004c72 <_free_r+0x42>
 8004c60:	6820      	ldr	r0, [r4, #0]
 8004c62:	1821      	adds	r1, r4, r0
 8004c64:	428b      	cmp	r3, r1
 8004c66:	bf01      	itttt	eq
 8004c68:	6819      	ldreq	r1, [r3, #0]
 8004c6a:	685b      	ldreq	r3, [r3, #4]
 8004c6c:	1809      	addeq	r1, r1, r0
 8004c6e:	6021      	streq	r1, [r4, #0]
 8004c70:	e7ed      	b.n	8004c4e <_free_r+0x1e>
 8004c72:	461a      	mov	r2, r3
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	b10b      	cbz	r3, 8004c7c <_free_r+0x4c>
 8004c78:	42a3      	cmp	r3, r4
 8004c7a:	d9fa      	bls.n	8004c72 <_free_r+0x42>
 8004c7c:	6811      	ldr	r1, [r2, #0]
 8004c7e:	1850      	adds	r0, r2, r1
 8004c80:	42a0      	cmp	r0, r4
 8004c82:	d10b      	bne.n	8004c9c <_free_r+0x6c>
 8004c84:	6820      	ldr	r0, [r4, #0]
 8004c86:	4401      	add	r1, r0
 8004c88:	1850      	adds	r0, r2, r1
 8004c8a:	4283      	cmp	r3, r0
 8004c8c:	6011      	str	r1, [r2, #0]
 8004c8e:	d1e0      	bne.n	8004c52 <_free_r+0x22>
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	4408      	add	r0, r1
 8004c96:	6010      	str	r0, [r2, #0]
 8004c98:	6053      	str	r3, [r2, #4]
 8004c9a:	e7da      	b.n	8004c52 <_free_r+0x22>
 8004c9c:	d902      	bls.n	8004ca4 <_free_r+0x74>
 8004c9e:	230c      	movs	r3, #12
 8004ca0:	602b      	str	r3, [r5, #0]
 8004ca2:	e7d6      	b.n	8004c52 <_free_r+0x22>
 8004ca4:	6820      	ldr	r0, [r4, #0]
 8004ca6:	1821      	adds	r1, r4, r0
 8004ca8:	428b      	cmp	r3, r1
 8004caa:	bf01      	itttt	eq
 8004cac:	6819      	ldreq	r1, [r3, #0]
 8004cae:	685b      	ldreq	r3, [r3, #4]
 8004cb0:	1809      	addeq	r1, r1, r0
 8004cb2:	6021      	streq	r1, [r4, #0]
 8004cb4:	6063      	str	r3, [r4, #4]
 8004cb6:	6054      	str	r4, [r2, #4]
 8004cb8:	e7cb      	b.n	8004c52 <_free_r+0x22>
 8004cba:	bd38      	pop	{r3, r4, r5, pc}
 8004cbc:	20000430 	.word	0x20000430

08004cc0 <malloc>:
 8004cc0:	4b02      	ldr	r3, [pc, #8]	; (8004ccc <malloc+0xc>)
 8004cc2:	4601      	mov	r1, r0
 8004cc4:	6818      	ldr	r0, [r3, #0]
 8004cc6:	f000 b823 	b.w	8004d10 <_malloc_r>
 8004cca:	bf00      	nop
 8004ccc:	20000070 	.word	0x20000070

08004cd0 <sbrk_aligned>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	4e0e      	ldr	r6, [pc, #56]	; (8004d0c <sbrk_aligned+0x3c>)
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	6831      	ldr	r1, [r6, #0]
 8004cd8:	4605      	mov	r5, r0
 8004cda:	b911      	cbnz	r1, 8004ce2 <sbrk_aligned+0x12>
 8004cdc:	f000 fe38 	bl	8005950 <_sbrk_r>
 8004ce0:	6030      	str	r0, [r6, #0]
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	f000 fe33 	bl	8005950 <_sbrk_r>
 8004cea:	1c43      	adds	r3, r0, #1
 8004cec:	d00a      	beq.n	8004d04 <sbrk_aligned+0x34>
 8004cee:	1cc4      	adds	r4, r0, #3
 8004cf0:	f024 0403 	bic.w	r4, r4, #3
 8004cf4:	42a0      	cmp	r0, r4
 8004cf6:	d007      	beq.n	8004d08 <sbrk_aligned+0x38>
 8004cf8:	1a21      	subs	r1, r4, r0
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	f000 fe28 	bl	8005950 <_sbrk_r>
 8004d00:	3001      	adds	r0, #1
 8004d02:	d101      	bne.n	8004d08 <sbrk_aligned+0x38>
 8004d04:	f04f 34ff 	mov.w	r4, #4294967295
 8004d08:	4620      	mov	r0, r4
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}
 8004d0c:	20000434 	.word	0x20000434

08004d10 <_malloc_r>:
 8004d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d14:	1ccd      	adds	r5, r1, #3
 8004d16:	f025 0503 	bic.w	r5, r5, #3
 8004d1a:	3508      	adds	r5, #8
 8004d1c:	2d0c      	cmp	r5, #12
 8004d1e:	bf38      	it	cc
 8004d20:	250c      	movcc	r5, #12
 8004d22:	2d00      	cmp	r5, #0
 8004d24:	4607      	mov	r7, r0
 8004d26:	db01      	blt.n	8004d2c <_malloc_r+0x1c>
 8004d28:	42a9      	cmp	r1, r5
 8004d2a:	d905      	bls.n	8004d38 <_malloc_r+0x28>
 8004d2c:	230c      	movs	r3, #12
 8004d2e:	2600      	movs	r6, #0
 8004d30:	603b      	str	r3, [r7, #0]
 8004d32:	4630      	mov	r0, r6
 8004d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004e0c <_malloc_r+0xfc>
 8004d3c:	f000 f868 	bl	8004e10 <__malloc_lock>
 8004d40:	f8d8 3000 	ldr.w	r3, [r8]
 8004d44:	461c      	mov	r4, r3
 8004d46:	bb5c      	cbnz	r4, 8004da0 <_malloc_r+0x90>
 8004d48:	4629      	mov	r1, r5
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	f7ff ffc0 	bl	8004cd0 <sbrk_aligned>
 8004d50:	1c43      	adds	r3, r0, #1
 8004d52:	4604      	mov	r4, r0
 8004d54:	d155      	bne.n	8004e02 <_malloc_r+0xf2>
 8004d56:	f8d8 4000 	ldr.w	r4, [r8]
 8004d5a:	4626      	mov	r6, r4
 8004d5c:	2e00      	cmp	r6, #0
 8004d5e:	d145      	bne.n	8004dec <_malloc_r+0xdc>
 8004d60:	2c00      	cmp	r4, #0
 8004d62:	d048      	beq.n	8004df6 <_malloc_r+0xe6>
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	4631      	mov	r1, r6
 8004d68:	4638      	mov	r0, r7
 8004d6a:	eb04 0903 	add.w	r9, r4, r3
 8004d6e:	f000 fdef 	bl	8005950 <_sbrk_r>
 8004d72:	4581      	cmp	r9, r0
 8004d74:	d13f      	bne.n	8004df6 <_malloc_r+0xe6>
 8004d76:	6821      	ldr	r1, [r4, #0]
 8004d78:	4638      	mov	r0, r7
 8004d7a:	1a6d      	subs	r5, r5, r1
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	f7ff ffa7 	bl	8004cd0 <sbrk_aligned>
 8004d82:	3001      	adds	r0, #1
 8004d84:	d037      	beq.n	8004df6 <_malloc_r+0xe6>
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	442b      	add	r3, r5
 8004d8a:	6023      	str	r3, [r4, #0]
 8004d8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d038      	beq.n	8004e06 <_malloc_r+0xf6>
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	42a2      	cmp	r2, r4
 8004d98:	d12b      	bne.n	8004df2 <_malloc_r+0xe2>
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	605a      	str	r2, [r3, #4]
 8004d9e:	e00f      	b.n	8004dc0 <_malloc_r+0xb0>
 8004da0:	6822      	ldr	r2, [r4, #0]
 8004da2:	1b52      	subs	r2, r2, r5
 8004da4:	d41f      	bmi.n	8004de6 <_malloc_r+0xd6>
 8004da6:	2a0b      	cmp	r2, #11
 8004da8:	d917      	bls.n	8004dda <_malloc_r+0xca>
 8004daa:	1961      	adds	r1, r4, r5
 8004dac:	42a3      	cmp	r3, r4
 8004dae:	6025      	str	r5, [r4, #0]
 8004db0:	bf18      	it	ne
 8004db2:	6059      	strne	r1, [r3, #4]
 8004db4:	6863      	ldr	r3, [r4, #4]
 8004db6:	bf08      	it	eq
 8004db8:	f8c8 1000 	streq.w	r1, [r8]
 8004dbc:	5162      	str	r2, [r4, r5]
 8004dbe:	604b      	str	r3, [r1, #4]
 8004dc0:	4638      	mov	r0, r7
 8004dc2:	f104 060b 	add.w	r6, r4, #11
 8004dc6:	f000 f829 	bl	8004e1c <__malloc_unlock>
 8004dca:	f026 0607 	bic.w	r6, r6, #7
 8004dce:	1d23      	adds	r3, r4, #4
 8004dd0:	1af2      	subs	r2, r6, r3
 8004dd2:	d0ae      	beq.n	8004d32 <_malloc_r+0x22>
 8004dd4:	1b9b      	subs	r3, r3, r6
 8004dd6:	50a3      	str	r3, [r4, r2]
 8004dd8:	e7ab      	b.n	8004d32 <_malloc_r+0x22>
 8004dda:	42a3      	cmp	r3, r4
 8004ddc:	6862      	ldr	r2, [r4, #4]
 8004dde:	d1dd      	bne.n	8004d9c <_malloc_r+0x8c>
 8004de0:	f8c8 2000 	str.w	r2, [r8]
 8004de4:	e7ec      	b.n	8004dc0 <_malloc_r+0xb0>
 8004de6:	4623      	mov	r3, r4
 8004de8:	6864      	ldr	r4, [r4, #4]
 8004dea:	e7ac      	b.n	8004d46 <_malloc_r+0x36>
 8004dec:	4634      	mov	r4, r6
 8004dee:	6876      	ldr	r6, [r6, #4]
 8004df0:	e7b4      	b.n	8004d5c <_malloc_r+0x4c>
 8004df2:	4613      	mov	r3, r2
 8004df4:	e7cc      	b.n	8004d90 <_malloc_r+0x80>
 8004df6:	230c      	movs	r3, #12
 8004df8:	4638      	mov	r0, r7
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	f000 f80e 	bl	8004e1c <__malloc_unlock>
 8004e00:	e797      	b.n	8004d32 <_malloc_r+0x22>
 8004e02:	6025      	str	r5, [r4, #0]
 8004e04:	e7dc      	b.n	8004dc0 <_malloc_r+0xb0>
 8004e06:	605b      	str	r3, [r3, #4]
 8004e08:	deff      	udf	#255	; 0xff
 8004e0a:	bf00      	nop
 8004e0c:	20000430 	.word	0x20000430

08004e10 <__malloc_lock>:
 8004e10:	4801      	ldr	r0, [pc, #4]	; (8004e18 <__malloc_lock+0x8>)
 8004e12:	f7ff b890 	b.w	8003f36 <__retarget_lock_acquire_recursive>
 8004e16:	bf00      	nop
 8004e18:	2000042c 	.word	0x2000042c

08004e1c <__malloc_unlock>:
 8004e1c:	4801      	ldr	r0, [pc, #4]	; (8004e24 <__malloc_unlock+0x8>)
 8004e1e:	f7ff b88b 	b.w	8003f38 <__retarget_lock_release_recursive>
 8004e22:	bf00      	nop
 8004e24:	2000042c 	.word	0x2000042c

08004e28 <_Balloc>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	69c6      	ldr	r6, [r0, #28]
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	460d      	mov	r5, r1
 8004e30:	b976      	cbnz	r6, 8004e50 <_Balloc+0x28>
 8004e32:	2010      	movs	r0, #16
 8004e34:	f7ff ff44 	bl	8004cc0 <malloc>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	61e0      	str	r0, [r4, #28]
 8004e3c:	b920      	cbnz	r0, 8004e48 <_Balloc+0x20>
 8004e3e:	216b      	movs	r1, #107	; 0x6b
 8004e40:	4b17      	ldr	r3, [pc, #92]	; (8004ea0 <_Balloc+0x78>)
 8004e42:	4818      	ldr	r0, [pc, #96]	; (8004ea4 <_Balloc+0x7c>)
 8004e44:	f000 fda2 	bl	800598c <__assert_func>
 8004e48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e4c:	6006      	str	r6, [r0, #0]
 8004e4e:	60c6      	str	r6, [r0, #12]
 8004e50:	69e6      	ldr	r6, [r4, #28]
 8004e52:	68f3      	ldr	r3, [r6, #12]
 8004e54:	b183      	cbz	r3, 8004e78 <_Balloc+0x50>
 8004e56:	69e3      	ldr	r3, [r4, #28]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004e5e:	b9b8      	cbnz	r0, 8004e90 <_Balloc+0x68>
 8004e60:	2101      	movs	r1, #1
 8004e62:	fa01 f605 	lsl.w	r6, r1, r5
 8004e66:	1d72      	adds	r2, r6, #5
 8004e68:	4620      	mov	r0, r4
 8004e6a:	0092      	lsls	r2, r2, #2
 8004e6c:	f000 fdac 	bl	80059c8 <_calloc_r>
 8004e70:	b160      	cbz	r0, 8004e8c <_Balloc+0x64>
 8004e72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004e76:	e00e      	b.n	8004e96 <_Balloc+0x6e>
 8004e78:	2221      	movs	r2, #33	; 0x21
 8004e7a:	2104      	movs	r1, #4
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f000 fda3 	bl	80059c8 <_calloc_r>
 8004e82:	69e3      	ldr	r3, [r4, #28]
 8004e84:	60f0      	str	r0, [r6, #12]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e4      	bne.n	8004e56 <_Balloc+0x2e>
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	bd70      	pop	{r4, r5, r6, pc}
 8004e90:	6802      	ldr	r2, [r0, #0]
 8004e92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e96:	2300      	movs	r3, #0
 8004e98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e9c:	e7f7      	b.n	8004e8e <_Balloc+0x66>
 8004e9e:	bf00      	nop
 8004ea0:	080060e7 	.word	0x080060e7
 8004ea4:	08006167 	.word	0x08006167

08004ea8 <_Bfree>:
 8004ea8:	b570      	push	{r4, r5, r6, lr}
 8004eaa:	69c6      	ldr	r6, [r0, #28]
 8004eac:	4605      	mov	r5, r0
 8004eae:	460c      	mov	r4, r1
 8004eb0:	b976      	cbnz	r6, 8004ed0 <_Bfree+0x28>
 8004eb2:	2010      	movs	r0, #16
 8004eb4:	f7ff ff04 	bl	8004cc0 <malloc>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	61e8      	str	r0, [r5, #28]
 8004ebc:	b920      	cbnz	r0, 8004ec8 <_Bfree+0x20>
 8004ebe:	218f      	movs	r1, #143	; 0x8f
 8004ec0:	4b08      	ldr	r3, [pc, #32]	; (8004ee4 <_Bfree+0x3c>)
 8004ec2:	4809      	ldr	r0, [pc, #36]	; (8004ee8 <_Bfree+0x40>)
 8004ec4:	f000 fd62 	bl	800598c <__assert_func>
 8004ec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ecc:	6006      	str	r6, [r0, #0]
 8004ece:	60c6      	str	r6, [r0, #12]
 8004ed0:	b13c      	cbz	r4, 8004ee2 <_Bfree+0x3a>
 8004ed2:	69eb      	ldr	r3, [r5, #28]
 8004ed4:	6862      	ldr	r2, [r4, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004edc:	6021      	str	r1, [r4, #0]
 8004ede:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}
 8004ee4:	080060e7 	.word	0x080060e7
 8004ee8:	08006167 	.word	0x08006167

08004eec <__multadd>:
 8004eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef0:	4607      	mov	r7, r0
 8004ef2:	460c      	mov	r4, r1
 8004ef4:	461e      	mov	r6, r3
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	690d      	ldr	r5, [r1, #16]
 8004efa:	f101 0c14 	add.w	ip, r1, #20
 8004efe:	f8dc 3000 	ldr.w	r3, [ip]
 8004f02:	3001      	adds	r0, #1
 8004f04:	b299      	uxth	r1, r3
 8004f06:	fb02 6101 	mla	r1, r2, r1, r6
 8004f0a:	0c1e      	lsrs	r6, r3, #16
 8004f0c:	0c0b      	lsrs	r3, r1, #16
 8004f0e:	fb02 3306 	mla	r3, r2, r6, r3
 8004f12:	b289      	uxth	r1, r1
 8004f14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004f18:	4285      	cmp	r5, r0
 8004f1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004f1e:	f84c 1b04 	str.w	r1, [ip], #4
 8004f22:	dcec      	bgt.n	8004efe <__multadd+0x12>
 8004f24:	b30e      	cbz	r6, 8004f6a <__multadd+0x7e>
 8004f26:	68a3      	ldr	r3, [r4, #8]
 8004f28:	42ab      	cmp	r3, r5
 8004f2a:	dc19      	bgt.n	8004f60 <__multadd+0x74>
 8004f2c:	6861      	ldr	r1, [r4, #4]
 8004f2e:	4638      	mov	r0, r7
 8004f30:	3101      	adds	r1, #1
 8004f32:	f7ff ff79 	bl	8004e28 <_Balloc>
 8004f36:	4680      	mov	r8, r0
 8004f38:	b928      	cbnz	r0, 8004f46 <__multadd+0x5a>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	21ba      	movs	r1, #186	; 0xba
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <__multadd+0x84>)
 8004f40:	480c      	ldr	r0, [pc, #48]	; (8004f74 <__multadd+0x88>)
 8004f42:	f000 fd23 	bl	800598c <__assert_func>
 8004f46:	6922      	ldr	r2, [r4, #16]
 8004f48:	f104 010c 	add.w	r1, r4, #12
 8004f4c:	3202      	adds	r2, #2
 8004f4e:	0092      	lsls	r2, r2, #2
 8004f50:	300c      	adds	r0, #12
 8004f52:	f000 fd0d 	bl	8005970 <memcpy>
 8004f56:	4621      	mov	r1, r4
 8004f58:	4638      	mov	r0, r7
 8004f5a:	f7ff ffa5 	bl	8004ea8 <_Bfree>
 8004f5e:	4644      	mov	r4, r8
 8004f60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004f64:	3501      	adds	r5, #1
 8004f66:	615e      	str	r6, [r3, #20]
 8004f68:	6125      	str	r5, [r4, #16]
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f70:	08006156 	.word	0x08006156
 8004f74:	08006167 	.word	0x08006167

08004f78 <__hi0bits>:
 8004f78:	0c02      	lsrs	r2, r0, #16
 8004f7a:	0412      	lsls	r2, r2, #16
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	b9ca      	cbnz	r2, 8004fb4 <__hi0bits+0x3c>
 8004f80:	0403      	lsls	r3, r0, #16
 8004f82:	2010      	movs	r0, #16
 8004f84:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004f88:	bf04      	itt	eq
 8004f8a:	021b      	lsleq	r3, r3, #8
 8004f8c:	3008      	addeq	r0, #8
 8004f8e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004f92:	bf04      	itt	eq
 8004f94:	011b      	lsleq	r3, r3, #4
 8004f96:	3004      	addeq	r0, #4
 8004f98:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004f9c:	bf04      	itt	eq
 8004f9e:	009b      	lsleq	r3, r3, #2
 8004fa0:	3002      	addeq	r0, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	db05      	blt.n	8004fb2 <__hi0bits+0x3a>
 8004fa6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004faa:	f100 0001 	add.w	r0, r0, #1
 8004fae:	bf08      	it	eq
 8004fb0:	2020      	moveq	r0, #32
 8004fb2:	4770      	bx	lr
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	e7e5      	b.n	8004f84 <__hi0bits+0xc>

08004fb8 <__lo0bits>:
 8004fb8:	6803      	ldr	r3, [r0, #0]
 8004fba:	4602      	mov	r2, r0
 8004fbc:	f013 0007 	ands.w	r0, r3, #7
 8004fc0:	d00b      	beq.n	8004fda <__lo0bits+0x22>
 8004fc2:	07d9      	lsls	r1, r3, #31
 8004fc4:	d421      	bmi.n	800500a <__lo0bits+0x52>
 8004fc6:	0798      	lsls	r0, r3, #30
 8004fc8:	bf49      	itett	mi
 8004fca:	085b      	lsrmi	r3, r3, #1
 8004fcc:	089b      	lsrpl	r3, r3, #2
 8004fce:	2001      	movmi	r0, #1
 8004fd0:	6013      	strmi	r3, [r2, #0]
 8004fd2:	bf5c      	itt	pl
 8004fd4:	2002      	movpl	r0, #2
 8004fd6:	6013      	strpl	r3, [r2, #0]
 8004fd8:	4770      	bx	lr
 8004fda:	b299      	uxth	r1, r3
 8004fdc:	b909      	cbnz	r1, 8004fe2 <__lo0bits+0x2a>
 8004fde:	2010      	movs	r0, #16
 8004fe0:	0c1b      	lsrs	r3, r3, #16
 8004fe2:	b2d9      	uxtb	r1, r3
 8004fe4:	b909      	cbnz	r1, 8004fea <__lo0bits+0x32>
 8004fe6:	3008      	adds	r0, #8
 8004fe8:	0a1b      	lsrs	r3, r3, #8
 8004fea:	0719      	lsls	r1, r3, #28
 8004fec:	bf04      	itt	eq
 8004fee:	091b      	lsreq	r3, r3, #4
 8004ff0:	3004      	addeq	r0, #4
 8004ff2:	0799      	lsls	r1, r3, #30
 8004ff4:	bf04      	itt	eq
 8004ff6:	089b      	lsreq	r3, r3, #2
 8004ff8:	3002      	addeq	r0, #2
 8004ffa:	07d9      	lsls	r1, r3, #31
 8004ffc:	d403      	bmi.n	8005006 <__lo0bits+0x4e>
 8004ffe:	085b      	lsrs	r3, r3, #1
 8005000:	f100 0001 	add.w	r0, r0, #1
 8005004:	d003      	beq.n	800500e <__lo0bits+0x56>
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	4770      	bx	lr
 800500a:	2000      	movs	r0, #0
 800500c:	4770      	bx	lr
 800500e:	2020      	movs	r0, #32
 8005010:	4770      	bx	lr
	...

08005014 <__i2b>:
 8005014:	b510      	push	{r4, lr}
 8005016:	460c      	mov	r4, r1
 8005018:	2101      	movs	r1, #1
 800501a:	f7ff ff05 	bl	8004e28 <_Balloc>
 800501e:	4602      	mov	r2, r0
 8005020:	b928      	cbnz	r0, 800502e <__i2b+0x1a>
 8005022:	f240 1145 	movw	r1, #325	; 0x145
 8005026:	4b04      	ldr	r3, [pc, #16]	; (8005038 <__i2b+0x24>)
 8005028:	4804      	ldr	r0, [pc, #16]	; (800503c <__i2b+0x28>)
 800502a:	f000 fcaf 	bl	800598c <__assert_func>
 800502e:	2301      	movs	r3, #1
 8005030:	6144      	str	r4, [r0, #20]
 8005032:	6103      	str	r3, [r0, #16]
 8005034:	bd10      	pop	{r4, pc}
 8005036:	bf00      	nop
 8005038:	08006156 	.word	0x08006156
 800503c:	08006167 	.word	0x08006167

08005040 <__multiply>:
 8005040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	4691      	mov	r9, r2
 8005046:	690a      	ldr	r2, [r1, #16]
 8005048:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800504c:	460c      	mov	r4, r1
 800504e:	429a      	cmp	r2, r3
 8005050:	bfbe      	ittt	lt
 8005052:	460b      	movlt	r3, r1
 8005054:	464c      	movlt	r4, r9
 8005056:	4699      	movlt	r9, r3
 8005058:	6927      	ldr	r7, [r4, #16]
 800505a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800505e:	68a3      	ldr	r3, [r4, #8]
 8005060:	6861      	ldr	r1, [r4, #4]
 8005062:	eb07 060a 	add.w	r6, r7, sl
 8005066:	42b3      	cmp	r3, r6
 8005068:	b085      	sub	sp, #20
 800506a:	bfb8      	it	lt
 800506c:	3101      	addlt	r1, #1
 800506e:	f7ff fedb 	bl	8004e28 <_Balloc>
 8005072:	b930      	cbnz	r0, 8005082 <__multiply+0x42>
 8005074:	4602      	mov	r2, r0
 8005076:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800507a:	4b43      	ldr	r3, [pc, #268]	; (8005188 <__multiply+0x148>)
 800507c:	4843      	ldr	r0, [pc, #268]	; (800518c <__multiply+0x14c>)
 800507e:	f000 fc85 	bl	800598c <__assert_func>
 8005082:	f100 0514 	add.w	r5, r0, #20
 8005086:	462b      	mov	r3, r5
 8005088:	2200      	movs	r2, #0
 800508a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800508e:	4543      	cmp	r3, r8
 8005090:	d321      	bcc.n	80050d6 <__multiply+0x96>
 8005092:	f104 0314 	add.w	r3, r4, #20
 8005096:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800509a:	f109 0314 	add.w	r3, r9, #20
 800509e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80050a2:	9202      	str	r2, [sp, #8]
 80050a4:	1b3a      	subs	r2, r7, r4
 80050a6:	3a15      	subs	r2, #21
 80050a8:	f022 0203 	bic.w	r2, r2, #3
 80050ac:	3204      	adds	r2, #4
 80050ae:	f104 0115 	add.w	r1, r4, #21
 80050b2:	428f      	cmp	r7, r1
 80050b4:	bf38      	it	cc
 80050b6:	2204      	movcc	r2, #4
 80050b8:	9201      	str	r2, [sp, #4]
 80050ba:	9a02      	ldr	r2, [sp, #8]
 80050bc:	9303      	str	r3, [sp, #12]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d80c      	bhi.n	80050dc <__multiply+0x9c>
 80050c2:	2e00      	cmp	r6, #0
 80050c4:	dd03      	ble.n	80050ce <__multiply+0x8e>
 80050c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d05a      	beq.n	8005184 <__multiply+0x144>
 80050ce:	6106      	str	r6, [r0, #16]
 80050d0:	b005      	add	sp, #20
 80050d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d6:	f843 2b04 	str.w	r2, [r3], #4
 80050da:	e7d8      	b.n	800508e <__multiply+0x4e>
 80050dc:	f8b3 a000 	ldrh.w	sl, [r3]
 80050e0:	f1ba 0f00 	cmp.w	sl, #0
 80050e4:	d023      	beq.n	800512e <__multiply+0xee>
 80050e6:	46a9      	mov	r9, r5
 80050e8:	f04f 0c00 	mov.w	ip, #0
 80050ec:	f104 0e14 	add.w	lr, r4, #20
 80050f0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80050f4:	f8d9 1000 	ldr.w	r1, [r9]
 80050f8:	fa1f fb82 	uxth.w	fp, r2
 80050fc:	b289      	uxth	r1, r1
 80050fe:	fb0a 110b 	mla	r1, sl, fp, r1
 8005102:	4461      	add	r1, ip
 8005104:	f8d9 c000 	ldr.w	ip, [r9]
 8005108:	0c12      	lsrs	r2, r2, #16
 800510a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800510e:	fb0a c202 	mla	r2, sl, r2, ip
 8005112:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005116:	b289      	uxth	r1, r1
 8005118:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800511c:	4577      	cmp	r7, lr
 800511e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005122:	f849 1b04 	str.w	r1, [r9], #4
 8005126:	d8e3      	bhi.n	80050f0 <__multiply+0xb0>
 8005128:	9a01      	ldr	r2, [sp, #4]
 800512a:	f845 c002 	str.w	ip, [r5, r2]
 800512e:	9a03      	ldr	r2, [sp, #12]
 8005130:	3304      	adds	r3, #4
 8005132:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005136:	f1b9 0f00 	cmp.w	r9, #0
 800513a:	d021      	beq.n	8005180 <__multiply+0x140>
 800513c:	46ae      	mov	lr, r5
 800513e:	f04f 0a00 	mov.w	sl, #0
 8005142:	6829      	ldr	r1, [r5, #0]
 8005144:	f104 0c14 	add.w	ip, r4, #20
 8005148:	f8bc b000 	ldrh.w	fp, [ip]
 800514c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005150:	b289      	uxth	r1, r1
 8005152:	fb09 220b 	mla	r2, r9, fp, r2
 8005156:	4452      	add	r2, sl
 8005158:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800515c:	f84e 1b04 	str.w	r1, [lr], #4
 8005160:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005164:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005168:	f8be 1000 	ldrh.w	r1, [lr]
 800516c:	4567      	cmp	r7, ip
 800516e:	fb09 110a 	mla	r1, r9, sl, r1
 8005172:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005176:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800517a:	d8e5      	bhi.n	8005148 <__multiply+0x108>
 800517c:	9a01      	ldr	r2, [sp, #4]
 800517e:	50a9      	str	r1, [r5, r2]
 8005180:	3504      	adds	r5, #4
 8005182:	e79a      	b.n	80050ba <__multiply+0x7a>
 8005184:	3e01      	subs	r6, #1
 8005186:	e79c      	b.n	80050c2 <__multiply+0x82>
 8005188:	08006156 	.word	0x08006156
 800518c:	08006167 	.word	0x08006167

08005190 <__pow5mult>:
 8005190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005194:	4615      	mov	r5, r2
 8005196:	f012 0203 	ands.w	r2, r2, #3
 800519a:	4606      	mov	r6, r0
 800519c:	460f      	mov	r7, r1
 800519e:	d007      	beq.n	80051b0 <__pow5mult+0x20>
 80051a0:	4c25      	ldr	r4, [pc, #148]	; (8005238 <__pow5mult+0xa8>)
 80051a2:	3a01      	subs	r2, #1
 80051a4:	2300      	movs	r3, #0
 80051a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80051aa:	f7ff fe9f 	bl	8004eec <__multadd>
 80051ae:	4607      	mov	r7, r0
 80051b0:	10ad      	asrs	r5, r5, #2
 80051b2:	d03d      	beq.n	8005230 <__pow5mult+0xa0>
 80051b4:	69f4      	ldr	r4, [r6, #28]
 80051b6:	b97c      	cbnz	r4, 80051d8 <__pow5mult+0x48>
 80051b8:	2010      	movs	r0, #16
 80051ba:	f7ff fd81 	bl	8004cc0 <malloc>
 80051be:	4602      	mov	r2, r0
 80051c0:	61f0      	str	r0, [r6, #28]
 80051c2:	b928      	cbnz	r0, 80051d0 <__pow5mult+0x40>
 80051c4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80051c8:	4b1c      	ldr	r3, [pc, #112]	; (800523c <__pow5mult+0xac>)
 80051ca:	481d      	ldr	r0, [pc, #116]	; (8005240 <__pow5mult+0xb0>)
 80051cc:	f000 fbde 	bl	800598c <__assert_func>
 80051d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80051d4:	6004      	str	r4, [r0, #0]
 80051d6:	60c4      	str	r4, [r0, #12]
 80051d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80051dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80051e0:	b94c      	cbnz	r4, 80051f6 <__pow5mult+0x66>
 80051e2:	f240 2171 	movw	r1, #625	; 0x271
 80051e6:	4630      	mov	r0, r6
 80051e8:	f7ff ff14 	bl	8005014 <__i2b>
 80051ec:	2300      	movs	r3, #0
 80051ee:	4604      	mov	r4, r0
 80051f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80051f4:	6003      	str	r3, [r0, #0]
 80051f6:	f04f 0900 	mov.w	r9, #0
 80051fa:	07eb      	lsls	r3, r5, #31
 80051fc:	d50a      	bpl.n	8005214 <__pow5mult+0x84>
 80051fe:	4639      	mov	r1, r7
 8005200:	4622      	mov	r2, r4
 8005202:	4630      	mov	r0, r6
 8005204:	f7ff ff1c 	bl	8005040 <__multiply>
 8005208:	4680      	mov	r8, r0
 800520a:	4639      	mov	r1, r7
 800520c:	4630      	mov	r0, r6
 800520e:	f7ff fe4b 	bl	8004ea8 <_Bfree>
 8005212:	4647      	mov	r7, r8
 8005214:	106d      	asrs	r5, r5, #1
 8005216:	d00b      	beq.n	8005230 <__pow5mult+0xa0>
 8005218:	6820      	ldr	r0, [r4, #0]
 800521a:	b938      	cbnz	r0, 800522c <__pow5mult+0x9c>
 800521c:	4622      	mov	r2, r4
 800521e:	4621      	mov	r1, r4
 8005220:	4630      	mov	r0, r6
 8005222:	f7ff ff0d 	bl	8005040 <__multiply>
 8005226:	6020      	str	r0, [r4, #0]
 8005228:	f8c0 9000 	str.w	r9, [r0]
 800522c:	4604      	mov	r4, r0
 800522e:	e7e4      	b.n	80051fa <__pow5mult+0x6a>
 8005230:	4638      	mov	r0, r7
 8005232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005236:	bf00      	nop
 8005238:	080062b0 	.word	0x080062b0
 800523c:	080060e7 	.word	0x080060e7
 8005240:	08006167 	.word	0x08006167

08005244 <__lshift>:
 8005244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005248:	460c      	mov	r4, r1
 800524a:	4607      	mov	r7, r0
 800524c:	4691      	mov	r9, r2
 800524e:	6923      	ldr	r3, [r4, #16]
 8005250:	6849      	ldr	r1, [r1, #4]
 8005252:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005256:	68a3      	ldr	r3, [r4, #8]
 8005258:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800525c:	f108 0601 	add.w	r6, r8, #1
 8005260:	42b3      	cmp	r3, r6
 8005262:	db0b      	blt.n	800527c <__lshift+0x38>
 8005264:	4638      	mov	r0, r7
 8005266:	f7ff fddf 	bl	8004e28 <_Balloc>
 800526a:	4605      	mov	r5, r0
 800526c:	b948      	cbnz	r0, 8005282 <__lshift+0x3e>
 800526e:	4602      	mov	r2, r0
 8005270:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005274:	4b27      	ldr	r3, [pc, #156]	; (8005314 <__lshift+0xd0>)
 8005276:	4828      	ldr	r0, [pc, #160]	; (8005318 <__lshift+0xd4>)
 8005278:	f000 fb88 	bl	800598c <__assert_func>
 800527c:	3101      	adds	r1, #1
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	e7ee      	b.n	8005260 <__lshift+0x1c>
 8005282:	2300      	movs	r3, #0
 8005284:	f100 0114 	add.w	r1, r0, #20
 8005288:	f100 0210 	add.w	r2, r0, #16
 800528c:	4618      	mov	r0, r3
 800528e:	4553      	cmp	r3, sl
 8005290:	db33      	blt.n	80052fa <__lshift+0xb6>
 8005292:	6920      	ldr	r0, [r4, #16]
 8005294:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005298:	f104 0314 	add.w	r3, r4, #20
 800529c:	f019 091f 	ands.w	r9, r9, #31
 80052a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80052a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80052a8:	d02b      	beq.n	8005302 <__lshift+0xbe>
 80052aa:	468a      	mov	sl, r1
 80052ac:	2200      	movs	r2, #0
 80052ae:	f1c9 0e20 	rsb	lr, r9, #32
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	fa00 f009 	lsl.w	r0, r0, r9
 80052b8:	4310      	orrs	r0, r2
 80052ba:	f84a 0b04 	str.w	r0, [sl], #4
 80052be:	f853 2b04 	ldr.w	r2, [r3], #4
 80052c2:	459c      	cmp	ip, r3
 80052c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80052c8:	d8f3      	bhi.n	80052b2 <__lshift+0x6e>
 80052ca:	ebac 0304 	sub.w	r3, ip, r4
 80052ce:	3b15      	subs	r3, #21
 80052d0:	f023 0303 	bic.w	r3, r3, #3
 80052d4:	3304      	adds	r3, #4
 80052d6:	f104 0015 	add.w	r0, r4, #21
 80052da:	4584      	cmp	ip, r0
 80052dc:	bf38      	it	cc
 80052de:	2304      	movcc	r3, #4
 80052e0:	50ca      	str	r2, [r1, r3]
 80052e2:	b10a      	cbz	r2, 80052e8 <__lshift+0xa4>
 80052e4:	f108 0602 	add.w	r6, r8, #2
 80052e8:	3e01      	subs	r6, #1
 80052ea:	4638      	mov	r0, r7
 80052ec:	4621      	mov	r1, r4
 80052ee:	612e      	str	r6, [r5, #16]
 80052f0:	f7ff fdda 	bl	8004ea8 <_Bfree>
 80052f4:	4628      	mov	r0, r5
 80052f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80052fe:	3301      	adds	r3, #1
 8005300:	e7c5      	b.n	800528e <__lshift+0x4a>
 8005302:	3904      	subs	r1, #4
 8005304:	f853 2b04 	ldr.w	r2, [r3], #4
 8005308:	459c      	cmp	ip, r3
 800530a:	f841 2f04 	str.w	r2, [r1, #4]!
 800530e:	d8f9      	bhi.n	8005304 <__lshift+0xc0>
 8005310:	e7ea      	b.n	80052e8 <__lshift+0xa4>
 8005312:	bf00      	nop
 8005314:	08006156 	.word	0x08006156
 8005318:	08006167 	.word	0x08006167

0800531c <__mcmp>:
 800531c:	4603      	mov	r3, r0
 800531e:	690a      	ldr	r2, [r1, #16]
 8005320:	6900      	ldr	r0, [r0, #16]
 8005322:	b530      	push	{r4, r5, lr}
 8005324:	1a80      	subs	r0, r0, r2
 8005326:	d10d      	bne.n	8005344 <__mcmp+0x28>
 8005328:	3314      	adds	r3, #20
 800532a:	3114      	adds	r1, #20
 800532c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005330:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005334:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005338:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800533c:	4295      	cmp	r5, r2
 800533e:	d002      	beq.n	8005346 <__mcmp+0x2a>
 8005340:	d304      	bcc.n	800534c <__mcmp+0x30>
 8005342:	2001      	movs	r0, #1
 8005344:	bd30      	pop	{r4, r5, pc}
 8005346:	42a3      	cmp	r3, r4
 8005348:	d3f4      	bcc.n	8005334 <__mcmp+0x18>
 800534a:	e7fb      	b.n	8005344 <__mcmp+0x28>
 800534c:	f04f 30ff 	mov.w	r0, #4294967295
 8005350:	e7f8      	b.n	8005344 <__mcmp+0x28>
	...

08005354 <__mdiff>:
 8005354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005358:	460d      	mov	r5, r1
 800535a:	4607      	mov	r7, r0
 800535c:	4611      	mov	r1, r2
 800535e:	4628      	mov	r0, r5
 8005360:	4614      	mov	r4, r2
 8005362:	f7ff ffdb 	bl	800531c <__mcmp>
 8005366:	1e06      	subs	r6, r0, #0
 8005368:	d111      	bne.n	800538e <__mdiff+0x3a>
 800536a:	4631      	mov	r1, r6
 800536c:	4638      	mov	r0, r7
 800536e:	f7ff fd5b 	bl	8004e28 <_Balloc>
 8005372:	4602      	mov	r2, r0
 8005374:	b928      	cbnz	r0, 8005382 <__mdiff+0x2e>
 8005376:	f240 2137 	movw	r1, #567	; 0x237
 800537a:	4b3a      	ldr	r3, [pc, #232]	; (8005464 <__mdiff+0x110>)
 800537c:	483a      	ldr	r0, [pc, #232]	; (8005468 <__mdiff+0x114>)
 800537e:	f000 fb05 	bl	800598c <__assert_func>
 8005382:	2301      	movs	r3, #1
 8005384:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005388:	4610      	mov	r0, r2
 800538a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538e:	bfa4      	itt	ge
 8005390:	4623      	movge	r3, r4
 8005392:	462c      	movge	r4, r5
 8005394:	4638      	mov	r0, r7
 8005396:	6861      	ldr	r1, [r4, #4]
 8005398:	bfa6      	itte	ge
 800539a:	461d      	movge	r5, r3
 800539c:	2600      	movge	r6, #0
 800539e:	2601      	movlt	r6, #1
 80053a0:	f7ff fd42 	bl	8004e28 <_Balloc>
 80053a4:	4602      	mov	r2, r0
 80053a6:	b918      	cbnz	r0, 80053b0 <__mdiff+0x5c>
 80053a8:	f240 2145 	movw	r1, #581	; 0x245
 80053ac:	4b2d      	ldr	r3, [pc, #180]	; (8005464 <__mdiff+0x110>)
 80053ae:	e7e5      	b.n	800537c <__mdiff+0x28>
 80053b0:	f102 0814 	add.w	r8, r2, #20
 80053b4:	46c2      	mov	sl, r8
 80053b6:	f04f 0c00 	mov.w	ip, #0
 80053ba:	6927      	ldr	r7, [r4, #16]
 80053bc:	60c6      	str	r6, [r0, #12]
 80053be:	692e      	ldr	r6, [r5, #16]
 80053c0:	f104 0014 	add.w	r0, r4, #20
 80053c4:	f105 0914 	add.w	r9, r5, #20
 80053c8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80053cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80053d0:	3410      	adds	r4, #16
 80053d2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80053d6:	f859 3b04 	ldr.w	r3, [r9], #4
 80053da:	fa1f f18b 	uxth.w	r1, fp
 80053de:	4461      	add	r1, ip
 80053e0:	fa1f fc83 	uxth.w	ip, r3
 80053e4:	0c1b      	lsrs	r3, r3, #16
 80053e6:	eba1 010c 	sub.w	r1, r1, ip
 80053ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80053ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80053f2:	b289      	uxth	r1, r1
 80053f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80053f8:	454e      	cmp	r6, r9
 80053fa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80053fe:	f84a 1b04 	str.w	r1, [sl], #4
 8005402:	d8e6      	bhi.n	80053d2 <__mdiff+0x7e>
 8005404:	1b73      	subs	r3, r6, r5
 8005406:	3b15      	subs	r3, #21
 8005408:	f023 0303 	bic.w	r3, r3, #3
 800540c:	3515      	adds	r5, #21
 800540e:	3304      	adds	r3, #4
 8005410:	42ae      	cmp	r6, r5
 8005412:	bf38      	it	cc
 8005414:	2304      	movcc	r3, #4
 8005416:	4418      	add	r0, r3
 8005418:	4443      	add	r3, r8
 800541a:	461e      	mov	r6, r3
 800541c:	4605      	mov	r5, r0
 800541e:	4575      	cmp	r5, lr
 8005420:	d30e      	bcc.n	8005440 <__mdiff+0xec>
 8005422:	f10e 0103 	add.w	r1, lr, #3
 8005426:	1a09      	subs	r1, r1, r0
 8005428:	f021 0103 	bic.w	r1, r1, #3
 800542c:	3803      	subs	r0, #3
 800542e:	4586      	cmp	lr, r0
 8005430:	bf38      	it	cc
 8005432:	2100      	movcc	r1, #0
 8005434:	440b      	add	r3, r1
 8005436:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800543a:	b189      	cbz	r1, 8005460 <__mdiff+0x10c>
 800543c:	6117      	str	r7, [r2, #16]
 800543e:	e7a3      	b.n	8005388 <__mdiff+0x34>
 8005440:	f855 8b04 	ldr.w	r8, [r5], #4
 8005444:	fa1f f188 	uxth.w	r1, r8
 8005448:	4461      	add	r1, ip
 800544a:	140c      	asrs	r4, r1, #16
 800544c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005450:	b289      	uxth	r1, r1
 8005452:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005456:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800545a:	f846 1b04 	str.w	r1, [r6], #4
 800545e:	e7de      	b.n	800541e <__mdiff+0xca>
 8005460:	3f01      	subs	r7, #1
 8005462:	e7e8      	b.n	8005436 <__mdiff+0xe2>
 8005464:	08006156 	.word	0x08006156
 8005468:	08006167 	.word	0x08006167

0800546c <__d2b>:
 800546c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800546e:	2101      	movs	r1, #1
 8005470:	4617      	mov	r7, r2
 8005472:	461c      	mov	r4, r3
 8005474:	9e08      	ldr	r6, [sp, #32]
 8005476:	f7ff fcd7 	bl	8004e28 <_Balloc>
 800547a:	4605      	mov	r5, r0
 800547c:	b930      	cbnz	r0, 800548c <__d2b+0x20>
 800547e:	4602      	mov	r2, r0
 8005480:	f240 310f 	movw	r1, #783	; 0x30f
 8005484:	4b22      	ldr	r3, [pc, #136]	; (8005510 <__d2b+0xa4>)
 8005486:	4823      	ldr	r0, [pc, #140]	; (8005514 <__d2b+0xa8>)
 8005488:	f000 fa80 	bl	800598c <__assert_func>
 800548c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005490:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005494:	bb24      	cbnz	r4, 80054e0 <__d2b+0x74>
 8005496:	2f00      	cmp	r7, #0
 8005498:	9301      	str	r3, [sp, #4]
 800549a:	d026      	beq.n	80054ea <__d2b+0x7e>
 800549c:	4668      	mov	r0, sp
 800549e:	9700      	str	r7, [sp, #0]
 80054a0:	f7ff fd8a 	bl	8004fb8 <__lo0bits>
 80054a4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80054a8:	b1e8      	cbz	r0, 80054e6 <__d2b+0x7a>
 80054aa:	f1c0 0320 	rsb	r3, r0, #32
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	430b      	orrs	r3, r1
 80054b4:	40c2      	lsrs	r2, r0
 80054b6:	616b      	str	r3, [r5, #20]
 80054b8:	9201      	str	r2, [sp, #4]
 80054ba:	9b01      	ldr	r3, [sp, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	bf14      	ite	ne
 80054c0:	2102      	movne	r1, #2
 80054c2:	2101      	moveq	r1, #1
 80054c4:	61ab      	str	r3, [r5, #24]
 80054c6:	6129      	str	r1, [r5, #16]
 80054c8:	b1bc      	cbz	r4, 80054fa <__d2b+0x8e>
 80054ca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80054ce:	4404      	add	r4, r0
 80054d0:	6034      	str	r4, [r6, #0]
 80054d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80054d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054d8:	6018      	str	r0, [r3, #0]
 80054da:	4628      	mov	r0, r5
 80054dc:	b003      	add	sp, #12
 80054de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054e4:	e7d7      	b.n	8005496 <__d2b+0x2a>
 80054e6:	6169      	str	r1, [r5, #20]
 80054e8:	e7e7      	b.n	80054ba <__d2b+0x4e>
 80054ea:	a801      	add	r0, sp, #4
 80054ec:	f7ff fd64 	bl	8004fb8 <__lo0bits>
 80054f0:	9b01      	ldr	r3, [sp, #4]
 80054f2:	2101      	movs	r1, #1
 80054f4:	616b      	str	r3, [r5, #20]
 80054f6:	3020      	adds	r0, #32
 80054f8:	e7e5      	b.n	80054c6 <__d2b+0x5a>
 80054fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80054fe:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8005502:	6030      	str	r0, [r6, #0]
 8005504:	6918      	ldr	r0, [r3, #16]
 8005506:	f7ff fd37 	bl	8004f78 <__hi0bits>
 800550a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800550e:	e7e2      	b.n	80054d6 <__d2b+0x6a>
 8005510:	08006156 	.word	0x08006156
 8005514:	08006167 	.word	0x08006167

08005518 <__ssputs_r>:
 8005518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800551c:	461f      	mov	r7, r3
 800551e:	688e      	ldr	r6, [r1, #8]
 8005520:	4682      	mov	sl, r0
 8005522:	42be      	cmp	r6, r7
 8005524:	460c      	mov	r4, r1
 8005526:	4690      	mov	r8, r2
 8005528:	680b      	ldr	r3, [r1, #0]
 800552a:	d82c      	bhi.n	8005586 <__ssputs_r+0x6e>
 800552c:	898a      	ldrh	r2, [r1, #12]
 800552e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005532:	d026      	beq.n	8005582 <__ssputs_r+0x6a>
 8005534:	6965      	ldr	r5, [r4, #20]
 8005536:	6909      	ldr	r1, [r1, #16]
 8005538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800553c:	eba3 0901 	sub.w	r9, r3, r1
 8005540:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005544:	1c7b      	adds	r3, r7, #1
 8005546:	444b      	add	r3, r9
 8005548:	106d      	asrs	r5, r5, #1
 800554a:	429d      	cmp	r5, r3
 800554c:	bf38      	it	cc
 800554e:	461d      	movcc	r5, r3
 8005550:	0553      	lsls	r3, r2, #21
 8005552:	d527      	bpl.n	80055a4 <__ssputs_r+0x8c>
 8005554:	4629      	mov	r1, r5
 8005556:	f7ff fbdb 	bl	8004d10 <_malloc_r>
 800555a:	4606      	mov	r6, r0
 800555c:	b360      	cbz	r0, 80055b8 <__ssputs_r+0xa0>
 800555e:	464a      	mov	r2, r9
 8005560:	6921      	ldr	r1, [r4, #16]
 8005562:	f000 fa05 	bl	8005970 <memcpy>
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800556c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005570:	81a3      	strh	r3, [r4, #12]
 8005572:	6126      	str	r6, [r4, #16]
 8005574:	444e      	add	r6, r9
 8005576:	6026      	str	r6, [r4, #0]
 8005578:	463e      	mov	r6, r7
 800557a:	6165      	str	r5, [r4, #20]
 800557c:	eba5 0509 	sub.w	r5, r5, r9
 8005580:	60a5      	str	r5, [r4, #8]
 8005582:	42be      	cmp	r6, r7
 8005584:	d900      	bls.n	8005588 <__ssputs_r+0x70>
 8005586:	463e      	mov	r6, r7
 8005588:	4632      	mov	r2, r6
 800558a:	4641      	mov	r1, r8
 800558c:	6820      	ldr	r0, [r4, #0]
 800558e:	f000 f9c5 	bl	800591c <memmove>
 8005592:	2000      	movs	r0, #0
 8005594:	68a3      	ldr	r3, [r4, #8]
 8005596:	1b9b      	subs	r3, r3, r6
 8005598:	60a3      	str	r3, [r4, #8]
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	4433      	add	r3, r6
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a4:	462a      	mov	r2, r5
 80055a6:	f000 fa35 	bl	8005a14 <_realloc_r>
 80055aa:	4606      	mov	r6, r0
 80055ac:	2800      	cmp	r0, #0
 80055ae:	d1e0      	bne.n	8005572 <__ssputs_r+0x5a>
 80055b0:	4650      	mov	r0, sl
 80055b2:	6921      	ldr	r1, [r4, #16]
 80055b4:	f7ff fb3c 	bl	8004c30 <_free_r>
 80055b8:	230c      	movs	r3, #12
 80055ba:	f8ca 3000 	str.w	r3, [sl]
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	f04f 30ff 	mov.w	r0, #4294967295
 80055c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055c8:	81a3      	strh	r3, [r4, #12]
 80055ca:	e7e9      	b.n	80055a0 <__ssputs_r+0x88>

080055cc <_svfiprintf_r>:
 80055cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d0:	4698      	mov	r8, r3
 80055d2:	898b      	ldrh	r3, [r1, #12]
 80055d4:	4607      	mov	r7, r0
 80055d6:	061b      	lsls	r3, r3, #24
 80055d8:	460d      	mov	r5, r1
 80055da:	4614      	mov	r4, r2
 80055dc:	b09d      	sub	sp, #116	; 0x74
 80055de:	d50e      	bpl.n	80055fe <_svfiprintf_r+0x32>
 80055e0:	690b      	ldr	r3, [r1, #16]
 80055e2:	b963      	cbnz	r3, 80055fe <_svfiprintf_r+0x32>
 80055e4:	2140      	movs	r1, #64	; 0x40
 80055e6:	f7ff fb93 	bl	8004d10 <_malloc_r>
 80055ea:	6028      	str	r0, [r5, #0]
 80055ec:	6128      	str	r0, [r5, #16]
 80055ee:	b920      	cbnz	r0, 80055fa <_svfiprintf_r+0x2e>
 80055f0:	230c      	movs	r3, #12
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	f04f 30ff 	mov.w	r0, #4294967295
 80055f8:	e0d0      	b.n	800579c <_svfiprintf_r+0x1d0>
 80055fa:	2340      	movs	r3, #64	; 0x40
 80055fc:	616b      	str	r3, [r5, #20]
 80055fe:	2300      	movs	r3, #0
 8005600:	9309      	str	r3, [sp, #36]	; 0x24
 8005602:	2320      	movs	r3, #32
 8005604:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005608:	2330      	movs	r3, #48	; 0x30
 800560a:	f04f 0901 	mov.w	r9, #1
 800560e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005612:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80057b4 <_svfiprintf_r+0x1e8>
 8005616:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800561a:	4623      	mov	r3, r4
 800561c:	469a      	mov	sl, r3
 800561e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005622:	b10a      	cbz	r2, 8005628 <_svfiprintf_r+0x5c>
 8005624:	2a25      	cmp	r2, #37	; 0x25
 8005626:	d1f9      	bne.n	800561c <_svfiprintf_r+0x50>
 8005628:	ebba 0b04 	subs.w	fp, sl, r4
 800562c:	d00b      	beq.n	8005646 <_svfiprintf_r+0x7a>
 800562e:	465b      	mov	r3, fp
 8005630:	4622      	mov	r2, r4
 8005632:	4629      	mov	r1, r5
 8005634:	4638      	mov	r0, r7
 8005636:	f7ff ff6f 	bl	8005518 <__ssputs_r>
 800563a:	3001      	adds	r0, #1
 800563c:	f000 80a9 	beq.w	8005792 <_svfiprintf_r+0x1c6>
 8005640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005642:	445a      	add	r2, fp
 8005644:	9209      	str	r2, [sp, #36]	; 0x24
 8005646:	f89a 3000 	ldrb.w	r3, [sl]
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 80a1 	beq.w	8005792 <_svfiprintf_r+0x1c6>
 8005650:	2300      	movs	r3, #0
 8005652:	f04f 32ff 	mov.w	r2, #4294967295
 8005656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800565a:	f10a 0a01 	add.w	sl, sl, #1
 800565e:	9304      	str	r3, [sp, #16]
 8005660:	9307      	str	r3, [sp, #28]
 8005662:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005666:	931a      	str	r3, [sp, #104]	; 0x68
 8005668:	4654      	mov	r4, sl
 800566a:	2205      	movs	r2, #5
 800566c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005670:	4850      	ldr	r0, [pc, #320]	; (80057b4 <_svfiprintf_r+0x1e8>)
 8005672:	f7fe fc62 	bl	8003f3a <memchr>
 8005676:	9a04      	ldr	r2, [sp, #16]
 8005678:	b9d8      	cbnz	r0, 80056b2 <_svfiprintf_r+0xe6>
 800567a:	06d0      	lsls	r0, r2, #27
 800567c:	bf44      	itt	mi
 800567e:	2320      	movmi	r3, #32
 8005680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005684:	0711      	lsls	r1, r2, #28
 8005686:	bf44      	itt	mi
 8005688:	232b      	movmi	r3, #43	; 0x2b
 800568a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800568e:	f89a 3000 	ldrb.w	r3, [sl]
 8005692:	2b2a      	cmp	r3, #42	; 0x2a
 8005694:	d015      	beq.n	80056c2 <_svfiprintf_r+0xf6>
 8005696:	4654      	mov	r4, sl
 8005698:	2000      	movs	r0, #0
 800569a:	f04f 0c0a 	mov.w	ip, #10
 800569e:	9a07      	ldr	r2, [sp, #28]
 80056a0:	4621      	mov	r1, r4
 80056a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056a6:	3b30      	subs	r3, #48	; 0x30
 80056a8:	2b09      	cmp	r3, #9
 80056aa:	d94d      	bls.n	8005748 <_svfiprintf_r+0x17c>
 80056ac:	b1b0      	cbz	r0, 80056dc <_svfiprintf_r+0x110>
 80056ae:	9207      	str	r2, [sp, #28]
 80056b0:	e014      	b.n	80056dc <_svfiprintf_r+0x110>
 80056b2:	eba0 0308 	sub.w	r3, r0, r8
 80056b6:	fa09 f303 	lsl.w	r3, r9, r3
 80056ba:	4313      	orrs	r3, r2
 80056bc:	46a2      	mov	sl, r4
 80056be:	9304      	str	r3, [sp, #16]
 80056c0:	e7d2      	b.n	8005668 <_svfiprintf_r+0x9c>
 80056c2:	9b03      	ldr	r3, [sp, #12]
 80056c4:	1d19      	adds	r1, r3, #4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	9103      	str	r1, [sp, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	bfbb      	ittet	lt
 80056ce:	425b      	neglt	r3, r3
 80056d0:	f042 0202 	orrlt.w	r2, r2, #2
 80056d4:	9307      	strge	r3, [sp, #28]
 80056d6:	9307      	strlt	r3, [sp, #28]
 80056d8:	bfb8      	it	lt
 80056da:	9204      	strlt	r2, [sp, #16]
 80056dc:	7823      	ldrb	r3, [r4, #0]
 80056de:	2b2e      	cmp	r3, #46	; 0x2e
 80056e0:	d10c      	bne.n	80056fc <_svfiprintf_r+0x130>
 80056e2:	7863      	ldrb	r3, [r4, #1]
 80056e4:	2b2a      	cmp	r3, #42	; 0x2a
 80056e6:	d134      	bne.n	8005752 <_svfiprintf_r+0x186>
 80056e8:	9b03      	ldr	r3, [sp, #12]
 80056ea:	3402      	adds	r4, #2
 80056ec:	1d1a      	adds	r2, r3, #4
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	9203      	str	r2, [sp, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bfb8      	it	lt
 80056f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80056fa:	9305      	str	r3, [sp, #20]
 80056fc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80057b8 <_svfiprintf_r+0x1ec>
 8005700:	2203      	movs	r2, #3
 8005702:	4650      	mov	r0, sl
 8005704:	7821      	ldrb	r1, [r4, #0]
 8005706:	f7fe fc18 	bl	8003f3a <memchr>
 800570a:	b138      	cbz	r0, 800571c <_svfiprintf_r+0x150>
 800570c:	2240      	movs	r2, #64	; 0x40
 800570e:	9b04      	ldr	r3, [sp, #16]
 8005710:	eba0 000a 	sub.w	r0, r0, sl
 8005714:	4082      	lsls	r2, r0
 8005716:	4313      	orrs	r3, r2
 8005718:	3401      	adds	r4, #1
 800571a:	9304      	str	r3, [sp, #16]
 800571c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005720:	2206      	movs	r2, #6
 8005722:	4826      	ldr	r0, [pc, #152]	; (80057bc <_svfiprintf_r+0x1f0>)
 8005724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005728:	f7fe fc07 	bl	8003f3a <memchr>
 800572c:	2800      	cmp	r0, #0
 800572e:	d038      	beq.n	80057a2 <_svfiprintf_r+0x1d6>
 8005730:	4b23      	ldr	r3, [pc, #140]	; (80057c0 <_svfiprintf_r+0x1f4>)
 8005732:	bb1b      	cbnz	r3, 800577c <_svfiprintf_r+0x1b0>
 8005734:	9b03      	ldr	r3, [sp, #12]
 8005736:	3307      	adds	r3, #7
 8005738:	f023 0307 	bic.w	r3, r3, #7
 800573c:	3308      	adds	r3, #8
 800573e:	9303      	str	r3, [sp, #12]
 8005740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005742:	4433      	add	r3, r6
 8005744:	9309      	str	r3, [sp, #36]	; 0x24
 8005746:	e768      	b.n	800561a <_svfiprintf_r+0x4e>
 8005748:	460c      	mov	r4, r1
 800574a:	2001      	movs	r0, #1
 800574c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005750:	e7a6      	b.n	80056a0 <_svfiprintf_r+0xd4>
 8005752:	2300      	movs	r3, #0
 8005754:	f04f 0c0a 	mov.w	ip, #10
 8005758:	4619      	mov	r1, r3
 800575a:	3401      	adds	r4, #1
 800575c:	9305      	str	r3, [sp, #20]
 800575e:	4620      	mov	r0, r4
 8005760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005764:	3a30      	subs	r2, #48	; 0x30
 8005766:	2a09      	cmp	r2, #9
 8005768:	d903      	bls.n	8005772 <_svfiprintf_r+0x1a6>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0c6      	beq.n	80056fc <_svfiprintf_r+0x130>
 800576e:	9105      	str	r1, [sp, #20]
 8005770:	e7c4      	b.n	80056fc <_svfiprintf_r+0x130>
 8005772:	4604      	mov	r4, r0
 8005774:	2301      	movs	r3, #1
 8005776:	fb0c 2101 	mla	r1, ip, r1, r2
 800577a:	e7f0      	b.n	800575e <_svfiprintf_r+0x192>
 800577c:	ab03      	add	r3, sp, #12
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	462a      	mov	r2, r5
 8005782:	4638      	mov	r0, r7
 8005784:	4b0f      	ldr	r3, [pc, #60]	; (80057c4 <_svfiprintf_r+0x1f8>)
 8005786:	a904      	add	r1, sp, #16
 8005788:	f7fd fe70 	bl	800346c <_printf_float>
 800578c:	1c42      	adds	r2, r0, #1
 800578e:	4606      	mov	r6, r0
 8005790:	d1d6      	bne.n	8005740 <_svfiprintf_r+0x174>
 8005792:	89ab      	ldrh	r3, [r5, #12]
 8005794:	065b      	lsls	r3, r3, #25
 8005796:	f53f af2d 	bmi.w	80055f4 <_svfiprintf_r+0x28>
 800579a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800579c:	b01d      	add	sp, #116	; 0x74
 800579e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a2:	ab03      	add	r3, sp, #12
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	462a      	mov	r2, r5
 80057a8:	4638      	mov	r0, r7
 80057aa:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <_svfiprintf_r+0x1f8>)
 80057ac:	a904      	add	r1, sp, #16
 80057ae:	f7fe f8fd 	bl	80039ac <_printf_i>
 80057b2:	e7eb      	b.n	800578c <_svfiprintf_r+0x1c0>
 80057b4:	080062bc 	.word	0x080062bc
 80057b8:	080062c2 	.word	0x080062c2
 80057bc:	080062c6 	.word	0x080062c6
 80057c0:	0800346d 	.word	0x0800346d
 80057c4:	08005519 	.word	0x08005519

080057c8 <__sflush_r>:
 80057c8:	898a      	ldrh	r2, [r1, #12]
 80057ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057cc:	4605      	mov	r5, r0
 80057ce:	0710      	lsls	r0, r2, #28
 80057d0:	460c      	mov	r4, r1
 80057d2:	d457      	bmi.n	8005884 <__sflush_r+0xbc>
 80057d4:	684b      	ldr	r3, [r1, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	dc04      	bgt.n	80057e4 <__sflush_r+0x1c>
 80057da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	dc01      	bgt.n	80057e4 <__sflush_r+0x1c>
 80057e0:	2000      	movs	r0, #0
 80057e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057e6:	2e00      	cmp	r6, #0
 80057e8:	d0fa      	beq.n	80057e0 <__sflush_r+0x18>
 80057ea:	2300      	movs	r3, #0
 80057ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057f0:	682f      	ldr	r7, [r5, #0]
 80057f2:	6a21      	ldr	r1, [r4, #32]
 80057f4:	602b      	str	r3, [r5, #0]
 80057f6:	d032      	beq.n	800585e <__sflush_r+0x96>
 80057f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057fa:	89a3      	ldrh	r3, [r4, #12]
 80057fc:	075a      	lsls	r2, r3, #29
 80057fe:	d505      	bpl.n	800580c <__sflush_r+0x44>
 8005800:	6863      	ldr	r3, [r4, #4]
 8005802:	1ac0      	subs	r0, r0, r3
 8005804:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005806:	b10b      	cbz	r3, 800580c <__sflush_r+0x44>
 8005808:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800580a:	1ac0      	subs	r0, r0, r3
 800580c:	2300      	movs	r3, #0
 800580e:	4602      	mov	r2, r0
 8005810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005812:	4628      	mov	r0, r5
 8005814:	6a21      	ldr	r1, [r4, #32]
 8005816:	47b0      	blx	r6
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	89a3      	ldrh	r3, [r4, #12]
 800581c:	d106      	bne.n	800582c <__sflush_r+0x64>
 800581e:	6829      	ldr	r1, [r5, #0]
 8005820:	291d      	cmp	r1, #29
 8005822:	d82b      	bhi.n	800587c <__sflush_r+0xb4>
 8005824:	4a28      	ldr	r2, [pc, #160]	; (80058c8 <__sflush_r+0x100>)
 8005826:	410a      	asrs	r2, r1
 8005828:	07d6      	lsls	r6, r2, #31
 800582a:	d427      	bmi.n	800587c <__sflush_r+0xb4>
 800582c:	2200      	movs	r2, #0
 800582e:	6062      	str	r2, [r4, #4]
 8005830:	6922      	ldr	r2, [r4, #16]
 8005832:	04d9      	lsls	r1, r3, #19
 8005834:	6022      	str	r2, [r4, #0]
 8005836:	d504      	bpl.n	8005842 <__sflush_r+0x7a>
 8005838:	1c42      	adds	r2, r0, #1
 800583a:	d101      	bne.n	8005840 <__sflush_r+0x78>
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	b903      	cbnz	r3, 8005842 <__sflush_r+0x7a>
 8005840:	6560      	str	r0, [r4, #84]	; 0x54
 8005842:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005844:	602f      	str	r7, [r5, #0]
 8005846:	2900      	cmp	r1, #0
 8005848:	d0ca      	beq.n	80057e0 <__sflush_r+0x18>
 800584a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800584e:	4299      	cmp	r1, r3
 8005850:	d002      	beq.n	8005858 <__sflush_r+0x90>
 8005852:	4628      	mov	r0, r5
 8005854:	f7ff f9ec 	bl	8004c30 <_free_r>
 8005858:	2000      	movs	r0, #0
 800585a:	6360      	str	r0, [r4, #52]	; 0x34
 800585c:	e7c1      	b.n	80057e2 <__sflush_r+0x1a>
 800585e:	2301      	movs	r3, #1
 8005860:	4628      	mov	r0, r5
 8005862:	47b0      	blx	r6
 8005864:	1c41      	adds	r1, r0, #1
 8005866:	d1c8      	bne.n	80057fa <__sflush_r+0x32>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0c5      	beq.n	80057fa <__sflush_r+0x32>
 800586e:	2b1d      	cmp	r3, #29
 8005870:	d001      	beq.n	8005876 <__sflush_r+0xae>
 8005872:	2b16      	cmp	r3, #22
 8005874:	d101      	bne.n	800587a <__sflush_r+0xb2>
 8005876:	602f      	str	r7, [r5, #0]
 8005878:	e7b2      	b.n	80057e0 <__sflush_r+0x18>
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005880:	81a3      	strh	r3, [r4, #12]
 8005882:	e7ae      	b.n	80057e2 <__sflush_r+0x1a>
 8005884:	690f      	ldr	r7, [r1, #16]
 8005886:	2f00      	cmp	r7, #0
 8005888:	d0aa      	beq.n	80057e0 <__sflush_r+0x18>
 800588a:	0793      	lsls	r3, r2, #30
 800588c:	bf18      	it	ne
 800588e:	2300      	movne	r3, #0
 8005890:	680e      	ldr	r6, [r1, #0]
 8005892:	bf08      	it	eq
 8005894:	694b      	ldreq	r3, [r1, #20]
 8005896:	1bf6      	subs	r6, r6, r7
 8005898:	600f      	str	r7, [r1, #0]
 800589a:	608b      	str	r3, [r1, #8]
 800589c:	2e00      	cmp	r6, #0
 800589e:	dd9f      	ble.n	80057e0 <__sflush_r+0x18>
 80058a0:	4633      	mov	r3, r6
 80058a2:	463a      	mov	r2, r7
 80058a4:	4628      	mov	r0, r5
 80058a6:	6a21      	ldr	r1, [r4, #32]
 80058a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80058ac:	47e0      	blx	ip
 80058ae:	2800      	cmp	r0, #0
 80058b0:	dc06      	bgt.n	80058c0 <__sflush_r+0xf8>
 80058b2:	89a3      	ldrh	r3, [r4, #12]
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295
 80058b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058bc:	81a3      	strh	r3, [r4, #12]
 80058be:	e790      	b.n	80057e2 <__sflush_r+0x1a>
 80058c0:	4407      	add	r7, r0
 80058c2:	1a36      	subs	r6, r6, r0
 80058c4:	e7ea      	b.n	800589c <__sflush_r+0xd4>
 80058c6:	bf00      	nop
 80058c8:	dfbffffe 	.word	0xdfbffffe

080058cc <_fflush_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	690b      	ldr	r3, [r1, #16]
 80058d0:	4605      	mov	r5, r0
 80058d2:	460c      	mov	r4, r1
 80058d4:	b913      	cbnz	r3, 80058dc <_fflush_r+0x10>
 80058d6:	2500      	movs	r5, #0
 80058d8:	4628      	mov	r0, r5
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	b118      	cbz	r0, 80058e6 <_fflush_r+0x1a>
 80058de:	6a03      	ldr	r3, [r0, #32]
 80058e0:	b90b      	cbnz	r3, 80058e6 <_fflush_r+0x1a>
 80058e2:	f7fe fa11 	bl	8003d08 <__sinit>
 80058e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0f3      	beq.n	80058d6 <_fflush_r+0xa>
 80058ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058f0:	07d0      	lsls	r0, r2, #31
 80058f2:	d404      	bmi.n	80058fe <_fflush_r+0x32>
 80058f4:	0599      	lsls	r1, r3, #22
 80058f6:	d402      	bmi.n	80058fe <_fflush_r+0x32>
 80058f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058fa:	f7fe fb1c 	bl	8003f36 <__retarget_lock_acquire_recursive>
 80058fe:	4628      	mov	r0, r5
 8005900:	4621      	mov	r1, r4
 8005902:	f7ff ff61 	bl	80057c8 <__sflush_r>
 8005906:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005908:	4605      	mov	r5, r0
 800590a:	07da      	lsls	r2, r3, #31
 800590c:	d4e4      	bmi.n	80058d8 <_fflush_r+0xc>
 800590e:	89a3      	ldrh	r3, [r4, #12]
 8005910:	059b      	lsls	r3, r3, #22
 8005912:	d4e1      	bmi.n	80058d8 <_fflush_r+0xc>
 8005914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005916:	f7fe fb0f 	bl	8003f38 <__retarget_lock_release_recursive>
 800591a:	e7dd      	b.n	80058d8 <_fflush_r+0xc>

0800591c <memmove>:
 800591c:	4288      	cmp	r0, r1
 800591e:	b510      	push	{r4, lr}
 8005920:	eb01 0402 	add.w	r4, r1, r2
 8005924:	d902      	bls.n	800592c <memmove+0x10>
 8005926:	4284      	cmp	r4, r0
 8005928:	4623      	mov	r3, r4
 800592a:	d807      	bhi.n	800593c <memmove+0x20>
 800592c:	1e43      	subs	r3, r0, #1
 800592e:	42a1      	cmp	r1, r4
 8005930:	d008      	beq.n	8005944 <memmove+0x28>
 8005932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005936:	f803 2f01 	strb.w	r2, [r3, #1]!
 800593a:	e7f8      	b.n	800592e <memmove+0x12>
 800593c:	4601      	mov	r1, r0
 800593e:	4402      	add	r2, r0
 8005940:	428a      	cmp	r2, r1
 8005942:	d100      	bne.n	8005946 <memmove+0x2a>
 8005944:	bd10      	pop	{r4, pc}
 8005946:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800594a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800594e:	e7f7      	b.n	8005940 <memmove+0x24>

08005950 <_sbrk_r>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	2300      	movs	r3, #0
 8005954:	4d05      	ldr	r5, [pc, #20]	; (800596c <_sbrk_r+0x1c>)
 8005956:	4604      	mov	r4, r0
 8005958:	4608      	mov	r0, r1
 800595a:	602b      	str	r3, [r5, #0]
 800595c:	f7fb fe2a 	bl	80015b4 <_sbrk>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_sbrk_r+0x1a>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	b103      	cbz	r3, 800596a <_sbrk_r+0x1a>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	20000428 	.word	0x20000428

08005970 <memcpy>:
 8005970:	440a      	add	r2, r1
 8005972:	4291      	cmp	r1, r2
 8005974:	f100 33ff 	add.w	r3, r0, #4294967295
 8005978:	d100      	bne.n	800597c <memcpy+0xc>
 800597a:	4770      	bx	lr
 800597c:	b510      	push	{r4, lr}
 800597e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005982:	4291      	cmp	r1, r2
 8005984:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005988:	d1f9      	bne.n	800597e <memcpy+0xe>
 800598a:	bd10      	pop	{r4, pc}

0800598c <__assert_func>:
 800598c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800598e:	4614      	mov	r4, r2
 8005990:	461a      	mov	r2, r3
 8005992:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <__assert_func+0x2c>)
 8005994:	4605      	mov	r5, r0
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68d8      	ldr	r0, [r3, #12]
 800599a:	b14c      	cbz	r4, 80059b0 <__assert_func+0x24>
 800599c:	4b07      	ldr	r3, [pc, #28]	; (80059bc <__assert_func+0x30>)
 800599e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80059a2:	9100      	str	r1, [sp, #0]
 80059a4:	462b      	mov	r3, r5
 80059a6:	4906      	ldr	r1, [pc, #24]	; (80059c0 <__assert_func+0x34>)
 80059a8:	f000 f870 	bl	8005a8c <fiprintf>
 80059ac:	f000 f880 	bl	8005ab0 <abort>
 80059b0:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <__assert_func+0x38>)
 80059b2:	461c      	mov	r4, r3
 80059b4:	e7f3      	b.n	800599e <__assert_func+0x12>
 80059b6:	bf00      	nop
 80059b8:	20000070 	.word	0x20000070
 80059bc:	080062d7 	.word	0x080062d7
 80059c0:	080062e4 	.word	0x080062e4
 80059c4:	08006312 	.word	0x08006312

080059c8 <_calloc_r>:
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	fba1 5402 	umull	r5, r4, r1, r2
 80059ce:	b934      	cbnz	r4, 80059de <_calloc_r+0x16>
 80059d0:	4629      	mov	r1, r5
 80059d2:	f7ff f99d 	bl	8004d10 <_malloc_r>
 80059d6:	4606      	mov	r6, r0
 80059d8:	b928      	cbnz	r0, 80059e6 <_calloc_r+0x1e>
 80059da:	4630      	mov	r0, r6
 80059dc:	bd70      	pop	{r4, r5, r6, pc}
 80059de:	220c      	movs	r2, #12
 80059e0:	2600      	movs	r6, #0
 80059e2:	6002      	str	r2, [r0, #0]
 80059e4:	e7f9      	b.n	80059da <_calloc_r+0x12>
 80059e6:	462a      	mov	r2, r5
 80059e8:	4621      	mov	r1, r4
 80059ea:	f7fe fa26 	bl	8003e3a <memset>
 80059ee:	e7f4      	b.n	80059da <_calloc_r+0x12>

080059f0 <__ascii_mbtowc>:
 80059f0:	b082      	sub	sp, #8
 80059f2:	b901      	cbnz	r1, 80059f6 <__ascii_mbtowc+0x6>
 80059f4:	a901      	add	r1, sp, #4
 80059f6:	b142      	cbz	r2, 8005a0a <__ascii_mbtowc+0x1a>
 80059f8:	b14b      	cbz	r3, 8005a0e <__ascii_mbtowc+0x1e>
 80059fa:	7813      	ldrb	r3, [r2, #0]
 80059fc:	600b      	str	r3, [r1, #0]
 80059fe:	7812      	ldrb	r2, [r2, #0]
 8005a00:	1e10      	subs	r0, r2, #0
 8005a02:	bf18      	it	ne
 8005a04:	2001      	movne	r0, #1
 8005a06:	b002      	add	sp, #8
 8005a08:	4770      	bx	lr
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	e7fb      	b.n	8005a06 <__ascii_mbtowc+0x16>
 8005a0e:	f06f 0001 	mvn.w	r0, #1
 8005a12:	e7f8      	b.n	8005a06 <__ascii_mbtowc+0x16>

08005a14 <_realloc_r>:
 8005a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a18:	4680      	mov	r8, r0
 8005a1a:	4614      	mov	r4, r2
 8005a1c:	460e      	mov	r6, r1
 8005a1e:	b921      	cbnz	r1, 8005a2a <_realloc_r+0x16>
 8005a20:	4611      	mov	r1, r2
 8005a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a26:	f7ff b973 	b.w	8004d10 <_malloc_r>
 8005a2a:	b92a      	cbnz	r2, 8005a38 <_realloc_r+0x24>
 8005a2c:	f7ff f900 	bl	8004c30 <_free_r>
 8005a30:	4625      	mov	r5, r4
 8005a32:	4628      	mov	r0, r5
 8005a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a38:	f000 f841 	bl	8005abe <_malloc_usable_size_r>
 8005a3c:	4284      	cmp	r4, r0
 8005a3e:	4607      	mov	r7, r0
 8005a40:	d802      	bhi.n	8005a48 <_realloc_r+0x34>
 8005a42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a46:	d812      	bhi.n	8005a6e <_realloc_r+0x5a>
 8005a48:	4621      	mov	r1, r4
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	f7ff f960 	bl	8004d10 <_malloc_r>
 8005a50:	4605      	mov	r5, r0
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d0ed      	beq.n	8005a32 <_realloc_r+0x1e>
 8005a56:	42bc      	cmp	r4, r7
 8005a58:	4622      	mov	r2, r4
 8005a5a:	4631      	mov	r1, r6
 8005a5c:	bf28      	it	cs
 8005a5e:	463a      	movcs	r2, r7
 8005a60:	f7ff ff86 	bl	8005970 <memcpy>
 8005a64:	4631      	mov	r1, r6
 8005a66:	4640      	mov	r0, r8
 8005a68:	f7ff f8e2 	bl	8004c30 <_free_r>
 8005a6c:	e7e1      	b.n	8005a32 <_realloc_r+0x1e>
 8005a6e:	4635      	mov	r5, r6
 8005a70:	e7df      	b.n	8005a32 <_realloc_r+0x1e>

08005a72 <__ascii_wctomb>:
 8005a72:	4603      	mov	r3, r0
 8005a74:	4608      	mov	r0, r1
 8005a76:	b141      	cbz	r1, 8005a8a <__ascii_wctomb+0x18>
 8005a78:	2aff      	cmp	r2, #255	; 0xff
 8005a7a:	d904      	bls.n	8005a86 <__ascii_wctomb+0x14>
 8005a7c:	228a      	movs	r2, #138	; 0x8a
 8005a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	4770      	bx	lr
 8005a86:	2001      	movs	r0, #1
 8005a88:	700a      	strb	r2, [r1, #0]
 8005a8a:	4770      	bx	lr

08005a8c <fiprintf>:
 8005a8c:	b40e      	push	{r1, r2, r3}
 8005a8e:	b503      	push	{r0, r1, lr}
 8005a90:	4601      	mov	r1, r0
 8005a92:	ab03      	add	r3, sp, #12
 8005a94:	4805      	ldr	r0, [pc, #20]	; (8005aac <fiprintf+0x20>)
 8005a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a9a:	6800      	ldr	r0, [r0, #0]
 8005a9c:	9301      	str	r3, [sp, #4]
 8005a9e:	f000 f83d 	bl	8005b1c <_vfiprintf_r>
 8005aa2:	b002      	add	sp, #8
 8005aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aa8:	b003      	add	sp, #12
 8005aaa:	4770      	bx	lr
 8005aac:	20000070 	.word	0x20000070

08005ab0 <abort>:
 8005ab0:	2006      	movs	r0, #6
 8005ab2:	b508      	push	{r3, lr}
 8005ab4:	f000 fa0a 	bl	8005ecc <raise>
 8005ab8:	2001      	movs	r0, #1
 8005aba:	f7fb fd07 	bl	80014cc <_exit>

08005abe <_malloc_usable_size_r>:
 8005abe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ac2:	1f18      	subs	r0, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bfbc      	itt	lt
 8005ac8:	580b      	ldrlt	r3, [r1, r0]
 8005aca:	18c0      	addlt	r0, r0, r3
 8005acc:	4770      	bx	lr

08005ace <__sfputc_r>:
 8005ace:	6893      	ldr	r3, [r2, #8]
 8005ad0:	b410      	push	{r4}
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	6093      	str	r3, [r2, #8]
 8005ad8:	da07      	bge.n	8005aea <__sfputc_r+0x1c>
 8005ada:	6994      	ldr	r4, [r2, #24]
 8005adc:	42a3      	cmp	r3, r4
 8005ade:	db01      	blt.n	8005ae4 <__sfputc_r+0x16>
 8005ae0:	290a      	cmp	r1, #10
 8005ae2:	d102      	bne.n	8005aea <__sfputc_r+0x1c>
 8005ae4:	bc10      	pop	{r4}
 8005ae6:	f000 b933 	b.w	8005d50 <__swbuf_r>
 8005aea:	6813      	ldr	r3, [r2, #0]
 8005aec:	1c58      	adds	r0, r3, #1
 8005aee:	6010      	str	r0, [r2, #0]
 8005af0:	7019      	strb	r1, [r3, #0]
 8005af2:	4608      	mov	r0, r1
 8005af4:	bc10      	pop	{r4}
 8005af6:	4770      	bx	lr

08005af8 <__sfputs_r>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	4606      	mov	r6, r0
 8005afc:	460f      	mov	r7, r1
 8005afe:	4614      	mov	r4, r2
 8005b00:	18d5      	adds	r5, r2, r3
 8005b02:	42ac      	cmp	r4, r5
 8005b04:	d101      	bne.n	8005b0a <__sfputs_r+0x12>
 8005b06:	2000      	movs	r0, #0
 8005b08:	e007      	b.n	8005b1a <__sfputs_r+0x22>
 8005b0a:	463a      	mov	r2, r7
 8005b0c:	4630      	mov	r0, r6
 8005b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b12:	f7ff ffdc 	bl	8005ace <__sfputc_r>
 8005b16:	1c43      	adds	r3, r0, #1
 8005b18:	d1f3      	bne.n	8005b02 <__sfputs_r+0xa>
 8005b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005b1c <_vfiprintf_r>:
 8005b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b20:	460d      	mov	r5, r1
 8005b22:	4614      	mov	r4, r2
 8005b24:	4698      	mov	r8, r3
 8005b26:	4606      	mov	r6, r0
 8005b28:	b09d      	sub	sp, #116	; 0x74
 8005b2a:	b118      	cbz	r0, 8005b34 <_vfiprintf_r+0x18>
 8005b2c:	6a03      	ldr	r3, [r0, #32]
 8005b2e:	b90b      	cbnz	r3, 8005b34 <_vfiprintf_r+0x18>
 8005b30:	f7fe f8ea 	bl	8003d08 <__sinit>
 8005b34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b36:	07d9      	lsls	r1, r3, #31
 8005b38:	d405      	bmi.n	8005b46 <_vfiprintf_r+0x2a>
 8005b3a:	89ab      	ldrh	r3, [r5, #12]
 8005b3c:	059a      	lsls	r2, r3, #22
 8005b3e:	d402      	bmi.n	8005b46 <_vfiprintf_r+0x2a>
 8005b40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b42:	f7fe f9f8 	bl	8003f36 <__retarget_lock_acquire_recursive>
 8005b46:	89ab      	ldrh	r3, [r5, #12]
 8005b48:	071b      	lsls	r3, r3, #28
 8005b4a:	d501      	bpl.n	8005b50 <_vfiprintf_r+0x34>
 8005b4c:	692b      	ldr	r3, [r5, #16]
 8005b4e:	b99b      	cbnz	r3, 8005b78 <_vfiprintf_r+0x5c>
 8005b50:	4629      	mov	r1, r5
 8005b52:	4630      	mov	r0, r6
 8005b54:	f000 f93a 	bl	8005dcc <__swsetup_r>
 8005b58:	b170      	cbz	r0, 8005b78 <_vfiprintf_r+0x5c>
 8005b5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b5c:	07dc      	lsls	r4, r3, #31
 8005b5e:	d504      	bpl.n	8005b6a <_vfiprintf_r+0x4e>
 8005b60:	f04f 30ff 	mov.w	r0, #4294967295
 8005b64:	b01d      	add	sp, #116	; 0x74
 8005b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b6a:	89ab      	ldrh	r3, [r5, #12]
 8005b6c:	0598      	lsls	r0, r3, #22
 8005b6e:	d4f7      	bmi.n	8005b60 <_vfiprintf_r+0x44>
 8005b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b72:	f7fe f9e1 	bl	8003f38 <__retarget_lock_release_recursive>
 8005b76:	e7f3      	b.n	8005b60 <_vfiprintf_r+0x44>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b7c:	2320      	movs	r3, #32
 8005b7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b82:	2330      	movs	r3, #48	; 0x30
 8005b84:	f04f 0901 	mov.w	r9, #1
 8005b88:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005d3c <_vfiprintf_r+0x220>
 8005b90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b94:	4623      	mov	r3, r4
 8005b96:	469a      	mov	sl, r3
 8005b98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b9c:	b10a      	cbz	r2, 8005ba2 <_vfiprintf_r+0x86>
 8005b9e:	2a25      	cmp	r2, #37	; 0x25
 8005ba0:	d1f9      	bne.n	8005b96 <_vfiprintf_r+0x7a>
 8005ba2:	ebba 0b04 	subs.w	fp, sl, r4
 8005ba6:	d00b      	beq.n	8005bc0 <_vfiprintf_r+0xa4>
 8005ba8:	465b      	mov	r3, fp
 8005baa:	4622      	mov	r2, r4
 8005bac:	4629      	mov	r1, r5
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f7ff ffa2 	bl	8005af8 <__sfputs_r>
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f000 80a9 	beq.w	8005d0c <_vfiprintf_r+0x1f0>
 8005bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bbc:	445a      	add	r2, fp
 8005bbe:	9209      	str	r2, [sp, #36]	; 0x24
 8005bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 80a1 	beq.w	8005d0c <_vfiprintf_r+0x1f0>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bd4:	f10a 0a01 	add.w	sl, sl, #1
 8005bd8:	9304      	str	r3, [sp, #16]
 8005bda:	9307      	str	r3, [sp, #28]
 8005bdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005be0:	931a      	str	r3, [sp, #104]	; 0x68
 8005be2:	4654      	mov	r4, sl
 8005be4:	2205      	movs	r2, #5
 8005be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bea:	4854      	ldr	r0, [pc, #336]	; (8005d3c <_vfiprintf_r+0x220>)
 8005bec:	f7fe f9a5 	bl	8003f3a <memchr>
 8005bf0:	9a04      	ldr	r2, [sp, #16]
 8005bf2:	b9d8      	cbnz	r0, 8005c2c <_vfiprintf_r+0x110>
 8005bf4:	06d1      	lsls	r1, r2, #27
 8005bf6:	bf44      	itt	mi
 8005bf8:	2320      	movmi	r3, #32
 8005bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bfe:	0713      	lsls	r3, r2, #28
 8005c00:	bf44      	itt	mi
 8005c02:	232b      	movmi	r3, #43	; 0x2b
 8005c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c08:	f89a 3000 	ldrb.w	r3, [sl]
 8005c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c0e:	d015      	beq.n	8005c3c <_vfiprintf_r+0x120>
 8005c10:	4654      	mov	r4, sl
 8005c12:	2000      	movs	r0, #0
 8005c14:	f04f 0c0a 	mov.w	ip, #10
 8005c18:	9a07      	ldr	r2, [sp, #28]
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c20:	3b30      	subs	r3, #48	; 0x30
 8005c22:	2b09      	cmp	r3, #9
 8005c24:	d94d      	bls.n	8005cc2 <_vfiprintf_r+0x1a6>
 8005c26:	b1b0      	cbz	r0, 8005c56 <_vfiprintf_r+0x13a>
 8005c28:	9207      	str	r2, [sp, #28]
 8005c2a:	e014      	b.n	8005c56 <_vfiprintf_r+0x13a>
 8005c2c:	eba0 0308 	sub.w	r3, r0, r8
 8005c30:	fa09 f303 	lsl.w	r3, r9, r3
 8005c34:	4313      	orrs	r3, r2
 8005c36:	46a2      	mov	sl, r4
 8005c38:	9304      	str	r3, [sp, #16]
 8005c3a:	e7d2      	b.n	8005be2 <_vfiprintf_r+0xc6>
 8005c3c:	9b03      	ldr	r3, [sp, #12]
 8005c3e:	1d19      	adds	r1, r3, #4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	9103      	str	r1, [sp, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	bfbb      	ittet	lt
 8005c48:	425b      	neglt	r3, r3
 8005c4a:	f042 0202 	orrlt.w	r2, r2, #2
 8005c4e:	9307      	strge	r3, [sp, #28]
 8005c50:	9307      	strlt	r3, [sp, #28]
 8005c52:	bfb8      	it	lt
 8005c54:	9204      	strlt	r2, [sp, #16]
 8005c56:	7823      	ldrb	r3, [r4, #0]
 8005c58:	2b2e      	cmp	r3, #46	; 0x2e
 8005c5a:	d10c      	bne.n	8005c76 <_vfiprintf_r+0x15a>
 8005c5c:	7863      	ldrb	r3, [r4, #1]
 8005c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c60:	d134      	bne.n	8005ccc <_vfiprintf_r+0x1b0>
 8005c62:	9b03      	ldr	r3, [sp, #12]
 8005c64:	3402      	adds	r4, #2
 8005c66:	1d1a      	adds	r2, r3, #4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	9203      	str	r2, [sp, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	bfb8      	it	lt
 8005c70:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c74:	9305      	str	r3, [sp, #20]
 8005c76:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d40 <_vfiprintf_r+0x224>
 8005c7a:	2203      	movs	r2, #3
 8005c7c:	4650      	mov	r0, sl
 8005c7e:	7821      	ldrb	r1, [r4, #0]
 8005c80:	f7fe f95b 	bl	8003f3a <memchr>
 8005c84:	b138      	cbz	r0, 8005c96 <_vfiprintf_r+0x17a>
 8005c86:	2240      	movs	r2, #64	; 0x40
 8005c88:	9b04      	ldr	r3, [sp, #16]
 8005c8a:	eba0 000a 	sub.w	r0, r0, sl
 8005c8e:	4082      	lsls	r2, r0
 8005c90:	4313      	orrs	r3, r2
 8005c92:	3401      	adds	r4, #1
 8005c94:	9304      	str	r3, [sp, #16]
 8005c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c9a:	2206      	movs	r2, #6
 8005c9c:	4829      	ldr	r0, [pc, #164]	; (8005d44 <_vfiprintf_r+0x228>)
 8005c9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ca2:	f7fe f94a 	bl	8003f3a <memchr>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d03f      	beq.n	8005d2a <_vfiprintf_r+0x20e>
 8005caa:	4b27      	ldr	r3, [pc, #156]	; (8005d48 <_vfiprintf_r+0x22c>)
 8005cac:	bb1b      	cbnz	r3, 8005cf6 <_vfiprintf_r+0x1da>
 8005cae:	9b03      	ldr	r3, [sp, #12]
 8005cb0:	3307      	adds	r3, #7
 8005cb2:	f023 0307 	bic.w	r3, r3, #7
 8005cb6:	3308      	adds	r3, #8
 8005cb8:	9303      	str	r3, [sp, #12]
 8005cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cbc:	443b      	add	r3, r7
 8005cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc0:	e768      	b.n	8005b94 <_vfiprintf_r+0x78>
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cca:	e7a6      	b.n	8005c1a <_vfiprintf_r+0xfe>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f04f 0c0a 	mov.w	ip, #10
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	3401      	adds	r4, #1
 8005cd6:	9305      	str	r3, [sp, #20]
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cde:	3a30      	subs	r2, #48	; 0x30
 8005ce0:	2a09      	cmp	r2, #9
 8005ce2:	d903      	bls.n	8005cec <_vfiprintf_r+0x1d0>
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0c6      	beq.n	8005c76 <_vfiprintf_r+0x15a>
 8005ce8:	9105      	str	r1, [sp, #20]
 8005cea:	e7c4      	b.n	8005c76 <_vfiprintf_r+0x15a>
 8005cec:	4604      	mov	r4, r0
 8005cee:	2301      	movs	r3, #1
 8005cf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cf4:	e7f0      	b.n	8005cd8 <_vfiprintf_r+0x1bc>
 8005cf6:	ab03      	add	r3, sp, #12
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	462a      	mov	r2, r5
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	4b13      	ldr	r3, [pc, #76]	; (8005d4c <_vfiprintf_r+0x230>)
 8005d00:	a904      	add	r1, sp, #16
 8005d02:	f7fd fbb3 	bl	800346c <_printf_float>
 8005d06:	4607      	mov	r7, r0
 8005d08:	1c78      	adds	r0, r7, #1
 8005d0a:	d1d6      	bne.n	8005cba <_vfiprintf_r+0x19e>
 8005d0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d0e:	07d9      	lsls	r1, r3, #31
 8005d10:	d405      	bmi.n	8005d1e <_vfiprintf_r+0x202>
 8005d12:	89ab      	ldrh	r3, [r5, #12]
 8005d14:	059a      	lsls	r2, r3, #22
 8005d16:	d402      	bmi.n	8005d1e <_vfiprintf_r+0x202>
 8005d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d1a:	f7fe f90d 	bl	8003f38 <__retarget_lock_release_recursive>
 8005d1e:	89ab      	ldrh	r3, [r5, #12]
 8005d20:	065b      	lsls	r3, r3, #25
 8005d22:	f53f af1d 	bmi.w	8005b60 <_vfiprintf_r+0x44>
 8005d26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d28:	e71c      	b.n	8005b64 <_vfiprintf_r+0x48>
 8005d2a:	ab03      	add	r3, sp, #12
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	462a      	mov	r2, r5
 8005d30:	4630      	mov	r0, r6
 8005d32:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <_vfiprintf_r+0x230>)
 8005d34:	a904      	add	r1, sp, #16
 8005d36:	f7fd fe39 	bl	80039ac <_printf_i>
 8005d3a:	e7e4      	b.n	8005d06 <_vfiprintf_r+0x1ea>
 8005d3c:	080062bc 	.word	0x080062bc
 8005d40:	080062c2 	.word	0x080062c2
 8005d44:	080062c6 	.word	0x080062c6
 8005d48:	0800346d 	.word	0x0800346d
 8005d4c:	08005af9 	.word	0x08005af9

08005d50 <__swbuf_r>:
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	460e      	mov	r6, r1
 8005d54:	4614      	mov	r4, r2
 8005d56:	4605      	mov	r5, r0
 8005d58:	b118      	cbz	r0, 8005d62 <__swbuf_r+0x12>
 8005d5a:	6a03      	ldr	r3, [r0, #32]
 8005d5c:	b90b      	cbnz	r3, 8005d62 <__swbuf_r+0x12>
 8005d5e:	f7fd ffd3 	bl	8003d08 <__sinit>
 8005d62:	69a3      	ldr	r3, [r4, #24]
 8005d64:	60a3      	str	r3, [r4, #8]
 8005d66:	89a3      	ldrh	r3, [r4, #12]
 8005d68:	071a      	lsls	r2, r3, #28
 8005d6a:	d525      	bpl.n	8005db8 <__swbuf_r+0x68>
 8005d6c:	6923      	ldr	r3, [r4, #16]
 8005d6e:	b31b      	cbz	r3, 8005db8 <__swbuf_r+0x68>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	6922      	ldr	r2, [r4, #16]
 8005d74:	b2f6      	uxtb	r6, r6
 8005d76:	1a98      	subs	r0, r3, r2
 8005d78:	6963      	ldr	r3, [r4, #20]
 8005d7a:	4637      	mov	r7, r6
 8005d7c:	4283      	cmp	r3, r0
 8005d7e:	dc04      	bgt.n	8005d8a <__swbuf_r+0x3a>
 8005d80:	4621      	mov	r1, r4
 8005d82:	4628      	mov	r0, r5
 8005d84:	f7ff fda2 	bl	80058cc <_fflush_r>
 8005d88:	b9e0      	cbnz	r0, 8005dc4 <__swbuf_r+0x74>
 8005d8a:	68a3      	ldr	r3, [r4, #8]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	60a3      	str	r3, [r4, #8]
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	6022      	str	r2, [r4, #0]
 8005d96:	701e      	strb	r6, [r3, #0]
 8005d98:	6962      	ldr	r2, [r4, #20]
 8005d9a:	1c43      	adds	r3, r0, #1
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d004      	beq.n	8005daa <__swbuf_r+0x5a>
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	07db      	lsls	r3, r3, #31
 8005da4:	d506      	bpl.n	8005db4 <__swbuf_r+0x64>
 8005da6:	2e0a      	cmp	r6, #10
 8005da8:	d104      	bne.n	8005db4 <__swbuf_r+0x64>
 8005daa:	4621      	mov	r1, r4
 8005dac:	4628      	mov	r0, r5
 8005dae:	f7ff fd8d 	bl	80058cc <_fflush_r>
 8005db2:	b938      	cbnz	r0, 8005dc4 <__swbuf_r+0x74>
 8005db4:	4638      	mov	r0, r7
 8005db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005db8:	4621      	mov	r1, r4
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f000 f806 	bl	8005dcc <__swsetup_r>
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	d0d5      	beq.n	8005d70 <__swbuf_r+0x20>
 8005dc4:	f04f 37ff 	mov.w	r7, #4294967295
 8005dc8:	e7f4      	b.n	8005db4 <__swbuf_r+0x64>
	...

08005dcc <__swsetup_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4b2a      	ldr	r3, [pc, #168]	; (8005e78 <__swsetup_r+0xac>)
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	b118      	cbz	r0, 8005de0 <__swsetup_r+0x14>
 8005dd8:	6a03      	ldr	r3, [r0, #32]
 8005dda:	b90b      	cbnz	r3, 8005de0 <__swsetup_r+0x14>
 8005ddc:	f7fd ff94 	bl	8003d08 <__sinit>
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005de6:	0718      	lsls	r0, r3, #28
 8005de8:	d422      	bmi.n	8005e30 <__swsetup_r+0x64>
 8005dea:	06d9      	lsls	r1, r3, #27
 8005dec:	d407      	bmi.n	8005dfe <__swsetup_r+0x32>
 8005dee:	2309      	movs	r3, #9
 8005df0:	602b      	str	r3, [r5, #0]
 8005df2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005df6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dfa:	81a3      	strh	r3, [r4, #12]
 8005dfc:	e034      	b.n	8005e68 <__swsetup_r+0x9c>
 8005dfe:	0758      	lsls	r0, r3, #29
 8005e00:	d512      	bpl.n	8005e28 <__swsetup_r+0x5c>
 8005e02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e04:	b141      	cbz	r1, 8005e18 <__swsetup_r+0x4c>
 8005e06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e0a:	4299      	cmp	r1, r3
 8005e0c:	d002      	beq.n	8005e14 <__swsetup_r+0x48>
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f7fe ff0e 	bl	8004c30 <_free_r>
 8005e14:	2300      	movs	r3, #0
 8005e16:	6363      	str	r3, [r4, #52]	; 0x34
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e1e:	81a3      	strh	r3, [r4, #12]
 8005e20:	2300      	movs	r3, #0
 8005e22:	6063      	str	r3, [r4, #4]
 8005e24:	6923      	ldr	r3, [r4, #16]
 8005e26:	6023      	str	r3, [r4, #0]
 8005e28:	89a3      	ldrh	r3, [r4, #12]
 8005e2a:	f043 0308 	orr.w	r3, r3, #8
 8005e2e:	81a3      	strh	r3, [r4, #12]
 8005e30:	6923      	ldr	r3, [r4, #16]
 8005e32:	b94b      	cbnz	r3, 8005e48 <__swsetup_r+0x7c>
 8005e34:	89a3      	ldrh	r3, [r4, #12]
 8005e36:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e3e:	d003      	beq.n	8005e48 <__swsetup_r+0x7c>
 8005e40:	4621      	mov	r1, r4
 8005e42:	4628      	mov	r0, r5
 8005e44:	f000 f883 	bl	8005f4e <__smakebuf_r>
 8005e48:	89a0      	ldrh	r0, [r4, #12]
 8005e4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e4e:	f010 0301 	ands.w	r3, r0, #1
 8005e52:	d00a      	beq.n	8005e6a <__swsetup_r+0x9e>
 8005e54:	2300      	movs	r3, #0
 8005e56:	60a3      	str	r3, [r4, #8]
 8005e58:	6963      	ldr	r3, [r4, #20]
 8005e5a:	425b      	negs	r3, r3
 8005e5c:	61a3      	str	r3, [r4, #24]
 8005e5e:	6923      	ldr	r3, [r4, #16]
 8005e60:	b943      	cbnz	r3, 8005e74 <__swsetup_r+0xa8>
 8005e62:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e66:	d1c4      	bne.n	8005df2 <__swsetup_r+0x26>
 8005e68:	bd38      	pop	{r3, r4, r5, pc}
 8005e6a:	0781      	lsls	r1, r0, #30
 8005e6c:	bf58      	it	pl
 8005e6e:	6963      	ldrpl	r3, [r4, #20]
 8005e70:	60a3      	str	r3, [r4, #8]
 8005e72:	e7f4      	b.n	8005e5e <__swsetup_r+0x92>
 8005e74:	2000      	movs	r0, #0
 8005e76:	e7f7      	b.n	8005e68 <__swsetup_r+0x9c>
 8005e78:	20000070 	.word	0x20000070

08005e7c <_raise_r>:
 8005e7c:	291f      	cmp	r1, #31
 8005e7e:	b538      	push	{r3, r4, r5, lr}
 8005e80:	4604      	mov	r4, r0
 8005e82:	460d      	mov	r5, r1
 8005e84:	d904      	bls.n	8005e90 <_raise_r+0x14>
 8005e86:	2316      	movs	r3, #22
 8005e88:	6003      	str	r3, [r0, #0]
 8005e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8e:	bd38      	pop	{r3, r4, r5, pc}
 8005e90:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005e92:	b112      	cbz	r2, 8005e9a <_raise_r+0x1e>
 8005e94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e98:	b94b      	cbnz	r3, 8005eae <_raise_r+0x32>
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f000 f830 	bl	8005f00 <_getpid_r>
 8005ea0:	462a      	mov	r2, r5
 8005ea2:	4601      	mov	r1, r0
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eaa:	f000 b817 	b.w	8005edc <_kill_r>
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d00a      	beq.n	8005ec8 <_raise_r+0x4c>
 8005eb2:	1c59      	adds	r1, r3, #1
 8005eb4:	d103      	bne.n	8005ebe <_raise_r+0x42>
 8005eb6:	2316      	movs	r3, #22
 8005eb8:	6003      	str	r3, [r0, #0]
 8005eba:	2001      	movs	r0, #1
 8005ebc:	e7e7      	b.n	8005e8e <_raise_r+0x12>
 8005ebe:	2400      	movs	r4, #0
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ec6:	4798      	blx	r3
 8005ec8:	2000      	movs	r0, #0
 8005eca:	e7e0      	b.n	8005e8e <_raise_r+0x12>

08005ecc <raise>:
 8005ecc:	4b02      	ldr	r3, [pc, #8]	; (8005ed8 <raise+0xc>)
 8005ece:	4601      	mov	r1, r0
 8005ed0:	6818      	ldr	r0, [r3, #0]
 8005ed2:	f7ff bfd3 	b.w	8005e7c <_raise_r>
 8005ed6:	bf00      	nop
 8005ed8:	20000070 	.word	0x20000070

08005edc <_kill_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	2300      	movs	r3, #0
 8005ee0:	4d06      	ldr	r5, [pc, #24]	; (8005efc <_kill_r+0x20>)
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	602b      	str	r3, [r5, #0]
 8005eea:	f7fb fadf 	bl	80014ac <_kill>
 8005eee:	1c43      	adds	r3, r0, #1
 8005ef0:	d102      	bne.n	8005ef8 <_kill_r+0x1c>
 8005ef2:	682b      	ldr	r3, [r5, #0]
 8005ef4:	b103      	cbz	r3, 8005ef8 <_kill_r+0x1c>
 8005ef6:	6023      	str	r3, [r4, #0]
 8005ef8:	bd38      	pop	{r3, r4, r5, pc}
 8005efa:	bf00      	nop
 8005efc:	20000428 	.word	0x20000428

08005f00 <_getpid_r>:
 8005f00:	f7fb bacd 	b.w	800149e <_getpid>

08005f04 <__swhatbuf_r>:
 8005f04:	b570      	push	{r4, r5, r6, lr}
 8005f06:	460c      	mov	r4, r1
 8005f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f0c:	4615      	mov	r5, r2
 8005f0e:	2900      	cmp	r1, #0
 8005f10:	461e      	mov	r6, r3
 8005f12:	b096      	sub	sp, #88	; 0x58
 8005f14:	da0c      	bge.n	8005f30 <__swhatbuf_r+0x2c>
 8005f16:	89a3      	ldrh	r3, [r4, #12]
 8005f18:	2100      	movs	r1, #0
 8005f1a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005f1e:	bf0c      	ite	eq
 8005f20:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005f24:	2340      	movne	r3, #64	; 0x40
 8005f26:	2000      	movs	r0, #0
 8005f28:	6031      	str	r1, [r6, #0]
 8005f2a:	602b      	str	r3, [r5, #0]
 8005f2c:	b016      	add	sp, #88	; 0x58
 8005f2e:	bd70      	pop	{r4, r5, r6, pc}
 8005f30:	466a      	mov	r2, sp
 8005f32:	f000 f849 	bl	8005fc8 <_fstat_r>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	dbed      	blt.n	8005f16 <__swhatbuf_r+0x12>
 8005f3a:	9901      	ldr	r1, [sp, #4]
 8005f3c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005f40:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005f44:	4259      	negs	r1, r3
 8005f46:	4159      	adcs	r1, r3
 8005f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f4c:	e7eb      	b.n	8005f26 <__swhatbuf_r+0x22>

08005f4e <__smakebuf_r>:
 8005f4e:	898b      	ldrh	r3, [r1, #12]
 8005f50:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f52:	079d      	lsls	r5, r3, #30
 8005f54:	4606      	mov	r6, r0
 8005f56:	460c      	mov	r4, r1
 8005f58:	d507      	bpl.n	8005f6a <__smakebuf_r+0x1c>
 8005f5a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	6123      	str	r3, [r4, #16]
 8005f62:	2301      	movs	r3, #1
 8005f64:	6163      	str	r3, [r4, #20]
 8005f66:	b002      	add	sp, #8
 8005f68:	bd70      	pop	{r4, r5, r6, pc}
 8005f6a:	466a      	mov	r2, sp
 8005f6c:	ab01      	add	r3, sp, #4
 8005f6e:	f7ff ffc9 	bl	8005f04 <__swhatbuf_r>
 8005f72:	9900      	ldr	r1, [sp, #0]
 8005f74:	4605      	mov	r5, r0
 8005f76:	4630      	mov	r0, r6
 8005f78:	f7fe feca 	bl	8004d10 <_malloc_r>
 8005f7c:	b948      	cbnz	r0, 8005f92 <__smakebuf_r+0x44>
 8005f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f82:	059a      	lsls	r2, r3, #22
 8005f84:	d4ef      	bmi.n	8005f66 <__smakebuf_r+0x18>
 8005f86:	f023 0303 	bic.w	r3, r3, #3
 8005f8a:	f043 0302 	orr.w	r3, r3, #2
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	e7e3      	b.n	8005f5a <__smakebuf_r+0xc>
 8005f92:	89a3      	ldrh	r3, [r4, #12]
 8005f94:	6020      	str	r0, [r4, #0]
 8005f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f9a:	81a3      	strh	r3, [r4, #12]
 8005f9c:	9b00      	ldr	r3, [sp, #0]
 8005f9e:	6120      	str	r0, [r4, #16]
 8005fa0:	6163      	str	r3, [r4, #20]
 8005fa2:	9b01      	ldr	r3, [sp, #4]
 8005fa4:	b15b      	cbz	r3, 8005fbe <__smakebuf_r+0x70>
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fac:	f000 f81e 	bl	8005fec <_isatty_r>
 8005fb0:	b128      	cbz	r0, 8005fbe <__smakebuf_r+0x70>
 8005fb2:	89a3      	ldrh	r3, [r4, #12]
 8005fb4:	f023 0303 	bic.w	r3, r3, #3
 8005fb8:	f043 0301 	orr.w	r3, r3, #1
 8005fbc:	81a3      	strh	r3, [r4, #12]
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	431d      	orrs	r5, r3
 8005fc2:	81a5      	strh	r5, [r4, #12]
 8005fc4:	e7cf      	b.n	8005f66 <__smakebuf_r+0x18>
	...

08005fc8 <_fstat_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	2300      	movs	r3, #0
 8005fcc:	4d06      	ldr	r5, [pc, #24]	; (8005fe8 <_fstat_r+0x20>)
 8005fce:	4604      	mov	r4, r0
 8005fd0:	4608      	mov	r0, r1
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	602b      	str	r3, [r5, #0]
 8005fd6:	f7fb fac7 	bl	8001568 <_fstat>
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	d102      	bne.n	8005fe4 <_fstat_r+0x1c>
 8005fde:	682b      	ldr	r3, [r5, #0]
 8005fe0:	b103      	cbz	r3, 8005fe4 <_fstat_r+0x1c>
 8005fe2:	6023      	str	r3, [r4, #0]
 8005fe4:	bd38      	pop	{r3, r4, r5, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000428 	.word	0x20000428

08005fec <_isatty_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	2300      	movs	r3, #0
 8005ff0:	4d05      	ldr	r5, [pc, #20]	; (8006008 <_isatty_r+0x1c>)
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	4608      	mov	r0, r1
 8005ff6:	602b      	str	r3, [r5, #0]
 8005ff8:	f7fb fac5 	bl	8001586 <_isatty>
 8005ffc:	1c43      	adds	r3, r0, #1
 8005ffe:	d102      	bne.n	8006006 <_isatty_r+0x1a>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	b103      	cbz	r3, 8006006 <_isatty_r+0x1a>
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	bd38      	pop	{r3, r4, r5, pc}
 8006008:	20000428 	.word	0x20000428

0800600c <_init>:
 800600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600e:	bf00      	nop
 8006010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006012:	bc08      	pop	{r3}
 8006014:	469e      	mov	lr, r3
 8006016:	4770      	bx	lr

08006018 <_fini>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	bf00      	nop
 800601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601e:	bc08      	pop	{r3}
 8006020:	469e      	mov	lr, r3
 8006022:	4770      	bx	lr
