
STM32_THERMOCOUPLE_MAX31855.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  080061f8  080061f8  000161f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066ec  080066ec  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  080066ec  080066ec  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066ec  080066ec  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066ec  080066ec  000166ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080066f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  200001d8  080068cc  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  080068cc  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008f5b  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019c1  00000000  00000000  0002919f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f0  00000000  00000000  0002ab60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006cd  00000000  00000000  0002b450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c87  00000000  00000000  0002bb1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa67  00000000  00000000  000437a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083b76  00000000  00000000  0004e20b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003564  00000000  00000000  000d1d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000d52e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080061dc 	.word	0x080061dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080061dc 	.word	0x080061dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <begin>:
/*!
    @brief  Setup the HW
    @return True if the device was successfully initialized, otherwise false.
*/
/**************************************************************************/
bool begin(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  if (HAL_SPI_Init(&hspi1) == HAL_OK) {initialized = true;} else {initialized = false;}
 8000fe8:	4808      	ldr	r0, [pc, #32]	; (800100c <begin+0x28>)
 8000fea:	f001 fc77 	bl	80028dc <HAL_SPI_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d103      	bne.n	8000ffc <begin+0x18>
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <begin+0x2c>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	e002      	b.n	8001002 <begin+0x1e>
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <begin+0x2c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
  return initialized;
 8001002:	4b03      	ldr	r3, [pc, #12]	; (8001010 <begin+0x2c>)
 8001004:	781b      	ldrb	r3, [r3, #0]
}
 8001006:	4618      	mov	r0, r3
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200001f8 	.word	0x200001f8
 8001010:	200001f4 	.word	0x200001f4

08001014 <readInternal>:
/*!
    @brief  Read the internal temperature.
    @return The internal temperature in degrees Celsius.
*/
/**************************************************************************/
double readInternal(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
  uint32_t v;

  v = spiread32();
 800101a:	f000 f8ab 	bl	8001174 <spiread32>
 800101e:	60b8      	str	r0, [r7, #8]

  // ignore bottom 4 bits - they're just thermocouple data
  v >>= 4;
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	091b      	lsrs	r3, r3, #4
 8001024:	60bb      	str	r3, [r7, #8]

  // pull the bottom 11 bits off
  float internal = v & 0x7FF;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fe31 	bl	8000c94 <__aeabi_ui2f>
 8001032:	4603      	mov	r3, r0
 8001034:	60fb      	str	r3, [r7, #12]
  // check sign bit!
  if (v & 0x800) {
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00e      	beq.n	800105e <readInternal+0x4a>
    // Convert to negative value by extending sign and casting to signed type.
    int16_t tmp = 0xF800 | (v & 0x7FF);
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	b29b      	uxth	r3, r3
 8001044:	ea6f 5343 	mvn.w	r3, r3, lsl #21
 8001048:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 800104c:	b29b      	uxth	r3, r3
 800104e:	80fb      	strh	r3, [r7, #6]
    internal = tmp;
 8001050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fe21 	bl	8000c9c <__aeabi_i2f>
 800105a:	4603      	mov	r3, r0
 800105c:	60fb      	str	r3, [r7, #12]
  }
  internal *= 0.0625; // LSB = 0.0625 degrees
 800105e:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f7ff fe6e 	bl	8000d44 <__aeabi_fmul>
 8001068:	4603      	mov	r3, r0
 800106a:	60fb      	str	r3, [r7, #12]
  // Serial.print("\tInternal Temp: "); Serial.println(internal);
  return internal;
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f7ff f9db 	bl	8000428 <__aeabi_f2d>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
}
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <readCelsius>:
/*!
    @brief  Read the thermocouple temperature.
    @return The thermocouple temperature in degrees Celsius.
*/
/**************************************************************************/
double readCelsius(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0

  int32_t v;

  v = spiread32();
 8001086:	f000 f875 	bl	8001174 <spiread32>
 800108a:	4603      	mov	r3, r0
 800108c:	60fb      	str	r3, [r7, #12]
  if ((v >> 4) & 0x800)
    internal *= -1;
  Serial.print("\tInternal Temp: "); Serial.println(internal);
  */

  if (v & faultMask) {
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <readCelsius+0x74>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4013      	ands	r3, r2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <readCelsius+0x24>
    // uh oh, a serious problem!
    return NAN;
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <readCelsius+0x78>)
 80010a2:	e021      	b.n	80010e8 <readCelsius+0x68>
  }

  if (v & 0x80000000) {
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	da07      	bge.n	80010ba <readCelsius+0x3a>
    // Negative value, drop the lower 18 bits and explicitly extend sign bits.
    v = 0xFFFFC000 | ((v >> 18) & 0x00003FFF);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	0c9b      	lsrs	r3, r3, #18
 80010ae:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80010b2:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	e002      	b.n	80010c0 <readCelsius+0x40>
  } else {
    // Positive value, just drop the lower 18 bits.
    v >>= 18;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	149b      	asrs	r3, r3, #18
 80010be:	60fb      	str	r3, [r7, #12]
  }
  // Serial.println(v, HEX);

  double centigrade = v;
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f7ff f99f 	bl	8000404 <__aeabi_i2d>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	e9c7 2300 	strd	r2, r3, [r7]

  // LSB = 0.25 degrees C
  centigrade *= 0.25;
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <readCelsius+0x7c>)
 80010d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010d8:	f7ff f9fe 	bl	80004d8 <__aeabi_dmul>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	e9c7 2300 	strd	r2, r3, [r7]
  return centigrade;
 80010e4:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000000 	.word	0x20000000
 80010f8:	7ff80000 	.word	0x7ff80000
 80010fc:	3fd00000 	.word	0x3fd00000

08001100 <readError>:
/*!
    @brief  Read the error state.
    @return The error state.
*/
/**************************************************************************/
uint8_t readError() { return spiread32() & 0x7; }
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
 8001104:	f000 f836 	bl	8001174 <spiread32>
 8001108:	4603      	mov	r3, r0
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4618      	mov	r0, r3
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <readFahrenheit>:
/*!
    @brief  Read the thermocouple temperature.
    @return The thermocouple temperature in degrees Fahrenheit.
*/
/**************************************************************************/
double readFahrenheit(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  float f = readCelsius();
 800111e:	f7ff ffaf 	bl	8001080 <readCelsius>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fcad 	bl	8000a88 <__aeabi_d2f>
 800112e:	4603      	mov	r3, r0
 8001130:	607b      	str	r3, [r7, #4]
  f *= 9.0;
 8001132:	490e      	ldr	r1, [pc, #56]	; (800116c <readFahrenheit+0x54>)
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff fe05 	bl	8000d44 <__aeabi_fmul>
 800113a:	4603      	mov	r3, r0
 800113c:	607b      	str	r3, [r7, #4]
  f /= 5.0;
 800113e:	490c      	ldr	r1, [pc, #48]	; (8001170 <readFahrenheit+0x58>)
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff feb3 	bl	8000eac <__aeabi_fdiv>
 8001146:	4603      	mov	r3, r0
 8001148:	607b      	str	r3, [r7, #4]
  f += 32;
 800114a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff fcf0 	bl	8000b34 <__addsf3>
 8001154:	4603      	mov	r3, r0
 8001156:	607b      	str	r3, [r7, #4]
  return f;
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff f965 	bl	8000428 <__aeabi_f2d>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
}
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	41100000 	.word	0x41100000
 8001170:	40a00000 	.word	0x40a00000

08001174 <spiread32>:
/*!
    @brief  Read 4 bytes (32 bits) from breakout over SPI.
    @return The raw 32 bit value read.
*/
/**************************************************************************/
uint32_t spiread32(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
  uint32_t d = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
  uint8_t buf[4];

  // backcompatibility!
  if (!initialized) {
 800117e:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <spiread32+0x7c>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	f083 0301 	eor.w	r3, r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <spiread32+0x1c>
    begin();
 800118c:	f7ff ff2a 	bl	8000fe4 <begin>
  }

  HAL_GPIO_WritePin(GPIOA , SPI1_CS_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2110      	movs	r1, #16
 8001194:	4817      	ldr	r0, [pc, #92]	; (80011f4 <spiread32+0x80>)
 8001196:	f000 ff79 	bl	800208c <HAL_GPIO_WritePin>
  HAL_SPI_Receive(&hspi1, buf, sizeof(buf), SPI_DELAY);
 800119a:	4639      	mov	r1, r7
 800119c:	23ff      	movs	r3, #255	; 0xff
 800119e:	2204      	movs	r2, #4
 80011a0:	4815      	ldr	r0, [pc, #84]	; (80011f8 <spiread32+0x84>)
 80011a2:	f001 fc1f 	bl	80029e4 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA , SPI1_CS_Pin, GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	2110      	movs	r1, #16
 80011aa:	4812      	ldr	r0, [pc, #72]	; (80011f4 <spiread32+0x80>)
 80011ac:	f000 ff6e 	bl	800208c <HAL_GPIO_WritePin>

  d = buf[0];
 80011b0:	783b      	ldrb	r3, [r7, #0]
 80011b2:	607b      	str	r3, [r7, #4]
  d <<= 8;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	607b      	str	r3, [r7, #4]
  d |= buf[1];
 80011ba:	787b      	ldrb	r3, [r7, #1]
 80011bc:	461a      	mov	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	607b      	str	r3, [r7, #4]
  d <<= 8;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	607b      	str	r3, [r7, #4]
  d |= buf[2];
 80011ca:	78bb      	ldrb	r3, [r7, #2]
 80011cc:	461a      	mov	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	607b      	str	r3, [r7, #4]
  d <<= 8;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	607b      	str	r3, [r7, #4]
  d |= buf[3];
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	461a      	mov	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	607b      	str	r3, [r7, #4]

  // Serial.println(d, HEX);

  return d;
 80011e4:	687b      	ldr	r3, [r7, #4]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200001f4 	.word	0x200001f4
 80011f4:	40010800 	.word	0x40010800
 80011f8:	200001f8 	.word	0x200001f8

080011fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011fe:	f2ad 4dc4 	subw	sp, sp, #1220	; 0x4c4
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  char MSG[100]="MAX31855 test\n\r";
 8001204:	4bc9      	ldr	r3, [pc, #804]	; (800152c <main+0x330>)
 8001206:	f507 648a 	add.w	r4, r7, #1104	; 0x450
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	6859      	ldr	r1, [r3, #4]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001214:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001218:	2254      	movs	r2, #84	; 0x54
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f002 fef4 	bl	800400a <memset>
  char MSG0[100]="Initializing sensor...\n\r";
 8001222:	4bc3      	ldr	r3, [pc, #780]	; (8001530 <main+0x334>)
 8001224:	f507 747b 	add.w	r4, r7, #1004	; 0x3ec
 8001228:	461d      	mov	r5, r3
 800122a:	6828      	ldr	r0, [r5, #0]
 800122c:	6869      	ldr	r1, [r5, #4]
 800122e:	68aa      	ldr	r2, [r5, #8]
 8001230:	68eb      	ldr	r3, [r5, #12]
 8001232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001234:	6928      	ldr	r0, [r5, #16]
 8001236:	6969      	ldr	r1, [r5, #20]
 8001238:	c403      	stmia	r4!, {r0, r1}
 800123a:	7e2b      	ldrb	r3, [r5, #24]
 800123c:	7023      	strb	r3, [r4, #0]
 800123e:	f207 4305 	addw	r3, r7, #1029	; 0x405
 8001242:	224b      	movs	r2, #75	; 0x4b
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f002 fedf 	bl	800400a <memset>
  char MSG1[100]="ERROR\n\r";
 800124c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001250:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8001254:	49b7      	ldr	r1, [pc, #732]	; (8001534 <main+0x338>)
 8001256:	4613      	mov	r3, r2
 8001258:	6808      	ldr	r0, [r1, #0]
 800125a:	6849      	ldr	r1, [r1, #4]
 800125c:	c303      	stmia	r3!, {r0, r1}
 800125e:	f102 0308 	add.w	r3, r2, #8
 8001262:	225c      	movs	r2, #92	; 0x5c
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f002 fecf 	bl	800400a <memset>
  char MSG2[100]="DON. \n\r ";
 800126c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001270:	f5a3 74ce 	sub.w	r4, r3, #412	; 0x19c
 8001274:	4ab0      	ldr	r2, [pc, #704]	; (8001538 <main+0x33c>)
 8001276:	4623      	mov	r3, r4
 8001278:	6810      	ldr	r0, [r2, #0]
 800127a:	6851      	ldr	r1, [r2, #4]
 800127c:	c303      	stmia	r3!, {r0, r1}
 800127e:	7a12      	ldrb	r2, [r2, #8]
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	f104 0309 	add.w	r3, r4, #9
 8001286:	225b      	movs	r2, #91	; 0x5b
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f002 febd 	bl	800400a <memset>
  char MSG3[100]="Thermocouple fault(s) detected!\n\r";
 8001290:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001294:	f5a3 7c00 	sub.w	ip, r3, #512	; 0x200
 8001298:	4ba8      	ldr	r3, [pc, #672]	; (800153c <main+0x340>)
 800129a:	461c      	mov	r4, r3
 800129c:	4666      	mov	r6, ip
 800129e:	f104 0e20 	add.w	lr, r4, #32
 80012a2:	4635      	mov	r5, r6
 80012a4:	4623      	mov	r3, r4
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	6859      	ldr	r1, [r3, #4]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b0:	3410      	adds	r4, #16
 80012b2:	3610      	adds	r6, #16
 80012b4:	4574      	cmp	r4, lr
 80012b6:	d1f4      	bne.n	80012a2 <main+0xa6>
 80012b8:	4632      	mov	r2, r6
 80012ba:	4623      	mov	r3, r4
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	8013      	strh	r3, [r2, #0]
 80012c0:	f10c 0322 	add.w	r3, ip, #34	; 0x22
 80012c4:	2242      	movs	r2, #66	; 0x42
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 fe9e 	bl	800400a <memset>
  char MSG4[100]="FAULT: Thermocouple is open - no connections.\n\r";
 80012ce:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80012d2:	f5a3 7c19 	sub.w	ip, r3, #612	; 0x264
 80012d6:	4b9a      	ldr	r3, [pc, #616]	; (8001540 <main+0x344>)
 80012d8:	461c      	mov	r4, r3
 80012da:	4666      	mov	r6, ip
 80012dc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80012e0:	4635      	mov	r5, r6
 80012e2:	4623      	mov	r3, r4
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	6859      	ldr	r1, [r3, #4]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ee:	3410      	adds	r4, #16
 80012f0:	3610      	adds	r6, #16
 80012f2:	4574      	cmp	r4, lr
 80012f4:	d1f4      	bne.n	80012e0 <main+0xe4>
 80012f6:	f10c 0330 	add.w	r3, ip, #48	; 0x30
 80012fa:	2234      	movs	r2, #52	; 0x34
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f002 fe83 	bl	800400a <memset>
  char MSG5[100]="FAULT: Thermocouple is short-circuited to GND.\n\r";
 8001304:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001308:	f5a3 7c32 	sub.w	ip, r3, #712	; 0x2c8
 800130c:	4b8d      	ldr	r3, [pc, #564]	; (8001544 <main+0x348>)
 800130e:	461c      	mov	r4, r3
 8001310:	4666      	mov	r6, ip
 8001312:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001316:	4635      	mov	r5, r6
 8001318:	4623      	mov	r3, r4
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	6859      	ldr	r1, [r3, #4]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001324:	3410      	adds	r4, #16
 8001326:	3610      	adds	r6, #16
 8001328:	4574      	cmp	r4, lr
 800132a:	d1f4      	bne.n	8001316 <main+0x11a>
 800132c:	4633      	mov	r3, r6
 800132e:	4622      	mov	r2, r4
 8001330:	7812      	ldrb	r2, [r2, #0]
 8001332:	701a      	strb	r2, [r3, #0]
 8001334:	f10c 0331 	add.w	r3, ip, #49	; 0x31
 8001338:	2233      	movs	r2, #51	; 0x33
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f002 fe64 	bl	800400a <memset>
  char MSG6[100]="FAULT: Thermocouple is short-circuited to VCC.\n\r";
 8001342:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001346:	f5a3 7c4b 	sub.w	ip, r3, #812	; 0x32c
 800134a:	4b7f      	ldr	r3, [pc, #508]	; (8001548 <main+0x34c>)
 800134c:	461c      	mov	r4, r3
 800134e:	4666      	mov	r6, ip
 8001350:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001354:	4635      	mov	r5, r6
 8001356:	4623      	mov	r3, r4
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	6859      	ldr	r1, [r3, #4]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001362:	3410      	adds	r4, #16
 8001364:	3610      	adds	r6, #16
 8001366:	4574      	cmp	r4, lr
 8001368:	d1f4      	bne.n	8001354 <main+0x158>
 800136a:	4633      	mov	r3, r6
 800136c:	4622      	mov	r2, r4
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	f10c 0331 	add.w	r3, ip, #49	; 0x31
 8001376:	2233      	movs	r2, #51	; 0x33
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f002 fe45 	bl	800400a <memset>
  char MSG7[100];
  char MSG8[100];
  char MSG9[100]="$$***************************************$$\n\r";
 8001380:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001384:	f5a3 6c8b 	sub.w	ip, r3, #1112	; 0x458
 8001388:	4b70      	ldr	r3, [pc, #448]	; (800154c <main+0x350>)
 800138a:	461c      	mov	r4, r3
 800138c:	4666      	mov	r6, ip
 800138e:	f104 0e20 	add.w	lr, r4, #32
 8001392:	4635      	mov	r5, r6
 8001394:	4623      	mov	r3, r4
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	6859      	ldr	r1, [r3, #4]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a0:	3410      	adds	r4, #16
 80013a2:	3610      	adds	r6, #16
 80013a4:	4574      	cmp	r4, lr
 80013a6:	d1f4      	bne.n	8001392 <main+0x196>
 80013a8:	4633      	mov	r3, r6
 80013aa:	6820      	ldr	r0, [r4, #0]
 80013ac:	6861      	ldr	r1, [r4, #4]
 80013ae:	68a2      	ldr	r2, [r4, #8]
 80013b0:	c307      	stmia	r3!, {r0, r1, r2}
 80013b2:	89a2      	ldrh	r2, [r4, #12]
 80013b4:	801a      	strh	r2, [r3, #0]
 80013b6:	f10c 032e 	add.w	r3, ip, #46	; 0x2e
 80013ba:	2236      	movs	r2, #54	; 0x36
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 fe23 	bl	800400a <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c4:	f000 fb7c 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c8:	f000 f8ca 	bl	8001560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013cc:	f000 f964 	bl	8001698 <MX_GPIO_Init>
  MX_SPI1_Init();
 80013d0:	f000 f902 	bl	80015d8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80013d4:	f000 f936 	bl	8001644 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1,(uint8_t*)MSG,sizeof(MSG), 100);
 80013d8:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 80013dc:	2364      	movs	r3, #100	; 0x64
 80013de:	2264      	movs	r2, #100	; 0x64
 80013e0:	485b      	ldr	r0, [pc, #364]	; (8001550 <main+0x354>)
 80013e2:	f001 ff0f 	bl	8003204 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t*)MSG0,sizeof(MSG0), 100);
 80013e6:	f507 717b 	add.w	r1, r7, #1004	; 0x3ec
 80013ea:	2364      	movs	r3, #100	; 0x64
 80013ec:	2264      	movs	r2, #100	; 0x64
 80013ee:	4858      	ldr	r0, [pc, #352]	; (8001550 <main+0x354>)
 80013f0:	f001 ff08 	bl	8003204 <HAL_UART_Transmit>
  if (!begin()) {
 80013f4:	f7ff fdf6 	bl	8000fe4 <begin>
 80013f8:	4603      	mov	r3, r0
 80013fa:	f083 0301 	eor.w	r3, r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00a      	beq.n	800141a <main+0x21e>
  HAL_UART_Transmit(&huart1,(uint8_t*)MSG1,sizeof(MSG1), 100);
 8001404:	f507 7162 	add.w	r1, r7, #904	; 0x388
 8001408:	2364      	movs	r3, #100	; 0x64
 800140a:	2264      	movs	r2, #100	; 0x64
 800140c:	4850      	ldr	r0, [pc, #320]	; (8001550 <main+0x354>)
 800140e:	f001 fef9 	bl	8003204 <HAL_UART_Transmit>
  while (1) HAL_Delay(10);
 8001412:	200a      	movs	r0, #10
 8001414:	f000 fbb6 	bl	8001b84 <HAL_Delay>
 8001418:	e7fb      	b.n	8001412 <main+0x216>
  }
  HAL_UART_Transmit(&huart1,(uint8_t*)MSG2,sizeof(MSG2), 100);
 800141a:	f507 7149 	add.w	r1, r7, #804	; 0x324
 800141e:	2364      	movs	r3, #100	; 0x64
 8001420:	2264      	movs	r2, #100	; 0x64
 8001422:	484b      	ldr	r0, [pc, #300]	; (8001550 <main+0x354>)
 8001424:	f001 feee 	bl	8003204 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    sprintf(MSG10,"Internal Temp = %f \n\r",readInternal());
 8001428:	f7ff fdf4 	bl	8001014 <readInternal>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	1d38      	adds	r0, r7, #4
 8001432:	4948      	ldr	r1, [pc, #288]	; (8001554 <main+0x358>)
 8001434:	f002 fd86 	bl	8003f44 <siprintf>
    HAL_UART_Transmit(&huart1,(uint8_t*)MSG10, sizeof(MSG10), 100);
 8001438:	1d39      	adds	r1, r7, #4
 800143a:	2364      	movs	r3, #100	; 0x64
 800143c:	2264      	movs	r2, #100	; 0x64
 800143e:	4844      	ldr	r0, [pc, #272]	; (8001550 <main+0x354>)
 8001440:	f001 fee0 	bl	8003204 <HAL_UART_Transmit>
    double c = readCelsius();
 8001444:	f7ff fe1c 	bl	8001080 <readCelsius>
 8001448:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800144c:	e9c3 0100 	strd	r0, r1, [r3]
    if (!isnan(c)) {
 8001450:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 800145c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001460:	f7ff fad4 	bl	8000a0c <__aeabi_dcmpun>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d12b      	bne.n	80014c2 <main+0x2c6>
        sprintf(MSG7,"C = %f \n\r",c);
 800146a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800146e:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	4938      	ldr	r1, [pc, #224]	; (8001558 <main+0x35c>)
 8001478:	f002 fd64 	bl	8003f44 <siprintf>
        HAL_UART_Transmit(&huart1,(uint8_t*)MSG7, sizeof(MSG7), 100);
 800147c:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8001480:	2364      	movs	r3, #100	; 0x64
 8001482:	2264      	movs	r2, #100	; 0x64
 8001484:	4832      	ldr	r0, [pc, #200]	; (8001550 <main+0x354>)
 8001486:	f001 febd 	bl	8003204 <HAL_UART_Transmit>
        sprintf(MSG8,"F = %f \n\r",readFahrenheit());
 800148a:	f7ff fe45 	bl	8001118 <readFahrenheit>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8001496:	4931      	ldr	r1, [pc, #196]	; (800155c <main+0x360>)
 8001498:	f002 fd54 	bl	8003f44 <siprintf>
        HAL_UART_Transmit(&huart1,(uint8_t*)MSG8, sizeof(MSG8), 100);
 800149c:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80014a0:	2364      	movs	r3, #100	; 0x64
 80014a2:	2264      	movs	r2, #100	; 0x64
 80014a4:	482a      	ldr	r0, [pc, #168]	; (8001550 <main+0x354>)
 80014a6:	f001 fead 	bl	8003204 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1,(uint8_t*)MSG9, sizeof(MSG9), 100);
 80014aa:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80014ae:	2364      	movs	r3, #100	; 0x64
 80014b0:	2264      	movs	r2, #100	; 0x64
 80014b2:	4827      	ldr	r0, [pc, #156]	; (8001550 <main+0x354>)
 80014b4:	f001 fea6 	bl	8003204 <HAL_UART_Transmit>
        HAL_Delay(1000);
 80014b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014bc:	f000 fb62 	bl	8001b84 <HAL_Delay>
 80014c0:	e7b2      	b.n	8001428 <main+0x22c>
    }
    else
    {
      HAL_UART_Transmit(&huart1,(uint8_t*) MSG3, sizeof(MSG3), 100);
 80014c2:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 80014c6:	2364      	movs	r3, #100	; 0x64
 80014c8:	2264      	movs	r2, #100	; 0x64
 80014ca:	4821      	ldr	r0, [pc, #132]	; (8001550 <main+0x354>)
 80014cc:	f001 fe9a 	bl	8003204 <HAL_UART_Transmit>
      uint8_t e = readError();
 80014d0:	f7ff fe16 	bl	8001100 <readError>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
      if (e & MAX31855_FAULT_OPEN)      HAL_UART_Transmit(&huart1, (uint8_t*) MSG4, sizeof(MSG4), 100);
 80014da:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d006      	beq.n	80014f4 <main+0x2f8>
 80014e6:	f507 7117 	add.w	r1, r7, #604	; 0x25c
 80014ea:	2364      	movs	r3, #100	; 0x64
 80014ec:	2264      	movs	r2, #100	; 0x64
 80014ee:	4818      	ldr	r0, [pc, #96]	; (8001550 <main+0x354>)
 80014f0:	f001 fe88 	bl	8003204 <HAL_UART_Transmit>
      if (e & MAX31855_FAULT_SHORT_GND) HAL_UART_Transmit(&huart1, (uint8_t*) MSG5, sizeof(MSG5), 100);
 80014f4:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d006      	beq.n	800150e <main+0x312>
 8001500:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8001504:	2364      	movs	r3, #100	; 0x64
 8001506:	2264      	movs	r2, #100	; 0x64
 8001508:	4811      	ldr	r0, [pc, #68]	; (8001550 <main+0x354>)
 800150a:	f001 fe7b 	bl	8003204 <HAL_UART_Transmit>
      if (e & MAX31855_FAULT_SHORT_VCC) HAL_UART_Transmit(&huart1, (uint8_t*) MSG6, sizeof(MSG6), 100);
 800150e:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	2b00      	cmp	r3, #0
 8001518:	d086      	beq.n	8001428 <main+0x22c>
 800151a:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800151e:	2364      	movs	r3, #100	; 0x64
 8001520:	2264      	movs	r2, #100	; 0x64
 8001522:	480b      	ldr	r0, [pc, #44]	; (8001550 <main+0x354>)
 8001524:	f001 fe6e 	bl	8003204 <HAL_UART_Transmit>
  {
 8001528:	e77e      	b.n	8001428 <main+0x22c>
 800152a:	bf00      	nop
 800152c:	08006228 	.word	0x08006228
 8001530:	08006238 	.word	0x08006238
 8001534:	08006254 	.word	0x08006254
 8001538:	0800625c 	.word	0x0800625c
 800153c:	08006268 	.word	0x08006268
 8001540:	0800628c 	.word	0x0800628c
 8001544:	080062bc 	.word	0x080062bc
 8001548:	080062f0 	.word	0x080062f0
 800154c:	08006324 	.word	0x08006324
 8001550:	20000250 	.word	0x20000250
 8001554:	080061f8 	.word	0x080061f8
 8001558:	08006210 	.word	0x08006210
 800155c:	0800621c 	.word	0x0800621c

08001560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b090      	sub	sp, #64	; 0x40
 8001564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001566:	f107 0318 	add.w	r3, r7, #24
 800156a:	2228      	movs	r2, #40	; 0x28
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fd4b 	bl	800400a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001582:	2302      	movs	r3, #2
 8001584:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001586:	2301      	movs	r3, #1
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800158a:	2310      	movs	r3, #16
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800158e:	2300      	movs	r3, #0
 8001590:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001592:	f107 0318 	add.w	r3, r7, #24
 8001596:	4618      	mov	r0, r3
 8001598:	f000 fd90 	bl	80020bc <HAL_RCC_OscConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015a2:	f000 f8ab 	bl	80016fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a6:	230f      	movs	r3, #15
 80015a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fffe 	bl	80025c0 <HAL_RCC_ClockConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015ca:	f000 f897 	bl	80016fc <Error_Handler>
  }
}
 80015ce:	bf00      	nop
 80015d0:	3740      	adds	r7, #64	; 0x40
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <MX_SPI1_Init+0x64>)
 80015de:	4a18      	ldr	r2, [pc, #96]	; (8001640 <MX_SPI1_Init+0x68>)
 80015e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <MX_SPI1_Init+0x64>)
 80015e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_SPI1_Init+0x64>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <MX_SPI1_Init+0x64>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_SPI1_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_SPI1_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_SPI1_Init+0x64>)
 8001604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001608:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_SPI1_Init+0x64>)
 800160c:	2200      	movs	r2, #0
 800160e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <MX_SPI1_Init+0x64>)
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_SPI1_Init+0x64>)
 8001618:	2200      	movs	r2, #0
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <MX_SPI1_Init+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_SPI1_Init+0x64>)
 8001624:	220a      	movs	r2, #10
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_SPI1_Init+0x64>)
 800162a:	f001 f957 	bl	80028dc <HAL_SPI_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001634:	f000 f862 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200001f8 	.word	0x200001f8
 8001640:	40013000 	.word	0x40013000

08001644 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <MX_USART1_UART_Init+0x50>)
 800164c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001650:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800167c:	f001 fd72 	bl	8003164 <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001686:	f000 f839 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000250 	.word	0x20000250
 8001694:	40013800 	.word	0x40013800

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0308 	add.w	r3, r7, #8
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_GPIO_Init+0x5c>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <MX_GPIO_Init+0x5c>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_GPIO_Init+0x5c>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2110      	movs	r1, #16
 80016c8:	480b      	ldr	r0, [pc, #44]	; (80016f8 <MX_GPIO_Init+0x60>)
 80016ca:	f000 fcdf 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80016ce:	2310      	movs	r3, #16
 80016d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2302      	movs	r3, #2
 80016dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	4619      	mov	r1, r3
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_GPIO_Init+0x60>)
 80016e6:	f000 fb55 	bl	8001d94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010800 	.word	0x40010800

080016fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001700:	b672      	cpsid	i
}
 8001702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001704:	e7fe      	b.n	8001704 <Error_Handler+0x8>
	...

08001708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_MspInit+0x5c>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	4a14      	ldr	r2, [pc, #80]	; (8001764 <HAL_MspInit+0x5c>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6193      	str	r3, [r2, #24]
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_MspInit+0x5c>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_MspInit+0x5c>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	4a0e      	ldr	r2, [pc, #56]	; (8001764 <HAL_MspInit+0x5c>)
 800172c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001730:	61d3      	str	r3, [r2, #28]
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <HAL_MspInit+0x5c>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_MspInit+0x60>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_MspInit+0x60>)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	40021000 	.word	0x40021000
 8001768:	40010000 	.word	0x40010000

0800176c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a1b      	ldr	r2, [pc, #108]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d12f      	bne.n	80017ec <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <HAL_SPI_MspInit+0x8c>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a19      	ldr	r2, [pc, #100]	; (80017f8 <HAL_SPI_MspInit+0x8c>)
 8001792:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_SPI_MspInit+0x8c>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <HAL_SPI_MspInit+0x8c>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a13      	ldr	r2, [pc, #76]	; (80017f8 <HAL_SPI_MspInit+0x8c>)
 80017aa:	f043 0304 	orr.w	r3, r3, #4
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_SPI_MspInit+0x8c>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017bc:	23a0      	movs	r3, #160	; 0xa0
 80017be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	4619      	mov	r1, r3
 80017ce:	480b      	ldr	r0, [pc, #44]	; (80017fc <HAL_SPI_MspInit+0x90>)
 80017d0:	f000 fae0 	bl	8001d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017d4:	2340      	movs	r3, #64	; 0x40
 80017d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	4619      	mov	r1, r3
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <HAL_SPI_MspInit+0x90>)
 80017e8:	f000 fad4 	bl	8001d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017ec:	bf00      	nop
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40013000 	.word	0x40013000
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010800 	.word	0x40010800

08001800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1c      	ldr	r2, [pc, #112]	; (800188c <HAL_UART_MspInit+0x8c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d131      	bne.n	8001884 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <HAL_UART_MspInit+0x90>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a1a      	ldr	r2, [pc, #104]	; (8001890 <HAL_UART_MspInit+0x90>)
 8001826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_UART_MspInit+0x90>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_UART_MspInit+0x90>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a14      	ldr	r2, [pc, #80]	; (8001890 <HAL_UART_MspInit+0x90>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_UART_MspInit+0x90>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001854:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800185a:	2303      	movs	r3, #3
 800185c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 0310 	add.w	r3, r7, #16
 8001862:	4619      	mov	r1, r3
 8001864:	480b      	ldr	r0, [pc, #44]	; (8001894 <HAL_UART_MspInit+0x94>)
 8001866:	f000 fa95 	bl	8001d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800186a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800186e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	4619      	mov	r1, r3
 800187e:	4805      	ldr	r0, [pc, #20]	; (8001894 <HAL_UART_MspInit+0x94>)
 8001880:	f000 fa88 	bl	8001d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001884:	bf00      	nop
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40013800 	.word	0x40013800
 8001890:	40021000 	.word	0x40021000
 8001894:	40010800 	.word	0x40010800

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800189c:	e7fe      	b.n	800189c <NMI_Handler+0x4>

0800189e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <HardFault_Handler+0x4>

080018a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <MemManage_Handler+0x4>

080018aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <BusFault_Handler+0x4>

080018b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <UsageFault_Handler+0x4>

080018b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018de:	f000 f935 	bl	8001b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  return 1;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <_kill>:

int _kill(int pid, int sig)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018fe:	f002 fbd7 	bl	80040b0 <__errno>
 8001902:	4603      	mov	r3, r0
 8001904:	2216      	movs	r2, #22
 8001906:	601a      	str	r2, [r3, #0]
  return -1;
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_exit>:

void _exit (int status)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800191c:	f04f 31ff 	mov.w	r1, #4294967295
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ffe7 	bl	80018f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001926:	e7fe      	b.n	8001926 <_exit+0x12>

08001928 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e00a      	b.n	8001950 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800193a:	f3af 8000 	nop.w
 800193e:	4601      	mov	r1, r0
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	60ba      	str	r2, [r7, #8]
 8001946:	b2ca      	uxtb	r2, r1
 8001948:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	dbf0      	blt.n	800193a <_read+0x12>
  }

  return len;
 8001958:	687b      	ldr	r3, [r7, #4]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	e009      	b.n	8001988 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	60ba      	str	r2, [r7, #8]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	dbf1      	blt.n	8001974 <_write+0x12>
  }
  return len;
 8001990:	687b      	ldr	r3, [r7, #4]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <_close>:

int _close(int file)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019c0:	605a      	str	r2, [r3, #4]
  return 0;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <_isatty>:

int _isatty(int file)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr

080019e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b085      	sub	sp, #20
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
	...

080019fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <_sbrk+0x5c>)
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <_sbrk+0x60>)
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <_sbrk+0x64>)
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <_sbrk+0x68>)
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d207      	bcs.n	8001a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a2c:	f002 fb40 	bl	80040b0 <__errno>
 8001a30:	4603      	mov	r3, r0
 8001a32:	220c      	movs	r2, #12
 8001a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3a:	e009      	b.n	8001a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <_sbrk+0x64>)
 8001a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20002800 	.word	0x20002800
 8001a5c:	00000400 	.word	0x00000400
 8001a60:	20000298 	.word	0x20000298
 8001a64:	200003f0 	.word	0x200003f0

08001a68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a74:	f7ff fff8 	bl	8001a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a78:	480b      	ldr	r0, [pc, #44]	; (8001aa8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a7a:	490c      	ldr	r1, [pc, #48]	; (8001aac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a7c:	4a0c      	ldr	r2, [pc, #48]	; (8001ab0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a80:	e002      	b.n	8001a88 <LoopCopyDataInit>

08001a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a86:	3304      	adds	r3, #4

08001a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a8c:	d3f9      	bcc.n	8001a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8e:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a90:	4c09      	ldr	r4, [pc, #36]	; (8001ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a94:	e001      	b.n	8001a9a <LoopFillZerobss>

08001a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a98:	3204      	adds	r2, #4

08001a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a9c:	d3fb      	bcc.n	8001a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a9e:	f002 fb0d 	bl	80040bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aa2:	f7ff fbab 	bl	80011fc <main>
  bx lr
 8001aa6:	4770      	bx	lr
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001ab0:	080066f4 	.word	0x080066f4
  ldr r2, =_sbss
 8001ab4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ab8:	200003ec 	.word	0x200003ec

08001abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC1_2_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_Init+0x28>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_Init+0x28>)
 8001aca:	f043 0310 	orr.w	r3, r3, #16
 8001ace:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f92b 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad6:	200f      	movs	r0, #15
 8001ad8:	f000 f808 	bl	8001aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001adc:	f7ff fe14 	bl	8001708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40022000 	.word	0x40022000

08001aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x54>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x58>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f935 	bl	8001d7a <HAL_SYSTICK_Config>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00e      	b.n	8001b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b0f      	cmp	r3, #15
 8001b1e:	d80a      	bhi.n	8001b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b20:	2200      	movs	r2, #0
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f000 f90b 	bl	8001d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b2c:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <HAL_InitTick+0x5c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000004 	.word	0x20000004
 8001b44:	2000000c 	.word	0x2000000c
 8001b48:	20000008 	.word	0x20000008

08001b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_IncTick+0x1c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_IncTick+0x20>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a03      	ldr	r2, [pc, #12]	; (8001b6c <HAL_IncTick+0x20>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	2000000c 	.word	0x2000000c
 8001b6c:	2000029c 	.word	0x2000029c

08001b70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b02      	ldr	r3, [pc, #8]	; (8001b80 <HAL_GetTick+0x10>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	2000029c 	.word	0x2000029c

08001b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff fff0 	bl	8001b70 <HAL_GetTick>
 8001b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d005      	beq.n	8001baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_Delay+0x44>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001baa:	bf00      	nop
 8001bac:	f7ff ffe0 	bl	8001b70 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d8f7      	bhi.n	8001bac <HAL_Delay+0x28>
  {
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2000000c 	.word	0x2000000c

08001bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be8:	4013      	ands	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfe:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	60d3      	str	r3, [r2, #12]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <__NVIC_GetPriorityGrouping+0x18>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	f003 0307 	and.w	r3, r3, #7
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
         );
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f7ff ff90 	bl	8001c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff49 	bl	8001bcc <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff5e 	bl	8001c14 <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff90 	bl	8001c84 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5f 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ffb0 	bl	8001ce8 <SysTick_Config>
 8001d88:	4603      	mov	r3, r0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b08b      	sub	sp, #44	; 0x2c
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da6:	e161      	b.n	800206c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001da8:	2201      	movs	r2, #1
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	f040 8150 	bne.w	8002066 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4a97      	ldr	r2, [pc, #604]	; (8002028 <HAL_GPIO_Init+0x294>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d05e      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001dd0:	4a95      	ldr	r2, [pc, #596]	; (8002028 <HAL_GPIO_Init+0x294>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d875      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001dd6:	4a95      	ldr	r2, [pc, #596]	; (800202c <HAL_GPIO_Init+0x298>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d058      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001ddc:	4a93      	ldr	r2, [pc, #588]	; (800202c <HAL_GPIO_Init+0x298>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d86f      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001de2:	4a93      	ldr	r2, [pc, #588]	; (8002030 <HAL_GPIO_Init+0x29c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d052      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001de8:	4a91      	ldr	r2, [pc, #580]	; (8002030 <HAL_GPIO_Init+0x29c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d869      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001dee:	4a91      	ldr	r2, [pc, #580]	; (8002034 <HAL_GPIO_Init+0x2a0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d04c      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001df4:	4a8f      	ldr	r2, [pc, #572]	; (8002034 <HAL_GPIO_Init+0x2a0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d863      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001dfa:	4a8f      	ldr	r2, [pc, #572]	; (8002038 <HAL_GPIO_Init+0x2a4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d046      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001e00:	4a8d      	ldr	r2, [pc, #564]	; (8002038 <HAL_GPIO_Init+0x2a4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d85d      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001e06:	2b12      	cmp	r3, #18
 8001e08:	d82a      	bhi.n	8001e60 <HAL_GPIO_Init+0xcc>
 8001e0a:	2b12      	cmp	r3, #18
 8001e0c:	d859      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001e0e:	a201      	add	r2, pc, #4	; (adr r2, 8001e14 <HAL_GPIO_Init+0x80>)
 8001e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e14:	08001e8f 	.word	0x08001e8f
 8001e18:	08001e69 	.word	0x08001e69
 8001e1c:	08001e7b 	.word	0x08001e7b
 8001e20:	08001ebd 	.word	0x08001ebd
 8001e24:	08001ec3 	.word	0x08001ec3
 8001e28:	08001ec3 	.word	0x08001ec3
 8001e2c:	08001ec3 	.word	0x08001ec3
 8001e30:	08001ec3 	.word	0x08001ec3
 8001e34:	08001ec3 	.word	0x08001ec3
 8001e38:	08001ec3 	.word	0x08001ec3
 8001e3c:	08001ec3 	.word	0x08001ec3
 8001e40:	08001ec3 	.word	0x08001ec3
 8001e44:	08001ec3 	.word	0x08001ec3
 8001e48:	08001ec3 	.word	0x08001ec3
 8001e4c:	08001ec3 	.word	0x08001ec3
 8001e50:	08001ec3 	.word	0x08001ec3
 8001e54:	08001ec3 	.word	0x08001ec3
 8001e58:	08001e71 	.word	0x08001e71
 8001e5c:	08001e85 	.word	0x08001e85
 8001e60:	4a76      	ldr	r2, [pc, #472]	; (800203c <HAL_GPIO_Init+0x2a8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e66:	e02c      	b.n	8001ec2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	623b      	str	r3, [r7, #32]
          break;
 8001e6e:	e029      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	3304      	adds	r3, #4
 8001e76:	623b      	str	r3, [r7, #32]
          break;
 8001e78:	e024      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	3308      	adds	r3, #8
 8001e80:	623b      	str	r3, [r7, #32]
          break;
 8001e82:	e01f      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	330c      	adds	r3, #12
 8001e8a:	623b      	str	r3, [r7, #32]
          break;
 8001e8c:	e01a      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e96:	2304      	movs	r3, #4
 8001e98:	623b      	str	r3, [r7, #32]
          break;
 8001e9a:	e013      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	611a      	str	r2, [r3, #16]
          break;
 8001eae:	e009      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	615a      	str	r2, [r3, #20]
          break;
 8001eba:	e003      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
          break;
 8001ec0:	e000      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          break;
 8001ec2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2bff      	cmp	r3, #255	; 0xff
 8001ec8:	d801      	bhi.n	8001ece <HAL_GPIO_Init+0x13a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	e001      	b.n	8001ed2 <HAL_GPIO_Init+0x13e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2bff      	cmp	r3, #255	; 0xff
 8001ed8:	d802      	bhi.n	8001ee0 <HAL_GPIO_Init+0x14c>
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	e002      	b.n	8001ee6 <HAL_GPIO_Init+0x152>
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	3b08      	subs	r3, #8
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	210f      	movs	r1, #15
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	6a39      	ldr	r1, [r7, #32]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	431a      	orrs	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80a9 	beq.w	8002066 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f14:	4b4a      	ldr	r3, [pc, #296]	; (8002040 <HAL_GPIO_Init+0x2ac>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a49      	ldr	r2, [pc, #292]	; (8002040 <HAL_GPIO_Init+0x2ac>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_GPIO_Init+0x2ac>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f2c:	4a45      	ldr	r2, [pc, #276]	; (8002044 <HAL_GPIO_Init+0x2b0>)
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	3302      	adds	r3, #2
 8001f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	220f      	movs	r2, #15
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a3d      	ldr	r2, [pc, #244]	; (8002048 <HAL_GPIO_Init+0x2b4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d00d      	beq.n	8001f74 <HAL_GPIO_Init+0x1e0>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a3c      	ldr	r2, [pc, #240]	; (800204c <HAL_GPIO_Init+0x2b8>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d007      	beq.n	8001f70 <HAL_GPIO_Init+0x1dc>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a3b      	ldr	r2, [pc, #236]	; (8002050 <HAL_GPIO_Init+0x2bc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d101      	bne.n	8001f6c <HAL_GPIO_Init+0x1d8>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e004      	b.n	8001f76 <HAL_GPIO_Init+0x1e2>
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e002      	b.n	8001f76 <HAL_GPIO_Init+0x1e2>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <HAL_GPIO_Init+0x1e2>
 8001f74:	2300      	movs	r3, #0
 8001f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f78:	f002 0203 	and.w	r2, r2, #3
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	4093      	lsls	r3, r2
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f86:	492f      	ldr	r1, [pc, #188]	; (8002044 <HAL_GPIO_Init+0x2b0>)
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fa0:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <HAL_GPIO_Init+0x2c0>)
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	492b      	ldr	r1, [pc, #172]	; (8002054 <HAL_GPIO_Init+0x2c0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	608b      	str	r3, [r1, #8]
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fae:	4b29      	ldr	r3, [pc, #164]	; (8002054 <HAL_GPIO_Init+0x2c0>)
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	4927      	ldr	r1, [pc, #156]	; (8002054 <HAL_GPIO_Init+0x2c0>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fc8:	4b22      	ldr	r3, [pc, #136]	; (8002054 <HAL_GPIO_Init+0x2c0>)
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	4921      	ldr	r1, [pc, #132]	; (8002054 <HAL_GPIO_Init+0x2c0>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	60cb      	str	r3, [r1, #12]
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <HAL_GPIO_Init+0x2c0>)
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	491d      	ldr	r1, [pc, #116]	; (8002054 <HAL_GPIO_Init+0x2c0>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d006      	beq.n	8001ffe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <HAL_GPIO_Init+0x2c0>)
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4917      	ldr	r1, [pc, #92]	; (8002054 <HAL_GPIO_Init+0x2c0>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <HAL_GPIO_Init+0x2c0>)
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	43db      	mvns	r3, r3
 8002006:	4913      	ldr	r1, [pc, #76]	; (8002054 <HAL_GPIO_Init+0x2c0>)
 8002008:	4013      	ands	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d01f      	beq.n	8002058 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002018:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_GPIO_Init+0x2c0>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	490d      	ldr	r1, [pc, #52]	; (8002054 <HAL_GPIO_Init+0x2c0>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
 8002024:	e01f      	b.n	8002066 <HAL_GPIO_Init+0x2d2>
 8002026:	bf00      	nop
 8002028:	10320000 	.word	0x10320000
 800202c:	10310000 	.word	0x10310000
 8002030:	10220000 	.word	0x10220000
 8002034:	10210000 	.word	0x10210000
 8002038:	10120000 	.word	0x10120000
 800203c:	10110000 	.word	0x10110000
 8002040:	40021000 	.word	0x40021000
 8002044:	40010000 	.word	0x40010000
 8002048:	40010800 	.word	0x40010800
 800204c:	40010c00 	.word	0x40010c00
 8002050:	40011000 	.word	0x40011000
 8002054:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_GPIO_Init+0x2f4>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	43db      	mvns	r3, r3
 8002060:	4909      	ldr	r1, [pc, #36]	; (8002088 <HAL_GPIO_Init+0x2f4>)
 8002062:	4013      	ands	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	3301      	adds	r3, #1
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	fa22 f303 	lsr.w	r3, r2, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	f47f ae96 	bne.w	8001da8 <HAL_GPIO_Init+0x14>
  }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	372c      	adds	r7, #44	; 0x2c
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	40010400 	.word	0x40010400

0800208c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	807b      	strh	r3, [r7, #2]
 8002098:	4613      	mov	r3, r2
 800209a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800209c:	787b      	ldrb	r3, [r7, #1]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a2:	887a      	ldrh	r2, [r7, #2]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020a8:	e003      	b.n	80020b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020aa:	887b      	ldrh	r3, [r7, #2]
 80020ac:	041a      	lsls	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	611a      	str	r2, [r3, #16]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e272      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 8087 	beq.w	80021ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020dc:	4b92      	ldr	r3, [pc, #584]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d00c      	beq.n	8002102 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020e8:	4b8f      	ldr	r3, [pc, #572]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 030c 	and.w	r3, r3, #12
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d112      	bne.n	800211a <HAL_RCC_OscConfig+0x5e>
 80020f4:	4b8c      	ldr	r3, [pc, #560]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002100:	d10b      	bne.n	800211a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002102:	4b89      	ldr	r3, [pc, #548]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d06c      	beq.n	80021e8 <HAL_RCC_OscConfig+0x12c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d168      	bne.n	80021e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e24c      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x76>
 8002124:	4b80      	ldr	r3, [pc, #512]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a7f      	ldr	r2, [pc, #508]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800212a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	e02e      	b.n	8002190 <HAL_RCC_OscConfig+0xd4>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x98>
 800213a:	4b7b      	ldr	r3, [pc, #492]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a7a      	ldr	r2, [pc, #488]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b78      	ldr	r3, [pc, #480]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a77      	ldr	r2, [pc, #476]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800214c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e01d      	b.n	8002190 <HAL_RCC_OscConfig+0xd4>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0xbc>
 800215e:	4b72      	ldr	r3, [pc, #456]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a71      	ldr	r2, [pc, #452]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b6f      	ldr	r3, [pc, #444]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a6e      	ldr	r2, [pc, #440]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e00b      	b.n	8002190 <HAL_RCC_OscConfig+0xd4>
 8002178:	4b6b      	ldr	r3, [pc, #428]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a6a      	ldr	r2, [pc, #424]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800217e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	4b68      	ldr	r3, [pc, #416]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a67      	ldr	r2, [pc, #412]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800218a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d013      	beq.n	80021c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7ff fcea 	bl	8001b70 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff fce6 	bl	8001b70 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e200      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b5d      	ldr	r3, [pc, #372]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0xe4>
 80021be:	e014      	b.n	80021ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff fcd6 	bl	8001b70 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c8:	f7ff fcd2 	bl	8001b70 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e1ec      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	4b53      	ldr	r3, [pc, #332]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x10c>
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d063      	beq.n	80022be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021f6:	4b4c      	ldr	r3, [pc, #304]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002202:	4b49      	ldr	r3, [pc, #292]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b08      	cmp	r3, #8
 800220c:	d11c      	bne.n	8002248 <HAL_RCC_OscConfig+0x18c>
 800220e:	4b46      	ldr	r3, [pc, #280]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d116      	bne.n	8002248 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221a:	4b43      	ldr	r3, [pc, #268]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d005      	beq.n	8002232 <HAL_RCC_OscConfig+0x176>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d001      	beq.n	8002232 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e1c0      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002232:	4b3d      	ldr	r3, [pc, #244]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4939      	ldr	r1, [pc, #228]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002246:	e03a      	b.n	80022be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d020      	beq.n	8002292 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002250:	4b36      	ldr	r3, [pc, #216]	; (800232c <HAL_RCC_OscConfig+0x270>)
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7ff fc8b 	bl	8001b70 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225e:	f7ff fc87 	bl	8001b70 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e1a1      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227c:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4927      	ldr	r1, [pc, #156]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]
 8002290:	e015      	b.n	80022be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002292:	4b26      	ldr	r3, [pc, #152]	; (800232c <HAL_RCC_OscConfig+0x270>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff fc6a 	bl	8001b70 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a0:	f7ff fc66 	bl	8001b70 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e180      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d03a      	beq.n	8002340 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d019      	beq.n	8002306 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d2:	4b17      	ldr	r3, [pc, #92]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d8:	f7ff fc4a 	bl	8001b70 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e0:	f7ff fc46 	bl	8001b70 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e160      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f2:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022fe:	2001      	movs	r0, #1
 8002300:	f000 face 	bl	80028a0 <RCC_Delay>
 8002304:	e01c      	b.n	8002340 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002306:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230c:	f7ff fc30 	bl	8001b70 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002312:	e00f      	b.n	8002334 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002314:	f7ff fc2c 	bl	8001b70 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d908      	bls.n	8002334 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e146      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000
 800232c:	42420000 	.word	0x42420000
 8002330:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002334:	4b92      	ldr	r3, [pc, #584]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1e9      	bne.n	8002314 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80a6 	beq.w	800249a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234e:	2300      	movs	r3, #0
 8002350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002352:	4b8b      	ldr	r3, [pc, #556]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10d      	bne.n	800237a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	4b88      	ldr	r3, [pc, #544]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	4a87      	ldr	r2, [pc, #540]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002368:	61d3      	str	r3, [r2, #28]
 800236a:	4b85      	ldr	r3, [pc, #532]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002376:	2301      	movs	r3, #1
 8002378:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237a:	4b82      	ldr	r3, [pc, #520]	; (8002584 <HAL_RCC_OscConfig+0x4c8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d118      	bne.n	80023b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002386:	4b7f      	ldr	r3, [pc, #508]	; (8002584 <HAL_RCC_OscConfig+0x4c8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a7e      	ldr	r2, [pc, #504]	; (8002584 <HAL_RCC_OscConfig+0x4c8>)
 800238c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002392:	f7ff fbed 	bl	8001b70 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239a:	f7ff fbe9 	bl	8001b70 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b64      	cmp	r3, #100	; 0x64
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e103      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	4b75      	ldr	r3, [pc, #468]	; (8002584 <HAL_RCC_OscConfig+0x4c8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d106      	bne.n	80023ce <HAL_RCC_OscConfig+0x312>
 80023c0:	4b6f      	ldr	r3, [pc, #444]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	4a6e      	ldr	r2, [pc, #440]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6213      	str	r3, [r2, #32]
 80023cc:	e02d      	b.n	800242a <HAL_RCC_OscConfig+0x36e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x334>
 80023d6:	4b6a      	ldr	r3, [pc, #424]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4a69      	ldr	r2, [pc, #420]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	6213      	str	r3, [r2, #32]
 80023e2:	4b67      	ldr	r3, [pc, #412]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a66      	ldr	r2, [pc, #408]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	f023 0304 	bic.w	r3, r3, #4
 80023ec:	6213      	str	r3, [r2, #32]
 80023ee:	e01c      	b.n	800242a <HAL_RCC_OscConfig+0x36e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b05      	cmp	r3, #5
 80023f6:	d10c      	bne.n	8002412 <HAL_RCC_OscConfig+0x356>
 80023f8:	4b61      	ldr	r3, [pc, #388]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4a60      	ldr	r2, [pc, #384]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	f043 0304 	orr.w	r3, r3, #4
 8002402:	6213      	str	r3, [r2, #32]
 8002404:	4b5e      	ldr	r3, [pc, #376]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	4a5d      	ldr	r2, [pc, #372]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6213      	str	r3, [r2, #32]
 8002410:	e00b      	b.n	800242a <HAL_RCC_OscConfig+0x36e>
 8002412:	4b5b      	ldr	r3, [pc, #364]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a5a      	ldr	r2, [pc, #360]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	6213      	str	r3, [r2, #32]
 800241e:	4b58      	ldr	r3, [pc, #352]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4a57      	ldr	r2, [pc, #348]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d015      	beq.n	800245e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002432:	f7ff fb9d 	bl	8001b70 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7ff fb99 	bl	8001b70 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	; 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e0b1      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002450:	4b4b      	ldr	r3, [pc, #300]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ee      	beq.n	800243a <HAL_RCC_OscConfig+0x37e>
 800245c:	e014      	b.n	8002488 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245e:	f7ff fb87 	bl	8001b70 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002464:	e00a      	b.n	800247c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7ff fb83 	bl	8001b70 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f241 3288 	movw	r2, #5000	; 0x1388
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e09b      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247c:	4b40      	ldr	r3, [pc, #256]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1ee      	bne.n	8002466 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002488:	7dfb      	ldrb	r3, [r7, #23]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d105      	bne.n	800249a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248e:	4b3c      	ldr	r3, [pc, #240]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	4a3b      	ldr	r2, [pc, #236]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002498:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 8087 	beq.w	80025b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a4:	4b36      	ldr	r3, [pc, #216]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d061      	beq.n	8002574 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d146      	bne.n	8002546 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b8:	4b33      	ldr	r3, [pc, #204]	; (8002588 <HAL_RCC_OscConfig+0x4cc>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024be:	f7ff fb57 	bl	8001b70 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c6:	f7ff fb53 	bl	8001b70 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e06d      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d8:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ec:	d108      	bne.n	8002500 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ee:	4b24      	ldr	r3, [pc, #144]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	4921      	ldr	r1, [pc, #132]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002500:	4b1f      	ldr	r3, [pc, #124]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a19      	ldr	r1, [r3, #32]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	430b      	orrs	r3, r1
 8002512:	491b      	ldr	r1, [pc, #108]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <HAL_RCC_OscConfig+0x4cc>)
 800251a:	2201      	movs	r2, #1
 800251c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251e:	f7ff fb27 	bl	8001b70 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002526:	f7ff fb23 	bl	8001b70 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e03d      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x46a>
 8002544:	e035      	b.n	80025b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <HAL_RCC_OscConfig+0x4cc>)
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff fb10 	bl	8001b70 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002554:	f7ff fb0c 	bl	8001b70 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e026      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x498>
 8002572:	e01e      	b.n	80025b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d107      	bne.n	800258c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e019      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
 8002580:	40021000 	.word	0x40021000
 8002584:	40007000 	.word	0x40007000
 8002588:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_OscConfig+0x500>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	429a      	cmp	r2, r3
 800259e:	d106      	bne.n	80025ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d001      	beq.n	80025b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000

080025c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0d0      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d4:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d910      	bls.n	8002604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b67      	ldr	r3, [pc, #412]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 0207 	bic.w	r2, r3, #7
 80025ea:	4965      	ldr	r1, [pc, #404]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b63      	ldr	r3, [pc, #396]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0b8      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800261c:	4b59      	ldr	r3, [pc, #356]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4a58      	ldr	r2, [pc, #352]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002626:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002634:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4a52      	ldr	r2, [pc, #328]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800263e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002640:	4b50      	ldr	r3, [pc, #320]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	494d      	ldr	r1, [pc, #308]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d040      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d115      	bne.n	800269e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e07f      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d107      	bne.n	800268e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267e:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e073      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268e:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e06b      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269e:	4b39      	ldr	r3, [pc, #228]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f023 0203 	bic.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4936      	ldr	r1, [pc, #216]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b0:	f7ff fa5e 	bl	8001b70 <HAL_GetTick>
 80026b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	e00a      	b.n	80026ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b8:	f7ff fa5a 	bl	8001b70 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e053      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 020c 	and.w	r2, r3, #12
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	429a      	cmp	r2, r3
 80026de:	d1eb      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e0:	4b27      	ldr	r3, [pc, #156]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d210      	bcs.n	8002710 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 0207 	bic.w	r2, r3, #7
 80026f6:	4922      	ldr	r1, [pc, #136]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e032      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800271c:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4916      	ldr	r1, [pc, #88]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800273a:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	490e      	ldr	r1, [pc, #56]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800274e:	f000 f821 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 8002752:	4602      	mov	r2, r0
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	490a      	ldr	r1, [pc, #40]	; (8002788 <HAL_RCC_ClockConfig+0x1c8>)
 8002760:	5ccb      	ldrb	r3, [r1, r3]
 8002762:	fa22 f303 	lsr.w	r3, r2, r3
 8002766:	4a09      	ldr	r2, [pc, #36]	; (800278c <HAL_RCC_ClockConfig+0x1cc>)
 8002768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_RCC_ClockConfig+0x1d0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff f9bc 	bl	8001aec <HAL_InitTick>

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40022000 	.word	0x40022000
 8002784:	40021000 	.word	0x40021000
 8002788:	08006354 	.word	0x08006354
 800278c:	20000004 	.word	0x20000004
 8002790:	20000008 	.word	0x20000008

08002794 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	2300      	movs	r3, #0
 80027a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ae:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <HAL_RCC_GetSysClockFreq+0x94>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d002      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0x30>
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d003      	beq.n	80027ca <HAL_RCC_GetSysClockFreq+0x36>
 80027c2:	e027      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_RCC_GetSysClockFreq+0x98>)
 80027c6:	613b      	str	r3, [r7, #16]
      break;
 80027c8:	e027      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	0c9b      	lsrs	r3, r3, #18
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	4a17      	ldr	r2, [pc, #92]	; (8002830 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027d4:	5cd3      	ldrb	r3, [r2, r3]
 80027d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d010      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027e2:	4b11      	ldr	r3, [pc, #68]	; (8002828 <HAL_RCC_GetSysClockFreq+0x94>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	0c5b      	lsrs	r3, r3, #17
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	4a11      	ldr	r2, [pc, #68]	; (8002834 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027ee:	5cd3      	ldrb	r3, [r2, r3]
 80027f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a0d      	ldr	r2, [pc, #52]	; (800282c <HAL_RCC_GetSysClockFreq+0x98>)
 80027f6:	fb03 f202 	mul.w	r2, r3, r2
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	e004      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a0c      	ldr	r2, [pc, #48]	; (8002838 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002808:	fb02 f303 	mul.w	r3, r2, r3
 800280c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	613b      	str	r3, [r7, #16]
      break;
 8002812:	e002      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_GetSysClockFreq+0x98>)
 8002816:	613b      	str	r3, [r7, #16]
      break;
 8002818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800281a:	693b      	ldr	r3, [r7, #16]
}
 800281c:	4618      	mov	r0, r3
 800281e:	371c      	adds	r7, #28
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40021000 	.word	0x40021000
 800282c:	007a1200 	.word	0x007a1200
 8002830:	0800636c 	.word	0x0800636c
 8002834:	0800637c 	.word	0x0800637c
 8002838:	003d0900 	.word	0x003d0900

0800283c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002840:	4b02      	ldr	r3, [pc, #8]	; (800284c <HAL_RCC_GetHCLKFreq+0x10>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	20000004 	.word	0x20000004

08002850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002854:	f7ff fff2 	bl	800283c <HAL_RCC_GetHCLKFreq>
 8002858:	4602      	mov	r2, r0
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	0a1b      	lsrs	r3, r3, #8
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	4903      	ldr	r1, [pc, #12]	; (8002874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002866:	5ccb      	ldrb	r3, [r1, r3]
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800286c:	4618      	mov	r0, r3
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40021000 	.word	0x40021000
 8002874:	08006364 	.word	0x08006364

08002878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800287c:	f7ff ffde 	bl	800283c <HAL_RCC_GetHCLKFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	0adb      	lsrs	r3, r3, #11
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4903      	ldr	r1, [pc, #12]	; (800289c <HAL_RCC_GetPCLK2Freq+0x24>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40021000 	.word	0x40021000
 800289c:	08006364 	.word	0x08006364

080028a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028a8:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <RCC_Delay+0x34>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <RCC_Delay+0x38>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0a5b      	lsrs	r3, r3, #9
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028bc:	bf00      	nop
  }
  while (Delay --);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1e5a      	subs	r2, r3, #1
 80028c2:	60fa      	str	r2, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f9      	bne.n	80028bc <RCC_Delay+0x1c>
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	20000004 	.word	0x20000004
 80028d8:	10624dd3 	.word	0x10624dd3

080028dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e076      	b.n	80029dc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d108      	bne.n	8002908 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028fe:	d009      	beq.n	8002914 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	61da      	str	r2, [r3, #28]
 8002906:	e005      	b.n	8002914 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe ff1c 	bl	800176c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800294a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002998:	ea42 0103 	orr.w	r1, r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	0c1a      	lsrs	r2, r3, #16
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f002 0204 	and.w	r2, r2, #4
 80029ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69da      	ldr	r2, [r3, #28]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d002      	beq.n	8002a0a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002a04:	2302      	movs	r3, #2
 8002a06:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a08:	e0fb      	b.n	8002c02 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a12:	d112      	bne.n	8002a3a <HAL_SPI_Receive+0x56>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10e      	bne.n	8002a3a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2204      	movs	r2, #4
 8002a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a24:	88fa      	ldrh	r2, [r7, #6]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f8ef 	bl	8002c14 <HAL_SPI_TransmitReceive>
 8002a36:	4603      	mov	r3, r0
 8002a38:	e0e8      	b.n	8002c0c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_SPI_Receive+0x64>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e0e1      	b.n	8002c0c <HAL_SPI_Receive+0x228>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a50:	f7ff f88e 	bl	8001b70 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_SPI_Receive+0x7e>
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d102      	bne.n	8002a68 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a66:	e0cc      	b.n	8002c02 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	88fa      	ldrh	r2, [r7, #6]
 8002a80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	88fa      	ldrh	r2, [r7, #6]
 8002a86:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aae:	d10f      	bne.n	8002ad0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002abe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ace:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ada:	2b40      	cmp	r3, #64	; 0x40
 8002adc:	d007      	beq.n	8002aee <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d16a      	bne.n	8002bcc <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002af6:	e032      	b.n	8002b5e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d115      	bne.n	8002b32 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f103 020c 	add.w	r2, r3, #12
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	7812      	ldrb	r2, [r2, #0]
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b30:	e015      	b.n	8002b5e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b32:	f7ff f81d 	bl	8001b70 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d803      	bhi.n	8002b4a <HAL_SPI_Receive+0x166>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d102      	bne.n	8002b50 <HAL_SPI_Receive+0x16c>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d106      	bne.n	8002b5e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002b5c:	e051      	b.n	8002c02 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1c7      	bne.n	8002af8 <HAL_SPI_Receive+0x114>
 8002b68:	e035      	b.n	8002bd6 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d113      	bne.n	8002ba0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b82:	b292      	uxth	r2, r2
 8002b84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	1c9a      	adds	r2, r3, #2
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b9e:	e015      	b.n	8002bcc <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ba0:	f7fe ffe6 	bl	8001b70 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d803      	bhi.n	8002bb8 <HAL_SPI_Receive+0x1d4>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb6:	d102      	bne.n	8002bbe <HAL_SPI_Receive+0x1da>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002bca:	e01a      	b.n	8002c02 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1c9      	bne.n	8002b6a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	6839      	ldr	r1, [r7, #0]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fa52 	bl	8003084 <SPI_EndRxTransaction>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	75fb      	strb	r3, [r7, #23]
 8002bf8:	e003      	b.n	8002c02 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08c      	sub	sp, #48	; 0x30
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c22:	2301      	movs	r3, #1
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_SPI_TransmitReceive+0x26>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e198      	b.n	8002f6c <HAL_SPI_TransmitReceive+0x358>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c42:	f7fe ff95 	bl	8001b70 <HAL_GetTick>
 8002c46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c58:	887b      	ldrh	r3, [r7, #2]
 8002c5a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d00f      	beq.n	8002c84 <HAL_SPI_TransmitReceive+0x70>
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c6a:	d107      	bne.n	8002c7c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d103      	bne.n	8002c7c <HAL_SPI_TransmitReceive+0x68>
 8002c74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d003      	beq.n	8002c84 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c82:	e16d      	b.n	8002f60 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_SPI_TransmitReceive+0x82>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <HAL_SPI_TransmitReceive+0x82>
 8002c90:	887b      	ldrh	r3, [r7, #2]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d103      	bne.n	8002c9e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c9c:	e160      	b.n	8002f60 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d003      	beq.n	8002cb2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2205      	movs	r2, #5
 8002cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	887a      	ldrh	r2, [r7, #2]
 8002cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	887a      	ldrh	r2, [r7, #2]
 8002cc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	887a      	ldrh	r2, [r7, #2]
 8002cda:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf2:	2b40      	cmp	r3, #64	; 0x40
 8002cf4:	d007      	beq.n	8002d06 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d0e:	d17c      	bne.n	8002e0a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_SPI_TransmitReceive+0x10a>
 8002d18:	8b7b      	ldrh	r3, [r7, #26]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d16a      	bne.n	8002df4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	881a      	ldrh	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	1c9a      	adds	r2, r3, #2
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d42:	e057      	b.n	8002df4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d11b      	bne.n	8002d8a <HAL_SPI_TransmitReceive+0x176>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d016      	beq.n	8002d8a <HAL_SPI_TransmitReceive+0x176>
 8002d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d113      	bne.n	8002d8a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	881a      	ldrh	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	1c9a      	adds	r2, r3, #2
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d119      	bne.n	8002dcc <HAL_SPI_TransmitReceive+0x1b8>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d014      	beq.n	8002dcc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dac:	b292      	uxth	r2, r2
 8002dae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db4:	1c9a      	adds	r2, r3, #2
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002dcc:	f7fe fed0 	bl	8001b70 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d80b      	bhi.n	8002df4 <HAL_SPI_TransmitReceive+0x1e0>
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de2:	d007      	beq.n	8002df4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002df2:	e0b5      	b.n	8002f60 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1a2      	bne.n	8002d44 <HAL_SPI_TransmitReceive+0x130>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d19d      	bne.n	8002d44 <HAL_SPI_TransmitReceive+0x130>
 8002e08:	e080      	b.n	8002f0c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_SPI_TransmitReceive+0x204>
 8002e12:	8b7b      	ldrh	r3, [r7, #26]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d16f      	bne.n	8002ef8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	330c      	adds	r3, #12
 8002e22:	7812      	ldrb	r2, [r2, #0]
 8002e24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e3e:	e05b      	b.n	8002ef8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d11c      	bne.n	8002e88 <HAL_SPI_TransmitReceive+0x274>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d017      	beq.n	8002e88 <HAL_SPI_TransmitReceive+0x274>
 8002e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d114      	bne.n	8002e88 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	330c      	adds	r3, #12
 8002e68:	7812      	ldrb	r2, [r2, #0]
 8002e6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d119      	bne.n	8002eca <HAL_SPI_TransmitReceive+0x2b6>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d014      	beq.n	8002eca <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002eca:	f7fe fe51 	bl	8001b70 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d803      	bhi.n	8002ee2 <HAL_SPI_TransmitReceive+0x2ce>
 8002eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d102      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x2d4>
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d107      	bne.n	8002ef8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002ef6:	e033      	b.n	8002f60 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d19e      	bne.n	8002e40 <HAL_SPI_TransmitReceive+0x22c>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d199      	bne.n	8002e40 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f909 	bl	8003128 <SPI_EndRxTxTransaction>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d006      	beq.n	8002f2a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002f28:	e01a      	b.n	8002f60 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10a      	bne.n	8002f48 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f56:	e003      	b.n	8002f60 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3730      	adds	r7, #48	; 0x30
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f84:	f7fe fdf4 	bl	8001b70 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	4413      	add	r3, r2
 8002f92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f94:	f7fe fdec 	bl	8001b70 <HAL_GetTick>
 8002f98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f9a:	4b39      	ldr	r3, [pc, #228]	; (8003080 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	015b      	lsls	r3, r3, #5
 8002fa0:	0d1b      	lsrs	r3, r3, #20
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	fb02 f303 	mul.w	r3, r2, r3
 8002fa8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002faa:	e054      	b.n	8003056 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb2:	d050      	beq.n	8003056 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fb4:	f7fe fddc 	bl	8001b70 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d902      	bls.n	8002fca <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d13d      	bne.n	8003046 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fe2:	d111      	bne.n	8003008 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fec:	d004      	beq.n	8002ff8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff6:	d107      	bne.n	8003008 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003006:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003010:	d10f      	bne.n	8003032 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003030:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e017      	b.n	8003076 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	3b01      	subs	r3, #1
 8003054:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4013      	ands	r3, r2
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	429a      	cmp	r2, r3
 8003064:	bf0c      	ite	eq
 8003066:	2301      	moveq	r3, #1
 8003068:	2300      	movne	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	429a      	cmp	r2, r3
 8003072:	d19b      	bne.n	8002fac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000004 	.word	0x20000004

08003084 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003098:	d111      	bne.n	80030be <SPI_EndRxTransaction+0x3a>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a2:	d004      	beq.n	80030ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ac:	d107      	bne.n	80030be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030bc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030c6:	d117      	bne.n	80030f8 <SPI_EndRxTransaction+0x74>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d0:	d112      	bne.n	80030f8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2200      	movs	r2, #0
 80030da:	2101      	movs	r1, #1
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f7ff ff49 	bl	8002f74 <SPI_WaitFlagStateUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01a      	beq.n	800311e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ec:	f043 0220 	orr.w	r2, r3, #32
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e013      	b.n	8003120 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2200      	movs	r2, #0
 8003100:	2180      	movs	r1, #128	; 0x80
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f7ff ff36 	bl	8002f74 <SPI_WaitFlagStateUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d007      	beq.n	800311e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003112:	f043 0220 	orr.w	r2, r3, #32
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e000      	b.n	8003120 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2200      	movs	r2, #0
 800313c:	2180      	movs	r1, #128	; 0x80
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f7ff ff18 	bl	8002f74 <SPI_WaitFlagStateUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	f043 0220 	orr.w	r2, r3, #32
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e000      	b.n	800315c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e042      	b.n	80031fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fe fb38 	bl	8001800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2224      	movs	r2, #36	; 0x24
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f91d 	bl	80033e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	4613      	mov	r3, r2
 8003212:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b20      	cmp	r3, #32
 8003222:	d16d      	bne.n	8003300 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_UART_Transmit+0x2c>
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e066      	b.n	8003302 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2221      	movs	r2, #33	; 0x21
 800323e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003242:	f7fe fc95 	bl	8001b70 <HAL_GetTick>
 8003246:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	88fa      	ldrh	r2, [r7, #6]
 800324c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325c:	d108      	bne.n	8003270 <HAL_UART_Transmit+0x6c>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d104      	bne.n	8003270 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	e003      	b.n	8003278 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003274:	2300      	movs	r3, #0
 8003276:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003278:	e02a      	b.n	80032d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2200      	movs	r2, #0
 8003282:	2180      	movs	r1, #128	; 0x80
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 f840 	bl	800330a <UART_WaitOnFlagUntilTimeout>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e036      	b.n	8003302 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10b      	bne.n	80032b2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	3302      	adds	r3, #2
 80032ae:	61bb      	str	r3, [r7, #24]
 80032b0:	e007      	b.n	80032c2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	781a      	ldrb	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	3301      	adds	r3, #1
 80032c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1cf      	bne.n	800327a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2200      	movs	r2, #0
 80032e2:	2140      	movs	r1, #64	; 0x40
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f810 	bl	800330a <UART_WaitOnFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e006      	b.n	8003302 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e000      	b.n	8003302 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
  }
}
 8003302:	4618      	mov	r0, r3
 8003304:	3720      	adds	r7, #32
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b090      	sub	sp, #64	; 0x40
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	603b      	str	r3, [r7, #0]
 8003316:	4613      	mov	r3, r2
 8003318:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800331a:	e050      	b.n	80033be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003322:	d04c      	beq.n	80033be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <UART_WaitOnFlagUntilTimeout+0x30>
 800332a:	f7fe fc21 	bl	8001b70 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003336:	429a      	cmp	r2, r3
 8003338:	d241      	bcs.n	80033be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	330c      	adds	r3, #12
 8003340:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003344:	e853 3f00 	ldrex	r3, [r3]
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	330c      	adds	r3, #12
 8003358:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800335a:	637a      	str	r2, [r7, #52]	; 0x34
 800335c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e5      	bne.n	800333a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3314      	adds	r3, #20
 8003374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	e853 3f00 	ldrex	r3, [r3]
 800337c:	613b      	str	r3, [r7, #16]
   return(result);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	63bb      	str	r3, [r7, #56]	; 0x38
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3314      	adds	r3, #20
 800338c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800338e:	623a      	str	r2, [r7, #32]
 8003390:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003392:	69f9      	ldr	r1, [r7, #28]
 8003394:	6a3a      	ldr	r2, [r7, #32]
 8003396:	e841 2300 	strex	r3, r2, [r1]
 800339a:	61bb      	str	r3, [r7, #24]
   return(result);
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1e5      	bne.n	800336e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e00f      	b.n	80033de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4013      	ands	r3, r2
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	bf0c      	ite	eq
 80033ce:	2301      	moveq	r3, #1
 80033d0:	2300      	movne	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d09f      	beq.n	800331c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3740      	adds	r7, #64	; 0x40
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003422:	f023 030c 	bic.w	r3, r3, #12
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6812      	ldr	r2, [r2, #0]
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	430b      	orrs	r3, r1
 800342e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a2c      	ldr	r2, [pc, #176]	; (80034fc <UART_SetConfig+0x114>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d103      	bne.n	8003458 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003450:	f7ff fa12 	bl	8002878 <HAL_RCC_GetPCLK2Freq>
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	e002      	b.n	800345e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003458:	f7ff f9fa 	bl	8002850 <HAL_RCC_GetPCLK1Freq>
 800345c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	009a      	lsls	r2, r3, #2
 8003468:	441a      	add	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	fbb2 f3f3 	udiv	r3, r2, r3
 8003474:	4a22      	ldr	r2, [pc, #136]	; (8003500 <UART_SetConfig+0x118>)
 8003476:	fba2 2303 	umull	r2, r3, r2, r3
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	0119      	lsls	r1, r3, #4
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	009a      	lsls	r2, r3, #2
 8003488:	441a      	add	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	fbb2 f2f3 	udiv	r2, r2, r3
 8003494:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <UART_SetConfig+0x118>)
 8003496:	fba3 0302 	umull	r0, r3, r3, r2
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2064      	movs	r0, #100	; 0x64
 800349e:	fb00 f303 	mul.w	r3, r0, r3
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	3332      	adds	r3, #50	; 0x32
 80034a8:	4a15      	ldr	r2, [pc, #84]	; (8003500 <UART_SetConfig+0x118>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b4:	4419      	add	r1, r3
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	009a      	lsls	r2, r3, #2
 80034c0:	441a      	add	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <UART_SetConfig+0x118>)
 80034ce:	fba3 0302 	umull	r0, r3, r3, r2
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2064      	movs	r0, #100	; 0x64
 80034d6:	fb00 f303 	mul.w	r3, r0, r3
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	3332      	adds	r3, #50	; 0x32
 80034e0:	4a07      	ldr	r2, [pc, #28]	; (8003500 <UART_SetConfig+0x118>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	f003 020f 	and.w	r2, r3, #15
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	440a      	add	r2, r1
 80034f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40013800 	.word	0x40013800
 8003500:	51eb851f 	.word	0x51eb851f

08003504 <__cvt>:
 8003504:	2b00      	cmp	r3, #0
 8003506:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800350a:	461f      	mov	r7, r3
 800350c:	bfbb      	ittet	lt
 800350e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003512:	461f      	movlt	r7, r3
 8003514:	2300      	movge	r3, #0
 8003516:	232d      	movlt	r3, #45	; 0x2d
 8003518:	b088      	sub	sp, #32
 800351a:	4614      	mov	r4, r2
 800351c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800351e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003520:	7013      	strb	r3, [r2, #0]
 8003522:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003524:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003528:	f023 0820 	bic.w	r8, r3, #32
 800352c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003530:	d005      	beq.n	800353e <__cvt+0x3a>
 8003532:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003536:	d100      	bne.n	800353a <__cvt+0x36>
 8003538:	3501      	adds	r5, #1
 800353a:	2302      	movs	r3, #2
 800353c:	e000      	b.n	8003540 <__cvt+0x3c>
 800353e:	2303      	movs	r3, #3
 8003540:	aa07      	add	r2, sp, #28
 8003542:	9204      	str	r2, [sp, #16]
 8003544:	aa06      	add	r2, sp, #24
 8003546:	e9cd a202 	strd	sl, r2, [sp, #8]
 800354a:	e9cd 3500 	strd	r3, r5, [sp]
 800354e:	4622      	mov	r2, r4
 8003550:	463b      	mov	r3, r7
 8003552:	f000 fe71 	bl	8004238 <_dtoa_r>
 8003556:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800355a:	4606      	mov	r6, r0
 800355c:	d102      	bne.n	8003564 <__cvt+0x60>
 800355e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003560:	07db      	lsls	r3, r3, #31
 8003562:	d522      	bpl.n	80035aa <__cvt+0xa6>
 8003564:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003568:	eb06 0905 	add.w	r9, r6, r5
 800356c:	d110      	bne.n	8003590 <__cvt+0x8c>
 800356e:	7833      	ldrb	r3, [r6, #0]
 8003570:	2b30      	cmp	r3, #48	; 0x30
 8003572:	d10a      	bne.n	800358a <__cvt+0x86>
 8003574:	2200      	movs	r2, #0
 8003576:	2300      	movs	r3, #0
 8003578:	4620      	mov	r0, r4
 800357a:	4639      	mov	r1, r7
 800357c:	f7fd fa14 	bl	80009a8 <__aeabi_dcmpeq>
 8003580:	b918      	cbnz	r0, 800358a <__cvt+0x86>
 8003582:	f1c5 0501 	rsb	r5, r5, #1
 8003586:	f8ca 5000 	str.w	r5, [sl]
 800358a:	f8da 3000 	ldr.w	r3, [sl]
 800358e:	4499      	add	r9, r3
 8003590:	2200      	movs	r2, #0
 8003592:	2300      	movs	r3, #0
 8003594:	4620      	mov	r0, r4
 8003596:	4639      	mov	r1, r7
 8003598:	f7fd fa06 	bl	80009a8 <__aeabi_dcmpeq>
 800359c:	b108      	cbz	r0, 80035a2 <__cvt+0x9e>
 800359e:	f8cd 901c 	str.w	r9, [sp, #28]
 80035a2:	2230      	movs	r2, #48	; 0x30
 80035a4:	9b07      	ldr	r3, [sp, #28]
 80035a6:	454b      	cmp	r3, r9
 80035a8:	d307      	bcc.n	80035ba <__cvt+0xb6>
 80035aa:	4630      	mov	r0, r6
 80035ac:	9b07      	ldr	r3, [sp, #28]
 80035ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80035b0:	1b9b      	subs	r3, r3, r6
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	b008      	add	sp, #32
 80035b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ba:	1c59      	adds	r1, r3, #1
 80035bc:	9107      	str	r1, [sp, #28]
 80035be:	701a      	strb	r2, [r3, #0]
 80035c0:	e7f0      	b.n	80035a4 <__cvt+0xa0>

080035c2 <__exponent>:
 80035c2:	4603      	mov	r3, r0
 80035c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035c6:	2900      	cmp	r1, #0
 80035c8:	f803 2b02 	strb.w	r2, [r3], #2
 80035cc:	bfb6      	itet	lt
 80035ce:	222d      	movlt	r2, #45	; 0x2d
 80035d0:	222b      	movge	r2, #43	; 0x2b
 80035d2:	4249      	neglt	r1, r1
 80035d4:	2909      	cmp	r1, #9
 80035d6:	7042      	strb	r2, [r0, #1]
 80035d8:	dd2a      	ble.n	8003630 <__exponent+0x6e>
 80035da:	f10d 0207 	add.w	r2, sp, #7
 80035de:	4617      	mov	r7, r2
 80035e0:	260a      	movs	r6, #10
 80035e2:	fb91 f5f6 	sdiv	r5, r1, r6
 80035e6:	4694      	mov	ip, r2
 80035e8:	fb06 1415 	mls	r4, r6, r5, r1
 80035ec:	3430      	adds	r4, #48	; 0x30
 80035ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80035f2:	460c      	mov	r4, r1
 80035f4:	2c63      	cmp	r4, #99	; 0x63
 80035f6:	4629      	mov	r1, r5
 80035f8:	f102 32ff 	add.w	r2, r2, #4294967295
 80035fc:	dcf1      	bgt.n	80035e2 <__exponent+0x20>
 80035fe:	3130      	adds	r1, #48	; 0x30
 8003600:	f1ac 0402 	sub.w	r4, ip, #2
 8003604:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003608:	4622      	mov	r2, r4
 800360a:	1c41      	adds	r1, r0, #1
 800360c:	42ba      	cmp	r2, r7
 800360e:	d30a      	bcc.n	8003626 <__exponent+0x64>
 8003610:	f10d 0209 	add.w	r2, sp, #9
 8003614:	eba2 020c 	sub.w	r2, r2, ip
 8003618:	42bc      	cmp	r4, r7
 800361a:	bf88      	it	hi
 800361c:	2200      	movhi	r2, #0
 800361e:	4413      	add	r3, r2
 8003620:	1a18      	subs	r0, r3, r0
 8003622:	b003      	add	sp, #12
 8003624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003626:	f812 5b01 	ldrb.w	r5, [r2], #1
 800362a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800362e:	e7ed      	b.n	800360c <__exponent+0x4a>
 8003630:	2330      	movs	r3, #48	; 0x30
 8003632:	3130      	adds	r1, #48	; 0x30
 8003634:	7083      	strb	r3, [r0, #2]
 8003636:	70c1      	strb	r1, [r0, #3]
 8003638:	1d03      	adds	r3, r0, #4
 800363a:	e7f1      	b.n	8003620 <__exponent+0x5e>

0800363c <_printf_float>:
 800363c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003640:	b091      	sub	sp, #68	; 0x44
 8003642:	460c      	mov	r4, r1
 8003644:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003648:	4616      	mov	r6, r2
 800364a:	461f      	mov	r7, r3
 800364c:	4605      	mov	r5, r0
 800364e:	f000 fce5 	bl	800401c <_localeconv_r>
 8003652:	6803      	ldr	r3, [r0, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	9309      	str	r3, [sp, #36]	; 0x24
 8003658:	f7fc fd7a 	bl	8000150 <strlen>
 800365c:	2300      	movs	r3, #0
 800365e:	930e      	str	r3, [sp, #56]	; 0x38
 8003660:	f8d8 3000 	ldr.w	r3, [r8]
 8003664:	900a      	str	r0, [sp, #40]	; 0x28
 8003666:	3307      	adds	r3, #7
 8003668:	f023 0307 	bic.w	r3, r3, #7
 800366c:	f103 0208 	add.w	r2, r3, #8
 8003670:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003674:	f8d4 b000 	ldr.w	fp, [r4]
 8003678:	f8c8 2000 	str.w	r2, [r8]
 800367c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003680:	4652      	mov	r2, sl
 8003682:	4643      	mov	r3, r8
 8003684:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003688:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800368c:	930b      	str	r3, [sp, #44]	; 0x2c
 800368e:	f04f 32ff 	mov.w	r2, #4294967295
 8003692:	4650      	mov	r0, sl
 8003694:	4b9c      	ldr	r3, [pc, #624]	; (8003908 <_printf_float+0x2cc>)
 8003696:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003698:	f7fd f9b8 	bl	8000a0c <__aeabi_dcmpun>
 800369c:	bb70      	cbnz	r0, 80036fc <_printf_float+0xc0>
 800369e:	f04f 32ff 	mov.w	r2, #4294967295
 80036a2:	4650      	mov	r0, sl
 80036a4:	4b98      	ldr	r3, [pc, #608]	; (8003908 <_printf_float+0x2cc>)
 80036a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036a8:	f7fd f992 	bl	80009d0 <__aeabi_dcmple>
 80036ac:	bb30      	cbnz	r0, 80036fc <_printf_float+0xc0>
 80036ae:	2200      	movs	r2, #0
 80036b0:	2300      	movs	r3, #0
 80036b2:	4650      	mov	r0, sl
 80036b4:	4641      	mov	r1, r8
 80036b6:	f7fd f981 	bl	80009bc <__aeabi_dcmplt>
 80036ba:	b110      	cbz	r0, 80036c2 <_printf_float+0x86>
 80036bc:	232d      	movs	r3, #45	; 0x2d
 80036be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c2:	4a92      	ldr	r2, [pc, #584]	; (800390c <_printf_float+0x2d0>)
 80036c4:	4b92      	ldr	r3, [pc, #584]	; (8003910 <_printf_float+0x2d4>)
 80036c6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80036ca:	bf94      	ite	ls
 80036cc:	4690      	movls	r8, r2
 80036ce:	4698      	movhi	r8, r3
 80036d0:	2303      	movs	r3, #3
 80036d2:	f04f 0a00 	mov.w	sl, #0
 80036d6:	6123      	str	r3, [r4, #16]
 80036d8:	f02b 0304 	bic.w	r3, fp, #4
 80036dc:	6023      	str	r3, [r4, #0]
 80036de:	4633      	mov	r3, r6
 80036e0:	4621      	mov	r1, r4
 80036e2:	4628      	mov	r0, r5
 80036e4:	9700      	str	r7, [sp, #0]
 80036e6:	aa0f      	add	r2, sp, #60	; 0x3c
 80036e8:	f000 f9d6 	bl	8003a98 <_printf_common>
 80036ec:	3001      	adds	r0, #1
 80036ee:	f040 8090 	bne.w	8003812 <_printf_float+0x1d6>
 80036f2:	f04f 30ff 	mov.w	r0, #4294967295
 80036f6:	b011      	add	sp, #68	; 0x44
 80036f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036fc:	4652      	mov	r2, sl
 80036fe:	4643      	mov	r3, r8
 8003700:	4650      	mov	r0, sl
 8003702:	4641      	mov	r1, r8
 8003704:	f7fd f982 	bl	8000a0c <__aeabi_dcmpun>
 8003708:	b148      	cbz	r0, 800371e <_printf_float+0xe2>
 800370a:	f1b8 0f00 	cmp.w	r8, #0
 800370e:	bfb8      	it	lt
 8003710:	232d      	movlt	r3, #45	; 0x2d
 8003712:	4a80      	ldr	r2, [pc, #512]	; (8003914 <_printf_float+0x2d8>)
 8003714:	bfb8      	it	lt
 8003716:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800371a:	4b7f      	ldr	r3, [pc, #508]	; (8003918 <_printf_float+0x2dc>)
 800371c:	e7d3      	b.n	80036c6 <_printf_float+0x8a>
 800371e:	6863      	ldr	r3, [r4, #4]
 8003720:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	d142      	bne.n	80037ae <_printf_float+0x172>
 8003728:	2306      	movs	r3, #6
 800372a:	6063      	str	r3, [r4, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	9206      	str	r2, [sp, #24]
 8003730:	aa0e      	add	r2, sp, #56	; 0x38
 8003732:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003736:	aa0d      	add	r2, sp, #52	; 0x34
 8003738:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800373c:	9203      	str	r2, [sp, #12]
 800373e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003742:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003746:	6023      	str	r3, [r4, #0]
 8003748:	6863      	ldr	r3, [r4, #4]
 800374a:	4652      	mov	r2, sl
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	4628      	mov	r0, r5
 8003750:	4643      	mov	r3, r8
 8003752:	910b      	str	r1, [sp, #44]	; 0x2c
 8003754:	f7ff fed6 	bl	8003504 <__cvt>
 8003758:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800375a:	4680      	mov	r8, r0
 800375c:	2947      	cmp	r1, #71	; 0x47
 800375e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003760:	d108      	bne.n	8003774 <_printf_float+0x138>
 8003762:	1cc8      	adds	r0, r1, #3
 8003764:	db02      	blt.n	800376c <_printf_float+0x130>
 8003766:	6863      	ldr	r3, [r4, #4]
 8003768:	4299      	cmp	r1, r3
 800376a:	dd40      	ble.n	80037ee <_printf_float+0x1b2>
 800376c:	f1a9 0902 	sub.w	r9, r9, #2
 8003770:	fa5f f989 	uxtb.w	r9, r9
 8003774:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003778:	d81f      	bhi.n	80037ba <_printf_float+0x17e>
 800377a:	464a      	mov	r2, r9
 800377c:	3901      	subs	r1, #1
 800377e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003782:	910d      	str	r1, [sp, #52]	; 0x34
 8003784:	f7ff ff1d 	bl	80035c2 <__exponent>
 8003788:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800378a:	4682      	mov	sl, r0
 800378c:	1813      	adds	r3, r2, r0
 800378e:	2a01      	cmp	r2, #1
 8003790:	6123      	str	r3, [r4, #16]
 8003792:	dc02      	bgt.n	800379a <_printf_float+0x15e>
 8003794:	6822      	ldr	r2, [r4, #0]
 8003796:	07d2      	lsls	r2, r2, #31
 8003798:	d501      	bpl.n	800379e <_printf_float+0x162>
 800379a:	3301      	adds	r3, #1
 800379c:	6123      	str	r3, [r4, #16]
 800379e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d09b      	beq.n	80036de <_printf_float+0xa2>
 80037a6:	232d      	movs	r3, #45	; 0x2d
 80037a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037ac:	e797      	b.n	80036de <_printf_float+0xa2>
 80037ae:	2947      	cmp	r1, #71	; 0x47
 80037b0:	d1bc      	bne.n	800372c <_printf_float+0xf0>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1ba      	bne.n	800372c <_printf_float+0xf0>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e7b7      	b.n	800372a <_printf_float+0xee>
 80037ba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80037be:	d118      	bne.n	80037f2 <_printf_float+0x1b6>
 80037c0:	2900      	cmp	r1, #0
 80037c2:	6863      	ldr	r3, [r4, #4]
 80037c4:	dd0b      	ble.n	80037de <_printf_float+0x1a2>
 80037c6:	6121      	str	r1, [r4, #16]
 80037c8:	b913      	cbnz	r3, 80037d0 <_printf_float+0x194>
 80037ca:	6822      	ldr	r2, [r4, #0]
 80037cc:	07d0      	lsls	r0, r2, #31
 80037ce:	d502      	bpl.n	80037d6 <_printf_float+0x19a>
 80037d0:	3301      	adds	r3, #1
 80037d2:	440b      	add	r3, r1
 80037d4:	6123      	str	r3, [r4, #16]
 80037d6:	f04f 0a00 	mov.w	sl, #0
 80037da:	65a1      	str	r1, [r4, #88]	; 0x58
 80037dc:	e7df      	b.n	800379e <_printf_float+0x162>
 80037de:	b913      	cbnz	r3, 80037e6 <_printf_float+0x1aa>
 80037e0:	6822      	ldr	r2, [r4, #0]
 80037e2:	07d2      	lsls	r2, r2, #31
 80037e4:	d501      	bpl.n	80037ea <_printf_float+0x1ae>
 80037e6:	3302      	adds	r3, #2
 80037e8:	e7f4      	b.n	80037d4 <_printf_float+0x198>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e7f2      	b.n	80037d4 <_printf_float+0x198>
 80037ee:	f04f 0967 	mov.w	r9, #103	; 0x67
 80037f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037f4:	4299      	cmp	r1, r3
 80037f6:	db05      	blt.n	8003804 <_printf_float+0x1c8>
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	6121      	str	r1, [r4, #16]
 80037fc:	07d8      	lsls	r0, r3, #31
 80037fe:	d5ea      	bpl.n	80037d6 <_printf_float+0x19a>
 8003800:	1c4b      	adds	r3, r1, #1
 8003802:	e7e7      	b.n	80037d4 <_printf_float+0x198>
 8003804:	2900      	cmp	r1, #0
 8003806:	bfcc      	ite	gt
 8003808:	2201      	movgt	r2, #1
 800380a:	f1c1 0202 	rsble	r2, r1, #2
 800380e:	4413      	add	r3, r2
 8003810:	e7e0      	b.n	80037d4 <_printf_float+0x198>
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	055a      	lsls	r2, r3, #21
 8003816:	d407      	bmi.n	8003828 <_printf_float+0x1ec>
 8003818:	6923      	ldr	r3, [r4, #16]
 800381a:	4642      	mov	r2, r8
 800381c:	4631      	mov	r1, r6
 800381e:	4628      	mov	r0, r5
 8003820:	47b8      	blx	r7
 8003822:	3001      	adds	r0, #1
 8003824:	d12b      	bne.n	800387e <_printf_float+0x242>
 8003826:	e764      	b.n	80036f2 <_printf_float+0xb6>
 8003828:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800382c:	f240 80dd 	bls.w	80039ea <_printf_float+0x3ae>
 8003830:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003834:	2200      	movs	r2, #0
 8003836:	2300      	movs	r3, #0
 8003838:	f7fd f8b6 	bl	80009a8 <__aeabi_dcmpeq>
 800383c:	2800      	cmp	r0, #0
 800383e:	d033      	beq.n	80038a8 <_printf_float+0x26c>
 8003840:	2301      	movs	r3, #1
 8003842:	4631      	mov	r1, r6
 8003844:	4628      	mov	r0, r5
 8003846:	4a35      	ldr	r2, [pc, #212]	; (800391c <_printf_float+0x2e0>)
 8003848:	47b8      	blx	r7
 800384a:	3001      	adds	r0, #1
 800384c:	f43f af51 	beq.w	80036f2 <_printf_float+0xb6>
 8003850:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003854:	429a      	cmp	r2, r3
 8003856:	db02      	blt.n	800385e <_printf_float+0x222>
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	07d8      	lsls	r0, r3, #31
 800385c:	d50f      	bpl.n	800387e <_printf_float+0x242>
 800385e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003862:	4631      	mov	r1, r6
 8003864:	4628      	mov	r0, r5
 8003866:	47b8      	blx	r7
 8003868:	3001      	adds	r0, #1
 800386a:	f43f af42 	beq.w	80036f2 <_printf_float+0xb6>
 800386e:	f04f 0800 	mov.w	r8, #0
 8003872:	f104 091a 	add.w	r9, r4, #26
 8003876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003878:	3b01      	subs	r3, #1
 800387a:	4543      	cmp	r3, r8
 800387c:	dc09      	bgt.n	8003892 <_printf_float+0x256>
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	079b      	lsls	r3, r3, #30
 8003882:	f100 8104 	bmi.w	8003a8e <_printf_float+0x452>
 8003886:	68e0      	ldr	r0, [r4, #12]
 8003888:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800388a:	4298      	cmp	r0, r3
 800388c:	bfb8      	it	lt
 800388e:	4618      	movlt	r0, r3
 8003890:	e731      	b.n	80036f6 <_printf_float+0xba>
 8003892:	2301      	movs	r3, #1
 8003894:	464a      	mov	r2, r9
 8003896:	4631      	mov	r1, r6
 8003898:	4628      	mov	r0, r5
 800389a:	47b8      	blx	r7
 800389c:	3001      	adds	r0, #1
 800389e:	f43f af28 	beq.w	80036f2 <_printf_float+0xb6>
 80038a2:	f108 0801 	add.w	r8, r8, #1
 80038a6:	e7e6      	b.n	8003876 <_printf_float+0x23a>
 80038a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	dc38      	bgt.n	8003920 <_printf_float+0x2e4>
 80038ae:	2301      	movs	r3, #1
 80038b0:	4631      	mov	r1, r6
 80038b2:	4628      	mov	r0, r5
 80038b4:	4a19      	ldr	r2, [pc, #100]	; (800391c <_printf_float+0x2e0>)
 80038b6:	47b8      	blx	r7
 80038b8:	3001      	adds	r0, #1
 80038ba:	f43f af1a 	beq.w	80036f2 <_printf_float+0xb6>
 80038be:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80038c2:	4313      	orrs	r3, r2
 80038c4:	d102      	bne.n	80038cc <_printf_float+0x290>
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	07d9      	lsls	r1, r3, #31
 80038ca:	d5d8      	bpl.n	800387e <_printf_float+0x242>
 80038cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038d0:	4631      	mov	r1, r6
 80038d2:	4628      	mov	r0, r5
 80038d4:	47b8      	blx	r7
 80038d6:	3001      	adds	r0, #1
 80038d8:	f43f af0b 	beq.w	80036f2 <_printf_float+0xb6>
 80038dc:	f04f 0900 	mov.w	r9, #0
 80038e0:	f104 0a1a 	add.w	sl, r4, #26
 80038e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038e6:	425b      	negs	r3, r3
 80038e8:	454b      	cmp	r3, r9
 80038ea:	dc01      	bgt.n	80038f0 <_printf_float+0x2b4>
 80038ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038ee:	e794      	b.n	800381a <_printf_float+0x1de>
 80038f0:	2301      	movs	r3, #1
 80038f2:	4652      	mov	r2, sl
 80038f4:	4631      	mov	r1, r6
 80038f6:	4628      	mov	r0, r5
 80038f8:	47b8      	blx	r7
 80038fa:	3001      	adds	r0, #1
 80038fc:	f43f aef9 	beq.w	80036f2 <_printf_float+0xb6>
 8003900:	f109 0901 	add.w	r9, r9, #1
 8003904:	e7ee      	b.n	80038e4 <_printf_float+0x2a8>
 8003906:	bf00      	nop
 8003908:	7fefffff 	.word	0x7fefffff
 800390c:	0800637e 	.word	0x0800637e
 8003910:	08006382 	.word	0x08006382
 8003914:	08006386 	.word	0x08006386
 8003918:	0800638a 	.word	0x0800638a
 800391c:	0800638e 	.word	0x0800638e
 8003920:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003922:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003924:	429a      	cmp	r2, r3
 8003926:	bfa8      	it	ge
 8003928:	461a      	movge	r2, r3
 800392a:	2a00      	cmp	r2, #0
 800392c:	4691      	mov	r9, r2
 800392e:	dc37      	bgt.n	80039a0 <_printf_float+0x364>
 8003930:	f04f 0b00 	mov.w	fp, #0
 8003934:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003938:	f104 021a 	add.w	r2, r4, #26
 800393c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003940:	ebaa 0309 	sub.w	r3, sl, r9
 8003944:	455b      	cmp	r3, fp
 8003946:	dc33      	bgt.n	80039b0 <_printf_float+0x374>
 8003948:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800394c:	429a      	cmp	r2, r3
 800394e:	db3b      	blt.n	80039c8 <_printf_float+0x38c>
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	07da      	lsls	r2, r3, #31
 8003954:	d438      	bmi.n	80039c8 <_printf_float+0x38c>
 8003956:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800395a:	eba2 0903 	sub.w	r9, r2, r3
 800395e:	eba2 020a 	sub.w	r2, r2, sl
 8003962:	4591      	cmp	r9, r2
 8003964:	bfa8      	it	ge
 8003966:	4691      	movge	r9, r2
 8003968:	f1b9 0f00 	cmp.w	r9, #0
 800396c:	dc34      	bgt.n	80039d8 <_printf_float+0x39c>
 800396e:	f04f 0800 	mov.w	r8, #0
 8003972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003976:	f104 0a1a 	add.w	sl, r4, #26
 800397a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	eba3 0309 	sub.w	r3, r3, r9
 8003984:	4543      	cmp	r3, r8
 8003986:	f77f af7a 	ble.w	800387e <_printf_float+0x242>
 800398a:	2301      	movs	r3, #1
 800398c:	4652      	mov	r2, sl
 800398e:	4631      	mov	r1, r6
 8003990:	4628      	mov	r0, r5
 8003992:	47b8      	blx	r7
 8003994:	3001      	adds	r0, #1
 8003996:	f43f aeac 	beq.w	80036f2 <_printf_float+0xb6>
 800399a:	f108 0801 	add.w	r8, r8, #1
 800399e:	e7ec      	b.n	800397a <_printf_float+0x33e>
 80039a0:	4613      	mov	r3, r2
 80039a2:	4631      	mov	r1, r6
 80039a4:	4642      	mov	r2, r8
 80039a6:	4628      	mov	r0, r5
 80039a8:	47b8      	blx	r7
 80039aa:	3001      	adds	r0, #1
 80039ac:	d1c0      	bne.n	8003930 <_printf_float+0x2f4>
 80039ae:	e6a0      	b.n	80036f2 <_printf_float+0xb6>
 80039b0:	2301      	movs	r3, #1
 80039b2:	4631      	mov	r1, r6
 80039b4:	4628      	mov	r0, r5
 80039b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80039b8:	47b8      	blx	r7
 80039ba:	3001      	adds	r0, #1
 80039bc:	f43f ae99 	beq.w	80036f2 <_printf_float+0xb6>
 80039c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80039c2:	f10b 0b01 	add.w	fp, fp, #1
 80039c6:	e7b9      	b.n	800393c <_printf_float+0x300>
 80039c8:	4631      	mov	r1, r6
 80039ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039ce:	4628      	mov	r0, r5
 80039d0:	47b8      	blx	r7
 80039d2:	3001      	adds	r0, #1
 80039d4:	d1bf      	bne.n	8003956 <_printf_float+0x31a>
 80039d6:	e68c      	b.n	80036f2 <_printf_float+0xb6>
 80039d8:	464b      	mov	r3, r9
 80039da:	4631      	mov	r1, r6
 80039dc:	4628      	mov	r0, r5
 80039de:	eb08 020a 	add.w	r2, r8, sl
 80039e2:	47b8      	blx	r7
 80039e4:	3001      	adds	r0, #1
 80039e6:	d1c2      	bne.n	800396e <_printf_float+0x332>
 80039e8:	e683      	b.n	80036f2 <_printf_float+0xb6>
 80039ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039ec:	2a01      	cmp	r2, #1
 80039ee:	dc01      	bgt.n	80039f4 <_printf_float+0x3b8>
 80039f0:	07db      	lsls	r3, r3, #31
 80039f2:	d539      	bpl.n	8003a68 <_printf_float+0x42c>
 80039f4:	2301      	movs	r3, #1
 80039f6:	4642      	mov	r2, r8
 80039f8:	4631      	mov	r1, r6
 80039fa:	4628      	mov	r0, r5
 80039fc:	47b8      	blx	r7
 80039fe:	3001      	adds	r0, #1
 8003a00:	f43f ae77 	beq.w	80036f2 <_printf_float+0xb6>
 8003a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a08:	4631      	mov	r1, r6
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	47b8      	blx	r7
 8003a0e:	3001      	adds	r0, #1
 8003a10:	f43f ae6f 	beq.w	80036f2 <_printf_float+0xb6>
 8003a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8003a20:	f7fc ffc2 	bl	80009a8 <__aeabi_dcmpeq>
 8003a24:	b9d8      	cbnz	r0, 8003a5e <_printf_float+0x422>
 8003a26:	f109 33ff 	add.w	r3, r9, #4294967295
 8003a2a:	f108 0201 	add.w	r2, r8, #1
 8003a2e:	4631      	mov	r1, r6
 8003a30:	4628      	mov	r0, r5
 8003a32:	47b8      	blx	r7
 8003a34:	3001      	adds	r0, #1
 8003a36:	d10e      	bne.n	8003a56 <_printf_float+0x41a>
 8003a38:	e65b      	b.n	80036f2 <_printf_float+0xb6>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	464a      	mov	r2, r9
 8003a3e:	4631      	mov	r1, r6
 8003a40:	4628      	mov	r0, r5
 8003a42:	47b8      	blx	r7
 8003a44:	3001      	adds	r0, #1
 8003a46:	f43f ae54 	beq.w	80036f2 <_printf_float+0xb6>
 8003a4a:	f108 0801 	add.w	r8, r8, #1
 8003a4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a50:	3b01      	subs	r3, #1
 8003a52:	4543      	cmp	r3, r8
 8003a54:	dcf1      	bgt.n	8003a3a <_printf_float+0x3fe>
 8003a56:	4653      	mov	r3, sl
 8003a58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003a5c:	e6de      	b.n	800381c <_printf_float+0x1e0>
 8003a5e:	f04f 0800 	mov.w	r8, #0
 8003a62:	f104 091a 	add.w	r9, r4, #26
 8003a66:	e7f2      	b.n	8003a4e <_printf_float+0x412>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	4642      	mov	r2, r8
 8003a6c:	e7df      	b.n	8003a2e <_printf_float+0x3f2>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	464a      	mov	r2, r9
 8003a72:	4631      	mov	r1, r6
 8003a74:	4628      	mov	r0, r5
 8003a76:	47b8      	blx	r7
 8003a78:	3001      	adds	r0, #1
 8003a7a:	f43f ae3a 	beq.w	80036f2 <_printf_float+0xb6>
 8003a7e:	f108 0801 	add.w	r8, r8, #1
 8003a82:	68e3      	ldr	r3, [r4, #12]
 8003a84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003a86:	1a5b      	subs	r3, r3, r1
 8003a88:	4543      	cmp	r3, r8
 8003a8a:	dcf0      	bgt.n	8003a6e <_printf_float+0x432>
 8003a8c:	e6fb      	b.n	8003886 <_printf_float+0x24a>
 8003a8e:	f04f 0800 	mov.w	r8, #0
 8003a92:	f104 0919 	add.w	r9, r4, #25
 8003a96:	e7f4      	b.n	8003a82 <_printf_float+0x446>

08003a98 <_printf_common>:
 8003a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a9c:	4616      	mov	r6, r2
 8003a9e:	4699      	mov	r9, r3
 8003aa0:	688a      	ldr	r2, [r1, #8]
 8003aa2:	690b      	ldr	r3, [r1, #16]
 8003aa4:	4607      	mov	r7, r0
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	bfb8      	it	lt
 8003aaa:	4613      	movlt	r3, r2
 8003aac:	6033      	str	r3, [r6, #0]
 8003aae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ab2:	460c      	mov	r4, r1
 8003ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ab8:	b10a      	cbz	r2, 8003abe <_printf_common+0x26>
 8003aba:	3301      	adds	r3, #1
 8003abc:	6033      	str	r3, [r6, #0]
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	0699      	lsls	r1, r3, #26
 8003ac2:	bf42      	ittt	mi
 8003ac4:	6833      	ldrmi	r3, [r6, #0]
 8003ac6:	3302      	addmi	r3, #2
 8003ac8:	6033      	strmi	r3, [r6, #0]
 8003aca:	6825      	ldr	r5, [r4, #0]
 8003acc:	f015 0506 	ands.w	r5, r5, #6
 8003ad0:	d106      	bne.n	8003ae0 <_printf_common+0x48>
 8003ad2:	f104 0a19 	add.w	sl, r4, #25
 8003ad6:	68e3      	ldr	r3, [r4, #12]
 8003ad8:	6832      	ldr	r2, [r6, #0]
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	42ab      	cmp	r3, r5
 8003ade:	dc2b      	bgt.n	8003b38 <_printf_common+0xa0>
 8003ae0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ae4:	1e13      	subs	r3, r2, #0
 8003ae6:	6822      	ldr	r2, [r4, #0]
 8003ae8:	bf18      	it	ne
 8003aea:	2301      	movne	r3, #1
 8003aec:	0692      	lsls	r2, r2, #26
 8003aee:	d430      	bmi.n	8003b52 <_printf_common+0xba>
 8003af0:	4649      	mov	r1, r9
 8003af2:	4638      	mov	r0, r7
 8003af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003af8:	47c0      	blx	r8
 8003afa:	3001      	adds	r0, #1
 8003afc:	d023      	beq.n	8003b46 <_printf_common+0xae>
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	6922      	ldr	r2, [r4, #16]
 8003b02:	f003 0306 	and.w	r3, r3, #6
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	bf14      	ite	ne
 8003b0a:	2500      	movne	r5, #0
 8003b0c:	6833      	ldreq	r3, [r6, #0]
 8003b0e:	f04f 0600 	mov.w	r6, #0
 8003b12:	bf08      	it	eq
 8003b14:	68e5      	ldreq	r5, [r4, #12]
 8003b16:	f104 041a 	add.w	r4, r4, #26
 8003b1a:	bf08      	it	eq
 8003b1c:	1aed      	subeq	r5, r5, r3
 8003b1e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003b22:	bf08      	it	eq
 8003b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	bfc4      	itt	gt
 8003b2c:	1a9b      	subgt	r3, r3, r2
 8003b2e:	18ed      	addgt	r5, r5, r3
 8003b30:	42b5      	cmp	r5, r6
 8003b32:	d11a      	bne.n	8003b6a <_printf_common+0xd2>
 8003b34:	2000      	movs	r0, #0
 8003b36:	e008      	b.n	8003b4a <_printf_common+0xb2>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	4652      	mov	r2, sl
 8003b3c:	4649      	mov	r1, r9
 8003b3e:	4638      	mov	r0, r7
 8003b40:	47c0      	blx	r8
 8003b42:	3001      	adds	r0, #1
 8003b44:	d103      	bne.n	8003b4e <_printf_common+0xb6>
 8003b46:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b4e:	3501      	adds	r5, #1
 8003b50:	e7c1      	b.n	8003ad6 <_printf_common+0x3e>
 8003b52:	2030      	movs	r0, #48	; 0x30
 8003b54:	18e1      	adds	r1, r4, r3
 8003b56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b60:	4422      	add	r2, r4
 8003b62:	3302      	adds	r3, #2
 8003b64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b68:	e7c2      	b.n	8003af0 <_printf_common+0x58>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	4622      	mov	r2, r4
 8003b6e:	4649      	mov	r1, r9
 8003b70:	4638      	mov	r0, r7
 8003b72:	47c0      	blx	r8
 8003b74:	3001      	adds	r0, #1
 8003b76:	d0e6      	beq.n	8003b46 <_printf_common+0xae>
 8003b78:	3601      	adds	r6, #1
 8003b7a:	e7d9      	b.n	8003b30 <_printf_common+0x98>

08003b7c <_printf_i>:
 8003b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b80:	7e0f      	ldrb	r7, [r1, #24]
 8003b82:	4691      	mov	r9, r2
 8003b84:	2f78      	cmp	r7, #120	; 0x78
 8003b86:	4680      	mov	r8, r0
 8003b88:	460c      	mov	r4, r1
 8003b8a:	469a      	mov	sl, r3
 8003b8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b92:	d807      	bhi.n	8003ba4 <_printf_i+0x28>
 8003b94:	2f62      	cmp	r7, #98	; 0x62
 8003b96:	d80a      	bhi.n	8003bae <_printf_i+0x32>
 8003b98:	2f00      	cmp	r7, #0
 8003b9a:	f000 80d5 	beq.w	8003d48 <_printf_i+0x1cc>
 8003b9e:	2f58      	cmp	r7, #88	; 0x58
 8003ba0:	f000 80c1 	beq.w	8003d26 <_printf_i+0x1aa>
 8003ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ba8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bac:	e03a      	b.n	8003c24 <_printf_i+0xa8>
 8003bae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bb2:	2b15      	cmp	r3, #21
 8003bb4:	d8f6      	bhi.n	8003ba4 <_printf_i+0x28>
 8003bb6:	a101      	add	r1, pc, #4	; (adr r1, 8003bbc <_printf_i+0x40>)
 8003bb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bbc:	08003c15 	.word	0x08003c15
 8003bc0:	08003c29 	.word	0x08003c29
 8003bc4:	08003ba5 	.word	0x08003ba5
 8003bc8:	08003ba5 	.word	0x08003ba5
 8003bcc:	08003ba5 	.word	0x08003ba5
 8003bd0:	08003ba5 	.word	0x08003ba5
 8003bd4:	08003c29 	.word	0x08003c29
 8003bd8:	08003ba5 	.word	0x08003ba5
 8003bdc:	08003ba5 	.word	0x08003ba5
 8003be0:	08003ba5 	.word	0x08003ba5
 8003be4:	08003ba5 	.word	0x08003ba5
 8003be8:	08003d2f 	.word	0x08003d2f
 8003bec:	08003c55 	.word	0x08003c55
 8003bf0:	08003ce9 	.word	0x08003ce9
 8003bf4:	08003ba5 	.word	0x08003ba5
 8003bf8:	08003ba5 	.word	0x08003ba5
 8003bfc:	08003d51 	.word	0x08003d51
 8003c00:	08003ba5 	.word	0x08003ba5
 8003c04:	08003c55 	.word	0x08003c55
 8003c08:	08003ba5 	.word	0x08003ba5
 8003c0c:	08003ba5 	.word	0x08003ba5
 8003c10:	08003cf1 	.word	0x08003cf1
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	1d1a      	adds	r2, r3, #4
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	602a      	str	r2, [r5, #0]
 8003c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0a0      	b.n	8003d6a <_printf_i+0x1ee>
 8003c28:	6820      	ldr	r0, [r4, #0]
 8003c2a:	682b      	ldr	r3, [r5, #0]
 8003c2c:	0607      	lsls	r7, r0, #24
 8003c2e:	f103 0104 	add.w	r1, r3, #4
 8003c32:	6029      	str	r1, [r5, #0]
 8003c34:	d501      	bpl.n	8003c3a <_printf_i+0xbe>
 8003c36:	681e      	ldr	r6, [r3, #0]
 8003c38:	e003      	b.n	8003c42 <_printf_i+0xc6>
 8003c3a:	0646      	lsls	r6, r0, #25
 8003c3c:	d5fb      	bpl.n	8003c36 <_printf_i+0xba>
 8003c3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c42:	2e00      	cmp	r6, #0
 8003c44:	da03      	bge.n	8003c4e <_printf_i+0xd2>
 8003c46:	232d      	movs	r3, #45	; 0x2d
 8003c48:	4276      	negs	r6, r6
 8003c4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c4e:	230a      	movs	r3, #10
 8003c50:	4859      	ldr	r0, [pc, #356]	; (8003db8 <_printf_i+0x23c>)
 8003c52:	e012      	b.n	8003c7a <_printf_i+0xfe>
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	6820      	ldr	r0, [r4, #0]
 8003c58:	1d19      	adds	r1, r3, #4
 8003c5a:	6029      	str	r1, [r5, #0]
 8003c5c:	0605      	lsls	r5, r0, #24
 8003c5e:	d501      	bpl.n	8003c64 <_printf_i+0xe8>
 8003c60:	681e      	ldr	r6, [r3, #0]
 8003c62:	e002      	b.n	8003c6a <_printf_i+0xee>
 8003c64:	0641      	lsls	r1, r0, #25
 8003c66:	d5fb      	bpl.n	8003c60 <_printf_i+0xe4>
 8003c68:	881e      	ldrh	r6, [r3, #0]
 8003c6a:	2f6f      	cmp	r7, #111	; 0x6f
 8003c6c:	bf0c      	ite	eq
 8003c6e:	2308      	moveq	r3, #8
 8003c70:	230a      	movne	r3, #10
 8003c72:	4851      	ldr	r0, [pc, #324]	; (8003db8 <_printf_i+0x23c>)
 8003c74:	2100      	movs	r1, #0
 8003c76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c7a:	6865      	ldr	r5, [r4, #4]
 8003c7c:	2d00      	cmp	r5, #0
 8003c7e:	bfa8      	it	ge
 8003c80:	6821      	ldrge	r1, [r4, #0]
 8003c82:	60a5      	str	r5, [r4, #8]
 8003c84:	bfa4      	itt	ge
 8003c86:	f021 0104 	bicge.w	r1, r1, #4
 8003c8a:	6021      	strge	r1, [r4, #0]
 8003c8c:	b90e      	cbnz	r6, 8003c92 <_printf_i+0x116>
 8003c8e:	2d00      	cmp	r5, #0
 8003c90:	d04b      	beq.n	8003d2a <_printf_i+0x1ae>
 8003c92:	4615      	mov	r5, r2
 8003c94:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c98:	fb03 6711 	mls	r7, r3, r1, r6
 8003c9c:	5dc7      	ldrb	r7, [r0, r7]
 8003c9e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ca2:	4637      	mov	r7, r6
 8003ca4:	42bb      	cmp	r3, r7
 8003ca6:	460e      	mov	r6, r1
 8003ca8:	d9f4      	bls.n	8003c94 <_printf_i+0x118>
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d10b      	bne.n	8003cc6 <_printf_i+0x14a>
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	07de      	lsls	r6, r3, #31
 8003cb2:	d508      	bpl.n	8003cc6 <_printf_i+0x14a>
 8003cb4:	6923      	ldr	r3, [r4, #16]
 8003cb6:	6861      	ldr	r1, [r4, #4]
 8003cb8:	4299      	cmp	r1, r3
 8003cba:	bfde      	ittt	le
 8003cbc:	2330      	movle	r3, #48	; 0x30
 8003cbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cc6:	1b52      	subs	r2, r2, r5
 8003cc8:	6122      	str	r2, [r4, #16]
 8003cca:	464b      	mov	r3, r9
 8003ccc:	4621      	mov	r1, r4
 8003cce:	4640      	mov	r0, r8
 8003cd0:	f8cd a000 	str.w	sl, [sp]
 8003cd4:	aa03      	add	r2, sp, #12
 8003cd6:	f7ff fedf 	bl	8003a98 <_printf_common>
 8003cda:	3001      	adds	r0, #1
 8003cdc:	d14a      	bne.n	8003d74 <_printf_i+0x1f8>
 8003cde:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce2:	b004      	add	sp, #16
 8003ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce8:	6823      	ldr	r3, [r4, #0]
 8003cea:	f043 0320 	orr.w	r3, r3, #32
 8003cee:	6023      	str	r3, [r4, #0]
 8003cf0:	2778      	movs	r7, #120	; 0x78
 8003cf2:	4832      	ldr	r0, [pc, #200]	; (8003dbc <_printf_i+0x240>)
 8003cf4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	6829      	ldr	r1, [r5, #0]
 8003cfc:	061f      	lsls	r7, r3, #24
 8003cfe:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d02:	d402      	bmi.n	8003d0a <_printf_i+0x18e>
 8003d04:	065f      	lsls	r7, r3, #25
 8003d06:	bf48      	it	mi
 8003d08:	b2b6      	uxthmi	r6, r6
 8003d0a:	07df      	lsls	r7, r3, #31
 8003d0c:	bf48      	it	mi
 8003d0e:	f043 0320 	orrmi.w	r3, r3, #32
 8003d12:	6029      	str	r1, [r5, #0]
 8003d14:	bf48      	it	mi
 8003d16:	6023      	strmi	r3, [r4, #0]
 8003d18:	b91e      	cbnz	r6, 8003d22 <_printf_i+0x1a6>
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	f023 0320 	bic.w	r3, r3, #32
 8003d20:	6023      	str	r3, [r4, #0]
 8003d22:	2310      	movs	r3, #16
 8003d24:	e7a6      	b.n	8003c74 <_printf_i+0xf8>
 8003d26:	4824      	ldr	r0, [pc, #144]	; (8003db8 <_printf_i+0x23c>)
 8003d28:	e7e4      	b.n	8003cf4 <_printf_i+0x178>
 8003d2a:	4615      	mov	r5, r2
 8003d2c:	e7bd      	b.n	8003caa <_printf_i+0x12e>
 8003d2e:	682b      	ldr	r3, [r5, #0]
 8003d30:	6826      	ldr	r6, [r4, #0]
 8003d32:	1d18      	adds	r0, r3, #4
 8003d34:	6961      	ldr	r1, [r4, #20]
 8003d36:	6028      	str	r0, [r5, #0]
 8003d38:	0635      	lsls	r5, r6, #24
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	d501      	bpl.n	8003d42 <_printf_i+0x1c6>
 8003d3e:	6019      	str	r1, [r3, #0]
 8003d40:	e002      	b.n	8003d48 <_printf_i+0x1cc>
 8003d42:	0670      	lsls	r0, r6, #25
 8003d44:	d5fb      	bpl.n	8003d3e <_printf_i+0x1c2>
 8003d46:	8019      	strh	r1, [r3, #0]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	4615      	mov	r5, r2
 8003d4c:	6123      	str	r3, [r4, #16]
 8003d4e:	e7bc      	b.n	8003cca <_printf_i+0x14e>
 8003d50:	682b      	ldr	r3, [r5, #0]
 8003d52:	2100      	movs	r1, #0
 8003d54:	1d1a      	adds	r2, r3, #4
 8003d56:	602a      	str	r2, [r5, #0]
 8003d58:	681d      	ldr	r5, [r3, #0]
 8003d5a:	6862      	ldr	r2, [r4, #4]
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	f000 f9d4 	bl	800410a <memchr>
 8003d62:	b108      	cbz	r0, 8003d68 <_printf_i+0x1ec>
 8003d64:	1b40      	subs	r0, r0, r5
 8003d66:	6060      	str	r0, [r4, #4]
 8003d68:	6863      	ldr	r3, [r4, #4]
 8003d6a:	6123      	str	r3, [r4, #16]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d72:	e7aa      	b.n	8003cca <_printf_i+0x14e>
 8003d74:	462a      	mov	r2, r5
 8003d76:	4649      	mov	r1, r9
 8003d78:	4640      	mov	r0, r8
 8003d7a:	6923      	ldr	r3, [r4, #16]
 8003d7c:	47d0      	blx	sl
 8003d7e:	3001      	adds	r0, #1
 8003d80:	d0ad      	beq.n	8003cde <_printf_i+0x162>
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	079b      	lsls	r3, r3, #30
 8003d86:	d413      	bmi.n	8003db0 <_printf_i+0x234>
 8003d88:	68e0      	ldr	r0, [r4, #12]
 8003d8a:	9b03      	ldr	r3, [sp, #12]
 8003d8c:	4298      	cmp	r0, r3
 8003d8e:	bfb8      	it	lt
 8003d90:	4618      	movlt	r0, r3
 8003d92:	e7a6      	b.n	8003ce2 <_printf_i+0x166>
 8003d94:	2301      	movs	r3, #1
 8003d96:	4632      	mov	r2, r6
 8003d98:	4649      	mov	r1, r9
 8003d9a:	4640      	mov	r0, r8
 8003d9c:	47d0      	blx	sl
 8003d9e:	3001      	adds	r0, #1
 8003da0:	d09d      	beq.n	8003cde <_printf_i+0x162>
 8003da2:	3501      	adds	r5, #1
 8003da4:	68e3      	ldr	r3, [r4, #12]
 8003da6:	9903      	ldr	r1, [sp, #12]
 8003da8:	1a5b      	subs	r3, r3, r1
 8003daa:	42ab      	cmp	r3, r5
 8003dac:	dcf2      	bgt.n	8003d94 <_printf_i+0x218>
 8003dae:	e7eb      	b.n	8003d88 <_printf_i+0x20c>
 8003db0:	2500      	movs	r5, #0
 8003db2:	f104 0619 	add.w	r6, r4, #25
 8003db6:	e7f5      	b.n	8003da4 <_printf_i+0x228>
 8003db8:	08006390 	.word	0x08006390
 8003dbc:	080063a1 	.word	0x080063a1

08003dc0 <std>:
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	b510      	push	{r4, lr}
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	e9c0 3300 	strd	r3, r3, [r0]
 8003dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dce:	6083      	str	r3, [r0, #8]
 8003dd0:	8181      	strh	r1, [r0, #12]
 8003dd2:	6643      	str	r3, [r0, #100]	; 0x64
 8003dd4:	81c2      	strh	r2, [r0, #14]
 8003dd6:	6183      	str	r3, [r0, #24]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	2208      	movs	r2, #8
 8003ddc:	305c      	adds	r0, #92	; 0x5c
 8003dde:	f000 f914 	bl	800400a <memset>
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <std+0x58>)
 8003de4:	6224      	str	r4, [r4, #32]
 8003de6:	6263      	str	r3, [r4, #36]	; 0x24
 8003de8:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <std+0x5c>)
 8003dea:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dec:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <std+0x60>)
 8003dee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <std+0x64>)
 8003df2:	6323      	str	r3, [r4, #48]	; 0x30
 8003df4:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <std+0x68>)
 8003df6:	429c      	cmp	r4, r3
 8003df8:	d006      	beq.n	8003e08 <std+0x48>
 8003dfa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003dfe:	4294      	cmp	r4, r2
 8003e00:	d002      	beq.n	8003e08 <std+0x48>
 8003e02:	33d0      	adds	r3, #208	; 0xd0
 8003e04:	429c      	cmp	r4, r3
 8003e06:	d105      	bne.n	8003e14 <std+0x54>
 8003e08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e10:	f000 b978 	b.w	8004104 <__retarget_lock_init_recursive>
 8003e14:	bd10      	pop	{r4, pc}
 8003e16:	bf00      	nop
 8003e18:	08003f85 	.word	0x08003f85
 8003e1c:	08003fa7 	.word	0x08003fa7
 8003e20:	08003fdf 	.word	0x08003fdf
 8003e24:	08004003 	.word	0x08004003
 8003e28:	200002a0 	.word	0x200002a0

08003e2c <stdio_exit_handler>:
 8003e2c:	4a02      	ldr	r2, [pc, #8]	; (8003e38 <stdio_exit_handler+0xc>)
 8003e2e:	4903      	ldr	r1, [pc, #12]	; (8003e3c <stdio_exit_handler+0x10>)
 8003e30:	4803      	ldr	r0, [pc, #12]	; (8003e40 <stdio_exit_handler+0x14>)
 8003e32:	f000 b869 	b.w	8003f08 <_fwalk_sglue>
 8003e36:	bf00      	nop
 8003e38:	20000010 	.word	0x20000010
 8003e3c:	08005a9d 	.word	0x08005a9d
 8003e40:	2000001c 	.word	0x2000001c

08003e44 <cleanup_stdio>:
 8003e44:	6841      	ldr	r1, [r0, #4]
 8003e46:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <cleanup_stdio+0x34>)
 8003e48:	b510      	push	{r4, lr}
 8003e4a:	4299      	cmp	r1, r3
 8003e4c:	4604      	mov	r4, r0
 8003e4e:	d001      	beq.n	8003e54 <cleanup_stdio+0x10>
 8003e50:	f001 fe24 	bl	8005a9c <_fflush_r>
 8003e54:	68a1      	ldr	r1, [r4, #8]
 8003e56:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <cleanup_stdio+0x38>)
 8003e58:	4299      	cmp	r1, r3
 8003e5a:	d002      	beq.n	8003e62 <cleanup_stdio+0x1e>
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f001 fe1d 	bl	8005a9c <_fflush_r>
 8003e62:	68e1      	ldr	r1, [r4, #12]
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <cleanup_stdio+0x3c>)
 8003e66:	4299      	cmp	r1, r3
 8003e68:	d004      	beq.n	8003e74 <cleanup_stdio+0x30>
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e70:	f001 be14 	b.w	8005a9c <_fflush_r>
 8003e74:	bd10      	pop	{r4, pc}
 8003e76:	bf00      	nop
 8003e78:	200002a0 	.word	0x200002a0
 8003e7c:	20000308 	.word	0x20000308
 8003e80:	20000370 	.word	0x20000370

08003e84 <global_stdio_init.part.0>:
 8003e84:	b510      	push	{r4, lr}
 8003e86:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <global_stdio_init.part.0+0x30>)
 8003e88:	4c0b      	ldr	r4, [pc, #44]	; (8003eb8 <global_stdio_init.part.0+0x34>)
 8003e8a:	4a0c      	ldr	r2, [pc, #48]	; (8003ebc <global_stdio_init.part.0+0x38>)
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	2104      	movs	r1, #4
 8003e92:	2200      	movs	r2, #0
 8003e94:	f7ff ff94 	bl	8003dc0 <std>
 8003e98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	2109      	movs	r1, #9
 8003ea0:	f7ff ff8e 	bl	8003dc0 <std>
 8003ea4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eae:	2112      	movs	r1, #18
 8003eb0:	f7ff bf86 	b.w	8003dc0 <std>
 8003eb4:	200003d8 	.word	0x200003d8
 8003eb8:	200002a0 	.word	0x200002a0
 8003ebc:	08003e2d 	.word	0x08003e2d

08003ec0 <__sfp_lock_acquire>:
 8003ec0:	4801      	ldr	r0, [pc, #4]	; (8003ec8 <__sfp_lock_acquire+0x8>)
 8003ec2:	f000 b920 	b.w	8004106 <__retarget_lock_acquire_recursive>
 8003ec6:	bf00      	nop
 8003ec8:	200003e1 	.word	0x200003e1

08003ecc <__sfp_lock_release>:
 8003ecc:	4801      	ldr	r0, [pc, #4]	; (8003ed4 <__sfp_lock_release+0x8>)
 8003ece:	f000 b91b 	b.w	8004108 <__retarget_lock_release_recursive>
 8003ed2:	bf00      	nop
 8003ed4:	200003e1 	.word	0x200003e1

08003ed8 <__sinit>:
 8003ed8:	b510      	push	{r4, lr}
 8003eda:	4604      	mov	r4, r0
 8003edc:	f7ff fff0 	bl	8003ec0 <__sfp_lock_acquire>
 8003ee0:	6a23      	ldr	r3, [r4, #32]
 8003ee2:	b11b      	cbz	r3, 8003eec <__sinit+0x14>
 8003ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ee8:	f7ff bff0 	b.w	8003ecc <__sfp_lock_release>
 8003eec:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <__sinit+0x28>)
 8003eee:	6223      	str	r3, [r4, #32]
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <__sinit+0x2c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f5      	bne.n	8003ee4 <__sinit+0xc>
 8003ef8:	f7ff ffc4 	bl	8003e84 <global_stdio_init.part.0>
 8003efc:	e7f2      	b.n	8003ee4 <__sinit+0xc>
 8003efe:	bf00      	nop
 8003f00:	08003e45 	.word	0x08003e45
 8003f04:	200003d8 	.word	0x200003d8

08003f08 <_fwalk_sglue>:
 8003f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f0c:	4607      	mov	r7, r0
 8003f0e:	4688      	mov	r8, r1
 8003f10:	4614      	mov	r4, r2
 8003f12:	2600      	movs	r6, #0
 8003f14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f18:	f1b9 0901 	subs.w	r9, r9, #1
 8003f1c:	d505      	bpl.n	8003f2a <_fwalk_sglue+0x22>
 8003f1e:	6824      	ldr	r4, [r4, #0]
 8003f20:	2c00      	cmp	r4, #0
 8003f22:	d1f7      	bne.n	8003f14 <_fwalk_sglue+0xc>
 8003f24:	4630      	mov	r0, r6
 8003f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f2a:	89ab      	ldrh	r3, [r5, #12]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d907      	bls.n	8003f40 <_fwalk_sglue+0x38>
 8003f30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f34:	3301      	adds	r3, #1
 8003f36:	d003      	beq.n	8003f40 <_fwalk_sglue+0x38>
 8003f38:	4629      	mov	r1, r5
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	47c0      	blx	r8
 8003f3e:	4306      	orrs	r6, r0
 8003f40:	3568      	adds	r5, #104	; 0x68
 8003f42:	e7e9      	b.n	8003f18 <_fwalk_sglue+0x10>

08003f44 <siprintf>:
 8003f44:	b40e      	push	{r1, r2, r3}
 8003f46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f4a:	b500      	push	{lr}
 8003f4c:	b09c      	sub	sp, #112	; 0x70
 8003f4e:	ab1d      	add	r3, sp, #116	; 0x74
 8003f50:	9002      	str	r0, [sp, #8]
 8003f52:	9006      	str	r0, [sp, #24]
 8003f54:	9107      	str	r1, [sp, #28]
 8003f56:	9104      	str	r1, [sp, #16]
 8003f58:	4808      	ldr	r0, [pc, #32]	; (8003f7c <siprintf+0x38>)
 8003f5a:	4909      	ldr	r1, [pc, #36]	; (8003f80 <siprintf+0x3c>)
 8003f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f60:	9105      	str	r1, [sp, #20]
 8003f62:	6800      	ldr	r0, [r0, #0]
 8003f64:	a902      	add	r1, sp, #8
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	f001 fc18 	bl	800579c <_svfiprintf_r>
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	9b02      	ldr	r3, [sp, #8]
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	b01c      	add	sp, #112	; 0x70
 8003f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f78:	b003      	add	sp, #12
 8003f7a:	4770      	bx	lr
 8003f7c:	20000068 	.word	0x20000068
 8003f80:	ffff0208 	.word	0xffff0208

08003f84 <__sread>:
 8003f84:	b510      	push	{r4, lr}
 8003f86:	460c      	mov	r4, r1
 8003f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f8c:	f000 f86c 	bl	8004068 <_read_r>
 8003f90:	2800      	cmp	r0, #0
 8003f92:	bfab      	itete	ge
 8003f94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f96:	89a3      	ldrhlt	r3, [r4, #12]
 8003f98:	181b      	addge	r3, r3, r0
 8003f9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f9e:	bfac      	ite	ge
 8003fa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fa2:	81a3      	strhlt	r3, [r4, #12]
 8003fa4:	bd10      	pop	{r4, pc}

08003fa6 <__swrite>:
 8003fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003faa:	461f      	mov	r7, r3
 8003fac:	898b      	ldrh	r3, [r1, #12]
 8003fae:	4605      	mov	r5, r0
 8003fb0:	05db      	lsls	r3, r3, #23
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	4616      	mov	r6, r2
 8003fb6:	d505      	bpl.n	8003fc4 <__swrite+0x1e>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc0:	f000 f840 	bl	8004044 <_lseek_r>
 8003fc4:	89a3      	ldrh	r3, [r4, #12]
 8003fc6:	4632      	mov	r2, r6
 8003fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fcc:	81a3      	strh	r3, [r4, #12]
 8003fce:	4628      	mov	r0, r5
 8003fd0:	463b      	mov	r3, r7
 8003fd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fda:	f000 b857 	b.w	800408c <_write_r>

08003fde <__sseek>:
 8003fde:	b510      	push	{r4, lr}
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fe6:	f000 f82d 	bl	8004044 <_lseek_r>
 8003fea:	1c43      	adds	r3, r0, #1
 8003fec:	89a3      	ldrh	r3, [r4, #12]
 8003fee:	bf15      	itete	ne
 8003ff0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ffa:	81a3      	strheq	r3, [r4, #12]
 8003ffc:	bf18      	it	ne
 8003ffe:	81a3      	strhne	r3, [r4, #12]
 8004000:	bd10      	pop	{r4, pc}

08004002 <__sclose>:
 8004002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004006:	f000 b80d 	b.w	8004024 <_close_r>

0800400a <memset>:
 800400a:	4603      	mov	r3, r0
 800400c:	4402      	add	r2, r0
 800400e:	4293      	cmp	r3, r2
 8004010:	d100      	bne.n	8004014 <memset+0xa>
 8004012:	4770      	bx	lr
 8004014:	f803 1b01 	strb.w	r1, [r3], #1
 8004018:	e7f9      	b.n	800400e <memset+0x4>
	...

0800401c <_localeconv_r>:
 800401c:	4800      	ldr	r0, [pc, #0]	; (8004020 <_localeconv_r+0x4>)
 800401e:	4770      	bx	lr
 8004020:	2000015c 	.word	0x2000015c

08004024 <_close_r>:
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	2300      	movs	r3, #0
 8004028:	4d05      	ldr	r5, [pc, #20]	; (8004040 <_close_r+0x1c>)
 800402a:	4604      	mov	r4, r0
 800402c:	4608      	mov	r0, r1
 800402e:	602b      	str	r3, [r5, #0]
 8004030:	f7fd fcb3 	bl	800199a <_close>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	d102      	bne.n	800403e <_close_r+0x1a>
 8004038:	682b      	ldr	r3, [r5, #0]
 800403a:	b103      	cbz	r3, 800403e <_close_r+0x1a>
 800403c:	6023      	str	r3, [r4, #0]
 800403e:	bd38      	pop	{r3, r4, r5, pc}
 8004040:	200003dc 	.word	0x200003dc

08004044 <_lseek_r>:
 8004044:	b538      	push	{r3, r4, r5, lr}
 8004046:	4604      	mov	r4, r0
 8004048:	4608      	mov	r0, r1
 800404a:	4611      	mov	r1, r2
 800404c:	2200      	movs	r2, #0
 800404e:	4d05      	ldr	r5, [pc, #20]	; (8004064 <_lseek_r+0x20>)
 8004050:	602a      	str	r2, [r5, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	f7fd fcc5 	bl	80019e2 <_lseek>
 8004058:	1c43      	adds	r3, r0, #1
 800405a:	d102      	bne.n	8004062 <_lseek_r+0x1e>
 800405c:	682b      	ldr	r3, [r5, #0]
 800405e:	b103      	cbz	r3, 8004062 <_lseek_r+0x1e>
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	bd38      	pop	{r3, r4, r5, pc}
 8004064:	200003dc 	.word	0x200003dc

08004068 <_read_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	4604      	mov	r4, r0
 800406c:	4608      	mov	r0, r1
 800406e:	4611      	mov	r1, r2
 8004070:	2200      	movs	r2, #0
 8004072:	4d05      	ldr	r5, [pc, #20]	; (8004088 <_read_r+0x20>)
 8004074:	602a      	str	r2, [r5, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	f7fd fc56 	bl	8001928 <_read>
 800407c:	1c43      	adds	r3, r0, #1
 800407e:	d102      	bne.n	8004086 <_read_r+0x1e>
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	b103      	cbz	r3, 8004086 <_read_r+0x1e>
 8004084:	6023      	str	r3, [r4, #0]
 8004086:	bd38      	pop	{r3, r4, r5, pc}
 8004088:	200003dc 	.word	0x200003dc

0800408c <_write_r>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	4604      	mov	r4, r0
 8004090:	4608      	mov	r0, r1
 8004092:	4611      	mov	r1, r2
 8004094:	2200      	movs	r2, #0
 8004096:	4d05      	ldr	r5, [pc, #20]	; (80040ac <_write_r+0x20>)
 8004098:	602a      	str	r2, [r5, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	f7fd fc61 	bl	8001962 <_write>
 80040a0:	1c43      	adds	r3, r0, #1
 80040a2:	d102      	bne.n	80040aa <_write_r+0x1e>
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	b103      	cbz	r3, 80040aa <_write_r+0x1e>
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	bd38      	pop	{r3, r4, r5, pc}
 80040ac:	200003dc 	.word	0x200003dc

080040b0 <__errno>:
 80040b0:	4b01      	ldr	r3, [pc, #4]	; (80040b8 <__errno+0x8>)
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	20000068 	.word	0x20000068

080040bc <__libc_init_array>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	2600      	movs	r6, #0
 80040c0:	4d0c      	ldr	r5, [pc, #48]	; (80040f4 <__libc_init_array+0x38>)
 80040c2:	4c0d      	ldr	r4, [pc, #52]	; (80040f8 <__libc_init_array+0x3c>)
 80040c4:	1b64      	subs	r4, r4, r5
 80040c6:	10a4      	asrs	r4, r4, #2
 80040c8:	42a6      	cmp	r6, r4
 80040ca:	d109      	bne.n	80040e0 <__libc_init_array+0x24>
 80040cc:	f002 f886 	bl	80061dc <_init>
 80040d0:	2600      	movs	r6, #0
 80040d2:	4d0a      	ldr	r5, [pc, #40]	; (80040fc <__libc_init_array+0x40>)
 80040d4:	4c0a      	ldr	r4, [pc, #40]	; (8004100 <__libc_init_array+0x44>)
 80040d6:	1b64      	subs	r4, r4, r5
 80040d8:	10a4      	asrs	r4, r4, #2
 80040da:	42a6      	cmp	r6, r4
 80040dc:	d105      	bne.n	80040ea <__libc_init_array+0x2e>
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 80040e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e4:	4798      	blx	r3
 80040e6:	3601      	adds	r6, #1
 80040e8:	e7ee      	b.n	80040c8 <__libc_init_array+0xc>
 80040ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ee:	4798      	blx	r3
 80040f0:	3601      	adds	r6, #1
 80040f2:	e7f2      	b.n	80040da <__libc_init_array+0x1e>
 80040f4:	080066ec 	.word	0x080066ec
 80040f8:	080066ec 	.word	0x080066ec
 80040fc:	080066ec 	.word	0x080066ec
 8004100:	080066f0 	.word	0x080066f0

08004104 <__retarget_lock_init_recursive>:
 8004104:	4770      	bx	lr

08004106 <__retarget_lock_acquire_recursive>:
 8004106:	4770      	bx	lr

08004108 <__retarget_lock_release_recursive>:
 8004108:	4770      	bx	lr

0800410a <memchr>:
 800410a:	4603      	mov	r3, r0
 800410c:	b510      	push	{r4, lr}
 800410e:	b2c9      	uxtb	r1, r1
 8004110:	4402      	add	r2, r0
 8004112:	4293      	cmp	r3, r2
 8004114:	4618      	mov	r0, r3
 8004116:	d101      	bne.n	800411c <memchr+0x12>
 8004118:	2000      	movs	r0, #0
 800411a:	e003      	b.n	8004124 <memchr+0x1a>
 800411c:	7804      	ldrb	r4, [r0, #0]
 800411e:	3301      	adds	r3, #1
 8004120:	428c      	cmp	r4, r1
 8004122:	d1f6      	bne.n	8004112 <memchr+0x8>
 8004124:	bd10      	pop	{r4, pc}

08004126 <quorem>:
 8004126:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412a:	6903      	ldr	r3, [r0, #16]
 800412c:	690c      	ldr	r4, [r1, #16]
 800412e:	4607      	mov	r7, r0
 8004130:	42a3      	cmp	r3, r4
 8004132:	db7f      	blt.n	8004234 <quorem+0x10e>
 8004134:	3c01      	subs	r4, #1
 8004136:	f100 0514 	add.w	r5, r0, #20
 800413a:	f101 0814 	add.w	r8, r1, #20
 800413e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004142:	9301      	str	r3, [sp, #4]
 8004144:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004148:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800414c:	3301      	adds	r3, #1
 800414e:	429a      	cmp	r2, r3
 8004150:	fbb2 f6f3 	udiv	r6, r2, r3
 8004154:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004158:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800415c:	d331      	bcc.n	80041c2 <quorem+0x9c>
 800415e:	f04f 0e00 	mov.w	lr, #0
 8004162:	4640      	mov	r0, r8
 8004164:	46ac      	mov	ip, r5
 8004166:	46f2      	mov	sl, lr
 8004168:	f850 2b04 	ldr.w	r2, [r0], #4
 800416c:	b293      	uxth	r3, r2
 800416e:	fb06 e303 	mla	r3, r6, r3, lr
 8004172:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004176:	0c1a      	lsrs	r2, r3, #16
 8004178:	b29b      	uxth	r3, r3
 800417a:	fb06 220e 	mla	r2, r6, lr, r2
 800417e:	ebaa 0303 	sub.w	r3, sl, r3
 8004182:	f8dc a000 	ldr.w	sl, [ip]
 8004186:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800418a:	fa1f fa8a 	uxth.w	sl, sl
 800418e:	4453      	add	r3, sl
 8004190:	f8dc a000 	ldr.w	sl, [ip]
 8004194:	b292      	uxth	r2, r2
 8004196:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800419a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800419e:	b29b      	uxth	r3, r3
 80041a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041a4:	4581      	cmp	r9, r0
 80041a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80041aa:	f84c 3b04 	str.w	r3, [ip], #4
 80041ae:	d2db      	bcs.n	8004168 <quorem+0x42>
 80041b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80041b4:	b92b      	cbnz	r3, 80041c2 <quorem+0x9c>
 80041b6:	9b01      	ldr	r3, [sp, #4]
 80041b8:	3b04      	subs	r3, #4
 80041ba:	429d      	cmp	r5, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	d32d      	bcc.n	800421c <quorem+0xf6>
 80041c0:	613c      	str	r4, [r7, #16]
 80041c2:	4638      	mov	r0, r7
 80041c4:	f001 f992 	bl	80054ec <__mcmp>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	db23      	blt.n	8004214 <quorem+0xee>
 80041cc:	4629      	mov	r1, r5
 80041ce:	2000      	movs	r0, #0
 80041d0:	3601      	adds	r6, #1
 80041d2:	f858 2b04 	ldr.w	r2, [r8], #4
 80041d6:	f8d1 c000 	ldr.w	ip, [r1]
 80041da:	b293      	uxth	r3, r2
 80041dc:	1ac3      	subs	r3, r0, r3
 80041de:	0c12      	lsrs	r2, r2, #16
 80041e0:	fa1f f08c 	uxth.w	r0, ip
 80041e4:	4403      	add	r3, r0
 80041e6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80041ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041f4:	45c1      	cmp	r9, r8
 80041f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80041fa:	f841 3b04 	str.w	r3, [r1], #4
 80041fe:	d2e8      	bcs.n	80041d2 <quorem+0xac>
 8004200:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004204:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004208:	b922      	cbnz	r2, 8004214 <quorem+0xee>
 800420a:	3b04      	subs	r3, #4
 800420c:	429d      	cmp	r5, r3
 800420e:	461a      	mov	r2, r3
 8004210:	d30a      	bcc.n	8004228 <quorem+0x102>
 8004212:	613c      	str	r4, [r7, #16]
 8004214:	4630      	mov	r0, r6
 8004216:	b003      	add	sp, #12
 8004218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	3b04      	subs	r3, #4
 8004220:	2a00      	cmp	r2, #0
 8004222:	d1cd      	bne.n	80041c0 <quorem+0x9a>
 8004224:	3c01      	subs	r4, #1
 8004226:	e7c8      	b.n	80041ba <quorem+0x94>
 8004228:	6812      	ldr	r2, [r2, #0]
 800422a:	3b04      	subs	r3, #4
 800422c:	2a00      	cmp	r2, #0
 800422e:	d1f0      	bne.n	8004212 <quorem+0xec>
 8004230:	3c01      	subs	r4, #1
 8004232:	e7eb      	b.n	800420c <quorem+0xe6>
 8004234:	2000      	movs	r0, #0
 8004236:	e7ee      	b.n	8004216 <quorem+0xf0>

08004238 <_dtoa_r>:
 8004238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423c:	4616      	mov	r6, r2
 800423e:	461f      	mov	r7, r3
 8004240:	69c4      	ldr	r4, [r0, #28]
 8004242:	b099      	sub	sp, #100	; 0x64
 8004244:	4605      	mov	r5, r0
 8004246:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800424a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800424e:	b974      	cbnz	r4, 800426e <_dtoa_r+0x36>
 8004250:	2010      	movs	r0, #16
 8004252:	f000 fe1d 	bl	8004e90 <malloc>
 8004256:	4602      	mov	r2, r0
 8004258:	61e8      	str	r0, [r5, #28]
 800425a:	b920      	cbnz	r0, 8004266 <_dtoa_r+0x2e>
 800425c:	21ef      	movs	r1, #239	; 0xef
 800425e:	4bac      	ldr	r3, [pc, #688]	; (8004510 <_dtoa_r+0x2d8>)
 8004260:	48ac      	ldr	r0, [pc, #688]	; (8004514 <_dtoa_r+0x2dc>)
 8004262:	f001 fc7b 	bl	8005b5c <__assert_func>
 8004266:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800426a:	6004      	str	r4, [r0, #0]
 800426c:	60c4      	str	r4, [r0, #12]
 800426e:	69eb      	ldr	r3, [r5, #28]
 8004270:	6819      	ldr	r1, [r3, #0]
 8004272:	b151      	cbz	r1, 800428a <_dtoa_r+0x52>
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	2301      	movs	r3, #1
 8004278:	4093      	lsls	r3, r2
 800427a:	604a      	str	r2, [r1, #4]
 800427c:	608b      	str	r3, [r1, #8]
 800427e:	4628      	mov	r0, r5
 8004280:	f000 fefa 	bl	8005078 <_Bfree>
 8004284:	2200      	movs	r2, #0
 8004286:	69eb      	ldr	r3, [r5, #28]
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	1e3b      	subs	r3, r7, #0
 800428c:	bfaf      	iteee	ge
 800428e:	2300      	movge	r3, #0
 8004290:	2201      	movlt	r2, #1
 8004292:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004296:	9305      	strlt	r3, [sp, #20]
 8004298:	bfa8      	it	ge
 800429a:	f8c8 3000 	strge.w	r3, [r8]
 800429e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80042a2:	4b9d      	ldr	r3, [pc, #628]	; (8004518 <_dtoa_r+0x2e0>)
 80042a4:	bfb8      	it	lt
 80042a6:	f8c8 2000 	strlt.w	r2, [r8]
 80042aa:	ea33 0309 	bics.w	r3, r3, r9
 80042ae:	d119      	bne.n	80042e4 <_dtoa_r+0xac>
 80042b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80042b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80042bc:	4333      	orrs	r3, r6
 80042be:	f000 8589 	beq.w	8004dd4 <_dtoa_r+0xb9c>
 80042c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80042c4:	b953      	cbnz	r3, 80042dc <_dtoa_r+0xa4>
 80042c6:	4b95      	ldr	r3, [pc, #596]	; (800451c <_dtoa_r+0x2e4>)
 80042c8:	e023      	b.n	8004312 <_dtoa_r+0xda>
 80042ca:	4b95      	ldr	r3, [pc, #596]	; (8004520 <_dtoa_r+0x2e8>)
 80042cc:	9303      	str	r3, [sp, #12]
 80042ce:	3308      	adds	r3, #8
 80042d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	9803      	ldr	r0, [sp, #12]
 80042d6:	b019      	add	sp, #100	; 0x64
 80042d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042dc:	4b8f      	ldr	r3, [pc, #572]	; (800451c <_dtoa_r+0x2e4>)
 80042de:	9303      	str	r3, [sp, #12]
 80042e0:	3303      	adds	r3, #3
 80042e2:	e7f5      	b.n	80042d0 <_dtoa_r+0x98>
 80042e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80042e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80042ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80042f0:	2200      	movs	r2, #0
 80042f2:	2300      	movs	r3, #0
 80042f4:	f7fc fb58 	bl	80009a8 <__aeabi_dcmpeq>
 80042f8:	4680      	mov	r8, r0
 80042fa:	b160      	cbz	r0, 8004316 <_dtoa_r+0xde>
 80042fc:	2301      	movs	r3, #1
 80042fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8562 	beq.w	8004dce <_dtoa_r+0xb96>
 800430a:	4b86      	ldr	r3, [pc, #536]	; (8004524 <_dtoa_r+0x2ec>)
 800430c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	3b01      	subs	r3, #1
 8004312:	9303      	str	r3, [sp, #12]
 8004314:	e7de      	b.n	80042d4 <_dtoa_r+0x9c>
 8004316:	ab16      	add	r3, sp, #88	; 0x58
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	ab17      	add	r3, sp, #92	; 0x5c
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	4628      	mov	r0, r5
 8004320:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004324:	f001 f98a 	bl	800563c <__d2b>
 8004328:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800432c:	4682      	mov	sl, r0
 800432e:	2c00      	cmp	r4, #0
 8004330:	d07e      	beq.n	8004430 <_dtoa_r+0x1f8>
 8004332:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004338:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800433c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004340:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004344:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004348:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800434c:	4619      	mov	r1, r3
 800434e:	2200      	movs	r2, #0
 8004350:	4b75      	ldr	r3, [pc, #468]	; (8004528 <_dtoa_r+0x2f0>)
 8004352:	f7fb ff09 	bl	8000168 <__aeabi_dsub>
 8004356:	a368      	add	r3, pc, #416	; (adr r3, 80044f8 <_dtoa_r+0x2c0>)
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f7fc f8bc 	bl	80004d8 <__aeabi_dmul>
 8004360:	a367      	add	r3, pc, #412	; (adr r3, 8004500 <_dtoa_r+0x2c8>)
 8004362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004366:	f7fb ff01 	bl	800016c <__adddf3>
 800436a:	4606      	mov	r6, r0
 800436c:	4620      	mov	r0, r4
 800436e:	460f      	mov	r7, r1
 8004370:	f7fc f848 	bl	8000404 <__aeabi_i2d>
 8004374:	a364      	add	r3, pc, #400	; (adr r3, 8004508 <_dtoa_r+0x2d0>)
 8004376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437a:	f7fc f8ad 	bl	80004d8 <__aeabi_dmul>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4630      	mov	r0, r6
 8004384:	4639      	mov	r1, r7
 8004386:	f7fb fef1 	bl	800016c <__adddf3>
 800438a:	4606      	mov	r6, r0
 800438c:	460f      	mov	r7, r1
 800438e:	f7fc fb53 	bl	8000a38 <__aeabi_d2iz>
 8004392:	2200      	movs	r2, #0
 8004394:	4683      	mov	fp, r0
 8004396:	2300      	movs	r3, #0
 8004398:	4630      	mov	r0, r6
 800439a:	4639      	mov	r1, r7
 800439c:	f7fc fb0e 	bl	80009bc <__aeabi_dcmplt>
 80043a0:	b148      	cbz	r0, 80043b6 <_dtoa_r+0x17e>
 80043a2:	4658      	mov	r0, fp
 80043a4:	f7fc f82e 	bl	8000404 <__aeabi_i2d>
 80043a8:	4632      	mov	r2, r6
 80043aa:	463b      	mov	r3, r7
 80043ac:	f7fc fafc 	bl	80009a8 <__aeabi_dcmpeq>
 80043b0:	b908      	cbnz	r0, 80043b6 <_dtoa_r+0x17e>
 80043b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80043b6:	f1bb 0f16 	cmp.w	fp, #22
 80043ba:	d857      	bhi.n	800446c <_dtoa_r+0x234>
 80043bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80043c0:	4b5a      	ldr	r3, [pc, #360]	; (800452c <_dtoa_r+0x2f4>)
 80043c2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80043c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ca:	f7fc faf7 	bl	80009bc <__aeabi_dcmplt>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	d04e      	beq.n	8004470 <_dtoa_r+0x238>
 80043d2:	2300      	movs	r3, #0
 80043d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80043d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80043da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80043dc:	1b1b      	subs	r3, r3, r4
 80043de:	1e5a      	subs	r2, r3, #1
 80043e0:	bf46      	itte	mi
 80043e2:	f1c3 0901 	rsbmi	r9, r3, #1
 80043e6:	2300      	movmi	r3, #0
 80043e8:	f04f 0900 	movpl.w	r9, #0
 80043ec:	9209      	str	r2, [sp, #36]	; 0x24
 80043ee:	bf48      	it	mi
 80043f0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80043f2:	f1bb 0f00 	cmp.w	fp, #0
 80043f6:	db3d      	blt.n	8004474 <_dtoa_r+0x23c>
 80043f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043fa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80043fe:	445b      	add	r3, fp
 8004400:	9309      	str	r3, [sp, #36]	; 0x24
 8004402:	2300      	movs	r3, #0
 8004404:	930a      	str	r3, [sp, #40]	; 0x28
 8004406:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004408:	2b09      	cmp	r3, #9
 800440a:	d867      	bhi.n	80044dc <_dtoa_r+0x2a4>
 800440c:	2b05      	cmp	r3, #5
 800440e:	bfc4      	itt	gt
 8004410:	3b04      	subgt	r3, #4
 8004412:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004414:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004416:	bfc8      	it	gt
 8004418:	2400      	movgt	r4, #0
 800441a:	f1a3 0302 	sub.w	r3, r3, #2
 800441e:	bfd8      	it	le
 8004420:	2401      	movle	r4, #1
 8004422:	2b03      	cmp	r3, #3
 8004424:	f200 8086 	bhi.w	8004534 <_dtoa_r+0x2fc>
 8004428:	e8df f003 	tbb	[pc, r3]
 800442c:	5637392c 	.word	0x5637392c
 8004430:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004434:	441c      	add	r4, r3
 8004436:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800443a:	2b20      	cmp	r3, #32
 800443c:	bfc1      	itttt	gt
 800443e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004442:	fa09 f903 	lslgt.w	r9, r9, r3
 8004446:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800444a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800444e:	bfd6      	itet	le
 8004450:	f1c3 0320 	rsble	r3, r3, #32
 8004454:	ea49 0003 	orrgt.w	r0, r9, r3
 8004458:	fa06 f003 	lslle.w	r0, r6, r3
 800445c:	f7fb ffc2 	bl	80003e4 <__aeabi_ui2d>
 8004460:	2201      	movs	r2, #1
 8004462:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004466:	3c01      	subs	r4, #1
 8004468:	9213      	str	r2, [sp, #76]	; 0x4c
 800446a:	e76f      	b.n	800434c <_dtoa_r+0x114>
 800446c:	2301      	movs	r3, #1
 800446e:	e7b3      	b.n	80043d8 <_dtoa_r+0x1a0>
 8004470:	900f      	str	r0, [sp, #60]	; 0x3c
 8004472:	e7b2      	b.n	80043da <_dtoa_r+0x1a2>
 8004474:	f1cb 0300 	rsb	r3, fp, #0
 8004478:	930a      	str	r3, [sp, #40]	; 0x28
 800447a:	2300      	movs	r3, #0
 800447c:	eba9 090b 	sub.w	r9, r9, fp
 8004480:	930e      	str	r3, [sp, #56]	; 0x38
 8004482:	e7c0      	b.n	8004406 <_dtoa_r+0x1ce>
 8004484:	2300      	movs	r3, #0
 8004486:	930b      	str	r3, [sp, #44]	; 0x2c
 8004488:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800448a:	2b00      	cmp	r3, #0
 800448c:	dc55      	bgt.n	800453a <_dtoa_r+0x302>
 800448e:	2301      	movs	r3, #1
 8004490:	461a      	mov	r2, r3
 8004492:	9306      	str	r3, [sp, #24]
 8004494:	9308      	str	r3, [sp, #32]
 8004496:	9223      	str	r2, [sp, #140]	; 0x8c
 8004498:	e00b      	b.n	80044b2 <_dtoa_r+0x27a>
 800449a:	2301      	movs	r3, #1
 800449c:	e7f3      	b.n	8004486 <_dtoa_r+0x24e>
 800449e:	2300      	movs	r3, #0
 80044a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80044a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80044a4:	445b      	add	r3, fp
 80044a6:	9306      	str	r3, [sp, #24]
 80044a8:	3301      	adds	r3, #1
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	9308      	str	r3, [sp, #32]
 80044ae:	bfb8      	it	lt
 80044b0:	2301      	movlt	r3, #1
 80044b2:	2100      	movs	r1, #0
 80044b4:	2204      	movs	r2, #4
 80044b6:	69e8      	ldr	r0, [r5, #28]
 80044b8:	f102 0614 	add.w	r6, r2, #20
 80044bc:	429e      	cmp	r6, r3
 80044be:	d940      	bls.n	8004542 <_dtoa_r+0x30a>
 80044c0:	6041      	str	r1, [r0, #4]
 80044c2:	4628      	mov	r0, r5
 80044c4:	f000 fd98 	bl	8004ff8 <_Balloc>
 80044c8:	9003      	str	r0, [sp, #12]
 80044ca:	2800      	cmp	r0, #0
 80044cc:	d13c      	bne.n	8004548 <_dtoa_r+0x310>
 80044ce:	4602      	mov	r2, r0
 80044d0:	f240 11af 	movw	r1, #431	; 0x1af
 80044d4:	4b16      	ldr	r3, [pc, #88]	; (8004530 <_dtoa_r+0x2f8>)
 80044d6:	e6c3      	b.n	8004260 <_dtoa_r+0x28>
 80044d8:	2301      	movs	r3, #1
 80044da:	e7e1      	b.n	80044a0 <_dtoa_r+0x268>
 80044dc:	2401      	movs	r4, #1
 80044de:	2300      	movs	r3, #0
 80044e0:	940b      	str	r4, [sp, #44]	; 0x2c
 80044e2:	9322      	str	r3, [sp, #136]	; 0x88
 80044e4:	f04f 33ff 	mov.w	r3, #4294967295
 80044e8:	2200      	movs	r2, #0
 80044ea:	9306      	str	r3, [sp, #24]
 80044ec:	9308      	str	r3, [sp, #32]
 80044ee:	2312      	movs	r3, #18
 80044f0:	e7d1      	b.n	8004496 <_dtoa_r+0x25e>
 80044f2:	bf00      	nop
 80044f4:	f3af 8000 	nop.w
 80044f8:	636f4361 	.word	0x636f4361
 80044fc:	3fd287a7 	.word	0x3fd287a7
 8004500:	8b60c8b3 	.word	0x8b60c8b3
 8004504:	3fc68a28 	.word	0x3fc68a28
 8004508:	509f79fb 	.word	0x509f79fb
 800450c:	3fd34413 	.word	0x3fd34413
 8004510:	080063bf 	.word	0x080063bf
 8004514:	080063d6 	.word	0x080063d6
 8004518:	7ff00000 	.word	0x7ff00000
 800451c:	080063bb 	.word	0x080063bb
 8004520:	080063b2 	.word	0x080063b2
 8004524:	0800638f 	.word	0x0800638f
 8004528:	3ff80000 	.word	0x3ff80000
 800452c:	080064c0 	.word	0x080064c0
 8004530:	0800642e 	.word	0x0800642e
 8004534:	2301      	movs	r3, #1
 8004536:	930b      	str	r3, [sp, #44]	; 0x2c
 8004538:	e7d4      	b.n	80044e4 <_dtoa_r+0x2ac>
 800453a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800453c:	9306      	str	r3, [sp, #24]
 800453e:	9308      	str	r3, [sp, #32]
 8004540:	e7b7      	b.n	80044b2 <_dtoa_r+0x27a>
 8004542:	3101      	adds	r1, #1
 8004544:	0052      	lsls	r2, r2, #1
 8004546:	e7b7      	b.n	80044b8 <_dtoa_r+0x280>
 8004548:	69eb      	ldr	r3, [r5, #28]
 800454a:	9a03      	ldr	r2, [sp, #12]
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	9b08      	ldr	r3, [sp, #32]
 8004550:	2b0e      	cmp	r3, #14
 8004552:	f200 80a8 	bhi.w	80046a6 <_dtoa_r+0x46e>
 8004556:	2c00      	cmp	r4, #0
 8004558:	f000 80a5 	beq.w	80046a6 <_dtoa_r+0x46e>
 800455c:	f1bb 0f00 	cmp.w	fp, #0
 8004560:	dd34      	ble.n	80045cc <_dtoa_r+0x394>
 8004562:	4b9a      	ldr	r3, [pc, #616]	; (80047cc <_dtoa_r+0x594>)
 8004564:	f00b 020f 	and.w	r2, fp, #15
 8004568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800456c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004570:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004574:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004578:	ea4f 142b 	mov.w	r4, fp, asr #4
 800457c:	d016      	beq.n	80045ac <_dtoa_r+0x374>
 800457e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004582:	4b93      	ldr	r3, [pc, #588]	; (80047d0 <_dtoa_r+0x598>)
 8004584:	2703      	movs	r7, #3
 8004586:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800458a:	f7fc f8cf 	bl	800072c <__aeabi_ddiv>
 800458e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004592:	f004 040f 	and.w	r4, r4, #15
 8004596:	4e8e      	ldr	r6, [pc, #568]	; (80047d0 <_dtoa_r+0x598>)
 8004598:	b954      	cbnz	r4, 80045b0 <_dtoa_r+0x378>
 800459a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800459e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045a2:	f7fc f8c3 	bl	800072c <__aeabi_ddiv>
 80045a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045aa:	e029      	b.n	8004600 <_dtoa_r+0x3c8>
 80045ac:	2702      	movs	r7, #2
 80045ae:	e7f2      	b.n	8004596 <_dtoa_r+0x35e>
 80045b0:	07e1      	lsls	r1, r4, #31
 80045b2:	d508      	bpl.n	80045c6 <_dtoa_r+0x38e>
 80045b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80045b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80045bc:	f7fb ff8c 	bl	80004d8 <__aeabi_dmul>
 80045c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80045c4:	3701      	adds	r7, #1
 80045c6:	1064      	asrs	r4, r4, #1
 80045c8:	3608      	adds	r6, #8
 80045ca:	e7e5      	b.n	8004598 <_dtoa_r+0x360>
 80045cc:	f000 80a5 	beq.w	800471a <_dtoa_r+0x4e2>
 80045d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80045d4:	f1cb 0400 	rsb	r4, fp, #0
 80045d8:	4b7c      	ldr	r3, [pc, #496]	; (80047cc <_dtoa_r+0x594>)
 80045da:	f004 020f 	and.w	r2, r4, #15
 80045de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f7fb ff77 	bl	80004d8 <__aeabi_dmul>
 80045ea:	2702      	movs	r7, #2
 80045ec:	2300      	movs	r3, #0
 80045ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045f2:	4e77      	ldr	r6, [pc, #476]	; (80047d0 <_dtoa_r+0x598>)
 80045f4:	1124      	asrs	r4, r4, #4
 80045f6:	2c00      	cmp	r4, #0
 80045f8:	f040 8084 	bne.w	8004704 <_dtoa_r+0x4cc>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1d2      	bne.n	80045a6 <_dtoa_r+0x36e>
 8004600:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004604:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004608:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8087 	beq.w	800471e <_dtoa_r+0x4e6>
 8004610:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004614:	2200      	movs	r2, #0
 8004616:	4b6f      	ldr	r3, [pc, #444]	; (80047d4 <_dtoa_r+0x59c>)
 8004618:	f7fc f9d0 	bl	80009bc <__aeabi_dcmplt>
 800461c:	2800      	cmp	r0, #0
 800461e:	d07e      	beq.n	800471e <_dtoa_r+0x4e6>
 8004620:	9b08      	ldr	r3, [sp, #32]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d07b      	beq.n	800471e <_dtoa_r+0x4e6>
 8004626:	9b06      	ldr	r3, [sp, #24]
 8004628:	2b00      	cmp	r3, #0
 800462a:	dd38      	ble.n	800469e <_dtoa_r+0x466>
 800462c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004630:	2200      	movs	r2, #0
 8004632:	4b69      	ldr	r3, [pc, #420]	; (80047d8 <_dtoa_r+0x5a0>)
 8004634:	f7fb ff50 	bl	80004d8 <__aeabi_dmul>
 8004638:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800463c:	9c06      	ldr	r4, [sp, #24]
 800463e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8004642:	3701      	adds	r7, #1
 8004644:	4638      	mov	r0, r7
 8004646:	f7fb fedd 	bl	8000404 <__aeabi_i2d>
 800464a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800464e:	f7fb ff43 	bl	80004d8 <__aeabi_dmul>
 8004652:	2200      	movs	r2, #0
 8004654:	4b61      	ldr	r3, [pc, #388]	; (80047dc <_dtoa_r+0x5a4>)
 8004656:	f7fb fd89 	bl	800016c <__adddf3>
 800465a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800465e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004662:	9611      	str	r6, [sp, #68]	; 0x44
 8004664:	2c00      	cmp	r4, #0
 8004666:	d15d      	bne.n	8004724 <_dtoa_r+0x4ec>
 8004668:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800466c:	2200      	movs	r2, #0
 800466e:	4b5c      	ldr	r3, [pc, #368]	; (80047e0 <_dtoa_r+0x5a8>)
 8004670:	f7fb fd7a 	bl	8000168 <__aeabi_dsub>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800467c:	4633      	mov	r3, r6
 800467e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004680:	f7fc f9ba 	bl	80009f8 <__aeabi_dcmpgt>
 8004684:	2800      	cmp	r0, #0
 8004686:	f040 8295 	bne.w	8004bb4 <_dtoa_r+0x97c>
 800468a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800468e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004690:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004694:	f7fc f992 	bl	80009bc <__aeabi_dcmplt>
 8004698:	2800      	cmp	r0, #0
 800469a:	f040 8289 	bne.w	8004bb0 <_dtoa_r+0x978>
 800469e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80046a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80046a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f2c0 8151 	blt.w	8004950 <_dtoa_r+0x718>
 80046ae:	f1bb 0f0e 	cmp.w	fp, #14
 80046b2:	f300 814d 	bgt.w	8004950 <_dtoa_r+0x718>
 80046b6:	4b45      	ldr	r3, [pc, #276]	; (80047cc <_dtoa_r+0x594>)
 80046b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80046bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046c0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80046c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f280 80da 	bge.w	8004880 <_dtoa_r+0x648>
 80046cc:	9b08      	ldr	r3, [sp, #32]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f300 80d6 	bgt.w	8004880 <_dtoa_r+0x648>
 80046d4:	f040 826b 	bne.w	8004bae <_dtoa_r+0x976>
 80046d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046dc:	2200      	movs	r2, #0
 80046de:	4b40      	ldr	r3, [pc, #256]	; (80047e0 <_dtoa_r+0x5a8>)
 80046e0:	f7fb fefa 	bl	80004d8 <__aeabi_dmul>
 80046e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046e8:	f7fc f97c 	bl	80009e4 <__aeabi_dcmpge>
 80046ec:	9c08      	ldr	r4, [sp, #32]
 80046ee:	4626      	mov	r6, r4
 80046f0:	2800      	cmp	r0, #0
 80046f2:	f040 8241 	bne.w	8004b78 <_dtoa_r+0x940>
 80046f6:	2331      	movs	r3, #49	; 0x31
 80046f8:	9f03      	ldr	r7, [sp, #12]
 80046fa:	f10b 0b01 	add.w	fp, fp, #1
 80046fe:	f807 3b01 	strb.w	r3, [r7], #1
 8004702:	e23d      	b.n	8004b80 <_dtoa_r+0x948>
 8004704:	07e2      	lsls	r2, r4, #31
 8004706:	d505      	bpl.n	8004714 <_dtoa_r+0x4dc>
 8004708:	e9d6 2300 	ldrd	r2, r3, [r6]
 800470c:	f7fb fee4 	bl	80004d8 <__aeabi_dmul>
 8004710:	2301      	movs	r3, #1
 8004712:	3701      	adds	r7, #1
 8004714:	1064      	asrs	r4, r4, #1
 8004716:	3608      	adds	r6, #8
 8004718:	e76d      	b.n	80045f6 <_dtoa_r+0x3be>
 800471a:	2702      	movs	r7, #2
 800471c:	e770      	b.n	8004600 <_dtoa_r+0x3c8>
 800471e:	46d8      	mov	r8, fp
 8004720:	9c08      	ldr	r4, [sp, #32]
 8004722:	e78f      	b.n	8004644 <_dtoa_r+0x40c>
 8004724:	9903      	ldr	r1, [sp, #12]
 8004726:	4b29      	ldr	r3, [pc, #164]	; (80047cc <_dtoa_r+0x594>)
 8004728:	4421      	add	r1, r4
 800472a:	9112      	str	r1, [sp, #72]	; 0x48
 800472c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800472e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004732:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004736:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800473a:	2900      	cmp	r1, #0
 800473c:	d054      	beq.n	80047e8 <_dtoa_r+0x5b0>
 800473e:	2000      	movs	r0, #0
 8004740:	4928      	ldr	r1, [pc, #160]	; (80047e4 <_dtoa_r+0x5ac>)
 8004742:	f7fb fff3 	bl	800072c <__aeabi_ddiv>
 8004746:	463b      	mov	r3, r7
 8004748:	4632      	mov	r2, r6
 800474a:	f7fb fd0d 	bl	8000168 <__aeabi_dsub>
 800474e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004752:	9f03      	ldr	r7, [sp, #12]
 8004754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004758:	f7fc f96e 	bl	8000a38 <__aeabi_d2iz>
 800475c:	4604      	mov	r4, r0
 800475e:	f7fb fe51 	bl	8000404 <__aeabi_i2d>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800476a:	f7fb fcfd 	bl	8000168 <__aeabi_dsub>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	3430      	adds	r4, #48	; 0x30
 8004774:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004778:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800477c:	f807 4b01 	strb.w	r4, [r7], #1
 8004780:	f7fc f91c 	bl	80009bc <__aeabi_dcmplt>
 8004784:	2800      	cmp	r0, #0
 8004786:	d173      	bne.n	8004870 <_dtoa_r+0x638>
 8004788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800478c:	2000      	movs	r0, #0
 800478e:	4911      	ldr	r1, [pc, #68]	; (80047d4 <_dtoa_r+0x59c>)
 8004790:	f7fb fcea 	bl	8000168 <__aeabi_dsub>
 8004794:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004798:	f7fc f910 	bl	80009bc <__aeabi_dcmplt>
 800479c:	2800      	cmp	r0, #0
 800479e:	f040 80b6 	bne.w	800490e <_dtoa_r+0x6d6>
 80047a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80047a4:	429f      	cmp	r7, r3
 80047a6:	f43f af7a 	beq.w	800469e <_dtoa_r+0x466>
 80047aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80047ae:	2200      	movs	r2, #0
 80047b0:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <_dtoa_r+0x5a0>)
 80047b2:	f7fb fe91 	bl	80004d8 <__aeabi_dmul>
 80047b6:	2200      	movs	r2, #0
 80047b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80047bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <_dtoa_r+0x5a0>)
 80047c2:	f7fb fe89 	bl	80004d8 <__aeabi_dmul>
 80047c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047ca:	e7c3      	b.n	8004754 <_dtoa_r+0x51c>
 80047cc:	080064c0 	.word	0x080064c0
 80047d0:	08006498 	.word	0x08006498
 80047d4:	3ff00000 	.word	0x3ff00000
 80047d8:	40240000 	.word	0x40240000
 80047dc:	401c0000 	.word	0x401c0000
 80047e0:	40140000 	.word	0x40140000
 80047e4:	3fe00000 	.word	0x3fe00000
 80047e8:	4630      	mov	r0, r6
 80047ea:	4639      	mov	r1, r7
 80047ec:	f7fb fe74 	bl	80004d8 <__aeabi_dmul>
 80047f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80047f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80047f6:	9c03      	ldr	r4, [sp, #12]
 80047f8:	9314      	str	r3, [sp, #80]	; 0x50
 80047fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047fe:	f7fc f91b 	bl	8000a38 <__aeabi_d2iz>
 8004802:	9015      	str	r0, [sp, #84]	; 0x54
 8004804:	f7fb fdfe 	bl	8000404 <__aeabi_i2d>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004810:	f7fb fcaa 	bl	8000168 <__aeabi_dsub>
 8004814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004816:	4606      	mov	r6, r0
 8004818:	3330      	adds	r3, #48	; 0x30
 800481a:	f804 3b01 	strb.w	r3, [r4], #1
 800481e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004820:	460f      	mov	r7, r1
 8004822:	429c      	cmp	r4, r3
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	d124      	bne.n	8004874 <_dtoa_r+0x63c>
 800482a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800482e:	4baf      	ldr	r3, [pc, #700]	; (8004aec <_dtoa_r+0x8b4>)
 8004830:	f7fb fc9c 	bl	800016c <__adddf3>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4630      	mov	r0, r6
 800483a:	4639      	mov	r1, r7
 800483c:	f7fc f8dc 	bl	80009f8 <__aeabi_dcmpgt>
 8004840:	2800      	cmp	r0, #0
 8004842:	d163      	bne.n	800490c <_dtoa_r+0x6d4>
 8004844:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004848:	2000      	movs	r0, #0
 800484a:	49a8      	ldr	r1, [pc, #672]	; (8004aec <_dtoa_r+0x8b4>)
 800484c:	f7fb fc8c 	bl	8000168 <__aeabi_dsub>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4630      	mov	r0, r6
 8004856:	4639      	mov	r1, r7
 8004858:	f7fc f8b0 	bl	80009bc <__aeabi_dcmplt>
 800485c:	2800      	cmp	r0, #0
 800485e:	f43f af1e 	beq.w	800469e <_dtoa_r+0x466>
 8004862:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004864:	1e7b      	subs	r3, r7, #1
 8004866:	9314      	str	r3, [sp, #80]	; 0x50
 8004868:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800486c:	2b30      	cmp	r3, #48	; 0x30
 800486e:	d0f8      	beq.n	8004862 <_dtoa_r+0x62a>
 8004870:	46c3      	mov	fp, r8
 8004872:	e03b      	b.n	80048ec <_dtoa_r+0x6b4>
 8004874:	4b9e      	ldr	r3, [pc, #632]	; (8004af0 <_dtoa_r+0x8b8>)
 8004876:	f7fb fe2f 	bl	80004d8 <__aeabi_dmul>
 800487a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800487e:	e7bc      	b.n	80047fa <_dtoa_r+0x5c2>
 8004880:	9f03      	ldr	r7, [sp, #12]
 8004882:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004886:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800488a:	4640      	mov	r0, r8
 800488c:	4649      	mov	r1, r9
 800488e:	f7fb ff4d 	bl	800072c <__aeabi_ddiv>
 8004892:	f7fc f8d1 	bl	8000a38 <__aeabi_d2iz>
 8004896:	4604      	mov	r4, r0
 8004898:	f7fb fdb4 	bl	8000404 <__aeabi_i2d>
 800489c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048a0:	f7fb fe1a 	bl	80004d8 <__aeabi_dmul>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4640      	mov	r0, r8
 80048aa:	4649      	mov	r1, r9
 80048ac:	f7fb fc5c 	bl	8000168 <__aeabi_dsub>
 80048b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80048b4:	f807 6b01 	strb.w	r6, [r7], #1
 80048b8:	9e03      	ldr	r6, [sp, #12]
 80048ba:	f8dd c020 	ldr.w	ip, [sp, #32]
 80048be:	1bbe      	subs	r6, r7, r6
 80048c0:	45b4      	cmp	ip, r6
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	d136      	bne.n	8004936 <_dtoa_r+0x6fe>
 80048c8:	f7fb fc50 	bl	800016c <__adddf3>
 80048cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048d0:	4680      	mov	r8, r0
 80048d2:	4689      	mov	r9, r1
 80048d4:	f7fc f890 	bl	80009f8 <__aeabi_dcmpgt>
 80048d8:	bb58      	cbnz	r0, 8004932 <_dtoa_r+0x6fa>
 80048da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048de:	4640      	mov	r0, r8
 80048e0:	4649      	mov	r1, r9
 80048e2:	f7fc f861 	bl	80009a8 <__aeabi_dcmpeq>
 80048e6:	b108      	cbz	r0, 80048ec <_dtoa_r+0x6b4>
 80048e8:	07e3      	lsls	r3, r4, #31
 80048ea:	d422      	bmi.n	8004932 <_dtoa_r+0x6fa>
 80048ec:	4651      	mov	r1, sl
 80048ee:	4628      	mov	r0, r5
 80048f0:	f000 fbc2 	bl	8005078 <_Bfree>
 80048f4:	2300      	movs	r3, #0
 80048f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80048f8:	703b      	strb	r3, [r7, #0]
 80048fa:	f10b 0301 	add.w	r3, fp, #1
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004902:	2b00      	cmp	r3, #0
 8004904:	f43f ace6 	beq.w	80042d4 <_dtoa_r+0x9c>
 8004908:	601f      	str	r7, [r3, #0]
 800490a:	e4e3      	b.n	80042d4 <_dtoa_r+0x9c>
 800490c:	4627      	mov	r7, r4
 800490e:	463b      	mov	r3, r7
 8004910:	461f      	mov	r7, r3
 8004912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004916:	2a39      	cmp	r2, #57	; 0x39
 8004918:	d107      	bne.n	800492a <_dtoa_r+0x6f2>
 800491a:	9a03      	ldr	r2, [sp, #12]
 800491c:	429a      	cmp	r2, r3
 800491e:	d1f7      	bne.n	8004910 <_dtoa_r+0x6d8>
 8004920:	2230      	movs	r2, #48	; 0x30
 8004922:	9903      	ldr	r1, [sp, #12]
 8004924:	f108 0801 	add.w	r8, r8, #1
 8004928:	700a      	strb	r2, [r1, #0]
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	3201      	adds	r2, #1
 800492e:	701a      	strb	r2, [r3, #0]
 8004930:	e79e      	b.n	8004870 <_dtoa_r+0x638>
 8004932:	46d8      	mov	r8, fp
 8004934:	e7eb      	b.n	800490e <_dtoa_r+0x6d6>
 8004936:	2200      	movs	r2, #0
 8004938:	4b6d      	ldr	r3, [pc, #436]	; (8004af0 <_dtoa_r+0x8b8>)
 800493a:	f7fb fdcd 	bl	80004d8 <__aeabi_dmul>
 800493e:	2200      	movs	r2, #0
 8004940:	2300      	movs	r3, #0
 8004942:	4680      	mov	r8, r0
 8004944:	4689      	mov	r9, r1
 8004946:	f7fc f82f 	bl	80009a8 <__aeabi_dcmpeq>
 800494a:	2800      	cmp	r0, #0
 800494c:	d09b      	beq.n	8004886 <_dtoa_r+0x64e>
 800494e:	e7cd      	b.n	80048ec <_dtoa_r+0x6b4>
 8004950:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004952:	2a00      	cmp	r2, #0
 8004954:	f000 80c4 	beq.w	8004ae0 <_dtoa_r+0x8a8>
 8004958:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800495a:	2a01      	cmp	r2, #1
 800495c:	f300 80a8 	bgt.w	8004ab0 <_dtoa_r+0x878>
 8004960:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004962:	2a00      	cmp	r2, #0
 8004964:	f000 80a0 	beq.w	8004aa8 <_dtoa_r+0x870>
 8004968:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800496c:	464f      	mov	r7, r9
 800496e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004972:	2101      	movs	r1, #1
 8004974:	441a      	add	r2, r3
 8004976:	4628      	mov	r0, r5
 8004978:	4499      	add	r9, r3
 800497a:	9209      	str	r2, [sp, #36]	; 0x24
 800497c:	f000 fc32 	bl	80051e4 <__i2b>
 8004980:	4606      	mov	r6, r0
 8004982:	b15f      	cbz	r7, 800499c <_dtoa_r+0x764>
 8004984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004986:	2b00      	cmp	r3, #0
 8004988:	dd08      	ble.n	800499c <_dtoa_r+0x764>
 800498a:	42bb      	cmp	r3, r7
 800498c:	bfa8      	it	ge
 800498e:	463b      	movge	r3, r7
 8004990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004992:	eba9 0903 	sub.w	r9, r9, r3
 8004996:	1aff      	subs	r7, r7, r3
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	9309      	str	r3, [sp, #36]	; 0x24
 800499c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800499e:	b1f3      	cbz	r3, 80049de <_dtoa_r+0x7a6>
 80049a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 80a0 	beq.w	8004ae8 <_dtoa_r+0x8b0>
 80049a8:	2c00      	cmp	r4, #0
 80049aa:	dd10      	ble.n	80049ce <_dtoa_r+0x796>
 80049ac:	4631      	mov	r1, r6
 80049ae:	4622      	mov	r2, r4
 80049b0:	4628      	mov	r0, r5
 80049b2:	f000 fcd5 	bl	8005360 <__pow5mult>
 80049b6:	4652      	mov	r2, sl
 80049b8:	4601      	mov	r1, r0
 80049ba:	4606      	mov	r6, r0
 80049bc:	4628      	mov	r0, r5
 80049be:	f000 fc27 	bl	8005210 <__multiply>
 80049c2:	4680      	mov	r8, r0
 80049c4:	4651      	mov	r1, sl
 80049c6:	4628      	mov	r0, r5
 80049c8:	f000 fb56 	bl	8005078 <_Bfree>
 80049cc:	46c2      	mov	sl, r8
 80049ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049d0:	1b1a      	subs	r2, r3, r4
 80049d2:	d004      	beq.n	80049de <_dtoa_r+0x7a6>
 80049d4:	4651      	mov	r1, sl
 80049d6:	4628      	mov	r0, r5
 80049d8:	f000 fcc2 	bl	8005360 <__pow5mult>
 80049dc:	4682      	mov	sl, r0
 80049de:	2101      	movs	r1, #1
 80049e0:	4628      	mov	r0, r5
 80049e2:	f000 fbff 	bl	80051e4 <__i2b>
 80049e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049e8:	4604      	mov	r4, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f340 8082 	ble.w	8004af4 <_dtoa_r+0x8bc>
 80049f0:	461a      	mov	r2, r3
 80049f2:	4601      	mov	r1, r0
 80049f4:	4628      	mov	r0, r5
 80049f6:	f000 fcb3 	bl	8005360 <__pow5mult>
 80049fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049fc:	4604      	mov	r4, r0
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	dd7b      	ble.n	8004afa <_dtoa_r+0x8c2>
 8004a02:	f04f 0800 	mov.w	r8, #0
 8004a06:	6923      	ldr	r3, [r4, #16]
 8004a08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004a0c:	6918      	ldr	r0, [r3, #16]
 8004a0e:	f000 fb9b 	bl	8005148 <__hi0bits>
 8004a12:	f1c0 0020 	rsb	r0, r0, #32
 8004a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a18:	4418      	add	r0, r3
 8004a1a:	f010 001f 	ands.w	r0, r0, #31
 8004a1e:	f000 8092 	beq.w	8004b46 <_dtoa_r+0x90e>
 8004a22:	f1c0 0320 	rsb	r3, r0, #32
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	f340 8085 	ble.w	8004b36 <_dtoa_r+0x8fe>
 8004a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a2e:	f1c0 001c 	rsb	r0, r0, #28
 8004a32:	4403      	add	r3, r0
 8004a34:	4481      	add	r9, r0
 8004a36:	4407      	add	r7, r0
 8004a38:	9309      	str	r3, [sp, #36]	; 0x24
 8004a3a:	f1b9 0f00 	cmp.w	r9, #0
 8004a3e:	dd05      	ble.n	8004a4c <_dtoa_r+0x814>
 8004a40:	4651      	mov	r1, sl
 8004a42:	464a      	mov	r2, r9
 8004a44:	4628      	mov	r0, r5
 8004a46:	f000 fce5 	bl	8005414 <__lshift>
 8004a4a:	4682      	mov	sl, r0
 8004a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	dd05      	ble.n	8004a5e <_dtoa_r+0x826>
 8004a52:	4621      	mov	r1, r4
 8004a54:	461a      	mov	r2, r3
 8004a56:	4628      	mov	r0, r5
 8004a58:	f000 fcdc 	bl	8005414 <__lshift>
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d072      	beq.n	8004b4a <_dtoa_r+0x912>
 8004a64:	4621      	mov	r1, r4
 8004a66:	4650      	mov	r0, sl
 8004a68:	f000 fd40 	bl	80054ec <__mcmp>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	da6c      	bge.n	8004b4a <_dtoa_r+0x912>
 8004a70:	2300      	movs	r3, #0
 8004a72:	4651      	mov	r1, sl
 8004a74:	220a      	movs	r2, #10
 8004a76:	4628      	mov	r0, r5
 8004a78:	f000 fb20 	bl	80050bc <__multadd>
 8004a7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a7e:	4682      	mov	sl, r0
 8004a80:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 81ac 	beq.w	8004de2 <_dtoa_r+0xbaa>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	4631      	mov	r1, r6
 8004a8e:	220a      	movs	r2, #10
 8004a90:	4628      	mov	r0, r5
 8004a92:	f000 fb13 	bl	80050bc <__multadd>
 8004a96:	9b06      	ldr	r3, [sp, #24]
 8004a98:	4606      	mov	r6, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f300 8093 	bgt.w	8004bc6 <_dtoa_r+0x98e>
 8004aa0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	dc59      	bgt.n	8004b5a <_dtoa_r+0x922>
 8004aa6:	e08e      	b.n	8004bc6 <_dtoa_r+0x98e>
 8004aa8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004aaa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004aae:	e75d      	b.n	800496c <_dtoa_r+0x734>
 8004ab0:	9b08      	ldr	r3, [sp, #32]
 8004ab2:	1e5c      	subs	r4, r3, #1
 8004ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ab6:	42a3      	cmp	r3, r4
 8004ab8:	bfbf      	itttt	lt
 8004aba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004abc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004abe:	1ae3      	sublt	r3, r4, r3
 8004ac0:	18d2      	addlt	r2, r2, r3
 8004ac2:	bfa8      	it	ge
 8004ac4:	1b1c      	subge	r4, r3, r4
 8004ac6:	9b08      	ldr	r3, [sp, #32]
 8004ac8:	bfbe      	ittt	lt
 8004aca:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004acc:	920e      	strlt	r2, [sp, #56]	; 0x38
 8004ace:	2400      	movlt	r4, #0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bfb5      	itete	lt
 8004ad4:	eba9 0703 	sublt.w	r7, r9, r3
 8004ad8:	464f      	movge	r7, r9
 8004ada:	2300      	movlt	r3, #0
 8004adc:	9b08      	ldrge	r3, [sp, #32]
 8004ade:	e747      	b.n	8004970 <_dtoa_r+0x738>
 8004ae0:	464f      	mov	r7, r9
 8004ae2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004ae4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004ae6:	e74c      	b.n	8004982 <_dtoa_r+0x74a>
 8004ae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004aea:	e773      	b.n	80049d4 <_dtoa_r+0x79c>
 8004aec:	3fe00000 	.word	0x3fe00000
 8004af0:	40240000 	.word	0x40240000
 8004af4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	dc18      	bgt.n	8004b2c <_dtoa_r+0x8f4>
 8004afa:	9b04      	ldr	r3, [sp, #16]
 8004afc:	b9b3      	cbnz	r3, 8004b2c <_dtoa_r+0x8f4>
 8004afe:	9b05      	ldr	r3, [sp, #20]
 8004b00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b04:	b993      	cbnz	r3, 8004b2c <_dtoa_r+0x8f4>
 8004b06:	9b05      	ldr	r3, [sp, #20]
 8004b08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b0c:	0d1b      	lsrs	r3, r3, #20
 8004b0e:	051b      	lsls	r3, r3, #20
 8004b10:	b17b      	cbz	r3, 8004b32 <_dtoa_r+0x8fa>
 8004b12:	f04f 0801 	mov.w	r8, #1
 8004b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b18:	f109 0901 	add.w	r9, r9, #1
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f47f af6f 	bne.w	8004a06 <_dtoa_r+0x7ce>
 8004b28:	2001      	movs	r0, #1
 8004b2a:	e774      	b.n	8004a16 <_dtoa_r+0x7de>
 8004b2c:	f04f 0800 	mov.w	r8, #0
 8004b30:	e7f6      	b.n	8004b20 <_dtoa_r+0x8e8>
 8004b32:	4698      	mov	r8, r3
 8004b34:	e7f4      	b.n	8004b20 <_dtoa_r+0x8e8>
 8004b36:	d080      	beq.n	8004a3a <_dtoa_r+0x802>
 8004b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b3a:	331c      	adds	r3, #28
 8004b3c:	441a      	add	r2, r3
 8004b3e:	4499      	add	r9, r3
 8004b40:	441f      	add	r7, r3
 8004b42:	9209      	str	r2, [sp, #36]	; 0x24
 8004b44:	e779      	b.n	8004a3a <_dtoa_r+0x802>
 8004b46:	4603      	mov	r3, r0
 8004b48:	e7f6      	b.n	8004b38 <_dtoa_r+0x900>
 8004b4a:	9b08      	ldr	r3, [sp, #32]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	dc34      	bgt.n	8004bba <_dtoa_r+0x982>
 8004b50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	dd31      	ble.n	8004bba <_dtoa_r+0x982>
 8004b56:	9b08      	ldr	r3, [sp, #32]
 8004b58:	9306      	str	r3, [sp, #24]
 8004b5a:	9b06      	ldr	r3, [sp, #24]
 8004b5c:	b963      	cbnz	r3, 8004b78 <_dtoa_r+0x940>
 8004b5e:	4621      	mov	r1, r4
 8004b60:	2205      	movs	r2, #5
 8004b62:	4628      	mov	r0, r5
 8004b64:	f000 faaa 	bl	80050bc <__multadd>
 8004b68:	4601      	mov	r1, r0
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	4650      	mov	r0, sl
 8004b6e:	f000 fcbd 	bl	80054ec <__mcmp>
 8004b72:	2800      	cmp	r0, #0
 8004b74:	f73f adbf 	bgt.w	80046f6 <_dtoa_r+0x4be>
 8004b78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004b7a:	9f03      	ldr	r7, [sp, #12]
 8004b7c:	ea6f 0b03 	mvn.w	fp, r3
 8004b80:	f04f 0800 	mov.w	r8, #0
 8004b84:	4621      	mov	r1, r4
 8004b86:	4628      	mov	r0, r5
 8004b88:	f000 fa76 	bl	8005078 <_Bfree>
 8004b8c:	2e00      	cmp	r6, #0
 8004b8e:	f43f aead 	beq.w	80048ec <_dtoa_r+0x6b4>
 8004b92:	f1b8 0f00 	cmp.w	r8, #0
 8004b96:	d005      	beq.n	8004ba4 <_dtoa_r+0x96c>
 8004b98:	45b0      	cmp	r8, r6
 8004b9a:	d003      	beq.n	8004ba4 <_dtoa_r+0x96c>
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	f000 fa6a 	bl	8005078 <_Bfree>
 8004ba4:	4631      	mov	r1, r6
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f000 fa66 	bl	8005078 <_Bfree>
 8004bac:	e69e      	b.n	80048ec <_dtoa_r+0x6b4>
 8004bae:	2400      	movs	r4, #0
 8004bb0:	4626      	mov	r6, r4
 8004bb2:	e7e1      	b.n	8004b78 <_dtoa_r+0x940>
 8004bb4:	46c3      	mov	fp, r8
 8004bb6:	4626      	mov	r6, r4
 8004bb8:	e59d      	b.n	80046f6 <_dtoa_r+0x4be>
 8004bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 80c8 	beq.w	8004d52 <_dtoa_r+0xb1a>
 8004bc2:	9b08      	ldr	r3, [sp, #32]
 8004bc4:	9306      	str	r3, [sp, #24]
 8004bc6:	2f00      	cmp	r7, #0
 8004bc8:	dd05      	ble.n	8004bd6 <_dtoa_r+0x99e>
 8004bca:	4631      	mov	r1, r6
 8004bcc:	463a      	mov	r2, r7
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f000 fc20 	bl	8005414 <__lshift>
 8004bd4:	4606      	mov	r6, r0
 8004bd6:	f1b8 0f00 	cmp.w	r8, #0
 8004bda:	d05b      	beq.n	8004c94 <_dtoa_r+0xa5c>
 8004bdc:	4628      	mov	r0, r5
 8004bde:	6871      	ldr	r1, [r6, #4]
 8004be0:	f000 fa0a 	bl	8004ff8 <_Balloc>
 8004be4:	4607      	mov	r7, r0
 8004be6:	b928      	cbnz	r0, 8004bf4 <_dtoa_r+0x9bc>
 8004be8:	4602      	mov	r2, r0
 8004bea:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004bee:	4b81      	ldr	r3, [pc, #516]	; (8004df4 <_dtoa_r+0xbbc>)
 8004bf0:	f7ff bb36 	b.w	8004260 <_dtoa_r+0x28>
 8004bf4:	6932      	ldr	r2, [r6, #16]
 8004bf6:	f106 010c 	add.w	r1, r6, #12
 8004bfa:	3202      	adds	r2, #2
 8004bfc:	0092      	lsls	r2, r2, #2
 8004bfe:	300c      	adds	r0, #12
 8004c00:	f000 ff9e 	bl	8005b40 <memcpy>
 8004c04:	2201      	movs	r2, #1
 8004c06:	4639      	mov	r1, r7
 8004c08:	4628      	mov	r0, r5
 8004c0a:	f000 fc03 	bl	8005414 <__lshift>
 8004c0e:	46b0      	mov	r8, r6
 8004c10:	4606      	mov	r6, r0
 8004c12:	9b03      	ldr	r3, [sp, #12]
 8004c14:	9a03      	ldr	r2, [sp, #12]
 8004c16:	3301      	adds	r3, #1
 8004c18:	9308      	str	r3, [sp, #32]
 8004c1a:	9b06      	ldr	r3, [sp, #24]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c20:	9b04      	ldr	r3, [sp, #16]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	930a      	str	r3, [sp, #40]	; 0x28
 8004c28:	9b08      	ldr	r3, [sp, #32]
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	4650      	mov	r0, sl
 8004c30:	9304      	str	r3, [sp, #16]
 8004c32:	f7ff fa78 	bl	8004126 <quorem>
 8004c36:	4641      	mov	r1, r8
 8004c38:	9006      	str	r0, [sp, #24]
 8004c3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004c3e:	4650      	mov	r0, sl
 8004c40:	f000 fc54 	bl	80054ec <__mcmp>
 8004c44:	4632      	mov	r2, r6
 8004c46:	9009      	str	r0, [sp, #36]	; 0x24
 8004c48:	4621      	mov	r1, r4
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	f000 fc6a 	bl	8005524 <__mdiff>
 8004c50:	68c2      	ldr	r2, [r0, #12]
 8004c52:	4607      	mov	r7, r0
 8004c54:	bb02      	cbnz	r2, 8004c98 <_dtoa_r+0xa60>
 8004c56:	4601      	mov	r1, r0
 8004c58:	4650      	mov	r0, sl
 8004c5a:	f000 fc47 	bl	80054ec <__mcmp>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	4639      	mov	r1, r7
 8004c62:	4628      	mov	r0, r5
 8004c64:	920c      	str	r2, [sp, #48]	; 0x30
 8004c66:	f000 fa07 	bl	8005078 <_Bfree>
 8004c6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c6e:	9f08      	ldr	r7, [sp, #32]
 8004c70:	ea43 0102 	orr.w	r1, r3, r2
 8004c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c76:	4319      	orrs	r1, r3
 8004c78:	d110      	bne.n	8004c9c <_dtoa_r+0xa64>
 8004c7a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004c7e:	d029      	beq.n	8004cd4 <_dtoa_r+0xa9c>
 8004c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	dd02      	ble.n	8004c8c <_dtoa_r+0xa54>
 8004c86:	9b06      	ldr	r3, [sp, #24]
 8004c88:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004c8c:	9b04      	ldr	r3, [sp, #16]
 8004c8e:	f883 9000 	strb.w	r9, [r3]
 8004c92:	e777      	b.n	8004b84 <_dtoa_r+0x94c>
 8004c94:	4630      	mov	r0, r6
 8004c96:	e7ba      	b.n	8004c0e <_dtoa_r+0x9d6>
 8004c98:	2201      	movs	r2, #1
 8004c9a:	e7e1      	b.n	8004c60 <_dtoa_r+0xa28>
 8004c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	db04      	blt.n	8004cac <_dtoa_r+0xa74>
 8004ca2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	d120      	bne.n	8004cee <_dtoa_r+0xab6>
 8004cac:	2a00      	cmp	r2, #0
 8004cae:	dded      	ble.n	8004c8c <_dtoa_r+0xa54>
 8004cb0:	4651      	mov	r1, sl
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	f000 fbad 	bl	8005414 <__lshift>
 8004cba:	4621      	mov	r1, r4
 8004cbc:	4682      	mov	sl, r0
 8004cbe:	f000 fc15 	bl	80054ec <__mcmp>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	dc03      	bgt.n	8004cce <_dtoa_r+0xa96>
 8004cc6:	d1e1      	bne.n	8004c8c <_dtoa_r+0xa54>
 8004cc8:	f019 0f01 	tst.w	r9, #1
 8004ccc:	d0de      	beq.n	8004c8c <_dtoa_r+0xa54>
 8004cce:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004cd2:	d1d8      	bne.n	8004c86 <_dtoa_r+0xa4e>
 8004cd4:	2339      	movs	r3, #57	; 0x39
 8004cd6:	9a04      	ldr	r2, [sp, #16]
 8004cd8:	7013      	strb	r3, [r2, #0]
 8004cda:	463b      	mov	r3, r7
 8004cdc:	461f      	mov	r7, r3
 8004cde:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	2a39      	cmp	r2, #57	; 0x39
 8004ce6:	d06b      	beq.n	8004dc0 <_dtoa_r+0xb88>
 8004ce8:	3201      	adds	r2, #1
 8004cea:	701a      	strb	r2, [r3, #0]
 8004cec:	e74a      	b.n	8004b84 <_dtoa_r+0x94c>
 8004cee:	2a00      	cmp	r2, #0
 8004cf0:	dd07      	ble.n	8004d02 <_dtoa_r+0xaca>
 8004cf2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004cf6:	d0ed      	beq.n	8004cd4 <_dtoa_r+0xa9c>
 8004cf8:	9a04      	ldr	r2, [sp, #16]
 8004cfa:	f109 0301 	add.w	r3, r9, #1
 8004cfe:	7013      	strb	r3, [r2, #0]
 8004d00:	e740      	b.n	8004b84 <_dtoa_r+0x94c>
 8004d02:	9b08      	ldr	r3, [sp, #32]
 8004d04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d06:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d042      	beq.n	8004d94 <_dtoa_r+0xb5c>
 8004d0e:	4651      	mov	r1, sl
 8004d10:	2300      	movs	r3, #0
 8004d12:	220a      	movs	r2, #10
 8004d14:	4628      	mov	r0, r5
 8004d16:	f000 f9d1 	bl	80050bc <__multadd>
 8004d1a:	45b0      	cmp	r8, r6
 8004d1c:	4682      	mov	sl, r0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	f04f 020a 	mov.w	r2, #10
 8004d26:	4641      	mov	r1, r8
 8004d28:	4628      	mov	r0, r5
 8004d2a:	d107      	bne.n	8004d3c <_dtoa_r+0xb04>
 8004d2c:	f000 f9c6 	bl	80050bc <__multadd>
 8004d30:	4680      	mov	r8, r0
 8004d32:	4606      	mov	r6, r0
 8004d34:	9b08      	ldr	r3, [sp, #32]
 8004d36:	3301      	adds	r3, #1
 8004d38:	9308      	str	r3, [sp, #32]
 8004d3a:	e775      	b.n	8004c28 <_dtoa_r+0x9f0>
 8004d3c:	f000 f9be 	bl	80050bc <__multadd>
 8004d40:	4631      	mov	r1, r6
 8004d42:	4680      	mov	r8, r0
 8004d44:	2300      	movs	r3, #0
 8004d46:	220a      	movs	r2, #10
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f000 f9b7 	bl	80050bc <__multadd>
 8004d4e:	4606      	mov	r6, r0
 8004d50:	e7f0      	b.n	8004d34 <_dtoa_r+0xafc>
 8004d52:	9b08      	ldr	r3, [sp, #32]
 8004d54:	9306      	str	r3, [sp, #24]
 8004d56:	9f03      	ldr	r7, [sp, #12]
 8004d58:	4621      	mov	r1, r4
 8004d5a:	4650      	mov	r0, sl
 8004d5c:	f7ff f9e3 	bl	8004126 <quorem>
 8004d60:	9b03      	ldr	r3, [sp, #12]
 8004d62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004d66:	f807 9b01 	strb.w	r9, [r7], #1
 8004d6a:	1afa      	subs	r2, r7, r3
 8004d6c:	9b06      	ldr	r3, [sp, #24]
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	dd07      	ble.n	8004d82 <_dtoa_r+0xb4a>
 8004d72:	4651      	mov	r1, sl
 8004d74:	2300      	movs	r3, #0
 8004d76:	220a      	movs	r2, #10
 8004d78:	4628      	mov	r0, r5
 8004d7a:	f000 f99f 	bl	80050bc <__multadd>
 8004d7e:	4682      	mov	sl, r0
 8004d80:	e7ea      	b.n	8004d58 <_dtoa_r+0xb20>
 8004d82:	9b06      	ldr	r3, [sp, #24]
 8004d84:	f04f 0800 	mov.w	r8, #0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bfcc      	ite	gt
 8004d8c:	461f      	movgt	r7, r3
 8004d8e:	2701      	movle	r7, #1
 8004d90:	9b03      	ldr	r3, [sp, #12]
 8004d92:	441f      	add	r7, r3
 8004d94:	4651      	mov	r1, sl
 8004d96:	2201      	movs	r2, #1
 8004d98:	4628      	mov	r0, r5
 8004d9a:	f000 fb3b 	bl	8005414 <__lshift>
 8004d9e:	4621      	mov	r1, r4
 8004da0:	4682      	mov	sl, r0
 8004da2:	f000 fba3 	bl	80054ec <__mcmp>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	dc97      	bgt.n	8004cda <_dtoa_r+0xaa2>
 8004daa:	d102      	bne.n	8004db2 <_dtoa_r+0xb7a>
 8004dac:	f019 0f01 	tst.w	r9, #1
 8004db0:	d193      	bne.n	8004cda <_dtoa_r+0xaa2>
 8004db2:	463b      	mov	r3, r7
 8004db4:	461f      	mov	r7, r3
 8004db6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004dba:	2a30      	cmp	r2, #48	; 0x30
 8004dbc:	d0fa      	beq.n	8004db4 <_dtoa_r+0xb7c>
 8004dbe:	e6e1      	b.n	8004b84 <_dtoa_r+0x94c>
 8004dc0:	9a03      	ldr	r2, [sp, #12]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d18a      	bne.n	8004cdc <_dtoa_r+0xaa4>
 8004dc6:	2331      	movs	r3, #49	; 0x31
 8004dc8:	f10b 0b01 	add.w	fp, fp, #1
 8004dcc:	e797      	b.n	8004cfe <_dtoa_r+0xac6>
 8004dce:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <_dtoa_r+0xbc0>)
 8004dd0:	f7ff ba9f 	b.w	8004312 <_dtoa_r+0xda>
 8004dd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f47f aa77 	bne.w	80042ca <_dtoa_r+0x92>
 8004ddc:	4b07      	ldr	r3, [pc, #28]	; (8004dfc <_dtoa_r+0xbc4>)
 8004dde:	f7ff ba98 	b.w	8004312 <_dtoa_r+0xda>
 8004de2:	9b06      	ldr	r3, [sp, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	dcb6      	bgt.n	8004d56 <_dtoa_r+0xb1e>
 8004de8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	f73f aeb5 	bgt.w	8004b5a <_dtoa_r+0x922>
 8004df0:	e7b1      	b.n	8004d56 <_dtoa_r+0xb1e>
 8004df2:	bf00      	nop
 8004df4:	0800642e 	.word	0x0800642e
 8004df8:	0800638e 	.word	0x0800638e
 8004dfc:	080063b2 	.word	0x080063b2

08004e00 <_free_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4605      	mov	r5, r0
 8004e04:	2900      	cmp	r1, #0
 8004e06:	d040      	beq.n	8004e8a <_free_r+0x8a>
 8004e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e0c:	1f0c      	subs	r4, r1, #4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	bfb8      	it	lt
 8004e12:	18e4      	addlt	r4, r4, r3
 8004e14:	f000 f8e4 	bl	8004fe0 <__malloc_lock>
 8004e18:	4a1c      	ldr	r2, [pc, #112]	; (8004e8c <_free_r+0x8c>)
 8004e1a:	6813      	ldr	r3, [r2, #0]
 8004e1c:	b933      	cbnz	r3, 8004e2c <_free_r+0x2c>
 8004e1e:	6063      	str	r3, [r4, #4]
 8004e20:	6014      	str	r4, [r2, #0]
 8004e22:	4628      	mov	r0, r5
 8004e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e28:	f000 b8e0 	b.w	8004fec <__malloc_unlock>
 8004e2c:	42a3      	cmp	r3, r4
 8004e2e:	d908      	bls.n	8004e42 <_free_r+0x42>
 8004e30:	6820      	ldr	r0, [r4, #0]
 8004e32:	1821      	adds	r1, r4, r0
 8004e34:	428b      	cmp	r3, r1
 8004e36:	bf01      	itttt	eq
 8004e38:	6819      	ldreq	r1, [r3, #0]
 8004e3a:	685b      	ldreq	r3, [r3, #4]
 8004e3c:	1809      	addeq	r1, r1, r0
 8004e3e:	6021      	streq	r1, [r4, #0]
 8004e40:	e7ed      	b.n	8004e1e <_free_r+0x1e>
 8004e42:	461a      	mov	r2, r3
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	b10b      	cbz	r3, 8004e4c <_free_r+0x4c>
 8004e48:	42a3      	cmp	r3, r4
 8004e4a:	d9fa      	bls.n	8004e42 <_free_r+0x42>
 8004e4c:	6811      	ldr	r1, [r2, #0]
 8004e4e:	1850      	adds	r0, r2, r1
 8004e50:	42a0      	cmp	r0, r4
 8004e52:	d10b      	bne.n	8004e6c <_free_r+0x6c>
 8004e54:	6820      	ldr	r0, [r4, #0]
 8004e56:	4401      	add	r1, r0
 8004e58:	1850      	adds	r0, r2, r1
 8004e5a:	4283      	cmp	r3, r0
 8004e5c:	6011      	str	r1, [r2, #0]
 8004e5e:	d1e0      	bne.n	8004e22 <_free_r+0x22>
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	4408      	add	r0, r1
 8004e66:	6010      	str	r0, [r2, #0]
 8004e68:	6053      	str	r3, [r2, #4]
 8004e6a:	e7da      	b.n	8004e22 <_free_r+0x22>
 8004e6c:	d902      	bls.n	8004e74 <_free_r+0x74>
 8004e6e:	230c      	movs	r3, #12
 8004e70:	602b      	str	r3, [r5, #0]
 8004e72:	e7d6      	b.n	8004e22 <_free_r+0x22>
 8004e74:	6820      	ldr	r0, [r4, #0]
 8004e76:	1821      	adds	r1, r4, r0
 8004e78:	428b      	cmp	r3, r1
 8004e7a:	bf01      	itttt	eq
 8004e7c:	6819      	ldreq	r1, [r3, #0]
 8004e7e:	685b      	ldreq	r3, [r3, #4]
 8004e80:	1809      	addeq	r1, r1, r0
 8004e82:	6021      	streq	r1, [r4, #0]
 8004e84:	6063      	str	r3, [r4, #4]
 8004e86:	6054      	str	r4, [r2, #4]
 8004e88:	e7cb      	b.n	8004e22 <_free_r+0x22>
 8004e8a:	bd38      	pop	{r3, r4, r5, pc}
 8004e8c:	200003e4 	.word	0x200003e4

08004e90 <malloc>:
 8004e90:	4b02      	ldr	r3, [pc, #8]	; (8004e9c <malloc+0xc>)
 8004e92:	4601      	mov	r1, r0
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	f000 b823 	b.w	8004ee0 <_malloc_r>
 8004e9a:	bf00      	nop
 8004e9c:	20000068 	.word	0x20000068

08004ea0 <sbrk_aligned>:
 8004ea0:	b570      	push	{r4, r5, r6, lr}
 8004ea2:	4e0e      	ldr	r6, [pc, #56]	; (8004edc <sbrk_aligned+0x3c>)
 8004ea4:	460c      	mov	r4, r1
 8004ea6:	6831      	ldr	r1, [r6, #0]
 8004ea8:	4605      	mov	r5, r0
 8004eaa:	b911      	cbnz	r1, 8004eb2 <sbrk_aligned+0x12>
 8004eac:	f000 fe38 	bl	8005b20 <_sbrk_r>
 8004eb0:	6030      	str	r0, [r6, #0]
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	f000 fe33 	bl	8005b20 <_sbrk_r>
 8004eba:	1c43      	adds	r3, r0, #1
 8004ebc:	d00a      	beq.n	8004ed4 <sbrk_aligned+0x34>
 8004ebe:	1cc4      	adds	r4, r0, #3
 8004ec0:	f024 0403 	bic.w	r4, r4, #3
 8004ec4:	42a0      	cmp	r0, r4
 8004ec6:	d007      	beq.n	8004ed8 <sbrk_aligned+0x38>
 8004ec8:	1a21      	subs	r1, r4, r0
 8004eca:	4628      	mov	r0, r5
 8004ecc:	f000 fe28 	bl	8005b20 <_sbrk_r>
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	d101      	bne.n	8004ed8 <sbrk_aligned+0x38>
 8004ed4:	f04f 34ff 	mov.w	r4, #4294967295
 8004ed8:	4620      	mov	r0, r4
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
 8004edc:	200003e8 	.word	0x200003e8

08004ee0 <_malloc_r>:
 8004ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ee4:	1ccd      	adds	r5, r1, #3
 8004ee6:	f025 0503 	bic.w	r5, r5, #3
 8004eea:	3508      	adds	r5, #8
 8004eec:	2d0c      	cmp	r5, #12
 8004eee:	bf38      	it	cc
 8004ef0:	250c      	movcc	r5, #12
 8004ef2:	2d00      	cmp	r5, #0
 8004ef4:	4607      	mov	r7, r0
 8004ef6:	db01      	blt.n	8004efc <_malloc_r+0x1c>
 8004ef8:	42a9      	cmp	r1, r5
 8004efa:	d905      	bls.n	8004f08 <_malloc_r+0x28>
 8004efc:	230c      	movs	r3, #12
 8004efe:	2600      	movs	r6, #0
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	4630      	mov	r0, r6
 8004f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004fdc <_malloc_r+0xfc>
 8004f0c:	f000 f868 	bl	8004fe0 <__malloc_lock>
 8004f10:	f8d8 3000 	ldr.w	r3, [r8]
 8004f14:	461c      	mov	r4, r3
 8004f16:	bb5c      	cbnz	r4, 8004f70 <_malloc_r+0x90>
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	f7ff ffc0 	bl	8004ea0 <sbrk_aligned>
 8004f20:	1c43      	adds	r3, r0, #1
 8004f22:	4604      	mov	r4, r0
 8004f24:	d155      	bne.n	8004fd2 <_malloc_r+0xf2>
 8004f26:	f8d8 4000 	ldr.w	r4, [r8]
 8004f2a:	4626      	mov	r6, r4
 8004f2c:	2e00      	cmp	r6, #0
 8004f2e:	d145      	bne.n	8004fbc <_malloc_r+0xdc>
 8004f30:	2c00      	cmp	r4, #0
 8004f32:	d048      	beq.n	8004fc6 <_malloc_r+0xe6>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	4631      	mov	r1, r6
 8004f38:	4638      	mov	r0, r7
 8004f3a:	eb04 0903 	add.w	r9, r4, r3
 8004f3e:	f000 fdef 	bl	8005b20 <_sbrk_r>
 8004f42:	4581      	cmp	r9, r0
 8004f44:	d13f      	bne.n	8004fc6 <_malloc_r+0xe6>
 8004f46:	6821      	ldr	r1, [r4, #0]
 8004f48:	4638      	mov	r0, r7
 8004f4a:	1a6d      	subs	r5, r5, r1
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	f7ff ffa7 	bl	8004ea0 <sbrk_aligned>
 8004f52:	3001      	adds	r0, #1
 8004f54:	d037      	beq.n	8004fc6 <_malloc_r+0xe6>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	442b      	add	r3, r5
 8004f5a:	6023      	str	r3, [r4, #0]
 8004f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d038      	beq.n	8004fd6 <_malloc_r+0xf6>
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	42a2      	cmp	r2, r4
 8004f68:	d12b      	bne.n	8004fc2 <_malloc_r+0xe2>
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	605a      	str	r2, [r3, #4]
 8004f6e:	e00f      	b.n	8004f90 <_malloc_r+0xb0>
 8004f70:	6822      	ldr	r2, [r4, #0]
 8004f72:	1b52      	subs	r2, r2, r5
 8004f74:	d41f      	bmi.n	8004fb6 <_malloc_r+0xd6>
 8004f76:	2a0b      	cmp	r2, #11
 8004f78:	d917      	bls.n	8004faa <_malloc_r+0xca>
 8004f7a:	1961      	adds	r1, r4, r5
 8004f7c:	42a3      	cmp	r3, r4
 8004f7e:	6025      	str	r5, [r4, #0]
 8004f80:	bf18      	it	ne
 8004f82:	6059      	strne	r1, [r3, #4]
 8004f84:	6863      	ldr	r3, [r4, #4]
 8004f86:	bf08      	it	eq
 8004f88:	f8c8 1000 	streq.w	r1, [r8]
 8004f8c:	5162      	str	r2, [r4, r5]
 8004f8e:	604b      	str	r3, [r1, #4]
 8004f90:	4638      	mov	r0, r7
 8004f92:	f104 060b 	add.w	r6, r4, #11
 8004f96:	f000 f829 	bl	8004fec <__malloc_unlock>
 8004f9a:	f026 0607 	bic.w	r6, r6, #7
 8004f9e:	1d23      	adds	r3, r4, #4
 8004fa0:	1af2      	subs	r2, r6, r3
 8004fa2:	d0ae      	beq.n	8004f02 <_malloc_r+0x22>
 8004fa4:	1b9b      	subs	r3, r3, r6
 8004fa6:	50a3      	str	r3, [r4, r2]
 8004fa8:	e7ab      	b.n	8004f02 <_malloc_r+0x22>
 8004faa:	42a3      	cmp	r3, r4
 8004fac:	6862      	ldr	r2, [r4, #4]
 8004fae:	d1dd      	bne.n	8004f6c <_malloc_r+0x8c>
 8004fb0:	f8c8 2000 	str.w	r2, [r8]
 8004fb4:	e7ec      	b.n	8004f90 <_malloc_r+0xb0>
 8004fb6:	4623      	mov	r3, r4
 8004fb8:	6864      	ldr	r4, [r4, #4]
 8004fba:	e7ac      	b.n	8004f16 <_malloc_r+0x36>
 8004fbc:	4634      	mov	r4, r6
 8004fbe:	6876      	ldr	r6, [r6, #4]
 8004fc0:	e7b4      	b.n	8004f2c <_malloc_r+0x4c>
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	e7cc      	b.n	8004f60 <_malloc_r+0x80>
 8004fc6:	230c      	movs	r3, #12
 8004fc8:	4638      	mov	r0, r7
 8004fca:	603b      	str	r3, [r7, #0]
 8004fcc:	f000 f80e 	bl	8004fec <__malloc_unlock>
 8004fd0:	e797      	b.n	8004f02 <_malloc_r+0x22>
 8004fd2:	6025      	str	r5, [r4, #0]
 8004fd4:	e7dc      	b.n	8004f90 <_malloc_r+0xb0>
 8004fd6:	605b      	str	r3, [r3, #4]
 8004fd8:	deff      	udf	#255	; 0xff
 8004fda:	bf00      	nop
 8004fdc:	200003e4 	.word	0x200003e4

08004fe0 <__malloc_lock>:
 8004fe0:	4801      	ldr	r0, [pc, #4]	; (8004fe8 <__malloc_lock+0x8>)
 8004fe2:	f7ff b890 	b.w	8004106 <__retarget_lock_acquire_recursive>
 8004fe6:	bf00      	nop
 8004fe8:	200003e0 	.word	0x200003e0

08004fec <__malloc_unlock>:
 8004fec:	4801      	ldr	r0, [pc, #4]	; (8004ff4 <__malloc_unlock+0x8>)
 8004fee:	f7ff b88b 	b.w	8004108 <__retarget_lock_release_recursive>
 8004ff2:	bf00      	nop
 8004ff4:	200003e0 	.word	0x200003e0

08004ff8 <_Balloc>:
 8004ff8:	b570      	push	{r4, r5, r6, lr}
 8004ffa:	69c6      	ldr	r6, [r0, #28]
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	460d      	mov	r5, r1
 8005000:	b976      	cbnz	r6, 8005020 <_Balloc+0x28>
 8005002:	2010      	movs	r0, #16
 8005004:	f7ff ff44 	bl	8004e90 <malloc>
 8005008:	4602      	mov	r2, r0
 800500a:	61e0      	str	r0, [r4, #28]
 800500c:	b920      	cbnz	r0, 8005018 <_Balloc+0x20>
 800500e:	216b      	movs	r1, #107	; 0x6b
 8005010:	4b17      	ldr	r3, [pc, #92]	; (8005070 <_Balloc+0x78>)
 8005012:	4818      	ldr	r0, [pc, #96]	; (8005074 <_Balloc+0x7c>)
 8005014:	f000 fda2 	bl	8005b5c <__assert_func>
 8005018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800501c:	6006      	str	r6, [r0, #0]
 800501e:	60c6      	str	r6, [r0, #12]
 8005020:	69e6      	ldr	r6, [r4, #28]
 8005022:	68f3      	ldr	r3, [r6, #12]
 8005024:	b183      	cbz	r3, 8005048 <_Balloc+0x50>
 8005026:	69e3      	ldr	r3, [r4, #28]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800502e:	b9b8      	cbnz	r0, 8005060 <_Balloc+0x68>
 8005030:	2101      	movs	r1, #1
 8005032:	fa01 f605 	lsl.w	r6, r1, r5
 8005036:	1d72      	adds	r2, r6, #5
 8005038:	4620      	mov	r0, r4
 800503a:	0092      	lsls	r2, r2, #2
 800503c:	f000 fdac 	bl	8005b98 <_calloc_r>
 8005040:	b160      	cbz	r0, 800505c <_Balloc+0x64>
 8005042:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005046:	e00e      	b.n	8005066 <_Balloc+0x6e>
 8005048:	2221      	movs	r2, #33	; 0x21
 800504a:	2104      	movs	r1, #4
 800504c:	4620      	mov	r0, r4
 800504e:	f000 fda3 	bl	8005b98 <_calloc_r>
 8005052:	69e3      	ldr	r3, [r4, #28]
 8005054:	60f0      	str	r0, [r6, #12]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e4      	bne.n	8005026 <_Balloc+0x2e>
 800505c:	2000      	movs	r0, #0
 800505e:	bd70      	pop	{r4, r5, r6, pc}
 8005060:	6802      	ldr	r2, [r0, #0]
 8005062:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005066:	2300      	movs	r3, #0
 8005068:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800506c:	e7f7      	b.n	800505e <_Balloc+0x66>
 800506e:	bf00      	nop
 8005070:	080063bf 	.word	0x080063bf
 8005074:	0800643f 	.word	0x0800643f

08005078 <_Bfree>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	69c6      	ldr	r6, [r0, #28]
 800507c:	4605      	mov	r5, r0
 800507e:	460c      	mov	r4, r1
 8005080:	b976      	cbnz	r6, 80050a0 <_Bfree+0x28>
 8005082:	2010      	movs	r0, #16
 8005084:	f7ff ff04 	bl	8004e90 <malloc>
 8005088:	4602      	mov	r2, r0
 800508a:	61e8      	str	r0, [r5, #28]
 800508c:	b920      	cbnz	r0, 8005098 <_Bfree+0x20>
 800508e:	218f      	movs	r1, #143	; 0x8f
 8005090:	4b08      	ldr	r3, [pc, #32]	; (80050b4 <_Bfree+0x3c>)
 8005092:	4809      	ldr	r0, [pc, #36]	; (80050b8 <_Bfree+0x40>)
 8005094:	f000 fd62 	bl	8005b5c <__assert_func>
 8005098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800509c:	6006      	str	r6, [r0, #0]
 800509e:	60c6      	str	r6, [r0, #12]
 80050a0:	b13c      	cbz	r4, 80050b2 <_Bfree+0x3a>
 80050a2:	69eb      	ldr	r3, [r5, #28]
 80050a4:	6862      	ldr	r2, [r4, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050ac:	6021      	str	r1, [r4, #0]
 80050ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80050b2:	bd70      	pop	{r4, r5, r6, pc}
 80050b4:	080063bf 	.word	0x080063bf
 80050b8:	0800643f 	.word	0x0800643f

080050bc <__multadd>:
 80050bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050c0:	4607      	mov	r7, r0
 80050c2:	460c      	mov	r4, r1
 80050c4:	461e      	mov	r6, r3
 80050c6:	2000      	movs	r0, #0
 80050c8:	690d      	ldr	r5, [r1, #16]
 80050ca:	f101 0c14 	add.w	ip, r1, #20
 80050ce:	f8dc 3000 	ldr.w	r3, [ip]
 80050d2:	3001      	adds	r0, #1
 80050d4:	b299      	uxth	r1, r3
 80050d6:	fb02 6101 	mla	r1, r2, r1, r6
 80050da:	0c1e      	lsrs	r6, r3, #16
 80050dc:	0c0b      	lsrs	r3, r1, #16
 80050de:	fb02 3306 	mla	r3, r2, r6, r3
 80050e2:	b289      	uxth	r1, r1
 80050e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80050e8:	4285      	cmp	r5, r0
 80050ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80050ee:	f84c 1b04 	str.w	r1, [ip], #4
 80050f2:	dcec      	bgt.n	80050ce <__multadd+0x12>
 80050f4:	b30e      	cbz	r6, 800513a <__multadd+0x7e>
 80050f6:	68a3      	ldr	r3, [r4, #8]
 80050f8:	42ab      	cmp	r3, r5
 80050fa:	dc19      	bgt.n	8005130 <__multadd+0x74>
 80050fc:	6861      	ldr	r1, [r4, #4]
 80050fe:	4638      	mov	r0, r7
 8005100:	3101      	adds	r1, #1
 8005102:	f7ff ff79 	bl	8004ff8 <_Balloc>
 8005106:	4680      	mov	r8, r0
 8005108:	b928      	cbnz	r0, 8005116 <__multadd+0x5a>
 800510a:	4602      	mov	r2, r0
 800510c:	21ba      	movs	r1, #186	; 0xba
 800510e:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <__multadd+0x84>)
 8005110:	480c      	ldr	r0, [pc, #48]	; (8005144 <__multadd+0x88>)
 8005112:	f000 fd23 	bl	8005b5c <__assert_func>
 8005116:	6922      	ldr	r2, [r4, #16]
 8005118:	f104 010c 	add.w	r1, r4, #12
 800511c:	3202      	adds	r2, #2
 800511e:	0092      	lsls	r2, r2, #2
 8005120:	300c      	adds	r0, #12
 8005122:	f000 fd0d 	bl	8005b40 <memcpy>
 8005126:	4621      	mov	r1, r4
 8005128:	4638      	mov	r0, r7
 800512a:	f7ff ffa5 	bl	8005078 <_Bfree>
 800512e:	4644      	mov	r4, r8
 8005130:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005134:	3501      	adds	r5, #1
 8005136:	615e      	str	r6, [r3, #20]
 8005138:	6125      	str	r5, [r4, #16]
 800513a:	4620      	mov	r0, r4
 800513c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005140:	0800642e 	.word	0x0800642e
 8005144:	0800643f 	.word	0x0800643f

08005148 <__hi0bits>:
 8005148:	0c02      	lsrs	r2, r0, #16
 800514a:	0412      	lsls	r2, r2, #16
 800514c:	4603      	mov	r3, r0
 800514e:	b9ca      	cbnz	r2, 8005184 <__hi0bits+0x3c>
 8005150:	0403      	lsls	r3, r0, #16
 8005152:	2010      	movs	r0, #16
 8005154:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005158:	bf04      	itt	eq
 800515a:	021b      	lsleq	r3, r3, #8
 800515c:	3008      	addeq	r0, #8
 800515e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005162:	bf04      	itt	eq
 8005164:	011b      	lsleq	r3, r3, #4
 8005166:	3004      	addeq	r0, #4
 8005168:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800516c:	bf04      	itt	eq
 800516e:	009b      	lsleq	r3, r3, #2
 8005170:	3002      	addeq	r0, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	db05      	blt.n	8005182 <__hi0bits+0x3a>
 8005176:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800517a:	f100 0001 	add.w	r0, r0, #1
 800517e:	bf08      	it	eq
 8005180:	2020      	moveq	r0, #32
 8005182:	4770      	bx	lr
 8005184:	2000      	movs	r0, #0
 8005186:	e7e5      	b.n	8005154 <__hi0bits+0xc>

08005188 <__lo0bits>:
 8005188:	6803      	ldr	r3, [r0, #0]
 800518a:	4602      	mov	r2, r0
 800518c:	f013 0007 	ands.w	r0, r3, #7
 8005190:	d00b      	beq.n	80051aa <__lo0bits+0x22>
 8005192:	07d9      	lsls	r1, r3, #31
 8005194:	d421      	bmi.n	80051da <__lo0bits+0x52>
 8005196:	0798      	lsls	r0, r3, #30
 8005198:	bf49      	itett	mi
 800519a:	085b      	lsrmi	r3, r3, #1
 800519c:	089b      	lsrpl	r3, r3, #2
 800519e:	2001      	movmi	r0, #1
 80051a0:	6013      	strmi	r3, [r2, #0]
 80051a2:	bf5c      	itt	pl
 80051a4:	2002      	movpl	r0, #2
 80051a6:	6013      	strpl	r3, [r2, #0]
 80051a8:	4770      	bx	lr
 80051aa:	b299      	uxth	r1, r3
 80051ac:	b909      	cbnz	r1, 80051b2 <__lo0bits+0x2a>
 80051ae:	2010      	movs	r0, #16
 80051b0:	0c1b      	lsrs	r3, r3, #16
 80051b2:	b2d9      	uxtb	r1, r3
 80051b4:	b909      	cbnz	r1, 80051ba <__lo0bits+0x32>
 80051b6:	3008      	adds	r0, #8
 80051b8:	0a1b      	lsrs	r3, r3, #8
 80051ba:	0719      	lsls	r1, r3, #28
 80051bc:	bf04      	itt	eq
 80051be:	091b      	lsreq	r3, r3, #4
 80051c0:	3004      	addeq	r0, #4
 80051c2:	0799      	lsls	r1, r3, #30
 80051c4:	bf04      	itt	eq
 80051c6:	089b      	lsreq	r3, r3, #2
 80051c8:	3002      	addeq	r0, #2
 80051ca:	07d9      	lsls	r1, r3, #31
 80051cc:	d403      	bmi.n	80051d6 <__lo0bits+0x4e>
 80051ce:	085b      	lsrs	r3, r3, #1
 80051d0:	f100 0001 	add.w	r0, r0, #1
 80051d4:	d003      	beq.n	80051de <__lo0bits+0x56>
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	4770      	bx	lr
 80051da:	2000      	movs	r0, #0
 80051dc:	4770      	bx	lr
 80051de:	2020      	movs	r0, #32
 80051e0:	4770      	bx	lr
	...

080051e4 <__i2b>:
 80051e4:	b510      	push	{r4, lr}
 80051e6:	460c      	mov	r4, r1
 80051e8:	2101      	movs	r1, #1
 80051ea:	f7ff ff05 	bl	8004ff8 <_Balloc>
 80051ee:	4602      	mov	r2, r0
 80051f0:	b928      	cbnz	r0, 80051fe <__i2b+0x1a>
 80051f2:	f240 1145 	movw	r1, #325	; 0x145
 80051f6:	4b04      	ldr	r3, [pc, #16]	; (8005208 <__i2b+0x24>)
 80051f8:	4804      	ldr	r0, [pc, #16]	; (800520c <__i2b+0x28>)
 80051fa:	f000 fcaf 	bl	8005b5c <__assert_func>
 80051fe:	2301      	movs	r3, #1
 8005200:	6144      	str	r4, [r0, #20]
 8005202:	6103      	str	r3, [r0, #16]
 8005204:	bd10      	pop	{r4, pc}
 8005206:	bf00      	nop
 8005208:	0800642e 	.word	0x0800642e
 800520c:	0800643f 	.word	0x0800643f

08005210 <__multiply>:
 8005210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005214:	4691      	mov	r9, r2
 8005216:	690a      	ldr	r2, [r1, #16]
 8005218:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800521c:	460c      	mov	r4, r1
 800521e:	429a      	cmp	r2, r3
 8005220:	bfbe      	ittt	lt
 8005222:	460b      	movlt	r3, r1
 8005224:	464c      	movlt	r4, r9
 8005226:	4699      	movlt	r9, r3
 8005228:	6927      	ldr	r7, [r4, #16]
 800522a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800522e:	68a3      	ldr	r3, [r4, #8]
 8005230:	6861      	ldr	r1, [r4, #4]
 8005232:	eb07 060a 	add.w	r6, r7, sl
 8005236:	42b3      	cmp	r3, r6
 8005238:	b085      	sub	sp, #20
 800523a:	bfb8      	it	lt
 800523c:	3101      	addlt	r1, #1
 800523e:	f7ff fedb 	bl	8004ff8 <_Balloc>
 8005242:	b930      	cbnz	r0, 8005252 <__multiply+0x42>
 8005244:	4602      	mov	r2, r0
 8005246:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800524a:	4b43      	ldr	r3, [pc, #268]	; (8005358 <__multiply+0x148>)
 800524c:	4843      	ldr	r0, [pc, #268]	; (800535c <__multiply+0x14c>)
 800524e:	f000 fc85 	bl	8005b5c <__assert_func>
 8005252:	f100 0514 	add.w	r5, r0, #20
 8005256:	462b      	mov	r3, r5
 8005258:	2200      	movs	r2, #0
 800525a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800525e:	4543      	cmp	r3, r8
 8005260:	d321      	bcc.n	80052a6 <__multiply+0x96>
 8005262:	f104 0314 	add.w	r3, r4, #20
 8005266:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800526a:	f109 0314 	add.w	r3, r9, #20
 800526e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005272:	9202      	str	r2, [sp, #8]
 8005274:	1b3a      	subs	r2, r7, r4
 8005276:	3a15      	subs	r2, #21
 8005278:	f022 0203 	bic.w	r2, r2, #3
 800527c:	3204      	adds	r2, #4
 800527e:	f104 0115 	add.w	r1, r4, #21
 8005282:	428f      	cmp	r7, r1
 8005284:	bf38      	it	cc
 8005286:	2204      	movcc	r2, #4
 8005288:	9201      	str	r2, [sp, #4]
 800528a:	9a02      	ldr	r2, [sp, #8]
 800528c:	9303      	str	r3, [sp, #12]
 800528e:	429a      	cmp	r2, r3
 8005290:	d80c      	bhi.n	80052ac <__multiply+0x9c>
 8005292:	2e00      	cmp	r6, #0
 8005294:	dd03      	ble.n	800529e <__multiply+0x8e>
 8005296:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800529a:	2b00      	cmp	r3, #0
 800529c:	d05a      	beq.n	8005354 <__multiply+0x144>
 800529e:	6106      	str	r6, [r0, #16]
 80052a0:	b005      	add	sp, #20
 80052a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a6:	f843 2b04 	str.w	r2, [r3], #4
 80052aa:	e7d8      	b.n	800525e <__multiply+0x4e>
 80052ac:	f8b3 a000 	ldrh.w	sl, [r3]
 80052b0:	f1ba 0f00 	cmp.w	sl, #0
 80052b4:	d023      	beq.n	80052fe <__multiply+0xee>
 80052b6:	46a9      	mov	r9, r5
 80052b8:	f04f 0c00 	mov.w	ip, #0
 80052bc:	f104 0e14 	add.w	lr, r4, #20
 80052c0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80052c4:	f8d9 1000 	ldr.w	r1, [r9]
 80052c8:	fa1f fb82 	uxth.w	fp, r2
 80052cc:	b289      	uxth	r1, r1
 80052ce:	fb0a 110b 	mla	r1, sl, fp, r1
 80052d2:	4461      	add	r1, ip
 80052d4:	f8d9 c000 	ldr.w	ip, [r9]
 80052d8:	0c12      	lsrs	r2, r2, #16
 80052da:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80052de:	fb0a c202 	mla	r2, sl, r2, ip
 80052e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80052e6:	b289      	uxth	r1, r1
 80052e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80052ec:	4577      	cmp	r7, lr
 80052ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80052f2:	f849 1b04 	str.w	r1, [r9], #4
 80052f6:	d8e3      	bhi.n	80052c0 <__multiply+0xb0>
 80052f8:	9a01      	ldr	r2, [sp, #4]
 80052fa:	f845 c002 	str.w	ip, [r5, r2]
 80052fe:	9a03      	ldr	r2, [sp, #12]
 8005300:	3304      	adds	r3, #4
 8005302:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005306:	f1b9 0f00 	cmp.w	r9, #0
 800530a:	d021      	beq.n	8005350 <__multiply+0x140>
 800530c:	46ae      	mov	lr, r5
 800530e:	f04f 0a00 	mov.w	sl, #0
 8005312:	6829      	ldr	r1, [r5, #0]
 8005314:	f104 0c14 	add.w	ip, r4, #20
 8005318:	f8bc b000 	ldrh.w	fp, [ip]
 800531c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005320:	b289      	uxth	r1, r1
 8005322:	fb09 220b 	mla	r2, r9, fp, r2
 8005326:	4452      	add	r2, sl
 8005328:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800532c:	f84e 1b04 	str.w	r1, [lr], #4
 8005330:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005334:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005338:	f8be 1000 	ldrh.w	r1, [lr]
 800533c:	4567      	cmp	r7, ip
 800533e:	fb09 110a 	mla	r1, r9, sl, r1
 8005342:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005346:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800534a:	d8e5      	bhi.n	8005318 <__multiply+0x108>
 800534c:	9a01      	ldr	r2, [sp, #4]
 800534e:	50a9      	str	r1, [r5, r2]
 8005350:	3504      	adds	r5, #4
 8005352:	e79a      	b.n	800528a <__multiply+0x7a>
 8005354:	3e01      	subs	r6, #1
 8005356:	e79c      	b.n	8005292 <__multiply+0x82>
 8005358:	0800642e 	.word	0x0800642e
 800535c:	0800643f 	.word	0x0800643f

08005360 <__pow5mult>:
 8005360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005364:	4615      	mov	r5, r2
 8005366:	f012 0203 	ands.w	r2, r2, #3
 800536a:	4606      	mov	r6, r0
 800536c:	460f      	mov	r7, r1
 800536e:	d007      	beq.n	8005380 <__pow5mult+0x20>
 8005370:	4c25      	ldr	r4, [pc, #148]	; (8005408 <__pow5mult+0xa8>)
 8005372:	3a01      	subs	r2, #1
 8005374:	2300      	movs	r3, #0
 8005376:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800537a:	f7ff fe9f 	bl	80050bc <__multadd>
 800537e:	4607      	mov	r7, r0
 8005380:	10ad      	asrs	r5, r5, #2
 8005382:	d03d      	beq.n	8005400 <__pow5mult+0xa0>
 8005384:	69f4      	ldr	r4, [r6, #28]
 8005386:	b97c      	cbnz	r4, 80053a8 <__pow5mult+0x48>
 8005388:	2010      	movs	r0, #16
 800538a:	f7ff fd81 	bl	8004e90 <malloc>
 800538e:	4602      	mov	r2, r0
 8005390:	61f0      	str	r0, [r6, #28]
 8005392:	b928      	cbnz	r0, 80053a0 <__pow5mult+0x40>
 8005394:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005398:	4b1c      	ldr	r3, [pc, #112]	; (800540c <__pow5mult+0xac>)
 800539a:	481d      	ldr	r0, [pc, #116]	; (8005410 <__pow5mult+0xb0>)
 800539c:	f000 fbde 	bl	8005b5c <__assert_func>
 80053a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053a4:	6004      	str	r4, [r0, #0]
 80053a6:	60c4      	str	r4, [r0, #12]
 80053a8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80053ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80053b0:	b94c      	cbnz	r4, 80053c6 <__pow5mult+0x66>
 80053b2:	f240 2171 	movw	r1, #625	; 0x271
 80053b6:	4630      	mov	r0, r6
 80053b8:	f7ff ff14 	bl	80051e4 <__i2b>
 80053bc:	2300      	movs	r3, #0
 80053be:	4604      	mov	r4, r0
 80053c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80053c4:	6003      	str	r3, [r0, #0]
 80053c6:	f04f 0900 	mov.w	r9, #0
 80053ca:	07eb      	lsls	r3, r5, #31
 80053cc:	d50a      	bpl.n	80053e4 <__pow5mult+0x84>
 80053ce:	4639      	mov	r1, r7
 80053d0:	4622      	mov	r2, r4
 80053d2:	4630      	mov	r0, r6
 80053d4:	f7ff ff1c 	bl	8005210 <__multiply>
 80053d8:	4680      	mov	r8, r0
 80053da:	4639      	mov	r1, r7
 80053dc:	4630      	mov	r0, r6
 80053de:	f7ff fe4b 	bl	8005078 <_Bfree>
 80053e2:	4647      	mov	r7, r8
 80053e4:	106d      	asrs	r5, r5, #1
 80053e6:	d00b      	beq.n	8005400 <__pow5mult+0xa0>
 80053e8:	6820      	ldr	r0, [r4, #0]
 80053ea:	b938      	cbnz	r0, 80053fc <__pow5mult+0x9c>
 80053ec:	4622      	mov	r2, r4
 80053ee:	4621      	mov	r1, r4
 80053f0:	4630      	mov	r0, r6
 80053f2:	f7ff ff0d 	bl	8005210 <__multiply>
 80053f6:	6020      	str	r0, [r4, #0]
 80053f8:	f8c0 9000 	str.w	r9, [r0]
 80053fc:	4604      	mov	r4, r0
 80053fe:	e7e4      	b.n	80053ca <__pow5mult+0x6a>
 8005400:	4638      	mov	r0, r7
 8005402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005406:	bf00      	nop
 8005408:	08006588 	.word	0x08006588
 800540c:	080063bf 	.word	0x080063bf
 8005410:	0800643f 	.word	0x0800643f

08005414 <__lshift>:
 8005414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005418:	460c      	mov	r4, r1
 800541a:	4607      	mov	r7, r0
 800541c:	4691      	mov	r9, r2
 800541e:	6923      	ldr	r3, [r4, #16]
 8005420:	6849      	ldr	r1, [r1, #4]
 8005422:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005426:	68a3      	ldr	r3, [r4, #8]
 8005428:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800542c:	f108 0601 	add.w	r6, r8, #1
 8005430:	42b3      	cmp	r3, r6
 8005432:	db0b      	blt.n	800544c <__lshift+0x38>
 8005434:	4638      	mov	r0, r7
 8005436:	f7ff fddf 	bl	8004ff8 <_Balloc>
 800543a:	4605      	mov	r5, r0
 800543c:	b948      	cbnz	r0, 8005452 <__lshift+0x3e>
 800543e:	4602      	mov	r2, r0
 8005440:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005444:	4b27      	ldr	r3, [pc, #156]	; (80054e4 <__lshift+0xd0>)
 8005446:	4828      	ldr	r0, [pc, #160]	; (80054e8 <__lshift+0xd4>)
 8005448:	f000 fb88 	bl	8005b5c <__assert_func>
 800544c:	3101      	adds	r1, #1
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	e7ee      	b.n	8005430 <__lshift+0x1c>
 8005452:	2300      	movs	r3, #0
 8005454:	f100 0114 	add.w	r1, r0, #20
 8005458:	f100 0210 	add.w	r2, r0, #16
 800545c:	4618      	mov	r0, r3
 800545e:	4553      	cmp	r3, sl
 8005460:	db33      	blt.n	80054ca <__lshift+0xb6>
 8005462:	6920      	ldr	r0, [r4, #16]
 8005464:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005468:	f104 0314 	add.w	r3, r4, #20
 800546c:	f019 091f 	ands.w	r9, r9, #31
 8005470:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005474:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005478:	d02b      	beq.n	80054d2 <__lshift+0xbe>
 800547a:	468a      	mov	sl, r1
 800547c:	2200      	movs	r2, #0
 800547e:	f1c9 0e20 	rsb	lr, r9, #32
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	fa00 f009 	lsl.w	r0, r0, r9
 8005488:	4310      	orrs	r0, r2
 800548a:	f84a 0b04 	str.w	r0, [sl], #4
 800548e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005492:	459c      	cmp	ip, r3
 8005494:	fa22 f20e 	lsr.w	r2, r2, lr
 8005498:	d8f3      	bhi.n	8005482 <__lshift+0x6e>
 800549a:	ebac 0304 	sub.w	r3, ip, r4
 800549e:	3b15      	subs	r3, #21
 80054a0:	f023 0303 	bic.w	r3, r3, #3
 80054a4:	3304      	adds	r3, #4
 80054a6:	f104 0015 	add.w	r0, r4, #21
 80054aa:	4584      	cmp	ip, r0
 80054ac:	bf38      	it	cc
 80054ae:	2304      	movcc	r3, #4
 80054b0:	50ca      	str	r2, [r1, r3]
 80054b2:	b10a      	cbz	r2, 80054b8 <__lshift+0xa4>
 80054b4:	f108 0602 	add.w	r6, r8, #2
 80054b8:	3e01      	subs	r6, #1
 80054ba:	4638      	mov	r0, r7
 80054bc:	4621      	mov	r1, r4
 80054be:	612e      	str	r6, [r5, #16]
 80054c0:	f7ff fdda 	bl	8005078 <_Bfree>
 80054c4:	4628      	mov	r0, r5
 80054c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80054ce:	3301      	adds	r3, #1
 80054d0:	e7c5      	b.n	800545e <__lshift+0x4a>
 80054d2:	3904      	subs	r1, #4
 80054d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80054d8:	459c      	cmp	ip, r3
 80054da:	f841 2f04 	str.w	r2, [r1, #4]!
 80054de:	d8f9      	bhi.n	80054d4 <__lshift+0xc0>
 80054e0:	e7ea      	b.n	80054b8 <__lshift+0xa4>
 80054e2:	bf00      	nop
 80054e4:	0800642e 	.word	0x0800642e
 80054e8:	0800643f 	.word	0x0800643f

080054ec <__mcmp>:
 80054ec:	4603      	mov	r3, r0
 80054ee:	690a      	ldr	r2, [r1, #16]
 80054f0:	6900      	ldr	r0, [r0, #16]
 80054f2:	b530      	push	{r4, r5, lr}
 80054f4:	1a80      	subs	r0, r0, r2
 80054f6:	d10d      	bne.n	8005514 <__mcmp+0x28>
 80054f8:	3314      	adds	r3, #20
 80054fa:	3114      	adds	r1, #20
 80054fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005500:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005504:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005508:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800550c:	4295      	cmp	r5, r2
 800550e:	d002      	beq.n	8005516 <__mcmp+0x2a>
 8005510:	d304      	bcc.n	800551c <__mcmp+0x30>
 8005512:	2001      	movs	r0, #1
 8005514:	bd30      	pop	{r4, r5, pc}
 8005516:	42a3      	cmp	r3, r4
 8005518:	d3f4      	bcc.n	8005504 <__mcmp+0x18>
 800551a:	e7fb      	b.n	8005514 <__mcmp+0x28>
 800551c:	f04f 30ff 	mov.w	r0, #4294967295
 8005520:	e7f8      	b.n	8005514 <__mcmp+0x28>
	...

08005524 <__mdiff>:
 8005524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005528:	460d      	mov	r5, r1
 800552a:	4607      	mov	r7, r0
 800552c:	4611      	mov	r1, r2
 800552e:	4628      	mov	r0, r5
 8005530:	4614      	mov	r4, r2
 8005532:	f7ff ffdb 	bl	80054ec <__mcmp>
 8005536:	1e06      	subs	r6, r0, #0
 8005538:	d111      	bne.n	800555e <__mdiff+0x3a>
 800553a:	4631      	mov	r1, r6
 800553c:	4638      	mov	r0, r7
 800553e:	f7ff fd5b 	bl	8004ff8 <_Balloc>
 8005542:	4602      	mov	r2, r0
 8005544:	b928      	cbnz	r0, 8005552 <__mdiff+0x2e>
 8005546:	f240 2137 	movw	r1, #567	; 0x237
 800554a:	4b3a      	ldr	r3, [pc, #232]	; (8005634 <__mdiff+0x110>)
 800554c:	483a      	ldr	r0, [pc, #232]	; (8005638 <__mdiff+0x114>)
 800554e:	f000 fb05 	bl	8005b5c <__assert_func>
 8005552:	2301      	movs	r3, #1
 8005554:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005558:	4610      	mov	r0, r2
 800555a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800555e:	bfa4      	itt	ge
 8005560:	4623      	movge	r3, r4
 8005562:	462c      	movge	r4, r5
 8005564:	4638      	mov	r0, r7
 8005566:	6861      	ldr	r1, [r4, #4]
 8005568:	bfa6      	itte	ge
 800556a:	461d      	movge	r5, r3
 800556c:	2600      	movge	r6, #0
 800556e:	2601      	movlt	r6, #1
 8005570:	f7ff fd42 	bl	8004ff8 <_Balloc>
 8005574:	4602      	mov	r2, r0
 8005576:	b918      	cbnz	r0, 8005580 <__mdiff+0x5c>
 8005578:	f240 2145 	movw	r1, #581	; 0x245
 800557c:	4b2d      	ldr	r3, [pc, #180]	; (8005634 <__mdiff+0x110>)
 800557e:	e7e5      	b.n	800554c <__mdiff+0x28>
 8005580:	f102 0814 	add.w	r8, r2, #20
 8005584:	46c2      	mov	sl, r8
 8005586:	f04f 0c00 	mov.w	ip, #0
 800558a:	6927      	ldr	r7, [r4, #16]
 800558c:	60c6      	str	r6, [r0, #12]
 800558e:	692e      	ldr	r6, [r5, #16]
 8005590:	f104 0014 	add.w	r0, r4, #20
 8005594:	f105 0914 	add.w	r9, r5, #20
 8005598:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800559c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80055a0:	3410      	adds	r4, #16
 80055a2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80055a6:	f859 3b04 	ldr.w	r3, [r9], #4
 80055aa:	fa1f f18b 	uxth.w	r1, fp
 80055ae:	4461      	add	r1, ip
 80055b0:	fa1f fc83 	uxth.w	ip, r3
 80055b4:	0c1b      	lsrs	r3, r3, #16
 80055b6:	eba1 010c 	sub.w	r1, r1, ip
 80055ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80055be:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80055c2:	b289      	uxth	r1, r1
 80055c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80055c8:	454e      	cmp	r6, r9
 80055ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80055ce:	f84a 1b04 	str.w	r1, [sl], #4
 80055d2:	d8e6      	bhi.n	80055a2 <__mdiff+0x7e>
 80055d4:	1b73      	subs	r3, r6, r5
 80055d6:	3b15      	subs	r3, #21
 80055d8:	f023 0303 	bic.w	r3, r3, #3
 80055dc:	3515      	adds	r5, #21
 80055de:	3304      	adds	r3, #4
 80055e0:	42ae      	cmp	r6, r5
 80055e2:	bf38      	it	cc
 80055e4:	2304      	movcc	r3, #4
 80055e6:	4418      	add	r0, r3
 80055e8:	4443      	add	r3, r8
 80055ea:	461e      	mov	r6, r3
 80055ec:	4605      	mov	r5, r0
 80055ee:	4575      	cmp	r5, lr
 80055f0:	d30e      	bcc.n	8005610 <__mdiff+0xec>
 80055f2:	f10e 0103 	add.w	r1, lr, #3
 80055f6:	1a09      	subs	r1, r1, r0
 80055f8:	f021 0103 	bic.w	r1, r1, #3
 80055fc:	3803      	subs	r0, #3
 80055fe:	4586      	cmp	lr, r0
 8005600:	bf38      	it	cc
 8005602:	2100      	movcc	r1, #0
 8005604:	440b      	add	r3, r1
 8005606:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800560a:	b189      	cbz	r1, 8005630 <__mdiff+0x10c>
 800560c:	6117      	str	r7, [r2, #16]
 800560e:	e7a3      	b.n	8005558 <__mdiff+0x34>
 8005610:	f855 8b04 	ldr.w	r8, [r5], #4
 8005614:	fa1f f188 	uxth.w	r1, r8
 8005618:	4461      	add	r1, ip
 800561a:	140c      	asrs	r4, r1, #16
 800561c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005620:	b289      	uxth	r1, r1
 8005622:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005626:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800562a:	f846 1b04 	str.w	r1, [r6], #4
 800562e:	e7de      	b.n	80055ee <__mdiff+0xca>
 8005630:	3f01      	subs	r7, #1
 8005632:	e7e8      	b.n	8005606 <__mdiff+0xe2>
 8005634:	0800642e 	.word	0x0800642e
 8005638:	0800643f 	.word	0x0800643f

0800563c <__d2b>:
 800563c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800563e:	2101      	movs	r1, #1
 8005640:	4617      	mov	r7, r2
 8005642:	461c      	mov	r4, r3
 8005644:	9e08      	ldr	r6, [sp, #32]
 8005646:	f7ff fcd7 	bl	8004ff8 <_Balloc>
 800564a:	4605      	mov	r5, r0
 800564c:	b930      	cbnz	r0, 800565c <__d2b+0x20>
 800564e:	4602      	mov	r2, r0
 8005650:	f240 310f 	movw	r1, #783	; 0x30f
 8005654:	4b22      	ldr	r3, [pc, #136]	; (80056e0 <__d2b+0xa4>)
 8005656:	4823      	ldr	r0, [pc, #140]	; (80056e4 <__d2b+0xa8>)
 8005658:	f000 fa80 	bl	8005b5c <__assert_func>
 800565c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005660:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005664:	bb24      	cbnz	r4, 80056b0 <__d2b+0x74>
 8005666:	2f00      	cmp	r7, #0
 8005668:	9301      	str	r3, [sp, #4]
 800566a:	d026      	beq.n	80056ba <__d2b+0x7e>
 800566c:	4668      	mov	r0, sp
 800566e:	9700      	str	r7, [sp, #0]
 8005670:	f7ff fd8a 	bl	8005188 <__lo0bits>
 8005674:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005678:	b1e8      	cbz	r0, 80056b6 <__d2b+0x7a>
 800567a:	f1c0 0320 	rsb	r3, r0, #32
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	430b      	orrs	r3, r1
 8005684:	40c2      	lsrs	r2, r0
 8005686:	616b      	str	r3, [r5, #20]
 8005688:	9201      	str	r2, [sp, #4]
 800568a:	9b01      	ldr	r3, [sp, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	bf14      	ite	ne
 8005690:	2102      	movne	r1, #2
 8005692:	2101      	moveq	r1, #1
 8005694:	61ab      	str	r3, [r5, #24]
 8005696:	6129      	str	r1, [r5, #16]
 8005698:	b1bc      	cbz	r4, 80056ca <__d2b+0x8e>
 800569a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800569e:	4404      	add	r4, r0
 80056a0:	6034      	str	r4, [r6, #0]
 80056a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80056a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a8:	6018      	str	r0, [r3, #0]
 80056aa:	4628      	mov	r0, r5
 80056ac:	b003      	add	sp, #12
 80056ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056b4:	e7d7      	b.n	8005666 <__d2b+0x2a>
 80056b6:	6169      	str	r1, [r5, #20]
 80056b8:	e7e7      	b.n	800568a <__d2b+0x4e>
 80056ba:	a801      	add	r0, sp, #4
 80056bc:	f7ff fd64 	bl	8005188 <__lo0bits>
 80056c0:	9b01      	ldr	r3, [sp, #4]
 80056c2:	2101      	movs	r1, #1
 80056c4:	616b      	str	r3, [r5, #20]
 80056c6:	3020      	adds	r0, #32
 80056c8:	e7e5      	b.n	8005696 <__d2b+0x5a>
 80056ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80056ce:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80056d2:	6030      	str	r0, [r6, #0]
 80056d4:	6918      	ldr	r0, [r3, #16]
 80056d6:	f7ff fd37 	bl	8005148 <__hi0bits>
 80056da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80056de:	e7e2      	b.n	80056a6 <__d2b+0x6a>
 80056e0:	0800642e 	.word	0x0800642e
 80056e4:	0800643f 	.word	0x0800643f

080056e8 <__ssputs_r>:
 80056e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ec:	461f      	mov	r7, r3
 80056ee:	688e      	ldr	r6, [r1, #8]
 80056f0:	4682      	mov	sl, r0
 80056f2:	42be      	cmp	r6, r7
 80056f4:	460c      	mov	r4, r1
 80056f6:	4690      	mov	r8, r2
 80056f8:	680b      	ldr	r3, [r1, #0]
 80056fa:	d82c      	bhi.n	8005756 <__ssputs_r+0x6e>
 80056fc:	898a      	ldrh	r2, [r1, #12]
 80056fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005702:	d026      	beq.n	8005752 <__ssputs_r+0x6a>
 8005704:	6965      	ldr	r5, [r4, #20]
 8005706:	6909      	ldr	r1, [r1, #16]
 8005708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800570c:	eba3 0901 	sub.w	r9, r3, r1
 8005710:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005714:	1c7b      	adds	r3, r7, #1
 8005716:	444b      	add	r3, r9
 8005718:	106d      	asrs	r5, r5, #1
 800571a:	429d      	cmp	r5, r3
 800571c:	bf38      	it	cc
 800571e:	461d      	movcc	r5, r3
 8005720:	0553      	lsls	r3, r2, #21
 8005722:	d527      	bpl.n	8005774 <__ssputs_r+0x8c>
 8005724:	4629      	mov	r1, r5
 8005726:	f7ff fbdb 	bl	8004ee0 <_malloc_r>
 800572a:	4606      	mov	r6, r0
 800572c:	b360      	cbz	r0, 8005788 <__ssputs_r+0xa0>
 800572e:	464a      	mov	r2, r9
 8005730:	6921      	ldr	r1, [r4, #16]
 8005732:	f000 fa05 	bl	8005b40 <memcpy>
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800573c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005740:	81a3      	strh	r3, [r4, #12]
 8005742:	6126      	str	r6, [r4, #16]
 8005744:	444e      	add	r6, r9
 8005746:	6026      	str	r6, [r4, #0]
 8005748:	463e      	mov	r6, r7
 800574a:	6165      	str	r5, [r4, #20]
 800574c:	eba5 0509 	sub.w	r5, r5, r9
 8005750:	60a5      	str	r5, [r4, #8]
 8005752:	42be      	cmp	r6, r7
 8005754:	d900      	bls.n	8005758 <__ssputs_r+0x70>
 8005756:	463e      	mov	r6, r7
 8005758:	4632      	mov	r2, r6
 800575a:	4641      	mov	r1, r8
 800575c:	6820      	ldr	r0, [r4, #0]
 800575e:	f000 f9c5 	bl	8005aec <memmove>
 8005762:	2000      	movs	r0, #0
 8005764:	68a3      	ldr	r3, [r4, #8]
 8005766:	1b9b      	subs	r3, r3, r6
 8005768:	60a3      	str	r3, [r4, #8]
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	4433      	add	r3, r6
 800576e:	6023      	str	r3, [r4, #0]
 8005770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005774:	462a      	mov	r2, r5
 8005776:	f000 fa35 	bl	8005be4 <_realloc_r>
 800577a:	4606      	mov	r6, r0
 800577c:	2800      	cmp	r0, #0
 800577e:	d1e0      	bne.n	8005742 <__ssputs_r+0x5a>
 8005780:	4650      	mov	r0, sl
 8005782:	6921      	ldr	r1, [r4, #16]
 8005784:	f7ff fb3c 	bl	8004e00 <_free_r>
 8005788:	230c      	movs	r3, #12
 800578a:	f8ca 3000 	str.w	r3, [sl]
 800578e:	89a3      	ldrh	r3, [r4, #12]
 8005790:	f04f 30ff 	mov.w	r0, #4294967295
 8005794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005798:	81a3      	strh	r3, [r4, #12]
 800579a:	e7e9      	b.n	8005770 <__ssputs_r+0x88>

0800579c <_svfiprintf_r>:
 800579c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a0:	4698      	mov	r8, r3
 80057a2:	898b      	ldrh	r3, [r1, #12]
 80057a4:	4607      	mov	r7, r0
 80057a6:	061b      	lsls	r3, r3, #24
 80057a8:	460d      	mov	r5, r1
 80057aa:	4614      	mov	r4, r2
 80057ac:	b09d      	sub	sp, #116	; 0x74
 80057ae:	d50e      	bpl.n	80057ce <_svfiprintf_r+0x32>
 80057b0:	690b      	ldr	r3, [r1, #16]
 80057b2:	b963      	cbnz	r3, 80057ce <_svfiprintf_r+0x32>
 80057b4:	2140      	movs	r1, #64	; 0x40
 80057b6:	f7ff fb93 	bl	8004ee0 <_malloc_r>
 80057ba:	6028      	str	r0, [r5, #0]
 80057bc:	6128      	str	r0, [r5, #16]
 80057be:	b920      	cbnz	r0, 80057ca <_svfiprintf_r+0x2e>
 80057c0:	230c      	movs	r3, #12
 80057c2:	603b      	str	r3, [r7, #0]
 80057c4:	f04f 30ff 	mov.w	r0, #4294967295
 80057c8:	e0d0      	b.n	800596c <_svfiprintf_r+0x1d0>
 80057ca:	2340      	movs	r3, #64	; 0x40
 80057cc:	616b      	str	r3, [r5, #20]
 80057ce:	2300      	movs	r3, #0
 80057d0:	9309      	str	r3, [sp, #36]	; 0x24
 80057d2:	2320      	movs	r3, #32
 80057d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057d8:	2330      	movs	r3, #48	; 0x30
 80057da:	f04f 0901 	mov.w	r9, #1
 80057de:	f8cd 800c 	str.w	r8, [sp, #12]
 80057e2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005984 <_svfiprintf_r+0x1e8>
 80057e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057ea:	4623      	mov	r3, r4
 80057ec:	469a      	mov	sl, r3
 80057ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057f2:	b10a      	cbz	r2, 80057f8 <_svfiprintf_r+0x5c>
 80057f4:	2a25      	cmp	r2, #37	; 0x25
 80057f6:	d1f9      	bne.n	80057ec <_svfiprintf_r+0x50>
 80057f8:	ebba 0b04 	subs.w	fp, sl, r4
 80057fc:	d00b      	beq.n	8005816 <_svfiprintf_r+0x7a>
 80057fe:	465b      	mov	r3, fp
 8005800:	4622      	mov	r2, r4
 8005802:	4629      	mov	r1, r5
 8005804:	4638      	mov	r0, r7
 8005806:	f7ff ff6f 	bl	80056e8 <__ssputs_r>
 800580a:	3001      	adds	r0, #1
 800580c:	f000 80a9 	beq.w	8005962 <_svfiprintf_r+0x1c6>
 8005810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005812:	445a      	add	r2, fp
 8005814:	9209      	str	r2, [sp, #36]	; 0x24
 8005816:	f89a 3000 	ldrb.w	r3, [sl]
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 80a1 	beq.w	8005962 <_svfiprintf_r+0x1c6>
 8005820:	2300      	movs	r3, #0
 8005822:	f04f 32ff 	mov.w	r2, #4294967295
 8005826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800582a:	f10a 0a01 	add.w	sl, sl, #1
 800582e:	9304      	str	r3, [sp, #16]
 8005830:	9307      	str	r3, [sp, #28]
 8005832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005836:	931a      	str	r3, [sp, #104]	; 0x68
 8005838:	4654      	mov	r4, sl
 800583a:	2205      	movs	r2, #5
 800583c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005840:	4850      	ldr	r0, [pc, #320]	; (8005984 <_svfiprintf_r+0x1e8>)
 8005842:	f7fe fc62 	bl	800410a <memchr>
 8005846:	9a04      	ldr	r2, [sp, #16]
 8005848:	b9d8      	cbnz	r0, 8005882 <_svfiprintf_r+0xe6>
 800584a:	06d0      	lsls	r0, r2, #27
 800584c:	bf44      	itt	mi
 800584e:	2320      	movmi	r3, #32
 8005850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005854:	0711      	lsls	r1, r2, #28
 8005856:	bf44      	itt	mi
 8005858:	232b      	movmi	r3, #43	; 0x2b
 800585a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800585e:	f89a 3000 	ldrb.w	r3, [sl]
 8005862:	2b2a      	cmp	r3, #42	; 0x2a
 8005864:	d015      	beq.n	8005892 <_svfiprintf_r+0xf6>
 8005866:	4654      	mov	r4, sl
 8005868:	2000      	movs	r0, #0
 800586a:	f04f 0c0a 	mov.w	ip, #10
 800586e:	9a07      	ldr	r2, [sp, #28]
 8005870:	4621      	mov	r1, r4
 8005872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005876:	3b30      	subs	r3, #48	; 0x30
 8005878:	2b09      	cmp	r3, #9
 800587a:	d94d      	bls.n	8005918 <_svfiprintf_r+0x17c>
 800587c:	b1b0      	cbz	r0, 80058ac <_svfiprintf_r+0x110>
 800587e:	9207      	str	r2, [sp, #28]
 8005880:	e014      	b.n	80058ac <_svfiprintf_r+0x110>
 8005882:	eba0 0308 	sub.w	r3, r0, r8
 8005886:	fa09 f303 	lsl.w	r3, r9, r3
 800588a:	4313      	orrs	r3, r2
 800588c:	46a2      	mov	sl, r4
 800588e:	9304      	str	r3, [sp, #16]
 8005890:	e7d2      	b.n	8005838 <_svfiprintf_r+0x9c>
 8005892:	9b03      	ldr	r3, [sp, #12]
 8005894:	1d19      	adds	r1, r3, #4
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	9103      	str	r1, [sp, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	bfbb      	ittet	lt
 800589e:	425b      	neglt	r3, r3
 80058a0:	f042 0202 	orrlt.w	r2, r2, #2
 80058a4:	9307      	strge	r3, [sp, #28]
 80058a6:	9307      	strlt	r3, [sp, #28]
 80058a8:	bfb8      	it	lt
 80058aa:	9204      	strlt	r2, [sp, #16]
 80058ac:	7823      	ldrb	r3, [r4, #0]
 80058ae:	2b2e      	cmp	r3, #46	; 0x2e
 80058b0:	d10c      	bne.n	80058cc <_svfiprintf_r+0x130>
 80058b2:	7863      	ldrb	r3, [r4, #1]
 80058b4:	2b2a      	cmp	r3, #42	; 0x2a
 80058b6:	d134      	bne.n	8005922 <_svfiprintf_r+0x186>
 80058b8:	9b03      	ldr	r3, [sp, #12]
 80058ba:	3402      	adds	r4, #2
 80058bc:	1d1a      	adds	r2, r3, #4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	9203      	str	r2, [sp, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	bfb8      	it	lt
 80058c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80058ca:	9305      	str	r3, [sp, #20]
 80058cc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005988 <_svfiprintf_r+0x1ec>
 80058d0:	2203      	movs	r2, #3
 80058d2:	4650      	mov	r0, sl
 80058d4:	7821      	ldrb	r1, [r4, #0]
 80058d6:	f7fe fc18 	bl	800410a <memchr>
 80058da:	b138      	cbz	r0, 80058ec <_svfiprintf_r+0x150>
 80058dc:	2240      	movs	r2, #64	; 0x40
 80058de:	9b04      	ldr	r3, [sp, #16]
 80058e0:	eba0 000a 	sub.w	r0, r0, sl
 80058e4:	4082      	lsls	r2, r0
 80058e6:	4313      	orrs	r3, r2
 80058e8:	3401      	adds	r4, #1
 80058ea:	9304      	str	r3, [sp, #16]
 80058ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f0:	2206      	movs	r2, #6
 80058f2:	4826      	ldr	r0, [pc, #152]	; (800598c <_svfiprintf_r+0x1f0>)
 80058f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058f8:	f7fe fc07 	bl	800410a <memchr>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d038      	beq.n	8005972 <_svfiprintf_r+0x1d6>
 8005900:	4b23      	ldr	r3, [pc, #140]	; (8005990 <_svfiprintf_r+0x1f4>)
 8005902:	bb1b      	cbnz	r3, 800594c <_svfiprintf_r+0x1b0>
 8005904:	9b03      	ldr	r3, [sp, #12]
 8005906:	3307      	adds	r3, #7
 8005908:	f023 0307 	bic.w	r3, r3, #7
 800590c:	3308      	adds	r3, #8
 800590e:	9303      	str	r3, [sp, #12]
 8005910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005912:	4433      	add	r3, r6
 8005914:	9309      	str	r3, [sp, #36]	; 0x24
 8005916:	e768      	b.n	80057ea <_svfiprintf_r+0x4e>
 8005918:	460c      	mov	r4, r1
 800591a:	2001      	movs	r0, #1
 800591c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005920:	e7a6      	b.n	8005870 <_svfiprintf_r+0xd4>
 8005922:	2300      	movs	r3, #0
 8005924:	f04f 0c0a 	mov.w	ip, #10
 8005928:	4619      	mov	r1, r3
 800592a:	3401      	adds	r4, #1
 800592c:	9305      	str	r3, [sp, #20]
 800592e:	4620      	mov	r0, r4
 8005930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005934:	3a30      	subs	r2, #48	; 0x30
 8005936:	2a09      	cmp	r2, #9
 8005938:	d903      	bls.n	8005942 <_svfiprintf_r+0x1a6>
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0c6      	beq.n	80058cc <_svfiprintf_r+0x130>
 800593e:	9105      	str	r1, [sp, #20]
 8005940:	e7c4      	b.n	80058cc <_svfiprintf_r+0x130>
 8005942:	4604      	mov	r4, r0
 8005944:	2301      	movs	r3, #1
 8005946:	fb0c 2101 	mla	r1, ip, r1, r2
 800594a:	e7f0      	b.n	800592e <_svfiprintf_r+0x192>
 800594c:	ab03      	add	r3, sp, #12
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	462a      	mov	r2, r5
 8005952:	4638      	mov	r0, r7
 8005954:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <_svfiprintf_r+0x1f8>)
 8005956:	a904      	add	r1, sp, #16
 8005958:	f7fd fe70 	bl	800363c <_printf_float>
 800595c:	1c42      	adds	r2, r0, #1
 800595e:	4606      	mov	r6, r0
 8005960:	d1d6      	bne.n	8005910 <_svfiprintf_r+0x174>
 8005962:	89ab      	ldrh	r3, [r5, #12]
 8005964:	065b      	lsls	r3, r3, #25
 8005966:	f53f af2d 	bmi.w	80057c4 <_svfiprintf_r+0x28>
 800596a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800596c:	b01d      	add	sp, #116	; 0x74
 800596e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005972:	ab03      	add	r3, sp, #12
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	462a      	mov	r2, r5
 8005978:	4638      	mov	r0, r7
 800597a:	4b06      	ldr	r3, [pc, #24]	; (8005994 <_svfiprintf_r+0x1f8>)
 800597c:	a904      	add	r1, sp, #16
 800597e:	f7fe f8fd 	bl	8003b7c <_printf_i>
 8005982:	e7eb      	b.n	800595c <_svfiprintf_r+0x1c0>
 8005984:	08006594 	.word	0x08006594
 8005988:	0800659a 	.word	0x0800659a
 800598c:	0800659e 	.word	0x0800659e
 8005990:	0800363d 	.word	0x0800363d
 8005994:	080056e9 	.word	0x080056e9

08005998 <__sflush_r>:
 8005998:	898a      	ldrh	r2, [r1, #12]
 800599a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599c:	4605      	mov	r5, r0
 800599e:	0710      	lsls	r0, r2, #28
 80059a0:	460c      	mov	r4, r1
 80059a2:	d457      	bmi.n	8005a54 <__sflush_r+0xbc>
 80059a4:	684b      	ldr	r3, [r1, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	dc04      	bgt.n	80059b4 <__sflush_r+0x1c>
 80059aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	dc01      	bgt.n	80059b4 <__sflush_r+0x1c>
 80059b0:	2000      	movs	r0, #0
 80059b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059b6:	2e00      	cmp	r6, #0
 80059b8:	d0fa      	beq.n	80059b0 <__sflush_r+0x18>
 80059ba:	2300      	movs	r3, #0
 80059bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059c0:	682f      	ldr	r7, [r5, #0]
 80059c2:	6a21      	ldr	r1, [r4, #32]
 80059c4:	602b      	str	r3, [r5, #0]
 80059c6:	d032      	beq.n	8005a2e <__sflush_r+0x96>
 80059c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	075a      	lsls	r2, r3, #29
 80059ce:	d505      	bpl.n	80059dc <__sflush_r+0x44>
 80059d0:	6863      	ldr	r3, [r4, #4]
 80059d2:	1ac0      	subs	r0, r0, r3
 80059d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059d6:	b10b      	cbz	r3, 80059dc <__sflush_r+0x44>
 80059d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059da:	1ac0      	subs	r0, r0, r3
 80059dc:	2300      	movs	r3, #0
 80059de:	4602      	mov	r2, r0
 80059e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059e2:	4628      	mov	r0, r5
 80059e4:	6a21      	ldr	r1, [r4, #32]
 80059e6:	47b0      	blx	r6
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	89a3      	ldrh	r3, [r4, #12]
 80059ec:	d106      	bne.n	80059fc <__sflush_r+0x64>
 80059ee:	6829      	ldr	r1, [r5, #0]
 80059f0:	291d      	cmp	r1, #29
 80059f2:	d82b      	bhi.n	8005a4c <__sflush_r+0xb4>
 80059f4:	4a28      	ldr	r2, [pc, #160]	; (8005a98 <__sflush_r+0x100>)
 80059f6:	410a      	asrs	r2, r1
 80059f8:	07d6      	lsls	r6, r2, #31
 80059fa:	d427      	bmi.n	8005a4c <__sflush_r+0xb4>
 80059fc:	2200      	movs	r2, #0
 80059fe:	6062      	str	r2, [r4, #4]
 8005a00:	6922      	ldr	r2, [r4, #16]
 8005a02:	04d9      	lsls	r1, r3, #19
 8005a04:	6022      	str	r2, [r4, #0]
 8005a06:	d504      	bpl.n	8005a12 <__sflush_r+0x7a>
 8005a08:	1c42      	adds	r2, r0, #1
 8005a0a:	d101      	bne.n	8005a10 <__sflush_r+0x78>
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	b903      	cbnz	r3, 8005a12 <__sflush_r+0x7a>
 8005a10:	6560      	str	r0, [r4, #84]	; 0x54
 8005a12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a14:	602f      	str	r7, [r5, #0]
 8005a16:	2900      	cmp	r1, #0
 8005a18:	d0ca      	beq.n	80059b0 <__sflush_r+0x18>
 8005a1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a1e:	4299      	cmp	r1, r3
 8005a20:	d002      	beq.n	8005a28 <__sflush_r+0x90>
 8005a22:	4628      	mov	r0, r5
 8005a24:	f7ff f9ec 	bl	8004e00 <_free_r>
 8005a28:	2000      	movs	r0, #0
 8005a2a:	6360      	str	r0, [r4, #52]	; 0x34
 8005a2c:	e7c1      	b.n	80059b2 <__sflush_r+0x1a>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	4628      	mov	r0, r5
 8005a32:	47b0      	blx	r6
 8005a34:	1c41      	adds	r1, r0, #1
 8005a36:	d1c8      	bne.n	80059ca <__sflush_r+0x32>
 8005a38:	682b      	ldr	r3, [r5, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0c5      	beq.n	80059ca <__sflush_r+0x32>
 8005a3e:	2b1d      	cmp	r3, #29
 8005a40:	d001      	beq.n	8005a46 <__sflush_r+0xae>
 8005a42:	2b16      	cmp	r3, #22
 8005a44:	d101      	bne.n	8005a4a <__sflush_r+0xb2>
 8005a46:	602f      	str	r7, [r5, #0]
 8005a48:	e7b2      	b.n	80059b0 <__sflush_r+0x18>
 8005a4a:	89a3      	ldrh	r3, [r4, #12]
 8005a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a50:	81a3      	strh	r3, [r4, #12]
 8005a52:	e7ae      	b.n	80059b2 <__sflush_r+0x1a>
 8005a54:	690f      	ldr	r7, [r1, #16]
 8005a56:	2f00      	cmp	r7, #0
 8005a58:	d0aa      	beq.n	80059b0 <__sflush_r+0x18>
 8005a5a:	0793      	lsls	r3, r2, #30
 8005a5c:	bf18      	it	ne
 8005a5e:	2300      	movne	r3, #0
 8005a60:	680e      	ldr	r6, [r1, #0]
 8005a62:	bf08      	it	eq
 8005a64:	694b      	ldreq	r3, [r1, #20]
 8005a66:	1bf6      	subs	r6, r6, r7
 8005a68:	600f      	str	r7, [r1, #0]
 8005a6a:	608b      	str	r3, [r1, #8]
 8005a6c:	2e00      	cmp	r6, #0
 8005a6e:	dd9f      	ble.n	80059b0 <__sflush_r+0x18>
 8005a70:	4633      	mov	r3, r6
 8005a72:	463a      	mov	r2, r7
 8005a74:	4628      	mov	r0, r5
 8005a76:	6a21      	ldr	r1, [r4, #32]
 8005a78:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005a7c:	47e0      	blx	ip
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	dc06      	bgt.n	8005a90 <__sflush_r+0xf8>
 8005a82:	89a3      	ldrh	r3, [r4, #12]
 8005a84:	f04f 30ff 	mov.w	r0, #4294967295
 8005a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a8c:	81a3      	strh	r3, [r4, #12]
 8005a8e:	e790      	b.n	80059b2 <__sflush_r+0x1a>
 8005a90:	4407      	add	r7, r0
 8005a92:	1a36      	subs	r6, r6, r0
 8005a94:	e7ea      	b.n	8005a6c <__sflush_r+0xd4>
 8005a96:	bf00      	nop
 8005a98:	dfbffffe 	.word	0xdfbffffe

08005a9c <_fflush_r>:
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	690b      	ldr	r3, [r1, #16]
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	b913      	cbnz	r3, 8005aac <_fflush_r+0x10>
 8005aa6:	2500      	movs	r5, #0
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}
 8005aac:	b118      	cbz	r0, 8005ab6 <_fflush_r+0x1a>
 8005aae:	6a03      	ldr	r3, [r0, #32]
 8005ab0:	b90b      	cbnz	r3, 8005ab6 <_fflush_r+0x1a>
 8005ab2:	f7fe fa11 	bl	8003ed8 <__sinit>
 8005ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0f3      	beq.n	8005aa6 <_fflush_r+0xa>
 8005abe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ac0:	07d0      	lsls	r0, r2, #31
 8005ac2:	d404      	bmi.n	8005ace <_fflush_r+0x32>
 8005ac4:	0599      	lsls	r1, r3, #22
 8005ac6:	d402      	bmi.n	8005ace <_fflush_r+0x32>
 8005ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aca:	f7fe fb1c 	bl	8004106 <__retarget_lock_acquire_recursive>
 8005ace:	4628      	mov	r0, r5
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	f7ff ff61 	bl	8005998 <__sflush_r>
 8005ad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ad8:	4605      	mov	r5, r0
 8005ada:	07da      	lsls	r2, r3, #31
 8005adc:	d4e4      	bmi.n	8005aa8 <_fflush_r+0xc>
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	059b      	lsls	r3, r3, #22
 8005ae2:	d4e1      	bmi.n	8005aa8 <_fflush_r+0xc>
 8005ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ae6:	f7fe fb0f 	bl	8004108 <__retarget_lock_release_recursive>
 8005aea:	e7dd      	b.n	8005aa8 <_fflush_r+0xc>

08005aec <memmove>:
 8005aec:	4288      	cmp	r0, r1
 8005aee:	b510      	push	{r4, lr}
 8005af0:	eb01 0402 	add.w	r4, r1, r2
 8005af4:	d902      	bls.n	8005afc <memmove+0x10>
 8005af6:	4284      	cmp	r4, r0
 8005af8:	4623      	mov	r3, r4
 8005afa:	d807      	bhi.n	8005b0c <memmove+0x20>
 8005afc:	1e43      	subs	r3, r0, #1
 8005afe:	42a1      	cmp	r1, r4
 8005b00:	d008      	beq.n	8005b14 <memmove+0x28>
 8005b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b0a:	e7f8      	b.n	8005afe <memmove+0x12>
 8005b0c:	4601      	mov	r1, r0
 8005b0e:	4402      	add	r2, r0
 8005b10:	428a      	cmp	r2, r1
 8005b12:	d100      	bne.n	8005b16 <memmove+0x2a>
 8005b14:	bd10      	pop	{r4, pc}
 8005b16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b1e:	e7f7      	b.n	8005b10 <memmove+0x24>

08005b20 <_sbrk_r>:
 8005b20:	b538      	push	{r3, r4, r5, lr}
 8005b22:	2300      	movs	r3, #0
 8005b24:	4d05      	ldr	r5, [pc, #20]	; (8005b3c <_sbrk_r+0x1c>)
 8005b26:	4604      	mov	r4, r0
 8005b28:	4608      	mov	r0, r1
 8005b2a:	602b      	str	r3, [r5, #0]
 8005b2c:	f7fb ff66 	bl	80019fc <_sbrk>
 8005b30:	1c43      	adds	r3, r0, #1
 8005b32:	d102      	bne.n	8005b3a <_sbrk_r+0x1a>
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	b103      	cbz	r3, 8005b3a <_sbrk_r+0x1a>
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	bd38      	pop	{r3, r4, r5, pc}
 8005b3c:	200003dc 	.word	0x200003dc

08005b40 <memcpy>:
 8005b40:	440a      	add	r2, r1
 8005b42:	4291      	cmp	r1, r2
 8005b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b48:	d100      	bne.n	8005b4c <memcpy+0xc>
 8005b4a:	4770      	bx	lr
 8005b4c:	b510      	push	{r4, lr}
 8005b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b52:	4291      	cmp	r1, r2
 8005b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b58:	d1f9      	bne.n	8005b4e <memcpy+0xe>
 8005b5a:	bd10      	pop	{r4, pc}

08005b5c <__assert_func>:
 8005b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b5e:	4614      	mov	r4, r2
 8005b60:	461a      	mov	r2, r3
 8005b62:	4b09      	ldr	r3, [pc, #36]	; (8005b88 <__assert_func+0x2c>)
 8005b64:	4605      	mov	r5, r0
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68d8      	ldr	r0, [r3, #12]
 8005b6a:	b14c      	cbz	r4, 8005b80 <__assert_func+0x24>
 8005b6c:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <__assert_func+0x30>)
 8005b6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b72:	9100      	str	r1, [sp, #0]
 8005b74:	462b      	mov	r3, r5
 8005b76:	4906      	ldr	r1, [pc, #24]	; (8005b90 <__assert_func+0x34>)
 8005b78:	f000 f870 	bl	8005c5c <fiprintf>
 8005b7c:	f000 f880 	bl	8005c80 <abort>
 8005b80:	4b04      	ldr	r3, [pc, #16]	; (8005b94 <__assert_func+0x38>)
 8005b82:	461c      	mov	r4, r3
 8005b84:	e7f3      	b.n	8005b6e <__assert_func+0x12>
 8005b86:	bf00      	nop
 8005b88:	20000068 	.word	0x20000068
 8005b8c:	080065af 	.word	0x080065af
 8005b90:	080065bc 	.word	0x080065bc
 8005b94:	080065ea 	.word	0x080065ea

08005b98 <_calloc_r>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	fba1 5402 	umull	r5, r4, r1, r2
 8005b9e:	b934      	cbnz	r4, 8005bae <_calloc_r+0x16>
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	f7ff f99d 	bl	8004ee0 <_malloc_r>
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	b928      	cbnz	r0, 8005bb6 <_calloc_r+0x1e>
 8005baa:	4630      	mov	r0, r6
 8005bac:	bd70      	pop	{r4, r5, r6, pc}
 8005bae:	220c      	movs	r2, #12
 8005bb0:	2600      	movs	r6, #0
 8005bb2:	6002      	str	r2, [r0, #0]
 8005bb4:	e7f9      	b.n	8005baa <_calloc_r+0x12>
 8005bb6:	462a      	mov	r2, r5
 8005bb8:	4621      	mov	r1, r4
 8005bba:	f7fe fa26 	bl	800400a <memset>
 8005bbe:	e7f4      	b.n	8005baa <_calloc_r+0x12>

08005bc0 <__ascii_mbtowc>:
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	b901      	cbnz	r1, 8005bc6 <__ascii_mbtowc+0x6>
 8005bc4:	a901      	add	r1, sp, #4
 8005bc6:	b142      	cbz	r2, 8005bda <__ascii_mbtowc+0x1a>
 8005bc8:	b14b      	cbz	r3, 8005bde <__ascii_mbtowc+0x1e>
 8005bca:	7813      	ldrb	r3, [r2, #0]
 8005bcc:	600b      	str	r3, [r1, #0]
 8005bce:	7812      	ldrb	r2, [r2, #0]
 8005bd0:	1e10      	subs	r0, r2, #0
 8005bd2:	bf18      	it	ne
 8005bd4:	2001      	movne	r0, #1
 8005bd6:	b002      	add	sp, #8
 8005bd8:	4770      	bx	lr
 8005bda:	4610      	mov	r0, r2
 8005bdc:	e7fb      	b.n	8005bd6 <__ascii_mbtowc+0x16>
 8005bde:	f06f 0001 	mvn.w	r0, #1
 8005be2:	e7f8      	b.n	8005bd6 <__ascii_mbtowc+0x16>

08005be4 <_realloc_r>:
 8005be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be8:	4680      	mov	r8, r0
 8005bea:	4614      	mov	r4, r2
 8005bec:	460e      	mov	r6, r1
 8005bee:	b921      	cbnz	r1, 8005bfa <_realloc_r+0x16>
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf6:	f7ff b973 	b.w	8004ee0 <_malloc_r>
 8005bfa:	b92a      	cbnz	r2, 8005c08 <_realloc_r+0x24>
 8005bfc:	f7ff f900 	bl	8004e00 <_free_r>
 8005c00:	4625      	mov	r5, r4
 8005c02:	4628      	mov	r0, r5
 8005c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c08:	f000 f841 	bl	8005c8e <_malloc_usable_size_r>
 8005c0c:	4284      	cmp	r4, r0
 8005c0e:	4607      	mov	r7, r0
 8005c10:	d802      	bhi.n	8005c18 <_realloc_r+0x34>
 8005c12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c16:	d812      	bhi.n	8005c3e <_realloc_r+0x5a>
 8005c18:	4621      	mov	r1, r4
 8005c1a:	4640      	mov	r0, r8
 8005c1c:	f7ff f960 	bl	8004ee0 <_malloc_r>
 8005c20:	4605      	mov	r5, r0
 8005c22:	2800      	cmp	r0, #0
 8005c24:	d0ed      	beq.n	8005c02 <_realloc_r+0x1e>
 8005c26:	42bc      	cmp	r4, r7
 8005c28:	4622      	mov	r2, r4
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	bf28      	it	cs
 8005c2e:	463a      	movcs	r2, r7
 8005c30:	f7ff ff86 	bl	8005b40 <memcpy>
 8005c34:	4631      	mov	r1, r6
 8005c36:	4640      	mov	r0, r8
 8005c38:	f7ff f8e2 	bl	8004e00 <_free_r>
 8005c3c:	e7e1      	b.n	8005c02 <_realloc_r+0x1e>
 8005c3e:	4635      	mov	r5, r6
 8005c40:	e7df      	b.n	8005c02 <_realloc_r+0x1e>

08005c42 <__ascii_wctomb>:
 8005c42:	4603      	mov	r3, r0
 8005c44:	4608      	mov	r0, r1
 8005c46:	b141      	cbz	r1, 8005c5a <__ascii_wctomb+0x18>
 8005c48:	2aff      	cmp	r2, #255	; 0xff
 8005c4a:	d904      	bls.n	8005c56 <__ascii_wctomb+0x14>
 8005c4c:	228a      	movs	r2, #138	; 0x8a
 8005c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	4770      	bx	lr
 8005c56:	2001      	movs	r0, #1
 8005c58:	700a      	strb	r2, [r1, #0]
 8005c5a:	4770      	bx	lr

08005c5c <fiprintf>:
 8005c5c:	b40e      	push	{r1, r2, r3}
 8005c5e:	b503      	push	{r0, r1, lr}
 8005c60:	4601      	mov	r1, r0
 8005c62:	ab03      	add	r3, sp, #12
 8005c64:	4805      	ldr	r0, [pc, #20]	; (8005c7c <fiprintf+0x20>)
 8005c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c6a:	6800      	ldr	r0, [r0, #0]
 8005c6c:	9301      	str	r3, [sp, #4]
 8005c6e:	f000 f83d 	bl	8005cec <_vfiprintf_r>
 8005c72:	b002      	add	sp, #8
 8005c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c78:	b003      	add	sp, #12
 8005c7a:	4770      	bx	lr
 8005c7c:	20000068 	.word	0x20000068

08005c80 <abort>:
 8005c80:	2006      	movs	r0, #6
 8005c82:	b508      	push	{r3, lr}
 8005c84:	f000 fa0a 	bl	800609c <raise>
 8005c88:	2001      	movs	r0, #1
 8005c8a:	f7fb fe43 	bl	8001914 <_exit>

08005c8e <_malloc_usable_size_r>:
 8005c8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c92:	1f18      	subs	r0, r3, #4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	bfbc      	itt	lt
 8005c98:	580b      	ldrlt	r3, [r1, r0]
 8005c9a:	18c0      	addlt	r0, r0, r3
 8005c9c:	4770      	bx	lr

08005c9e <__sfputc_r>:
 8005c9e:	6893      	ldr	r3, [r2, #8]
 8005ca0:	b410      	push	{r4}
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	6093      	str	r3, [r2, #8]
 8005ca8:	da07      	bge.n	8005cba <__sfputc_r+0x1c>
 8005caa:	6994      	ldr	r4, [r2, #24]
 8005cac:	42a3      	cmp	r3, r4
 8005cae:	db01      	blt.n	8005cb4 <__sfputc_r+0x16>
 8005cb0:	290a      	cmp	r1, #10
 8005cb2:	d102      	bne.n	8005cba <__sfputc_r+0x1c>
 8005cb4:	bc10      	pop	{r4}
 8005cb6:	f000 b933 	b.w	8005f20 <__swbuf_r>
 8005cba:	6813      	ldr	r3, [r2, #0]
 8005cbc:	1c58      	adds	r0, r3, #1
 8005cbe:	6010      	str	r0, [r2, #0]
 8005cc0:	7019      	strb	r1, [r3, #0]
 8005cc2:	4608      	mov	r0, r1
 8005cc4:	bc10      	pop	{r4}
 8005cc6:	4770      	bx	lr

08005cc8 <__sfputs_r>:
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cca:	4606      	mov	r6, r0
 8005ccc:	460f      	mov	r7, r1
 8005cce:	4614      	mov	r4, r2
 8005cd0:	18d5      	adds	r5, r2, r3
 8005cd2:	42ac      	cmp	r4, r5
 8005cd4:	d101      	bne.n	8005cda <__sfputs_r+0x12>
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	e007      	b.n	8005cea <__sfputs_r+0x22>
 8005cda:	463a      	mov	r2, r7
 8005cdc:	4630      	mov	r0, r6
 8005cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ce2:	f7ff ffdc 	bl	8005c9e <__sfputc_r>
 8005ce6:	1c43      	adds	r3, r0, #1
 8005ce8:	d1f3      	bne.n	8005cd2 <__sfputs_r+0xa>
 8005cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005cec <_vfiprintf_r>:
 8005cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf0:	460d      	mov	r5, r1
 8005cf2:	4614      	mov	r4, r2
 8005cf4:	4698      	mov	r8, r3
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	b09d      	sub	sp, #116	; 0x74
 8005cfa:	b118      	cbz	r0, 8005d04 <_vfiprintf_r+0x18>
 8005cfc:	6a03      	ldr	r3, [r0, #32]
 8005cfe:	b90b      	cbnz	r3, 8005d04 <_vfiprintf_r+0x18>
 8005d00:	f7fe f8ea 	bl	8003ed8 <__sinit>
 8005d04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d06:	07d9      	lsls	r1, r3, #31
 8005d08:	d405      	bmi.n	8005d16 <_vfiprintf_r+0x2a>
 8005d0a:	89ab      	ldrh	r3, [r5, #12]
 8005d0c:	059a      	lsls	r2, r3, #22
 8005d0e:	d402      	bmi.n	8005d16 <_vfiprintf_r+0x2a>
 8005d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d12:	f7fe f9f8 	bl	8004106 <__retarget_lock_acquire_recursive>
 8005d16:	89ab      	ldrh	r3, [r5, #12]
 8005d18:	071b      	lsls	r3, r3, #28
 8005d1a:	d501      	bpl.n	8005d20 <_vfiprintf_r+0x34>
 8005d1c:	692b      	ldr	r3, [r5, #16]
 8005d1e:	b99b      	cbnz	r3, 8005d48 <_vfiprintf_r+0x5c>
 8005d20:	4629      	mov	r1, r5
 8005d22:	4630      	mov	r0, r6
 8005d24:	f000 f93a 	bl	8005f9c <__swsetup_r>
 8005d28:	b170      	cbz	r0, 8005d48 <_vfiprintf_r+0x5c>
 8005d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d2c:	07dc      	lsls	r4, r3, #31
 8005d2e:	d504      	bpl.n	8005d3a <_vfiprintf_r+0x4e>
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295
 8005d34:	b01d      	add	sp, #116	; 0x74
 8005d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3a:	89ab      	ldrh	r3, [r5, #12]
 8005d3c:	0598      	lsls	r0, r3, #22
 8005d3e:	d4f7      	bmi.n	8005d30 <_vfiprintf_r+0x44>
 8005d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d42:	f7fe f9e1 	bl	8004108 <__retarget_lock_release_recursive>
 8005d46:	e7f3      	b.n	8005d30 <_vfiprintf_r+0x44>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d4c:	2320      	movs	r3, #32
 8005d4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d52:	2330      	movs	r3, #48	; 0x30
 8005d54:	f04f 0901 	mov.w	r9, #1
 8005d58:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005f0c <_vfiprintf_r+0x220>
 8005d60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d64:	4623      	mov	r3, r4
 8005d66:	469a      	mov	sl, r3
 8005d68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d6c:	b10a      	cbz	r2, 8005d72 <_vfiprintf_r+0x86>
 8005d6e:	2a25      	cmp	r2, #37	; 0x25
 8005d70:	d1f9      	bne.n	8005d66 <_vfiprintf_r+0x7a>
 8005d72:	ebba 0b04 	subs.w	fp, sl, r4
 8005d76:	d00b      	beq.n	8005d90 <_vfiprintf_r+0xa4>
 8005d78:	465b      	mov	r3, fp
 8005d7a:	4622      	mov	r2, r4
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f7ff ffa2 	bl	8005cc8 <__sfputs_r>
 8005d84:	3001      	adds	r0, #1
 8005d86:	f000 80a9 	beq.w	8005edc <_vfiprintf_r+0x1f0>
 8005d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d8c:	445a      	add	r2, fp
 8005d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8005d90:	f89a 3000 	ldrb.w	r3, [sl]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 80a1 	beq.w	8005edc <_vfiprintf_r+0x1f0>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005da0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005da4:	f10a 0a01 	add.w	sl, sl, #1
 8005da8:	9304      	str	r3, [sp, #16]
 8005daa:	9307      	str	r3, [sp, #28]
 8005dac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005db0:	931a      	str	r3, [sp, #104]	; 0x68
 8005db2:	4654      	mov	r4, sl
 8005db4:	2205      	movs	r2, #5
 8005db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dba:	4854      	ldr	r0, [pc, #336]	; (8005f0c <_vfiprintf_r+0x220>)
 8005dbc:	f7fe f9a5 	bl	800410a <memchr>
 8005dc0:	9a04      	ldr	r2, [sp, #16]
 8005dc2:	b9d8      	cbnz	r0, 8005dfc <_vfiprintf_r+0x110>
 8005dc4:	06d1      	lsls	r1, r2, #27
 8005dc6:	bf44      	itt	mi
 8005dc8:	2320      	movmi	r3, #32
 8005dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dce:	0713      	lsls	r3, r2, #28
 8005dd0:	bf44      	itt	mi
 8005dd2:	232b      	movmi	r3, #43	; 0x2b
 8005dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8005ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8005dde:	d015      	beq.n	8005e0c <_vfiprintf_r+0x120>
 8005de0:	4654      	mov	r4, sl
 8005de2:	2000      	movs	r0, #0
 8005de4:	f04f 0c0a 	mov.w	ip, #10
 8005de8:	9a07      	ldr	r2, [sp, #28]
 8005dea:	4621      	mov	r1, r4
 8005dec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005df0:	3b30      	subs	r3, #48	; 0x30
 8005df2:	2b09      	cmp	r3, #9
 8005df4:	d94d      	bls.n	8005e92 <_vfiprintf_r+0x1a6>
 8005df6:	b1b0      	cbz	r0, 8005e26 <_vfiprintf_r+0x13a>
 8005df8:	9207      	str	r2, [sp, #28]
 8005dfa:	e014      	b.n	8005e26 <_vfiprintf_r+0x13a>
 8005dfc:	eba0 0308 	sub.w	r3, r0, r8
 8005e00:	fa09 f303 	lsl.w	r3, r9, r3
 8005e04:	4313      	orrs	r3, r2
 8005e06:	46a2      	mov	sl, r4
 8005e08:	9304      	str	r3, [sp, #16]
 8005e0a:	e7d2      	b.n	8005db2 <_vfiprintf_r+0xc6>
 8005e0c:	9b03      	ldr	r3, [sp, #12]
 8005e0e:	1d19      	adds	r1, r3, #4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	9103      	str	r1, [sp, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	bfbb      	ittet	lt
 8005e18:	425b      	neglt	r3, r3
 8005e1a:	f042 0202 	orrlt.w	r2, r2, #2
 8005e1e:	9307      	strge	r3, [sp, #28]
 8005e20:	9307      	strlt	r3, [sp, #28]
 8005e22:	bfb8      	it	lt
 8005e24:	9204      	strlt	r2, [sp, #16]
 8005e26:	7823      	ldrb	r3, [r4, #0]
 8005e28:	2b2e      	cmp	r3, #46	; 0x2e
 8005e2a:	d10c      	bne.n	8005e46 <_vfiprintf_r+0x15a>
 8005e2c:	7863      	ldrb	r3, [r4, #1]
 8005e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e30:	d134      	bne.n	8005e9c <_vfiprintf_r+0x1b0>
 8005e32:	9b03      	ldr	r3, [sp, #12]
 8005e34:	3402      	adds	r4, #2
 8005e36:	1d1a      	adds	r2, r3, #4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	9203      	str	r2, [sp, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	bfb8      	it	lt
 8005e40:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e44:	9305      	str	r3, [sp, #20]
 8005e46:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005f10 <_vfiprintf_r+0x224>
 8005e4a:	2203      	movs	r2, #3
 8005e4c:	4650      	mov	r0, sl
 8005e4e:	7821      	ldrb	r1, [r4, #0]
 8005e50:	f7fe f95b 	bl	800410a <memchr>
 8005e54:	b138      	cbz	r0, 8005e66 <_vfiprintf_r+0x17a>
 8005e56:	2240      	movs	r2, #64	; 0x40
 8005e58:	9b04      	ldr	r3, [sp, #16]
 8005e5a:	eba0 000a 	sub.w	r0, r0, sl
 8005e5e:	4082      	lsls	r2, r0
 8005e60:	4313      	orrs	r3, r2
 8005e62:	3401      	adds	r4, #1
 8005e64:	9304      	str	r3, [sp, #16]
 8005e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e6a:	2206      	movs	r2, #6
 8005e6c:	4829      	ldr	r0, [pc, #164]	; (8005f14 <_vfiprintf_r+0x228>)
 8005e6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e72:	f7fe f94a 	bl	800410a <memchr>
 8005e76:	2800      	cmp	r0, #0
 8005e78:	d03f      	beq.n	8005efa <_vfiprintf_r+0x20e>
 8005e7a:	4b27      	ldr	r3, [pc, #156]	; (8005f18 <_vfiprintf_r+0x22c>)
 8005e7c:	bb1b      	cbnz	r3, 8005ec6 <_vfiprintf_r+0x1da>
 8005e7e:	9b03      	ldr	r3, [sp, #12]
 8005e80:	3307      	adds	r3, #7
 8005e82:	f023 0307 	bic.w	r3, r3, #7
 8005e86:	3308      	adds	r3, #8
 8005e88:	9303      	str	r3, [sp, #12]
 8005e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e8c:	443b      	add	r3, r7
 8005e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e90:	e768      	b.n	8005d64 <_vfiprintf_r+0x78>
 8005e92:	460c      	mov	r4, r1
 8005e94:	2001      	movs	r0, #1
 8005e96:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e9a:	e7a6      	b.n	8005dea <_vfiprintf_r+0xfe>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f04f 0c0a 	mov.w	ip, #10
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	3401      	adds	r4, #1
 8005ea6:	9305      	str	r3, [sp, #20]
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005eae:	3a30      	subs	r2, #48	; 0x30
 8005eb0:	2a09      	cmp	r2, #9
 8005eb2:	d903      	bls.n	8005ebc <_vfiprintf_r+0x1d0>
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0c6      	beq.n	8005e46 <_vfiprintf_r+0x15a>
 8005eb8:	9105      	str	r1, [sp, #20]
 8005eba:	e7c4      	b.n	8005e46 <_vfiprintf_r+0x15a>
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ec4:	e7f0      	b.n	8005ea8 <_vfiprintf_r+0x1bc>
 8005ec6:	ab03      	add	r3, sp, #12
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	462a      	mov	r2, r5
 8005ecc:	4630      	mov	r0, r6
 8005ece:	4b13      	ldr	r3, [pc, #76]	; (8005f1c <_vfiprintf_r+0x230>)
 8005ed0:	a904      	add	r1, sp, #16
 8005ed2:	f7fd fbb3 	bl	800363c <_printf_float>
 8005ed6:	4607      	mov	r7, r0
 8005ed8:	1c78      	adds	r0, r7, #1
 8005eda:	d1d6      	bne.n	8005e8a <_vfiprintf_r+0x19e>
 8005edc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ede:	07d9      	lsls	r1, r3, #31
 8005ee0:	d405      	bmi.n	8005eee <_vfiprintf_r+0x202>
 8005ee2:	89ab      	ldrh	r3, [r5, #12]
 8005ee4:	059a      	lsls	r2, r3, #22
 8005ee6:	d402      	bmi.n	8005eee <_vfiprintf_r+0x202>
 8005ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005eea:	f7fe f90d 	bl	8004108 <__retarget_lock_release_recursive>
 8005eee:	89ab      	ldrh	r3, [r5, #12]
 8005ef0:	065b      	lsls	r3, r3, #25
 8005ef2:	f53f af1d 	bmi.w	8005d30 <_vfiprintf_r+0x44>
 8005ef6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ef8:	e71c      	b.n	8005d34 <_vfiprintf_r+0x48>
 8005efa:	ab03      	add	r3, sp, #12
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	462a      	mov	r2, r5
 8005f00:	4630      	mov	r0, r6
 8005f02:	4b06      	ldr	r3, [pc, #24]	; (8005f1c <_vfiprintf_r+0x230>)
 8005f04:	a904      	add	r1, sp, #16
 8005f06:	f7fd fe39 	bl	8003b7c <_printf_i>
 8005f0a:	e7e4      	b.n	8005ed6 <_vfiprintf_r+0x1ea>
 8005f0c:	08006594 	.word	0x08006594
 8005f10:	0800659a 	.word	0x0800659a
 8005f14:	0800659e 	.word	0x0800659e
 8005f18:	0800363d 	.word	0x0800363d
 8005f1c:	08005cc9 	.word	0x08005cc9

08005f20 <__swbuf_r>:
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f22:	460e      	mov	r6, r1
 8005f24:	4614      	mov	r4, r2
 8005f26:	4605      	mov	r5, r0
 8005f28:	b118      	cbz	r0, 8005f32 <__swbuf_r+0x12>
 8005f2a:	6a03      	ldr	r3, [r0, #32]
 8005f2c:	b90b      	cbnz	r3, 8005f32 <__swbuf_r+0x12>
 8005f2e:	f7fd ffd3 	bl	8003ed8 <__sinit>
 8005f32:	69a3      	ldr	r3, [r4, #24]
 8005f34:	60a3      	str	r3, [r4, #8]
 8005f36:	89a3      	ldrh	r3, [r4, #12]
 8005f38:	071a      	lsls	r2, r3, #28
 8005f3a:	d525      	bpl.n	8005f88 <__swbuf_r+0x68>
 8005f3c:	6923      	ldr	r3, [r4, #16]
 8005f3e:	b31b      	cbz	r3, 8005f88 <__swbuf_r+0x68>
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	6922      	ldr	r2, [r4, #16]
 8005f44:	b2f6      	uxtb	r6, r6
 8005f46:	1a98      	subs	r0, r3, r2
 8005f48:	6963      	ldr	r3, [r4, #20]
 8005f4a:	4637      	mov	r7, r6
 8005f4c:	4283      	cmp	r3, r0
 8005f4e:	dc04      	bgt.n	8005f5a <__swbuf_r+0x3a>
 8005f50:	4621      	mov	r1, r4
 8005f52:	4628      	mov	r0, r5
 8005f54:	f7ff fda2 	bl	8005a9c <_fflush_r>
 8005f58:	b9e0      	cbnz	r0, 8005f94 <__swbuf_r+0x74>
 8005f5a:	68a3      	ldr	r3, [r4, #8]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	60a3      	str	r3, [r4, #8]
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	6022      	str	r2, [r4, #0]
 8005f66:	701e      	strb	r6, [r3, #0]
 8005f68:	6962      	ldr	r2, [r4, #20]
 8005f6a:	1c43      	adds	r3, r0, #1
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d004      	beq.n	8005f7a <__swbuf_r+0x5a>
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	07db      	lsls	r3, r3, #31
 8005f74:	d506      	bpl.n	8005f84 <__swbuf_r+0x64>
 8005f76:	2e0a      	cmp	r6, #10
 8005f78:	d104      	bne.n	8005f84 <__swbuf_r+0x64>
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f7ff fd8d 	bl	8005a9c <_fflush_r>
 8005f82:	b938      	cbnz	r0, 8005f94 <__swbuf_r+0x74>
 8005f84:	4638      	mov	r0, r7
 8005f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f88:	4621      	mov	r1, r4
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f000 f806 	bl	8005f9c <__swsetup_r>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d0d5      	beq.n	8005f40 <__swbuf_r+0x20>
 8005f94:	f04f 37ff 	mov.w	r7, #4294967295
 8005f98:	e7f4      	b.n	8005f84 <__swbuf_r+0x64>
	...

08005f9c <__swsetup_r>:
 8005f9c:	b538      	push	{r3, r4, r5, lr}
 8005f9e:	4b2a      	ldr	r3, [pc, #168]	; (8006048 <__swsetup_r+0xac>)
 8005fa0:	4605      	mov	r5, r0
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	460c      	mov	r4, r1
 8005fa6:	b118      	cbz	r0, 8005fb0 <__swsetup_r+0x14>
 8005fa8:	6a03      	ldr	r3, [r0, #32]
 8005faa:	b90b      	cbnz	r3, 8005fb0 <__swsetup_r+0x14>
 8005fac:	f7fd ff94 	bl	8003ed8 <__sinit>
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fb6:	0718      	lsls	r0, r3, #28
 8005fb8:	d422      	bmi.n	8006000 <__swsetup_r+0x64>
 8005fba:	06d9      	lsls	r1, r3, #27
 8005fbc:	d407      	bmi.n	8005fce <__swsetup_r+0x32>
 8005fbe:	2309      	movs	r3, #9
 8005fc0:	602b      	str	r3, [r5, #0]
 8005fc2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fca:	81a3      	strh	r3, [r4, #12]
 8005fcc:	e034      	b.n	8006038 <__swsetup_r+0x9c>
 8005fce:	0758      	lsls	r0, r3, #29
 8005fd0:	d512      	bpl.n	8005ff8 <__swsetup_r+0x5c>
 8005fd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fd4:	b141      	cbz	r1, 8005fe8 <__swsetup_r+0x4c>
 8005fd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fda:	4299      	cmp	r1, r3
 8005fdc:	d002      	beq.n	8005fe4 <__swsetup_r+0x48>
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f7fe ff0e 	bl	8004e00 <_free_r>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	6363      	str	r3, [r4, #52]	; 0x34
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fee:	81a3      	strh	r3, [r4, #12]
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	6063      	str	r3, [r4, #4]
 8005ff4:	6923      	ldr	r3, [r4, #16]
 8005ff6:	6023      	str	r3, [r4, #0]
 8005ff8:	89a3      	ldrh	r3, [r4, #12]
 8005ffa:	f043 0308 	orr.w	r3, r3, #8
 8005ffe:	81a3      	strh	r3, [r4, #12]
 8006000:	6923      	ldr	r3, [r4, #16]
 8006002:	b94b      	cbnz	r3, 8006018 <__swsetup_r+0x7c>
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800600a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800600e:	d003      	beq.n	8006018 <__swsetup_r+0x7c>
 8006010:	4621      	mov	r1, r4
 8006012:	4628      	mov	r0, r5
 8006014:	f000 f883 	bl	800611e <__smakebuf_r>
 8006018:	89a0      	ldrh	r0, [r4, #12]
 800601a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800601e:	f010 0301 	ands.w	r3, r0, #1
 8006022:	d00a      	beq.n	800603a <__swsetup_r+0x9e>
 8006024:	2300      	movs	r3, #0
 8006026:	60a3      	str	r3, [r4, #8]
 8006028:	6963      	ldr	r3, [r4, #20]
 800602a:	425b      	negs	r3, r3
 800602c:	61a3      	str	r3, [r4, #24]
 800602e:	6923      	ldr	r3, [r4, #16]
 8006030:	b943      	cbnz	r3, 8006044 <__swsetup_r+0xa8>
 8006032:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006036:	d1c4      	bne.n	8005fc2 <__swsetup_r+0x26>
 8006038:	bd38      	pop	{r3, r4, r5, pc}
 800603a:	0781      	lsls	r1, r0, #30
 800603c:	bf58      	it	pl
 800603e:	6963      	ldrpl	r3, [r4, #20]
 8006040:	60a3      	str	r3, [r4, #8]
 8006042:	e7f4      	b.n	800602e <__swsetup_r+0x92>
 8006044:	2000      	movs	r0, #0
 8006046:	e7f7      	b.n	8006038 <__swsetup_r+0x9c>
 8006048:	20000068 	.word	0x20000068

0800604c <_raise_r>:
 800604c:	291f      	cmp	r1, #31
 800604e:	b538      	push	{r3, r4, r5, lr}
 8006050:	4604      	mov	r4, r0
 8006052:	460d      	mov	r5, r1
 8006054:	d904      	bls.n	8006060 <_raise_r+0x14>
 8006056:	2316      	movs	r3, #22
 8006058:	6003      	str	r3, [r0, #0]
 800605a:	f04f 30ff 	mov.w	r0, #4294967295
 800605e:	bd38      	pop	{r3, r4, r5, pc}
 8006060:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006062:	b112      	cbz	r2, 800606a <_raise_r+0x1e>
 8006064:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006068:	b94b      	cbnz	r3, 800607e <_raise_r+0x32>
 800606a:	4620      	mov	r0, r4
 800606c:	f000 f830 	bl	80060d0 <_getpid_r>
 8006070:	462a      	mov	r2, r5
 8006072:	4601      	mov	r1, r0
 8006074:	4620      	mov	r0, r4
 8006076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800607a:	f000 b817 	b.w	80060ac <_kill_r>
 800607e:	2b01      	cmp	r3, #1
 8006080:	d00a      	beq.n	8006098 <_raise_r+0x4c>
 8006082:	1c59      	adds	r1, r3, #1
 8006084:	d103      	bne.n	800608e <_raise_r+0x42>
 8006086:	2316      	movs	r3, #22
 8006088:	6003      	str	r3, [r0, #0]
 800608a:	2001      	movs	r0, #1
 800608c:	e7e7      	b.n	800605e <_raise_r+0x12>
 800608e:	2400      	movs	r4, #0
 8006090:	4628      	mov	r0, r5
 8006092:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006096:	4798      	blx	r3
 8006098:	2000      	movs	r0, #0
 800609a:	e7e0      	b.n	800605e <_raise_r+0x12>

0800609c <raise>:
 800609c:	4b02      	ldr	r3, [pc, #8]	; (80060a8 <raise+0xc>)
 800609e:	4601      	mov	r1, r0
 80060a0:	6818      	ldr	r0, [r3, #0]
 80060a2:	f7ff bfd3 	b.w	800604c <_raise_r>
 80060a6:	bf00      	nop
 80060a8:	20000068 	.word	0x20000068

080060ac <_kill_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	2300      	movs	r3, #0
 80060b0:	4d06      	ldr	r5, [pc, #24]	; (80060cc <_kill_r+0x20>)
 80060b2:	4604      	mov	r4, r0
 80060b4:	4608      	mov	r0, r1
 80060b6:	4611      	mov	r1, r2
 80060b8:	602b      	str	r3, [r5, #0]
 80060ba:	f7fb fc1b 	bl	80018f4 <_kill>
 80060be:	1c43      	adds	r3, r0, #1
 80060c0:	d102      	bne.n	80060c8 <_kill_r+0x1c>
 80060c2:	682b      	ldr	r3, [r5, #0]
 80060c4:	b103      	cbz	r3, 80060c8 <_kill_r+0x1c>
 80060c6:	6023      	str	r3, [r4, #0]
 80060c8:	bd38      	pop	{r3, r4, r5, pc}
 80060ca:	bf00      	nop
 80060cc:	200003dc 	.word	0x200003dc

080060d0 <_getpid_r>:
 80060d0:	f7fb bc09 	b.w	80018e6 <_getpid>

080060d4 <__swhatbuf_r>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	460c      	mov	r4, r1
 80060d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060dc:	4615      	mov	r5, r2
 80060de:	2900      	cmp	r1, #0
 80060e0:	461e      	mov	r6, r3
 80060e2:	b096      	sub	sp, #88	; 0x58
 80060e4:	da0c      	bge.n	8006100 <__swhatbuf_r+0x2c>
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	2100      	movs	r1, #0
 80060ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80060ee:	bf0c      	ite	eq
 80060f0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80060f4:	2340      	movne	r3, #64	; 0x40
 80060f6:	2000      	movs	r0, #0
 80060f8:	6031      	str	r1, [r6, #0]
 80060fa:	602b      	str	r3, [r5, #0]
 80060fc:	b016      	add	sp, #88	; 0x58
 80060fe:	bd70      	pop	{r4, r5, r6, pc}
 8006100:	466a      	mov	r2, sp
 8006102:	f000 f849 	bl	8006198 <_fstat_r>
 8006106:	2800      	cmp	r0, #0
 8006108:	dbed      	blt.n	80060e6 <__swhatbuf_r+0x12>
 800610a:	9901      	ldr	r1, [sp, #4]
 800610c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006110:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006114:	4259      	negs	r1, r3
 8006116:	4159      	adcs	r1, r3
 8006118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800611c:	e7eb      	b.n	80060f6 <__swhatbuf_r+0x22>

0800611e <__smakebuf_r>:
 800611e:	898b      	ldrh	r3, [r1, #12]
 8006120:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006122:	079d      	lsls	r5, r3, #30
 8006124:	4606      	mov	r6, r0
 8006126:	460c      	mov	r4, r1
 8006128:	d507      	bpl.n	800613a <__smakebuf_r+0x1c>
 800612a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800612e:	6023      	str	r3, [r4, #0]
 8006130:	6123      	str	r3, [r4, #16]
 8006132:	2301      	movs	r3, #1
 8006134:	6163      	str	r3, [r4, #20]
 8006136:	b002      	add	sp, #8
 8006138:	bd70      	pop	{r4, r5, r6, pc}
 800613a:	466a      	mov	r2, sp
 800613c:	ab01      	add	r3, sp, #4
 800613e:	f7ff ffc9 	bl	80060d4 <__swhatbuf_r>
 8006142:	9900      	ldr	r1, [sp, #0]
 8006144:	4605      	mov	r5, r0
 8006146:	4630      	mov	r0, r6
 8006148:	f7fe feca 	bl	8004ee0 <_malloc_r>
 800614c:	b948      	cbnz	r0, 8006162 <__smakebuf_r+0x44>
 800614e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006152:	059a      	lsls	r2, r3, #22
 8006154:	d4ef      	bmi.n	8006136 <__smakebuf_r+0x18>
 8006156:	f023 0303 	bic.w	r3, r3, #3
 800615a:	f043 0302 	orr.w	r3, r3, #2
 800615e:	81a3      	strh	r3, [r4, #12]
 8006160:	e7e3      	b.n	800612a <__smakebuf_r+0xc>
 8006162:	89a3      	ldrh	r3, [r4, #12]
 8006164:	6020      	str	r0, [r4, #0]
 8006166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616a:	81a3      	strh	r3, [r4, #12]
 800616c:	9b00      	ldr	r3, [sp, #0]
 800616e:	6120      	str	r0, [r4, #16]
 8006170:	6163      	str	r3, [r4, #20]
 8006172:	9b01      	ldr	r3, [sp, #4]
 8006174:	b15b      	cbz	r3, 800618e <__smakebuf_r+0x70>
 8006176:	4630      	mov	r0, r6
 8006178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800617c:	f000 f81e 	bl	80061bc <_isatty_r>
 8006180:	b128      	cbz	r0, 800618e <__smakebuf_r+0x70>
 8006182:	89a3      	ldrh	r3, [r4, #12]
 8006184:	f023 0303 	bic.w	r3, r3, #3
 8006188:	f043 0301 	orr.w	r3, r3, #1
 800618c:	81a3      	strh	r3, [r4, #12]
 800618e:	89a3      	ldrh	r3, [r4, #12]
 8006190:	431d      	orrs	r5, r3
 8006192:	81a5      	strh	r5, [r4, #12]
 8006194:	e7cf      	b.n	8006136 <__smakebuf_r+0x18>
	...

08006198 <_fstat_r>:
 8006198:	b538      	push	{r3, r4, r5, lr}
 800619a:	2300      	movs	r3, #0
 800619c:	4d06      	ldr	r5, [pc, #24]	; (80061b8 <_fstat_r+0x20>)
 800619e:	4604      	mov	r4, r0
 80061a0:	4608      	mov	r0, r1
 80061a2:	4611      	mov	r1, r2
 80061a4:	602b      	str	r3, [r5, #0]
 80061a6:	f7fb fc03 	bl	80019b0 <_fstat>
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	d102      	bne.n	80061b4 <_fstat_r+0x1c>
 80061ae:	682b      	ldr	r3, [r5, #0]
 80061b0:	b103      	cbz	r3, 80061b4 <_fstat_r+0x1c>
 80061b2:	6023      	str	r3, [r4, #0]
 80061b4:	bd38      	pop	{r3, r4, r5, pc}
 80061b6:	bf00      	nop
 80061b8:	200003dc 	.word	0x200003dc

080061bc <_isatty_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	2300      	movs	r3, #0
 80061c0:	4d05      	ldr	r5, [pc, #20]	; (80061d8 <_isatty_r+0x1c>)
 80061c2:	4604      	mov	r4, r0
 80061c4:	4608      	mov	r0, r1
 80061c6:	602b      	str	r3, [r5, #0]
 80061c8:	f7fb fc01 	bl	80019ce <_isatty>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d102      	bne.n	80061d6 <_isatty_r+0x1a>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	b103      	cbz	r3, 80061d6 <_isatty_r+0x1a>
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	200003dc 	.word	0x200003dc

080061dc <_init>:
 80061dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061de:	bf00      	nop
 80061e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e2:	bc08      	pop	{r3}
 80061e4:	469e      	mov	lr, r3
 80061e6:	4770      	bx	lr

080061e8 <_fini>:
 80061e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ea:	bf00      	nop
 80061ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ee:	bc08      	pop	{r3}
 80061f0:	469e      	mov	lr, r3
 80061f2:	4770      	bx	lr
