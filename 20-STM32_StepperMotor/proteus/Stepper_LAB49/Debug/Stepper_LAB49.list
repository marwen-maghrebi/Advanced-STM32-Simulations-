
Stepper_LAB49.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f0  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004980  08004980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049dc  080049dc  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  080049dc  080049dc  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049dc  080049dc  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049dc  080049dc  000149dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  080049e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000004c  08004a30  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08004a30  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea5e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dca  00000000  00000000  0002eada  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e28  00000000  00000000  000308a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d18  00000000  00000000  000316d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000215d9  00000000  00000000  000323e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb1e  00000000  00000000  000539c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d145a  00000000  00000000  000604df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00131939  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bac  00000000  00000000  001319b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000004c 	.word	0x2000004c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004968 	.word	0x08004968

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000050 	.word	0x20000050
 80001cc:	08004968 	.word	0x08004968

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b6:	2003      	movs	r0, #3
 80009b8:	f001 f900 	bl	8001bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 f80d 	bl	80009dc <HAL_InitTick>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	e001      	b.n	80009d2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ce:	f003 fe4f 	bl	8004670 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009d2:	79fb      	ldrb	r3, [r7, #7]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <HAL_InitTick+0x68>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d022      	beq.n	8000a36 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_InitTick+0x6c>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <HAL_InitTick+0x68>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 f90e 	bl	8001c26 <HAL_SYSTICK_Config>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d10f      	bne.n	8000a30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b0f      	cmp	r3, #15
 8000a14:	d809      	bhi.n	8000a2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a16:	2200      	movs	r2, #0
 8000a18:	6879      	ldr	r1, [r7, #4]
 8000a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1e:	f001 f8d8 	bl	8001bd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_InitTick+0x70>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	e007      	b.n	8000a3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	73fb      	strb	r3, [r7, #15]
 8000a2e:	e004      	b.n	8000a3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	73fb      	strb	r3, [r7, #15]
 8000a34:	e001      	b.n	8000a3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000004 	.word	0x20000004
 8000a48:	20000048 	.word	0x20000048
 8000a4c:	20000000 	.word	0x20000000

08000a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_IncTick+0x1c>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_IncTick+0x20>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	4a03      	ldr	r2, [pc, #12]	; (8000a6c <HAL_IncTick+0x1c>)
 8000a60:	6013      	str	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	2000007c 	.word	0x2000007c
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <HAL_GetTick+0x14>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	2000007c 	.word	0x2000007c

08000a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff ffee 	bl	8000a74 <HAL_GetTick>
 8000a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d004      	beq.n	8000ab0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_Delay+0x40>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	4413      	add	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ab0:	bf00      	nop
 8000ab2:	f7ff ffdf 	bl	8000a74 <HAL_GetTick>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d8f7      	bhi.n	8000ab2 <HAL_Delay+0x26>
  {
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000004 	.word	0x20000004

08000ad0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
 8000afe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b38:	b490      	push	{r4, r7}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3360      	adds	r3, #96	; 0x60
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000b54:	6822      	ldr	r2, [r4, #0]
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <LL_ADC_SetOffset+0x40>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	430a      	orrs	r2, r1
 8000b64:	4313      	orrs	r3, r2
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc90      	pop	{r4, r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	03fff000 	.word	0x03fff000

08000b7c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000b7c:	b490      	push	{r4, r7}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3360      	adds	r3, #96	; 0x60
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4413      	add	r3, r2
 8000b92:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000b94:	6823      	ldr	r3, [r4, #0]
 8000b96:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc90      	pop	{r4, r7}
 8000ba2:	4770      	bx	lr

08000ba4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ba4:	b490      	push	{r4, r7}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	3360      	adds	r3, #96	; 0x60
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4413      	add	r3, r2
 8000bbc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000bbe:	6823      	ldr	r3, [r4, #0]
 8000bc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc90      	pop	{r4, r7}
 8000bd2:	4770      	bx	lr

08000bd4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d101      	bne.n	8000bec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000be8:	2301      	movs	r3, #1
 8000bea:	e000      	b.n	8000bee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000bfa:	b490      	push	{r4, r7}
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	3330      	adds	r3, #48	; 0x30
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	0a1b      	lsrs	r3, r3, #8
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	f003 030c 	and.w	r3, r3, #12
 8000c16:	4413      	add	r3, r2
 8000c18:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000c1a:	6822      	ldr	r2, [r4, #0]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	f003 031f 	and.w	r3, r3, #31
 8000c22:	211f      	movs	r1, #31
 8000c24:	fa01 f303 	lsl.w	r3, r1, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	0e9b      	lsrs	r3, r3, #26
 8000c30:	f003 011f 	and.w	r1, r3, #31
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	f003 031f 	and.w	r3, r3, #31
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc90      	pop	{r4, r7}
 8000c4a:	4770      	bx	lr

08000c4c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000c4c:	b490      	push	{r4, r7}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3314      	adds	r3, #20
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	0e5b      	lsrs	r3, r3, #25
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	4413      	add	r3, r2
 8000c6a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000c6c:	6822      	ldr	r2, [r4, #0]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	0d1b      	lsrs	r3, r3, #20
 8000c72:	f003 031f 	and.w	r3, r3, #31
 8000c76:	2107      	movs	r1, #7
 8000c78:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	401a      	ands	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	0d1b      	lsrs	r3, r3, #20
 8000c84:	f003 031f 	and.w	r3, r3, #31
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc90      	pop	{r4, r7}
 8000c9a:	4770      	bx	lr

08000c9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0318 	and.w	r3, r3, #24
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000cc0:	40d9      	lsrs	r1, r3
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	400b      	ands	r3, r1
 8000cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	0007ffff 	.word	0x0007ffff

08000ce4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000cf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	6093      	str	r3, [r2, #8]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d1c:	d101      	bne.n	8000d22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000d40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000d6c:	d101      	bne.n	8000d72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e000      	b.n	8000d74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000d90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d94:	f043 0201 	orr.w	r2, r3, #1
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d101      	bne.n	8000dc0 <LL_ADC_IsEnabled+0x18>
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e000      	b.n	8000dc2 <LL_ADC_IsEnabled+0x1a>
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000dde:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000de2:	f043 0204 	orr.w	r2, r3, #4
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	d101      	bne.n	8000e0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d101      	bne.n	8000e34 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e12a      	b.n	80010b4 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	691b      	ldr	r3, [r3, #16]
 8000e62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d109      	bne.n	8000e80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f003 fc23 	bl	80046b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff3f 	bl	8000d08 <LL_ADC_IsDeepPowerDownEnabled>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff25 	bl	8000ce4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff5a 	bl	8000d58 <LL_ADC_IsInternalRegulatorEnabled>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d113      	bne.n	8000ed2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ff3e 	bl	8000d30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000eb4:	4b81      	ldr	r3, [pc, #516]	; (80010bc <HAL_ADC_Init+0x278>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	099b      	lsrs	r3, r3, #6
 8000eba:	4a81      	ldr	r2, [pc, #516]	; (80010c0 <HAL_ADC_Init+0x27c>)
 8000ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec0:	099b      	lsrs	r3, r3, #6
 8000ec2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000ec4:	e002      	b.n	8000ecc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1f9      	bne.n	8000ec6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff3e 	bl	8000d58 <LL_ADC_IsInternalRegulatorEnabled>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10d      	bne.n	8000efe <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ee6:	f043 0210 	orr.w	r2, r3, #16
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	f043 0201 	orr.w	r2, r3, #1
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff77 	bl	8000df6 <LL_ADC_REG_IsConversionOngoing>
 8000f08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f040 80c5 	bne.w	80010a2 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f040 80c1 	bne.w	80010a2 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f28:	f043 0202 	orr.w	r2, r3, #2
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff37 	bl	8000da8 <LL_ADC_IsEnabled>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d10b      	bne.n	8000f58 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f40:	4860      	ldr	r0, [pc, #384]	; (80010c4 <HAL_ADC_Init+0x280>)
 8000f42:	f7ff ff31 	bl	8000da8 <LL_ADC_IsEnabled>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d105      	bne.n	8000f58 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	4619      	mov	r1, r3
 8000f52:	485d      	ldr	r0, [pc, #372]	; (80010c8 <HAL_ADC_Init+0x284>)
 8000f54:	f7ff fdbc 	bl	8000ad0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7e5b      	ldrb	r3, [r3, #25]
 8000f5c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f62:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000f68:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000f6e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f76:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d106      	bne.n	8000f94 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	045b      	lsls	r3, r3, #17
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d009      	beq.n	8000fb0 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	4b45      	ldr	r3, [pc, #276]	; (80010cc <HAL_ADC_Init+0x288>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	6812      	ldr	r2, [r2, #0]
 8000fbe:	69b9      	ldr	r1, [r7, #24]
 8000fc0:	430b      	orrs	r3, r1
 8000fc2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff14 	bl	8000df6 <LL_ADC_REG_IsConversionOngoing>
 8000fce:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff21 	bl	8000e1c <LL_ADC_INJ_IsConversionOngoing>
 8000fda:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d13d      	bne.n	800105e <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d13a      	bne.n	800105e <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fec:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ff4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001004:	f023 0302 	bic.w	r3, r3, #2
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	69b9      	ldr	r1, [r7, #24]
 800100e:	430b      	orrs	r3, r1
 8001010:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001018:	2b01      	cmp	r3, #1
 800101a:	d118      	bne.n	800104e <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001026:	f023 0304 	bic.w	r3, r3, #4
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001032:	4311      	orrs	r1, r2
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001038:	4311      	orrs	r1, r2
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800103e:	430a      	orrs	r2, r1
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0201 	orr.w	r2, r2, #1
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	e007      	b.n	800105e <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 0201 	bic.w	r2, r2, #1
 800105c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d10c      	bne.n	8001080 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	f023 010f 	bic.w	r1, r3, #15
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	1e5a      	subs	r2, r3, #1
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	430a      	orrs	r2, r1
 800107c:	631a      	str	r2, [r3, #48]	; 0x30
 800107e:	e007      	b.n	8001090 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 020f 	bic.w	r2, r2, #15
 800108e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001094:	f023 0303 	bic.w	r3, r3, #3
 8001098:	f043 0201 	orr.w	r2, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	655a      	str	r2, [r3, #84]	; 0x54
 80010a0:	e007      	b.n	80010b2 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a6:	f043 0210 	orr.w	r2, r3, #16
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80010b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000048 	.word	0x20000048
 80010c0:	053e2d63 	.word	0x053e2d63
 80010c4:	50040000 	.word	0x50040000
 80010c8:	50040300 	.word	0x50040300
 80010cc:	fff0c007 	.word	0xfff0c007

080010d0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fe8a 	bl	8000df6 <LL_ADC_REG_IsConversionOngoing>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d14f      	bne.n	8001188 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d101      	bne.n	80010f6 <HAL_ADC_Start+0x26>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e04b      	b.n	800118e <HAL_ADC_Start+0xbe>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 fc32 	bl	8001968 <ADC_Enable>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d137      	bne.n	800117e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001112:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001116:	f023 0301 	bic.w	r3, r3, #1
 800111a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800112a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800112e:	d106      	bne.n	800113e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001134:	f023 0206 	bic.w	r2, r3, #6
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	659a      	str	r2, [r3, #88]	; 0x58
 800113c:	e002      	b.n	8001144 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	221c      	movs	r2, #28
 800114a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d007      	beq.n	8001172 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001166:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800116a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fe29 	bl	8000dce <LL_ADC_REG_StartConversion>
 800117c:	e006      	b.n	800118c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001186:	e001      	b.n	800118c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001188:	2302      	movs	r3, #2
 800118a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d102      	bne.n	80011ae <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80011a8:	2308      	movs	r3, #8
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	e010      	b.n	80011d0 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d007      	beq.n	80011cc <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c0:	f043 0220 	orr.w	r2, r3, #32
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e068      	b.n	800129e <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80011cc:	2304      	movs	r3, #4
 80011ce:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80011d0:	f7ff fc50 	bl	8000a74 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80011d6:	e01a      	b.n	800120e <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011de:	d016      	beq.n	800120e <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80011e0:	f7ff fc48 	bl	8000a74 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d302      	bcc.n	80011f6 <HAL_ADC_PollForConversion+0x60>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10b      	bne.n	800120e <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fa:	f043 0204 	orr.w	r2, r3, #4
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e047      	b.n	800129e <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	4013      	ands	r3, r2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0dd      	beq.n	80011d8 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001220:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fcd1 	bl	8000bd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d01c      	beq.n	8001272 <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7e5b      	ldrb	r3, [r3, #25]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d118      	bne.n	8001272 <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	2b08      	cmp	r3, #8
 800124c:	d111      	bne.n	8001272 <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001252:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d105      	bne.n	8001272 <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800126a:	f043 0201 	orr.w	r2, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2b08      	cmp	r3, #8
 800127e:	d104      	bne.n	800128a <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2208      	movs	r2, #8
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	e008      	b.n	800129c <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d103      	bne.n	800129c <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	220c      	movs	r2, #12
 800129a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0a6      	sub	sp, #152	; 0x98
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x22>
 80012de:	2302      	movs	r3, #2
 80012e0:	e338      	b.n	8001954 <HAL_ADC_ConfigChannel+0x694>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fd81 	bl	8000df6 <LL_ADC_REG_IsConversionOngoing>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 831d 	bne.w	8001936 <HAL_ADC_ConfigChannel+0x676>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b05      	cmp	r3, #5
 8001302:	d824      	bhi.n	800134e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	3b02      	subs	r3, #2
 800130a:	2b03      	cmp	r3, #3
 800130c:	d81b      	bhi.n	8001346 <HAL_ADC_ConfigChannel+0x86>
 800130e:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <HAL_ADC_ConfigChannel+0x54>)
 8001310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001314:	08001325 	.word	0x08001325
 8001318:	0800132d 	.word	0x0800132d
 800131c:	08001335 	.word	0x08001335
 8001320:	0800133d 	.word	0x0800133d
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	220c      	movs	r2, #12
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	e011      	b.n	8001350 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	2212      	movs	r2, #18
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	e00d      	b.n	8001350 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	2218      	movs	r2, #24
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	e009      	b.n	8001350 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	e004      	b.n	8001350 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	2206      	movs	r2, #6
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	e000      	b.n	8001350 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800134e:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	6859      	ldr	r1, [r3, #4]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	f7ff fc4c 	bl	8000bfa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fd45 	bl	8000df6 <LL_ADC_REG_IsConversionOngoing>
 800136c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fd51 	bl	8000e1c <LL_ADC_INJ_IsConversionOngoing>
 800137a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800137e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001382:	2b00      	cmp	r3, #0
 8001384:	f040 8148 	bne.w	8001618 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800138c:	2b00      	cmp	r3, #0
 800138e:	f040 8143 	bne.w	8001618 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	6819      	ldr	r1, [r3, #0]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	461a      	mov	r2, r3
 80013a0:	f7ff fc54 	bl	8000c4c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	695a      	ldr	r2, [r3, #20]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	08db      	lsrs	r3, r3, #3
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d00a      	beq.n	80013dc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	6919      	ldr	r1, [r3, #16]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013d6:	f7ff fbaf 	bl	8000b38 <LL_ADC_SetOffset>
 80013da:	e11d      	b.n	8001618 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fbca 	bl	8000b7c <LL_ADC_GetOffsetChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10a      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x148>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fbbf 	bl	8000b7c <LL_ADC_GetOffsetChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	0e9b      	lsrs	r3, r3, #26
 8001402:	f003 021f 	and.w	r2, r3, #31
 8001406:	e012      	b.n	800142e <HAL_ADC_ConfigChannel+0x16e>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fbb4 	bl	8000b7c <LL_ADC_GetOffsetChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800141e:	fa93 f3a3 	rbit	r3, r3
 8001422:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001424:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001426:	fab3 f383 	clz	r3, r3
 800142a:	b2db      	uxtb	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001436:	2b00      	cmp	r3, #0
 8001438:	d105      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x186>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	0e9b      	lsrs	r3, r3, #26
 8001440:	f003 031f 	and.w	r3, r3, #31
 8001444:	e00a      	b.n	800145c <HAL_ADC_ConfigChannel+0x19c>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800144e:	fa93 f3a3 	rbit	r3, r3
 8001452:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001456:	fab3 f383 	clz	r3, r3
 800145a:	b2db      	uxtb	r3, r3
 800145c:	429a      	cmp	r2, r3
 800145e:	d106      	bne.n	800146e <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2200      	movs	r2, #0
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fb9b 	bl	8000ba4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2101      	movs	r1, #1
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fb81 	bl	8000b7c <LL_ADC_GetOffsetChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10a      	bne.n	800149a <HAL_ADC_ConfigChannel+0x1da>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2101      	movs	r1, #1
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fb76 	bl	8000b7c <LL_ADC_GetOffsetChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	0e9b      	lsrs	r3, r3, #26
 8001494:	f003 021f 	and.w	r2, r3, #31
 8001498:	e010      	b.n	80014bc <HAL_ADC_ConfigChannel+0x1fc>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2101      	movs	r1, #1
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fb6b 	bl	8000b7c <LL_ADC_GetOffsetChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014ac:	fa93 f3a3 	rbit	r3, r3
 80014b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80014b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014b4:	fab3 f383 	clz	r3, r3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d105      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x214>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	0e9b      	lsrs	r3, r3, #26
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	e00a      	b.n	80014ea <HAL_ADC_ConfigChannel+0x22a>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014dc:	fa93 f3a3 	rbit	r3, r3
 80014e0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80014e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d106      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2200      	movs	r2, #0
 80014f4:	2101      	movs	r1, #1
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fb54 	bl	8000ba4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2102      	movs	r1, #2
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fb3a 	bl	8000b7c <LL_ADC_GetOffsetChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10a      	bne.n	8001528 <HAL_ADC_ConfigChannel+0x268>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2102      	movs	r1, #2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fb2f 	bl	8000b7c <LL_ADC_GetOffsetChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	0e9b      	lsrs	r3, r3, #26
 8001522:	f003 021f 	and.w	r2, r3, #31
 8001526:	e010      	b.n	800154a <HAL_ADC_ConfigChannel+0x28a>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2102      	movs	r1, #2
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fb24 	bl	8000b7c <LL_ADC_GetOffsetChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001538:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800153a:	fa93 f3a3 	rbit	r3, r3
 800153e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001542:	fab3 f383 	clz	r3, r3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001552:	2b00      	cmp	r3, #0
 8001554:	d105      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x2a2>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	0e9b      	lsrs	r3, r3, #26
 800155c:	f003 031f 	and.w	r3, r3, #31
 8001560:	e00a      	b.n	8001578 <HAL_ADC_ConfigChannel+0x2b8>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001568:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800156a:	fa93 f3a3 	rbit	r3, r3
 800156e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001572:	fab3 f383 	clz	r3, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	429a      	cmp	r2, r3
 800157a:	d106      	bne.n	800158a <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2200      	movs	r2, #0
 8001582:	2102      	movs	r1, #2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fb0d 	bl	8000ba4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2103      	movs	r1, #3
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff faf3 	bl	8000b7c <LL_ADC_GetOffsetChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10a      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x2f6>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2103      	movs	r1, #3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fae8 	bl	8000b7c <LL_ADC_GetOffsetChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	0e9b      	lsrs	r3, r3, #26
 80015b0:	f003 021f 	and.w	r2, r3, #31
 80015b4:	e010      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x318>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2103      	movs	r1, #3
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fadd 	bl	8000b7c <LL_ADC_GetOffsetChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015c8:	fa93 f3a3 	rbit	r3, r3
 80015cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80015ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015d0:	fab3 f383 	clz	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	461a      	mov	r2, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d105      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x330>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	0e9b      	lsrs	r3, r3, #26
 80015ea:	f003 031f 	and.w	r3, r3, #31
 80015ee:	e00a      	b.n	8001606 <HAL_ADC_ConfigChannel+0x346>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015f8:	fa93 f3a3 	rbit	r3, r3
 80015fc:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80015fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001600:	fab3 f383 	clz	r3, r3
 8001604:	b2db      	uxtb	r3, r3
 8001606:	429a      	cmp	r2, r3
 8001608:	d106      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2200      	movs	r2, #0
 8001610:	2103      	movs	r1, #3
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fac6 	bl	8000ba4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fbc3 	bl	8000da8 <LL_ADC_IsEnabled>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	f040 810c 	bne.w	8001842 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	6819      	ldr	r1, [r3, #0]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	461a      	mov	r2, r3
 8001638:	f7ff fb30 	bl	8000c9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4aa8      	ldr	r2, [pc, #672]	; (80018e4 <HAL_ADC_ConfigChannel+0x624>)
 8001642:	4293      	cmp	r3, r2
 8001644:	f040 80fd 	bne.w	8001842 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10b      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x3b0>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	0e9b      	lsrs	r3, r3, #26
 800165e:	3301      	adds	r3, #1
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	2b09      	cmp	r3, #9
 8001666:	bf94      	ite	ls
 8001668:	2301      	movls	r3, #1
 800166a:	2300      	movhi	r3, #0
 800166c:	b2db      	uxtb	r3, r3
 800166e:	e012      	b.n	8001696 <HAL_ADC_ConfigChannel+0x3d6>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001678:	fa93 f3a3 	rbit	r3, r3
 800167c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800167e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001680:	fab3 f383 	clz	r3, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	3301      	adds	r3, #1
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	2b09      	cmp	r3, #9
 800168e:	bf94      	ite	ls
 8001690:	2301      	movls	r3, #1
 8001692:	2300      	movhi	r3, #0
 8001694:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001696:	2b00      	cmp	r3, #0
 8001698:	d064      	beq.n	8001764 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d107      	bne.n	80016b6 <HAL_ADC_ConfigChannel+0x3f6>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	0e9b      	lsrs	r3, r3, #26
 80016ac:	3301      	adds	r3, #1
 80016ae:	069b      	lsls	r3, r3, #26
 80016b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016b4:	e00e      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x414>
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016be:	fa93 f3a3 	rbit	r3, r3
 80016c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80016c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c6:	fab3 f383 	clz	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	3301      	adds	r3, #1
 80016ce:	069b      	lsls	r3, r3, #26
 80016d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d109      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x434>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0e9b      	lsrs	r3, r3, #26
 80016e6:	3301      	adds	r3, #1
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	2101      	movs	r1, #1
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	e010      	b.n	8001716 <HAL_ADC_ConfigChannel+0x456>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016fc:	fa93 f3a3 	rbit	r3, r3
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	fab3 f383 	clz	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	3301      	adds	r3, #1
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	2101      	movs	r1, #1
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	ea42 0103 	orr.w	r1, r2, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10a      	bne.n	800173c <HAL_ADC_ConfigChannel+0x47c>
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	0e9b      	lsrs	r3, r3, #26
 800172c:	3301      	adds	r3, #1
 800172e:	f003 021f 	and.w	r2, r3, #31
 8001732:	4613      	mov	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	051b      	lsls	r3, r3, #20
 800173a:	e011      	b.n	8001760 <HAL_ADC_ConfigChannel+0x4a0>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001744:	fa93 f3a3 	rbit	r3, r3
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	3301      	adds	r3, #1
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001760:	430b      	orrs	r3, r1
 8001762:	e069      	b.n	8001838 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800176c:	2b00      	cmp	r3, #0
 800176e:	d107      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x4c0>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	0e9b      	lsrs	r3, r3, #26
 8001776:	3301      	adds	r3, #1
 8001778:	069b      	lsls	r3, r3, #26
 800177a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800177e:	e00e      	b.n	800179e <HAL_ADC_ConfigChannel+0x4de>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	fa93 f3a3 	rbit	r3, r3
 800178c:	61fb      	str	r3, [r7, #28]
  return result;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	3301      	adds	r3, #1
 8001798:	069b      	lsls	r3, r3, #26
 800179a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_ADC_ConfigChannel+0x4fe>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	0e9b      	lsrs	r3, r3, #26
 80017b0:	3301      	adds	r3, #1
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	2101      	movs	r1, #1
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	e010      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x520>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	617b      	str	r3, [r7, #20]
  return result;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fab3 f383 	clz	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	3301      	adds	r3, #1
 80017d6:	f003 031f 	and.w	r3, r3, #31
 80017da:	2101      	movs	r1, #1
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	ea42 0103 	orr.w	r1, r2, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10d      	bne.n	800180c <HAL_ADC_ConfigChannel+0x54c>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	0e9b      	lsrs	r3, r3, #26
 80017f6:	3301      	adds	r3, #1
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	3b1e      	subs	r3, #30
 8001804:	051b      	lsls	r3, r3, #20
 8001806:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800180a:	e014      	b.n	8001836 <HAL_ADC_ConfigChannel+0x576>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	fa93 f3a3 	rbit	r3, r3
 8001818:	60fb      	str	r3, [r7, #12]
  return result;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	fab3 f383 	clz	r3, r3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	3301      	adds	r3, #1
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	3b1e      	subs	r3, #30
 8001830:	051b      	lsls	r3, r3, #20
 8001832:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001836:	430b      	orrs	r3, r1
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	6892      	ldr	r2, [r2, #8]
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff fa05 	bl	8000c4c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <HAL_ADC_ConfigChannel+0x628>)
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d07c      	beq.n	8001948 <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800184e:	4827      	ldr	r0, [pc, #156]	; (80018ec <HAL_ADC_ConfigChannel+0x62c>)
 8001850:	f7ff f964 	bl	8000b1c <LL_ADC_GetCommonPathInternalCh>
 8001854:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <HAL_ADC_ConfigChannel+0x630>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d126      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x5f0>
 8001862:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d120      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x5f0>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a20      	ldr	r2, [pc, #128]	; (80018f4 <HAL_ADC_ConfigChannel+0x634>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d167      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001878:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800187c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001880:	4619      	mov	r1, r3
 8001882:	481a      	ldr	r0, [pc, #104]	; (80018ec <HAL_ADC_ConfigChannel+0x62c>)
 8001884:	f7ff f937 	bl	8000af6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_ADC_ConfigChannel+0x638>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	099b      	lsrs	r3, r3, #6
 800188e:	4a1b      	ldr	r2, [pc, #108]	; (80018fc <HAL_ADC_ConfigChannel+0x63c>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	099a      	lsrs	r2, r3, #6
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80018a0:	e002      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x5e8>
          {
            wait_loop_index--;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f9      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x5e2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80018ae:	e04b      	b.n	8001948 <HAL_ADC_ConfigChannel+0x688>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a12      	ldr	r2, [pc, #72]	; (8001900 <HAL_ADC_ConfigChannel+0x640>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d124      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x644>
 80018ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d11e      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x644>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <HAL_ADC_ConfigChannel+0x634>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d13b      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d8:	4619      	mov	r1, r3
 80018da:	4804      	ldr	r0, [pc, #16]	; (80018ec <HAL_ADC_ConfigChannel+0x62c>)
 80018dc:	f7ff f90b 	bl	8000af6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80018e0:	e032      	b.n	8001948 <HAL_ADC_ConfigChannel+0x688>
 80018e2:	bf00      	nop
 80018e4:	407f0000 	.word	0x407f0000
 80018e8:	80080000 	.word	0x80080000
 80018ec:	50040300 	.word	0x50040300
 80018f0:	c7520000 	.word	0xc7520000
 80018f4:	50040000 	.word	0x50040000
 80018f8:	20000048 	.word	0x20000048
 80018fc:	053e2d63 	.word	0x053e2d63
 8001900:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <HAL_ADC_ConfigChannel+0x69c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d11c      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x688>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800190e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d116      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a10      	ldr	r2, [pc, #64]	; (8001960 <HAL_ADC_ConfigChannel+0x6a0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d111      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001924:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001928:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800192c:	4619      	mov	r1, r3
 800192e:	480d      	ldr	r0, [pc, #52]	; (8001964 <HAL_ADC_ConfigChannel+0x6a4>)
 8001930:	f7ff f8e1 	bl	8000af6 <LL_ADC_SetCommonPathInternalCh>
 8001934:	e008      	b.n	8001948 <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	f043 0220 	orr.w	r2, r3, #32
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001950:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001954:	4618      	mov	r0, r3
 8001956:	3798      	adds	r7, #152	; 0x98
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	80000001 	.word	0x80000001
 8001960:	50040000 	.word	0x50040000
 8001964:	50040300 	.word	0x50040300

08001968 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fa17 	bl	8000da8 <LL_ADC_IsEnabled>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d146      	bne.n	8001a0e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <ADC_Enable+0xb0>)
 8001988:	4013      	ands	r3, r2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00d      	beq.n	80019aa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001992:	f043 0210 	orr.w	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	f043 0201 	orr.w	r2, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e032      	b.n	8001a10 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f9e6 	bl	8000d80 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80019b4:	f7ff f85e 	bl	8000a74 <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019ba:	e021      	b.n	8001a00 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff f9f1 	bl	8000da8 <LL_ADC_IsEnabled>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d104      	bne.n	80019d6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff f9d5 	bl	8000d80 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019d6:	f7ff f84d 	bl	8000a74 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d90d      	bls.n	8001a00 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e8:	f043 0210 	orr.w	r2, r3, #16
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	f043 0201 	orr.w	r2, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e007      	b.n	8001a10 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d1d6      	bne.n	80019bc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	8000003f 	.word	0x8000003f

08001a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4e:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	60d3      	str	r3, [r2, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <__NVIC_GetPriorityGrouping+0x18>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	f003 0307 	and.w	r3, r3, #7
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	db0b      	blt.n	8001aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	4907      	ldr	r1, [pc, #28]	; (8001ab8 <__NVIC_EnableIRQ+0x38>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000e100 	.word	0xe000e100

08001abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	6039      	str	r1, [r7, #0]
 8001ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	db0a      	blt.n	8001ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	490c      	ldr	r1, [pc, #48]	; (8001b08 <__NVIC_SetPriority+0x4c>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	0112      	lsls	r2, r2, #4
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	440b      	add	r3, r1
 8001ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae4:	e00a      	b.n	8001afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4908      	ldr	r1, [pc, #32]	; (8001b0c <__NVIC_SetPriority+0x50>)
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	3b04      	subs	r3, #4
 8001af4:	0112      	lsls	r2, r2, #4
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	440b      	add	r3, r1
 8001afa:	761a      	strb	r2, [r3, #24]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000e100 	.word	0xe000e100
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f1c3 0307 	rsb	r3, r3, #7
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	bf28      	it	cs
 8001b2e:	2304      	movcs	r3, #4
 8001b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3304      	adds	r3, #4
 8001b36:	2b06      	cmp	r3, #6
 8001b38:	d902      	bls.n	8001b40 <NVIC_EncodePriority+0x30>
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3b03      	subs	r3, #3
 8001b3e:	e000      	b.n	8001b42 <NVIC_EncodePriority+0x32>
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	401a      	ands	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	43d9      	mvns	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	4313      	orrs	r3, r2
         );
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3724      	adds	r7, #36	; 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b88:	d301      	bcc.n	8001b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00f      	b.n	8001bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <SysTick_Config+0x40>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b96:	210f      	movs	r1, #15
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f7ff ff8e 	bl	8001abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba8:	2207      	movs	r2, #7
 8001baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	e000e010 	.word	0xe000e010

08001bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff29 	bl	8001a1c <__NVIC_SetPriorityGrouping>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001be4:	f7ff ff3e 	bl	8001a64 <__NVIC_GetPriorityGrouping>
 8001be8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	6978      	ldr	r0, [r7, #20]
 8001bf0:	f7ff ff8e 	bl	8001b10 <NVIC_EncodePriority>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff5d 	bl	8001abc <__NVIC_SetPriority>
}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff31 	bl	8001a80 <__NVIC_EnableIRQ>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ffa2 	bl	8001b78 <SysTick_Config>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4e:	e148      	b.n	8001ee2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2101      	movs	r1, #1
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 813a 	beq.w	8001edc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d00b      	beq.n	8001c88 <HAL_GPIO_Init+0x48>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d007      	beq.n	8001c88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c7c:	2b11      	cmp	r3, #17
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b12      	cmp	r3, #18
 8001c86:	d130      	bne.n	8001cea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	f003 0201 	and.w	r2, r3, #1
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0xea>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b12      	cmp	r3, #18
 8001d28:	d123      	bne.n	8001d72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	08da      	lsrs	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3208      	adds	r2, #8
 8001d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	220f      	movs	r2, #15
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	08da      	lsrs	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3208      	adds	r2, #8
 8001d6c:	6939      	ldr	r1, [r7, #16]
 8001d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0203 	and.w	r2, r3, #3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8094 	beq.w	8001edc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db4:	4b52      	ldr	r3, [pc, #328]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db8:	4a51      	ldr	r2, [pc, #324]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6613      	str	r3, [r2, #96]	; 0x60
 8001dc0:	4b4f      	ldr	r3, [pc, #316]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dcc:	4a4d      	ldr	r2, [pc, #308]	; (8001f04 <HAL_GPIO_Init+0x2c4>)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	089b      	lsrs	r3, r3, #2
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	220f      	movs	r2, #15
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001df6:	d00d      	beq.n	8001e14 <HAL_GPIO_Init+0x1d4>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a43      	ldr	r2, [pc, #268]	; (8001f08 <HAL_GPIO_Init+0x2c8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d007      	beq.n	8001e10 <HAL_GPIO_Init+0x1d0>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a42      	ldr	r2, [pc, #264]	; (8001f0c <HAL_GPIO_Init+0x2cc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d101      	bne.n	8001e0c <HAL_GPIO_Init+0x1cc>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e004      	b.n	8001e16 <HAL_GPIO_Init+0x1d6>
 8001e0c:	2307      	movs	r3, #7
 8001e0e:	e002      	b.n	8001e16 <HAL_GPIO_Init+0x1d6>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_GPIO_Init+0x1d6>
 8001e14:	2300      	movs	r3, #0
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	f002 0203 	and.w	r2, r2, #3
 8001e1c:	0092      	lsls	r2, r2, #2
 8001e1e:	4093      	lsls	r3, r2
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e26:	4937      	ldr	r1, [pc, #220]	; (8001f04 <HAL_GPIO_Init+0x2c4>)
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	089b      	lsrs	r3, r3, #2
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e34:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e58:	4a2d      	ldr	r2, [pc, #180]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e5e:	4b2c      	ldr	r3, [pc, #176]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e82:	4a23      	ldr	r2, [pc, #140]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e88:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eac:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eb2:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f47f aeaf 	bne.w	8001c50 <HAL_GPIO_Init+0x10>
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	371c      	adds	r7, #28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010000 	.word	0x40010000
 8001f08:	48000400 	.word	0x48000400
 8001f0c:	48000800 	.word	0x48000800
 8001f10:	40010400 	.word	0x40010400

08001f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	887b      	ldrh	r3, [r7, #2]
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	e001      	b.n	8001f36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
 8001f50:	4613      	mov	r3, r2
 8001f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f54:	787b      	ldrb	r3, [r7, #1]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <HAL_PWREx_GetVoltageRange+0x18>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40007000 	.word	0x40007000

08001f90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f9e:	d130      	bne.n	8002002 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa0:	4b23      	ldr	r3, [pc, #140]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fac:	d038      	beq.n	8002020 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fae:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fb6:	4a1e      	ldr	r2, [pc, #120]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fbc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2232      	movs	r2, #50	; 0x32
 8001fc4:	fb02 f303 	mul.w	r3, r2, r3
 8001fc8:	4a1b      	ldr	r2, [pc, #108]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	0c9b      	lsrs	r3, r3, #18
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fd4:	e002      	b.n	8001fdc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fdc:	4b14      	ldr	r3, [pc, #80]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe8:	d102      	bne.n	8001ff0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f2      	bne.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ffc:	d110      	bne.n	8002020 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e00f      	b.n	8002022 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800200a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200e:	d007      	beq.n	8002020 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002018:	4a05      	ldr	r2, [pc, #20]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800201e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40007000 	.word	0x40007000
 8002034:	20000048 	.word	0x20000048
 8002038:	431bde83 	.word	0x431bde83

0800203c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	f000 bc11 	b.w	8002872 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002050:	4ba0      	ldr	r3, [pc, #640]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800205a:	4b9e      	ldr	r3, [pc, #632]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80e4 	beq.w	800223a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <HAL_RCC_OscConfig+0x4c>
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	2b0c      	cmp	r3, #12
 800207c:	f040 808b 	bne.w	8002196 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2b01      	cmp	r3, #1
 8002084:	f040 8087 	bne.w	8002196 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002088:	4b92      	ldr	r3, [pc, #584]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_OscConfig+0x64>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e3e8      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1a      	ldr	r2, [r3, #32]
 80020a4:	4b8b      	ldr	r3, [pc, #556]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d004      	beq.n	80020ba <HAL_RCC_OscConfig+0x7e>
 80020b0:	4b88      	ldr	r3, [pc, #544]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020b8:	e005      	b.n	80020c6 <HAL_RCC_OscConfig+0x8a>
 80020ba:	4b86      	ldr	r3, [pc, #536]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80020bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d223      	bcs.n	8002112 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 fd40 	bl	8002b54 <RCC_SetFlashLatencyFromMSIRange>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e3c9      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020de:	4b7d      	ldr	r3, [pc, #500]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a7c      	ldr	r2, [pc, #496]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	4b7a      	ldr	r3, [pc, #488]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	4977      	ldr	r1, [pc, #476]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020fc:	4b75      	ldr	r3, [pc, #468]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	4972      	ldr	r1, [pc, #456]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
 8002110:	e025      	b.n	800215e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002112:	4b70      	ldr	r3, [pc, #448]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a6f      	ldr	r2, [pc, #444]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 8002118:	f043 0308 	orr.w	r3, r3, #8
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b6d      	ldr	r3, [pc, #436]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	496a      	ldr	r1, [pc, #424]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 800212c:	4313      	orrs	r3, r2
 800212e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002130:	4b68      	ldr	r3, [pc, #416]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	4965      	ldr	r1, [pc, #404]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 8002140:	4313      	orrs	r3, r2
 8002142:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fd00 	bl	8002b54 <RCC_SetFlashLatencyFromMSIRange>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e389      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800215e:	f000 fc6f 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 8002162:	4601      	mov	r1, r0
 8002164:	4b5b      	ldr	r3, [pc, #364]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	4a5a      	ldr	r2, [pc, #360]	; (80022d8 <HAL_RCC_OscConfig+0x29c>)
 8002170:	5cd3      	ldrb	r3, [r2, r3]
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	fa21 f303 	lsr.w	r3, r1, r3
 800217a:	4a58      	ldr	r2, [pc, #352]	; (80022dc <HAL_RCC_OscConfig+0x2a0>)
 800217c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800217e:	4b58      	ldr	r3, [pc, #352]	; (80022e0 <HAL_RCC_OscConfig+0x2a4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fc2a 	bl	80009dc <HAL_InitTick>
 8002188:	4603      	mov	r3, r0
 800218a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d052      	beq.n	8002238 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	e36d      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d032      	beq.n	8002204 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800219e:	4b4d      	ldr	r3, [pc, #308]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a4c      	ldr	r2, [pc, #304]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021aa:	f7fe fc63 	bl	8000a74 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021b2:	f7fe fc5f 	bl	8000a74 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e356      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c4:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d0:	4b40      	ldr	r3, [pc, #256]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a3f      	ldr	r2, [pc, #252]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80021d6:	f043 0308 	orr.w	r3, r3, #8
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b3d      	ldr	r3, [pc, #244]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	493a      	ldr	r1, [pc, #232]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ee:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	4935      	ldr	r1, [pc, #212]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	604b      	str	r3, [r1, #4]
 8002202:	e01a      	b.n	800223a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002204:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a32      	ldr	r2, [pc, #200]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 800220a:	f023 0301 	bic.w	r3, r3, #1
 800220e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002210:	f7fe fc30 	bl	8000a74 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002218:	f7fe fc2c 	bl	8000a74 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e323      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800222a:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x1dc>
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002238:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d073      	beq.n	800232e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2b08      	cmp	r3, #8
 800224a:	d005      	beq.n	8002258 <HAL_RCC_OscConfig+0x21c>
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d10e      	bne.n	8002270 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d10b      	bne.n	8002270 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d063      	beq.n	800232c <HAL_RCC_OscConfig+0x2f0>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d15f      	bne.n	800232c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e300      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002278:	d106      	bne.n	8002288 <HAL_RCC_OscConfig+0x24c>
 800227a:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a15      	ldr	r2, [pc, #84]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e01d      	b.n	80022c4 <HAL_RCC_OscConfig+0x288>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0x270>
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a0f      	ldr	r2, [pc, #60]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 8002298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a0c      	ldr	r2, [pc, #48]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e00b      	b.n	80022c4 <HAL_RCC_OscConfig+0x288>
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80022b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <HAL_RCC_OscConfig+0x298>)
 80022be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01b      	beq.n	8002304 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7fe fbd2 	bl	8000a74 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d2:	e010      	b.n	80022f6 <HAL_RCC_OscConfig+0x2ba>
 80022d4:	40021000 	.word	0x40021000
 80022d8:	0800499c 	.word	0x0800499c
 80022dc:	20000048 	.word	0x20000048
 80022e0:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e4:	f7fe fbc6 	bl	8000a74 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	; 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e2bd      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f6:	4baf      	ldr	r3, [pc, #700]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x2a8>
 8002302:	e014      	b.n	800232e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7fe fbb6 	bl	8000a74 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7fe fbb2 	bl	8000a74 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e2a9      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800231e:	4ba5      	ldr	r3, [pc, #660]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x2d0>
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d060      	beq.n	80023fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	2b04      	cmp	r3, #4
 800233e:	d005      	beq.n	800234c <HAL_RCC_OscConfig+0x310>
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d119      	bne.n	800237a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d116      	bne.n	800237a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800234c:	4b99      	ldr	r3, [pc, #612]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_OscConfig+0x328>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e286      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002364:	4b93      	ldr	r3, [pc, #588]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	061b      	lsls	r3, r3, #24
 8002372:	4990      	ldr	r1, [pc, #576]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002378:	e040      	b.n	80023fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d023      	beq.n	80023ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002382:	4b8c      	ldr	r3, [pc, #560]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a8b      	ldr	r2, [pc, #556]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238e:	f7fe fb71 	bl	8000a74 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002396:	f7fe fb6d 	bl	8000a74 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e264      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a8:	4b82      	ldr	r3, [pc, #520]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b4:	4b7f      	ldr	r3, [pc, #508]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	061b      	lsls	r3, r3, #24
 80023c2:	497c      	ldr	r1, [pc, #496]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
 80023c8:	e018      	b.n	80023fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ca:	4b7a      	ldr	r3, [pc, #488]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a79      	ldr	r2, [pc, #484]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 80023d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d6:	f7fe fb4d 	bl	8000a74 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023de:	f7fe fb49 	bl	8000a74 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e240      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f0:	4b70      	ldr	r3, [pc, #448]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f0      	bne.n	80023de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d03c      	beq.n	8002482 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d01c      	beq.n	800244a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002410:	4b68      	ldr	r3, [pc, #416]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 8002412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002416:	4a67      	ldr	r2, [pc, #412]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002420:	f7fe fb28 	bl	8000a74 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002428:	f7fe fb24 	bl	8000a74 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e21b      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800243a:	4b5e      	ldr	r3, [pc, #376]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 800243c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0ef      	beq.n	8002428 <HAL_RCC_OscConfig+0x3ec>
 8002448:	e01b      	b.n	8002482 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244a:	4b5a      	ldr	r3, [pc, #360]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 800244c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002450:	4a58      	ldr	r2, [pc, #352]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245a:	f7fe fb0b 	bl	8000a74 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002462:	f7fe fb07 	bl	8000a74 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e1fe      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002474:	4b4f      	ldr	r3, [pc, #316]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 8002476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1ef      	bne.n	8002462 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80a6 	beq.w	80025dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002490:	2300      	movs	r3, #0
 8002492:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002494:	4b47      	ldr	r3, [pc, #284]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 8002496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10d      	bne.n	80024bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a0:	4b44      	ldr	r3, [pc, #272]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	4a43      	ldr	r2, [pc, #268]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 80024a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024aa:	6593      	str	r3, [r2, #88]	; 0x58
 80024ac:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b8:	2301      	movs	r3, #1
 80024ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024bc:	4b3e      	ldr	r3, [pc, #248]	; (80025b8 <HAL_RCC_OscConfig+0x57c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d118      	bne.n	80024fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024c8:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <HAL_RCC_OscConfig+0x57c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a3a      	ldr	r2, [pc, #232]	; (80025b8 <HAL_RCC_OscConfig+0x57c>)
 80024ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d4:	f7fe face 	bl	8000a74 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024dc:	f7fe faca 	bl	8000a74 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e1c1      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ee:	4b32      	ldr	r3, [pc, #200]	; (80025b8 <HAL_RCC_OscConfig+0x57c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d108      	bne.n	8002514 <HAL_RCC_OscConfig+0x4d8>
 8002502:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002508:	4a2a      	ldr	r2, [pc, #168]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002512:	e024      	b.n	800255e <HAL_RCC_OscConfig+0x522>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b05      	cmp	r3, #5
 800251a:	d110      	bne.n	800253e <HAL_RCC_OscConfig+0x502>
 800251c:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	4a24      	ldr	r2, [pc, #144]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800252c:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 800252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002532:	4a20      	ldr	r2, [pc, #128]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800253c:	e00f      	b.n	800255e <HAL_RCC_OscConfig+0x522>
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002544:	4a1b      	ldr	r2, [pc, #108]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 8002546:	f023 0301 	bic.w	r3, r3, #1
 800254a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800254e:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002554:	4a17      	ldr	r2, [pc, #92]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 8002556:	f023 0304 	bic.w	r3, r3, #4
 800255a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d016      	beq.n	8002594 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002566:	f7fe fa85 	bl	8000a74 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800256c:	e00a      	b.n	8002584 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7fe fa81 	bl	8000a74 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	; 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e176      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_RCC_OscConfig+0x578>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0ed      	beq.n	800256e <HAL_RCC_OscConfig+0x532>
 8002592:	e01a      	b.n	80025ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7fe fa6e 	bl	8000a74 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800259a:	e00f      	b.n	80025bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259c:	f7fe fa6a 	bl	8000a74 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d906      	bls.n	80025bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e15f      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025bc:	4baa      	ldr	r3, [pc, #680]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1e8      	bne.n	800259c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ca:	7ffb      	ldrb	r3, [r7, #31]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d105      	bne.n	80025dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d0:	4ba5      	ldr	r3, [pc, #660]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 80025d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d4:	4aa4      	ldr	r2, [pc, #656]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 80025d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0320 	and.w	r3, r3, #32
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d03c      	beq.n	8002662 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01c      	beq.n	800262a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025f0:	4b9d      	ldr	r3, [pc, #628]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 80025f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025f6:	4a9c      	ldr	r2, [pc, #624]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7fe fa38 	bl	8000a74 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002608:	f7fe fa34 	bl	8000a74 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e12b      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800261a:	4b93      	ldr	r3, [pc, #588]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 800261c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0ef      	beq.n	8002608 <HAL_RCC_OscConfig+0x5cc>
 8002628:	e01b      	b.n	8002662 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800262a:	4b8f      	ldr	r3, [pc, #572]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 800262c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002630:	4a8d      	ldr	r2, [pc, #564]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 8002632:	f023 0301 	bic.w	r3, r3, #1
 8002636:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7fe fa1b 	bl	8000a74 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002642:	f7fe fa17 	bl	8000a74 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e10e      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002654:	4b84      	ldr	r3, [pc, #528]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 8002656:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ef      	bne.n	8002642 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8102 	beq.w	8002870 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002670:	2b02      	cmp	r3, #2
 8002672:	f040 80c5 	bne.w	8002800 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002676:	4b7c      	ldr	r3, [pc, #496]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f003 0203 	and.w	r2, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	429a      	cmp	r2, r3
 8002688:	d12c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	3b01      	subs	r3, #1
 8002696:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d123      	bne.n	80026e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d11b      	bne.n	80026e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d113      	bne.n	80026e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c6:	085b      	lsrs	r3, r3, #1
 80026c8:	3b01      	subs	r3, #1
 80026ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d109      	bne.n	80026e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	085b      	lsrs	r3, r3, #1
 80026dc:	3b01      	subs	r3, #1
 80026de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d067      	beq.n	80027b4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b0c      	cmp	r3, #12
 80026e8:	d062      	beq.n	80027b0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026ea:	4b5f      	ldr	r3, [pc, #380]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e0bb      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026fa:	4b5b      	ldr	r3, [pc, #364]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a5a      	ldr	r2, [pc, #360]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 8002700:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002704:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002706:	f7fe f9b5 	bl	8000a74 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270e:	f7fe f9b1 	bl	8000a74 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e0a8      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002720:	4b51      	ldr	r3, [pc, #324]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800272c:	4b4e      	ldr	r3, [pc, #312]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	4b4e      	ldr	r3, [pc, #312]	; (800286c <HAL_RCC_OscConfig+0x830>)
 8002732:	4013      	ands	r3, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800273c:	3a01      	subs	r2, #1
 800273e:	0112      	lsls	r2, r2, #4
 8002740:	4311      	orrs	r1, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002746:	0212      	lsls	r2, r2, #8
 8002748:	4311      	orrs	r1, r2
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800274e:	0852      	lsrs	r2, r2, #1
 8002750:	3a01      	subs	r2, #1
 8002752:	0552      	lsls	r2, r2, #21
 8002754:	4311      	orrs	r1, r2
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800275a:	0852      	lsrs	r2, r2, #1
 800275c:	3a01      	subs	r2, #1
 800275e:	0652      	lsls	r2, r2, #25
 8002760:	4311      	orrs	r1, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002766:	06d2      	lsls	r2, r2, #27
 8002768:	430a      	orrs	r2, r1
 800276a:	493f      	ldr	r1, [pc, #252]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 800276c:	4313      	orrs	r3, r2
 800276e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002770:	4b3d      	ldr	r3, [pc, #244]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a3c      	ldr	r2, [pc, #240]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 8002776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800277a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800277c:	4b3a      	ldr	r3, [pc, #232]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4a39      	ldr	r2, [pc, #228]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 8002782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002786:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002788:	f7fe f974 	bl	8000a74 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002790:	f7fe f970 	bl	8000a74 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e067      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a2:	4b31      	ldr	r3, [pc, #196]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027ae:	e05f      	b.n	8002870 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e05e      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b4:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d157      	bne.n	8002870 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027c0:	4b29      	ldr	r3, [pc, #164]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a28      	ldr	r2, [pc, #160]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 80027c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027cc:	4b26      	ldr	r3, [pc, #152]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a25      	ldr	r2, [pc, #148]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 80027d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027d8:	f7fe f94c 	bl	8000a74 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe f948 	bl	8000a74 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e03f      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x7a4>
 80027fe:	e037      	b.n	8002870 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b0c      	cmp	r3, #12
 8002804:	d02d      	beq.n	8002862 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b18      	ldr	r3, [pc, #96]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a17      	ldr	r2, [pc, #92]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 800280c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002810:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d105      	bne.n	800282a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	4a11      	ldr	r2, [pc, #68]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 8002824:	f023 0303 	bic.w	r3, r3, #3
 8002828:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800282a:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 8002830:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002838:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe f91b 	bl	8000a74 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002842:	f7fe f917 	bl	8000a74 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e00e      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002854:	4b04      	ldr	r3, [pc, #16]	; (8002868 <HAL_RCC_OscConfig+0x82c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCC_OscConfig+0x806>
 8002860:	e006      	b.n	8002870 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e005      	b.n	8002872 <HAL_RCC_OscConfig+0x836>
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3720      	adds	r7, #32
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop

0800287c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0c8      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002890:	4b66      	ldr	r3, [pc, #408]	; (8002a2c <HAL_RCC_ClockConfig+0x1b0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d910      	bls.n	80028c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b63      	ldr	r3, [pc, #396]	; (8002a2c <HAL_RCC_ClockConfig+0x1b0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 0207 	bic.w	r2, r3, #7
 80028a6:	4961      	ldr	r1, [pc, #388]	; (8002a2c <HAL_RCC_ClockConfig+0x1b0>)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b5f      	ldr	r3, [pc, #380]	; (8002a2c <HAL_RCC_ClockConfig+0x1b0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0b0      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d04c      	beq.n	8002966 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d4:	4b56      	ldr	r3, [pc, #344]	; (8002a30 <HAL_RCC_ClockConfig+0x1b4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d121      	bne.n	8002924 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e09e      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ec:	4b50      	ldr	r3, [pc, #320]	; (8002a30 <HAL_RCC_ClockConfig+0x1b4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d115      	bne.n	8002924 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e092      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d107      	bne.n	8002914 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002904:	4b4a      	ldr	r3, [pc, #296]	; (8002a30 <HAL_RCC_ClockConfig+0x1b4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d109      	bne.n	8002924 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e086      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002914:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <HAL_RCC_ClockConfig+0x1b4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e07e      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002924:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <HAL_RCC_ClockConfig+0x1b4>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f023 0203 	bic.w	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	493f      	ldr	r1, [pc, #252]	; (8002a30 <HAL_RCC_ClockConfig+0x1b4>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002936:	f7fe f89d 	bl	8000a74 <HAL_GetTick>
 800293a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293c:	e00a      	b.n	8002954 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293e:	f7fe f899 	bl	8000a74 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	; 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e066      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002954:	4b36      	ldr	r3, [pc, #216]	; (8002a30 <HAL_RCC_ClockConfig+0x1b4>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 020c 	and.w	r2, r3, #12
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	429a      	cmp	r2, r3
 8002964:	d1eb      	bne.n	800293e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d008      	beq.n	8002984 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002972:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <HAL_RCC_ClockConfig+0x1b4>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	492c      	ldr	r1, [pc, #176]	; (8002a30 <HAL_RCC_ClockConfig+0x1b4>)
 8002980:	4313      	orrs	r3, r2
 8002982:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002984:	4b29      	ldr	r3, [pc, #164]	; (8002a2c <HAL_RCC_ClockConfig+0x1b0>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d210      	bcs.n	80029b4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <HAL_RCC_ClockConfig+0x1b0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 0207 	bic.w	r2, r3, #7
 800299a:	4924      	ldr	r1, [pc, #144]	; (8002a2c <HAL_RCC_ClockConfig+0x1b0>)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a2:	4b22      	ldr	r3, [pc, #136]	; (8002a2c <HAL_RCC_ClockConfig+0x1b0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e036      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c0:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_RCC_ClockConfig+0x1b4>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4918      	ldr	r1, [pc, #96]	; (8002a30 <HAL_RCC_ClockConfig+0x1b4>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029de:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <HAL_RCC_ClockConfig+0x1b4>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4910      	ldr	r1, [pc, #64]	; (8002a30 <HAL_RCC_ClockConfig+0x1b4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029f2:	f000 f825 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 80029f6:	4601      	mov	r1, r0
 80029f8:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <HAL_RCC_ClockConfig+0x1b4>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	4a0c      	ldr	r2, [pc, #48]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 8002a04:	5cd3      	ldrb	r3, [r2, r3]
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	fa21 f303 	lsr.w	r3, r1, r3
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a12:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fd ffe0 	bl	80009dc <HAL_InitTick>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a20:	7afb      	ldrb	r3, [r7, #11]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40022000 	.word	0x40022000
 8002a30:	40021000 	.word	0x40021000
 8002a34:	0800499c 	.word	0x0800499c
 8002a38:	20000048 	.word	0x20000048
 8002a3c:	20000000 	.word	0x20000000

08002a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b089      	sub	sp, #36	; 0x24
 8002a44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a4e:	4b3d      	ldr	r3, [pc, #244]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a58:	4b3a      	ldr	r3, [pc, #232]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x34>
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2b0c      	cmp	r3, #12
 8002a6c:	d121      	bne.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d11e      	bne.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a74:	4b33      	ldr	r3, [pc, #204]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d107      	bne.n	8002a90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a80:	4b30      	ldr	r3, [pc, #192]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	e005      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a90:	4b2c      	ldr	r3, [pc, #176]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a9c:	4a2a      	ldr	r2, [pc, #168]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10d      	bne.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d102      	bne.n	8002abe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ab8:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	e004      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ac4:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ac6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2b0c      	cmp	r3, #12
 8002acc:	d133      	bne.n	8002b36 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ace:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d002      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0xa4>
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d003      	beq.n	8002aea <HAL_RCC_GetSysClockFreq+0xaa>
 8002ae2:	e005      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ae6:	617b      	str	r3, [r7, #20]
      break;
 8002ae8:	e005      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002aea:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002aec:	617b      	str	r3, [r7, #20]
      break;
 8002aee:	e002      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	617b      	str	r3, [r7, #20]
      break;
 8002af4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002af6:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x104>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	3301      	adds	r3, #1
 8002b02:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b04:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	fb02 f203 	mul.w	r2, r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	0e5b      	lsrs	r3, r3, #25
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	3301      	adds	r3, #1
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b34:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b36:	69bb      	ldr	r3, [r7, #24]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3724      	adds	r7, #36	; 0x24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	40021000 	.word	0x40021000
 8002b48:	080049ac 	.word	0x080049ac
 8002b4c:	00f42400 	.word	0x00f42400
 8002b50:	007a1200 	.word	0x007a1200

08002b54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b60:	4b2a      	ldr	r3, [pc, #168]	; (8002c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b6c:	f7ff fa02 	bl	8001f74 <HAL_PWREx_GetVoltageRange>
 8002b70:	6178      	str	r0, [r7, #20]
 8002b72:	e014      	b.n	8002b9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b74:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	4a24      	ldr	r2, [pc, #144]	; (8002c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b80:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b8c:	f7ff f9f2 	bl	8001f74 <HAL_PWREx_GetVoltageRange>
 8002b90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b92:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	4a1d      	ldr	r2, [pc, #116]	; (8002c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba4:	d10b      	bne.n	8002bbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b80      	cmp	r3, #128	; 0x80
 8002baa:	d919      	bls.n	8002be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2ba0      	cmp	r3, #160	; 0xa0
 8002bb0:	d902      	bls.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	e013      	b.n	8002be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bb8:	2301      	movs	r3, #1
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	e010      	b.n	8002be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b80      	cmp	r3, #128	; 0x80
 8002bc2:	d902      	bls.n	8002bca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	e00a      	b.n	8002be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b80      	cmp	r3, #128	; 0x80
 8002bce:	d102      	bne.n	8002bd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	e004      	b.n	8002be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b70      	cmp	r3, #112	; 0x70
 8002bda:	d101      	bne.n	8002be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bdc:	2301      	movs	r3, #1
 8002bde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f023 0207 	bic.w	r2, r3, #7
 8002be8:	4909      	ldr	r1, [pc, #36]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bf0:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d001      	beq.n	8002c02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40022000 	.word	0x40022000

08002c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c20:	2300      	movs	r3, #0
 8002c22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d02f      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c38:	d005      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002c3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c3e:	d015      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d007      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002c44:	e00f      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002c46:	4bac      	ldr	r3, [pc, #688]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	4aab      	ldr	r2, [pc, #684]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c52:	e00c      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3304      	adds	r3, #4
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 f9cc 	bl	8002ff8 <RCCEx_PLLSAI1_Config>
 8002c60:	4603      	mov	r3, r0
 8002c62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c64:	e003      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	74fb      	strb	r3, [r7, #19]
      break;
 8002c6a:	e000      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c6e:	7cfb      	ldrb	r3, [r7, #19]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10b      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c74:	4ba0      	ldr	r3, [pc, #640]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c82:	499d      	ldr	r1, [pc, #628]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c8a:	e001      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 8099 	beq.w	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ca2:	4b95      	ldr	r3, [pc, #596]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb8:	4b8f      	ldr	r3, [pc, #572]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	4a8e      	ldr	r2, [pc, #568]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc4:	4b8c      	ldr	r3, [pc, #560]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cd4:	4b89      	ldr	r3, [pc, #548]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a88      	ldr	r2, [pc, #544]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ce0:	f7fd fec8 	bl	8000a74 <HAL_GetTick>
 8002ce4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ce6:	e009      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce8:	f7fd fec4 	bl	8000a74 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d902      	bls.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	74fb      	strb	r3, [r7, #19]
        break;
 8002cfa:	e005      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cfc:	4b7f      	ldr	r3, [pc, #508]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0ef      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002d08:	7cfb      	ldrb	r3, [r7, #19]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d155      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d0e:	4b7a      	ldr	r3, [pc, #488]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d01e      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d019      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d2a:	4b73      	ldr	r3, [pc, #460]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d34:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d36:	4b70      	ldr	r3, [pc, #448]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3c:	4a6e      	ldr	r2, [pc, #440]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d46:	4b6c      	ldr	r3, [pc, #432]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4c:	4a6a      	ldr	r2, [pc, #424]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d56:	4a68      	ldr	r2, [pc, #416]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d016      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fd fe84 	bl	8000a74 <HAL_GetTick>
 8002d6c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d6e:	e00b      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d70:	f7fd fe80 	bl	8000a74 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d902      	bls.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	74fb      	strb	r3, [r7, #19]
            break;
 8002d86:	e006      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d88:	4b5b      	ldr	r3, [pc, #364]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0ec      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002d96:	7cfb      	ldrb	r3, [r7, #19]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10b      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d9c:	4b56      	ldr	r3, [pc, #344]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002daa:	4953      	ldr	r1, [pc, #332]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002db2:	e004      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002db4:	7cfb      	ldrb	r3, [r7, #19]
 8002db6:	74bb      	strb	r3, [r7, #18]
 8002db8:	e001      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dba:	7cfb      	ldrb	r3, [r7, #19]
 8002dbc:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dbe:	7c7b      	ldrb	r3, [r7, #17]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d105      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc4:	4b4c      	ldr	r3, [pc, #304]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc8:	4a4b      	ldr	r2, [pc, #300]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ddc:	4b46      	ldr	r3, [pc, #280]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de2:	f023 0203 	bic.w	r2, r3, #3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	4943      	ldr	r1, [pc, #268]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dfe:	4b3e      	ldr	r3, [pc, #248]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e04:	f023 020c 	bic.w	r2, r3, #12
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	493a      	ldr	r1, [pc, #232]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e20:	4b35      	ldr	r3, [pc, #212]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	4932      	ldr	r1, [pc, #200]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e42:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e50:	4929      	ldr	r1, [pc, #164]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e64:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e72:	4921      	ldr	r1, [pc, #132]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e86:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	4918      	ldr	r1, [pc, #96]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	4910      	ldr	r1, [pc, #64]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d02c      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	4907      	ldr	r1, [pc, #28]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ee8:	d10a      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eea:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	4a02      	ldr	r2, [pc, #8]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ef0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ef4:	60d3      	str	r3, [r2, #12]
 8002ef6:	e015      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	2101      	movs	r1, #1
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 f871 	bl	8002ff8 <RCCEx_PLLSAI1_Config>
 8002f16:	4603      	mov	r3, r0
 8002f18:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f1a:	7cfb      	ldrb	r3, [r7, #19]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d028      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f30:	4b30      	ldr	r3, [pc, #192]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	492d      	ldr	r1, [pc, #180]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f4e:	d106      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f50:	4b28      	ldr	r3, [pc, #160]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4a27      	ldr	r2, [pc, #156]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f5a:	60d3      	str	r3, [r2, #12]
 8002f5c:	e011      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f66:	d10c      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f842 	bl	8002ff8 <RCCEx_PLLSAI1_Config>
 8002f74:	4603      	mov	r3, r0
 8002f76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f78:	7cfb      	ldrb	r3, [r7, #19]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002f7e:	7cfb      	ldrb	r3, [r7, #19]
 8002f80:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d01c      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f8e:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f94:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f9c:	4915      	ldr	r1, [pc, #84]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 f81f 	bl	8002ff8 <RCCEx_PLLSAI1_Config>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fbe:	7cfb      	ldrb	r3, [r7, #19]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fd4:	4b07      	ldr	r3, [pc, #28]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe2:	4904      	ldr	r1, [pc, #16]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fea:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000

08002ff8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003006:	4b73      	ldr	r3, [pc, #460]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d018      	beq.n	8003044 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003012:	4b70      	ldr	r3, [pc, #448]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f003 0203 	and.w	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d10d      	bne.n	800303e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
       ||
 8003026:	2b00      	cmp	r3, #0
 8003028:	d009      	beq.n	800303e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800302a:	4b6a      	ldr	r3, [pc, #424]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
       ||
 800303a:	429a      	cmp	r2, r3
 800303c:	d044      	beq.n	80030c8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
 8003042:	e041      	b.n	80030c8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b02      	cmp	r3, #2
 800304a:	d00c      	beq.n	8003066 <RCCEx_PLLSAI1_Config+0x6e>
 800304c:	2b03      	cmp	r3, #3
 800304e:	d013      	beq.n	8003078 <RCCEx_PLLSAI1_Config+0x80>
 8003050:	2b01      	cmp	r3, #1
 8003052:	d120      	bne.n	8003096 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003054:	4b5f      	ldr	r3, [pc, #380]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d11d      	bne.n	800309c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003064:	e01a      	b.n	800309c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003066:	4b5b      	ldr	r3, [pc, #364]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306e:	2b00      	cmp	r3, #0
 8003070:	d116      	bne.n	80030a0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003076:	e013      	b.n	80030a0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003078:	4b56      	ldr	r3, [pc, #344]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10f      	bne.n	80030a4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003084:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d109      	bne.n	80030a4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003094:	e006      	b.n	80030a4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	73fb      	strb	r3, [r7, #15]
      break;
 800309a:	e004      	b.n	80030a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800309c:	bf00      	nop
 800309e:	e002      	b.n	80030a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80030a0:	bf00      	nop
 80030a2:	e000      	b.n	80030a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80030a4:	bf00      	nop
    }

    if(status == HAL_OK)
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10d      	bne.n	80030c8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030ac:	4b49      	ldr	r3, [pc, #292]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6819      	ldr	r1, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	3b01      	subs	r3, #1
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	430b      	orrs	r3, r1
 80030c2:	4944      	ldr	r1, [pc, #272]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d17c      	bne.n	80031c8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030ce:	4b41      	ldr	r3, [pc, #260]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a40      	ldr	r2, [pc, #256]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030da:	f7fd fccb 	bl	8000a74 <HAL_GetTick>
 80030de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030e0:	e009      	b.n	80030f6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030e2:	f7fd fcc7 	bl	8000a74 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d902      	bls.n	80030f6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	73fb      	strb	r3, [r7, #15]
        break;
 80030f4:	e005      	b.n	8003102 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030f6:	4b37      	ldr	r3, [pc, #220]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1ef      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d15f      	bne.n	80031c8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d110      	bne.n	8003130 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800310e:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003116:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6892      	ldr	r2, [r2, #8]
 800311e:	0211      	lsls	r1, r2, #8
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	68d2      	ldr	r2, [r2, #12]
 8003124:	06d2      	lsls	r2, r2, #27
 8003126:	430a      	orrs	r2, r1
 8003128:	492a      	ldr	r1, [pc, #168]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	610b      	str	r3, [r1, #16]
 800312e:	e027      	b.n	8003180 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d112      	bne.n	800315c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003136:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800313e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6892      	ldr	r2, [r2, #8]
 8003146:	0211      	lsls	r1, r2, #8
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6912      	ldr	r2, [r2, #16]
 800314c:	0852      	lsrs	r2, r2, #1
 800314e:	3a01      	subs	r2, #1
 8003150:	0552      	lsls	r2, r2, #21
 8003152:	430a      	orrs	r2, r1
 8003154:	491f      	ldr	r1, [pc, #124]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003156:	4313      	orrs	r3, r2
 8003158:	610b      	str	r3, [r1, #16]
 800315a:	e011      	b.n	8003180 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800315c:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003164:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6892      	ldr	r2, [r2, #8]
 800316c:	0211      	lsls	r1, r2, #8
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6952      	ldr	r2, [r2, #20]
 8003172:	0852      	lsrs	r2, r2, #1
 8003174:	3a01      	subs	r2, #1
 8003176:	0652      	lsls	r2, r2, #25
 8003178:	430a      	orrs	r2, r1
 800317a:	4916      	ldr	r1, [pc, #88]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800317c:	4313      	orrs	r3, r2
 800317e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003180:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a13      	ldr	r2, [pc, #76]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003186:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800318a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7fd fc72 	bl	8000a74 <HAL_GetTick>
 8003190:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003192:	e009      	b.n	80031a8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003194:	f7fd fc6e 	bl	8000a74 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d902      	bls.n	80031a8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	73fb      	strb	r3, [r7, #15]
          break;
 80031a6:	e005      	b.n	80031b4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0ef      	beq.n	8003194 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	4904      	ldr	r1, [pc, #16]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000

080031d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e01d      	b.n	8003226 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f001 fa98 	bl	8004734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3304      	adds	r3, #4
 8003214:	4619      	mov	r1, r3
 8003216:	4610      	mov	r0, r2
 8003218:	f000 fa34 	bl	8003684 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <HAL_TIM_Base_Start_IT+0x50>)
 8003250:	4013      	ands	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b06      	cmp	r3, #6
 8003258:	d00b      	beq.n	8003272 <HAL_TIM_Base_Start_IT+0x42>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003260:	d007      	beq.n	8003272 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0201 	orr.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	00010007 	.word	0x00010007

08003284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b02      	cmp	r3, #2
 8003298:	d122      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d11b      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0202 	mvn.w	r2, #2
 80032b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f9be 	bl	8003648 <HAL_TIM_IC_CaptureCallback>
 80032cc:	e005      	b.n	80032da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f9b0 	bl	8003634 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f9c1 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d122      	bne.n	8003334 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d11b      	bne.n	8003334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0204 	mvn.w	r2, #4
 8003304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2202      	movs	r2, #2
 800330a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f994 	bl	8003648 <HAL_TIM_IC_CaptureCallback>
 8003320:	e005      	b.n	800332e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f986 	bl	8003634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f997 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b08      	cmp	r3, #8
 8003340:	d122      	bne.n	8003388 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b08      	cmp	r3, #8
 800334e:	d11b      	bne.n	8003388 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0208 	mvn.w	r2, #8
 8003358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2204      	movs	r2, #4
 800335e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f96a 	bl	8003648 <HAL_TIM_IC_CaptureCallback>
 8003374:	e005      	b.n	8003382 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f95c 	bl	8003634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f96d 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b10      	cmp	r3, #16
 8003394:	d122      	bne.n	80033dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d11b      	bne.n	80033dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0210 	mvn.w	r2, #16
 80033ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2208      	movs	r2, #8
 80033b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f940 	bl	8003648 <HAL_TIM_IC_CaptureCallback>
 80033c8:	e005      	b.n	80033d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f932 	bl	8003634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f943 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d10e      	bne.n	8003408 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d107      	bne.n	8003408 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0201 	mvn.w	r2, #1
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f001 f810 	bl	8004428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003412:	2b80      	cmp	r3, #128	; 0x80
 8003414:	d10e      	bne.n	8003434 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003420:	2b80      	cmp	r3, #128	; 0x80
 8003422:	d107      	bne.n	8003434 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800342c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fa96 	bl	8003960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003442:	d10e      	bne.n	8003462 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344e:	2b80      	cmp	r3, #128	; 0x80
 8003450:	d107      	bne.n	8003462 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800345a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fa89 	bl	8003974 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	d10e      	bne.n	800348e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b40      	cmp	r3, #64	; 0x40
 800347c:	d107      	bne.n	800348e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f8f1 	bl	8003670 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b20      	cmp	r3, #32
 800349a:	d10e      	bne.n	80034ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d107      	bne.n	80034ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f06f 0220 	mvn.w	r2, #32
 80034b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fa49 	bl	800394c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b084      	sub	sp, #16
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d101      	bne.n	80034da <HAL_TIM_ConfigClockSource+0x18>
 80034d6:	2302      	movs	r3, #2
 80034d8:	e0a8      	b.n	800362c <HAL_TIM_ConfigClockSource+0x16a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034fc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003504:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b40      	cmp	r3, #64	; 0x40
 8003514:	d067      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x124>
 8003516:	2b40      	cmp	r3, #64	; 0x40
 8003518:	d80b      	bhi.n	8003532 <HAL_TIM_ConfigClockSource+0x70>
 800351a:	2b10      	cmp	r3, #16
 800351c:	d073      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x144>
 800351e:	2b10      	cmp	r3, #16
 8003520:	d802      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x66>
 8003522:	2b00      	cmp	r3, #0
 8003524:	d06f      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003526:	e078      	b.n	800361a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003528:	2b20      	cmp	r3, #32
 800352a:	d06c      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x144>
 800352c:	2b30      	cmp	r3, #48	; 0x30
 800352e:	d06a      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003530:	e073      	b.n	800361a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003532:	2b70      	cmp	r3, #112	; 0x70
 8003534:	d00d      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0x90>
 8003536:	2b70      	cmp	r3, #112	; 0x70
 8003538:	d804      	bhi.n	8003544 <HAL_TIM_ConfigClockSource+0x82>
 800353a:	2b50      	cmp	r3, #80	; 0x50
 800353c:	d033      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0xe4>
 800353e:	2b60      	cmp	r3, #96	; 0x60
 8003540:	d041      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003542:	e06a      	b.n	800361a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003548:	d066      	beq.n	8003618 <HAL_TIM_ConfigClockSource+0x156>
 800354a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800354e:	d017      	beq.n	8003580 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003550:	e063      	b.n	800361a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6899      	ldr	r1, [r3, #8]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f000 f96d 	bl	8003840 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003574:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	609a      	str	r2, [r3, #8]
      break;
 800357e:	e04c      	b.n	800361a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	6899      	ldr	r1, [r3, #8]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f000 f956 	bl	8003840 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035a2:	609a      	str	r2, [r3, #8]
      break;
 80035a4:	e039      	b.n	800361a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6859      	ldr	r1, [r3, #4]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	461a      	mov	r2, r3
 80035b4:	f000 f8ca 	bl	800374c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2150      	movs	r1, #80	; 0x50
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 f923 	bl	800380a <TIM_ITRx_SetConfig>
      break;
 80035c4:	e029      	b.n	800361a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6859      	ldr	r1, [r3, #4]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	461a      	mov	r2, r3
 80035d4:	f000 f8e9 	bl	80037aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2160      	movs	r1, #96	; 0x60
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 f913 	bl	800380a <TIM_ITRx_SetConfig>
      break;
 80035e4:	e019      	b.n	800361a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6859      	ldr	r1, [r3, #4]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	461a      	mov	r2, r3
 80035f4:	f000 f8aa 	bl	800374c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2140      	movs	r1, #64	; 0x40
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 f903 	bl	800380a <TIM_ITRx_SetConfig>
      break;
 8003604:	e009      	b.n	800361a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f000 f8fa 	bl	800380a <TIM_ITRx_SetConfig>
      break;
 8003616:	e000      	b.n	800361a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003618:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a2a      	ldr	r2, [pc, #168]	; (8003740 <TIM_Base_SetConfig+0xbc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d003      	beq.n	80036a4 <TIM_Base_SetConfig+0x20>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a2:	d108      	bne.n	80036b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a21      	ldr	r2, [pc, #132]	; (8003740 <TIM_Base_SetConfig+0xbc>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00b      	beq.n	80036d6 <TIM_Base_SetConfig+0x52>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c4:	d007      	beq.n	80036d6 <TIM_Base_SetConfig+0x52>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a1e      	ldr	r2, [pc, #120]	; (8003744 <TIM_Base_SetConfig+0xc0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d003      	beq.n	80036d6 <TIM_Base_SetConfig+0x52>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <TIM_Base_SetConfig+0xc4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d108      	bne.n	80036e8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a0c      	ldr	r2, [pc, #48]	; (8003740 <TIM_Base_SetConfig+0xbc>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d007      	beq.n	8003724 <TIM_Base_SetConfig+0xa0>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a0b      	ldr	r2, [pc, #44]	; (8003744 <TIM_Base_SetConfig+0xc0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d003      	beq.n	8003724 <TIM_Base_SetConfig+0xa0>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <TIM_Base_SetConfig+0xc4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d103      	bne.n	800372c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	615a      	str	r2, [r3, #20]
}
 8003732:	bf00      	nop
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40012c00 	.word	0x40012c00
 8003744:	40014000 	.word	0x40014000
 8003748:	40014400 	.word	0x40014400

0800374c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	f023 0201 	bic.w	r2, r3, #1
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f023 030a 	bic.w	r3, r3, #10
 8003788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	621a      	str	r2, [r3, #32]
}
 800379e:	bf00      	nop
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b087      	sub	sp, #28
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f023 0210 	bic.w	r2, r3, #16
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	031b      	lsls	r3, r3, #12
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	621a      	str	r2, [r3, #32]
}
 80037fe:	bf00      	nop
 8003800:	371c      	adds	r7, #28
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800380a:	b480      	push	{r7}
 800380c:	b085      	sub	sp, #20
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	f043 0307 	orr.w	r3, r3, #7
 800382c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	609a      	str	r2, [r3, #8]
}
 8003834:	bf00      	nop
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800385a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	021a      	lsls	r2, r3, #8
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	431a      	orrs	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4313      	orrs	r3, r2
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	609a      	str	r2, [r3, #8]
}
 8003874:	bf00      	nop
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003894:	2302      	movs	r3, #2
 8003896:	e04f      	b.n	8003938 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a21      	ldr	r2, [pc, #132]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d108      	bne.n	80038d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a14      	ldr	r2, [pc, #80]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d009      	beq.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003900:	d004      	beq.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a10      	ldr	r2, [pc, #64]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d10c      	bne.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003912:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	4313      	orrs	r3, r2
 800391c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	40012c00 	.word	0x40012c00
 8003948:	40014000 	.word	0x40014000

0800394c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	; 0x28
 800398c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398e:	f107 0310 	add.w	r3, r7, #16
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	605a      	str	r2, [r3, #4]
 8003998:	609a      	str	r2, [r3, #8]
 800399a:	60da      	str	r2, [r3, #12]
 800399c:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039a4:	2300      	movs	r3, #0
 80039a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    DWT_Delay_Init();
 80039aa:	f000 ff81 	bl	80048b0 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 80039ae:	2300      	movs	r3, #0
 80039b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039b4:	e102      	b.n	8003bbc <STEPPERS_Init+0x234>
    {
    	for(j=0; j<4; j++)
 80039b6:	2300      	movs	r3, #0
 80039b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80039bc:	e079      	b.n	8003ab2 <STEPPERS_Init+0x12a>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 80039be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80039c2:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80039c6:	4889      	ldr	r0, [pc, #548]	; (8003bec <STEPPERS_Init+0x264>)
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	440b      	add	r3, r1
 80039d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80039d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039d8:	d10c      	bne.n	80039f4 <STEPPERS_Init+0x6c>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039da:	4b85      	ldr	r3, [pc, #532]	; (8003bf0 <STEPPERS_Init+0x268>)
 80039dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039de:	4a84      	ldr	r2, [pc, #528]	; (8003bf0 <STEPPERS_Init+0x268>)
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039e6:	4b82      	ldr	r3, [pc, #520]	; (8003bf0 <STEPPERS_Init+0x268>)
 80039e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	e034      	b.n	8003a5e <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 80039f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80039f8:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80039fc:	487b      	ldr	r0, [pc, #492]	; (8003bec <STEPPERS_Init+0x264>)
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	1a9b      	subs	r3, r3, r2
 8003a04:	440b      	add	r3, r1
 8003a06:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003a0a:	4a7a      	ldr	r2, [pc, #488]	; (8003bf4 <STEPPERS_Init+0x26c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d10c      	bne.n	8003a2a <STEPPERS_Init+0xa2>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a10:	4b77      	ldr	r3, [pc, #476]	; (8003bf0 <STEPPERS_Init+0x268>)
 8003a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a14:	4a76      	ldr	r2, [pc, #472]	; (8003bf0 <STEPPERS_Init+0x268>)
 8003a16:	f043 0302 	orr.w	r3, r3, #2
 8003a1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a1c:	4b74      	ldr	r3, [pc, #464]	; (8003bf0 <STEPPERS_Init+0x268>)
 8003a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	e019      	b.n	8003a5e <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 8003a2a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a2e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003a32:	486e      	ldr	r0, [pc, #440]	; (8003bec <STEPPERS_Init+0x264>)
 8003a34:	4613      	mov	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003a40:	4a6d      	ldr	r2, [pc, #436]	; (8003bf8 <STEPPERS_Init+0x270>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d10b      	bne.n	8003a5e <STEPPERS_Init+0xd6>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a46:	4b6a      	ldr	r3, [pc, #424]	; (8003bf0 <STEPPERS_Init+0x268>)
 8003a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4a:	4a69      	ldr	r2, [pc, #420]	; (8003bf0 <STEPPERS_Init+0x268>)
 8003a4c:	f043 0304 	orr.w	r3, r3, #4
 8003a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a52:	4b67      	ldr	r3, [pc, #412]	; (8003bf0 <STEPPERS_Init+0x268>)
 8003a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 8003a5e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a62:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003a66:	4861      	ldr	r0, [pc, #388]	; (8003bec <STEPPERS_Init+0x264>)
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	440b      	add	r3, r1
 8003a72:	3308      	adds	r3, #8
 8003a74:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8003a78:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 8003a86:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a8a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003a8e:	4857      	ldr	r0, [pc, #348]	; (8003bec <STEPPERS_Init+0x264>)
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	1a9b      	subs	r3, r3, r2
 8003a96:	440b      	add	r3, r1
 8003a98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003a9c:	f107 0210 	add.w	r2, r7, #16
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe f8cc 	bl	8001c40 <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 8003aa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003aac:	3301      	adds	r3, #1
 8003aae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003ab2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d981      	bls.n	80039be <STEPPERS_Init+0x36>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CW;
 8003aba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003abe:	494f      	ldr	r1, [pc, #316]	; (8003bfc <STEPPERS_Init+0x274>)
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3311      	adds	r3, #17
 8003acc:	2200      	movs	r2, #0
 8003ace:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 8003ad0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003ad4:	4949      	ldr	r1, [pc, #292]	; (8003bfc <STEPPERS_Init+0x274>)
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	330f      	adds	r3, #15
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 8003ae6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003aea:	4944      	ldr	r1, [pc, #272]	; (8003bfc <STEPPERS_Init+0x274>)
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 8003afa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003afe:	493f      	ldr	r1, [pc, #252]	; (8003bfc <STEPPERS_Init+0x274>)
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 8003b10:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b14:	4939      	ldr	r1, [pc, #228]	; (8003bfc <STEPPERS_Init+0x274>)
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	3308      	adds	r3, #8
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 8003b26:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b2a:	4934      	ldr	r1, [pc, #208]	; (8003bfc <STEPPERS_Init+0x274>)
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	330e      	adds	r3, #14
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8003b3c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b40:	492a      	ldr	r1, [pc, #168]	; (8003bec <STEPPERS_Init+0x264>)
 8003b42:	4613      	mov	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	1a9b      	subs	r3, r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	331b      	adds	r3, #27
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d00b      	beq.n	8003b6c <STEPPERS_Init+0x1e4>
 8003b54:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b58:	4924      	ldr	r1, [pc, #144]	; (8003bec <STEPPERS_Init+0x264>)
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	331b      	adds	r3, #27
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10b      	bne.n	8003b84 <STEPPERS_Init+0x1fc>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 8003b6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b70:	4922      	ldr	r1, [pc, #136]	; (8003bfc <STEPPERS_Init+0x274>)
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	3310      	adds	r3, #16
 8003b7e:	2204      	movs	r2, #4
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	e016      	b.n	8003bb2 <STEPPERS_Init+0x22a>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8003b84:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b88:	4918      	ldr	r1, [pc, #96]	; (8003bec <STEPPERS_Init+0x264>)
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	331b      	adds	r3, #27
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d10a      	bne.n	8003bb2 <STEPPERS_Init+0x22a>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 8003b9c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003ba0:	4916      	ldr	r1, [pc, #88]	; (8003bfc <STEPPERS_Init+0x274>)
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	3310      	adds	r3, #16
 8003bae:	2208      	movs	r2, #8
 8003bb0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 8003bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f43f aef8 	beq.w	80039b6 <STEPPERS_Init+0x2e>
    	}
    }
    // for debug
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd6:	f107 0310 	add.w	r3, r7, #16
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4805      	ldr	r0, [pc, #20]	; (8003bf4 <STEPPERS_Init+0x26c>)
 8003bde:	f7fe f82f 	bl	8001c40 <HAL_GPIO_Init>
}
 8003be2:	bf00      	nop
 8003be4:	3728      	adds	r7, #40	; 0x28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	08004980 	.word	0x08004980
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	48000400 	.word	0x48000400
 8003bf8:	48000800 	.word	0x48000800
 8003bfc:	20000068 	.word	0x20000068

08003c00 <STEPPERS_Init_TMR>:

void STEPPERS_Init_TMR(TIM_HandleTypeDef* TMR_Handle)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08a      	sub	sp, #40	; 0x28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c08:	f107 0314 	add.w	r3, r7, #20
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c16:	f107 0308 	add.w	r3, r7, #8
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	605a      	str	r2, [r3, #4]
 8003c20:	609a      	str	r2, [r3, #8]
    uint32_t ARR_Value = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24

	STEPPERS_Init();
 8003c26:	f7ff feaf 	bl	8003988 <STEPPERS_Init>

	/*--------[ Configure The Stepper Timer Base If Enabled ]-------*/
    if(STEPPER_TIMER_EN == 1)
    {
    	ARR_Value = (STEPPER_TIMER_CLK * 10.0 * STEPPER_TIME_BASE);
 8003c2a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
    	TMR_Handle->Instance = STEPPER_TIMER;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a17      	ldr	r2, [pc, #92]	; (8003c90 <STEPPERS_Init_TMR+0x90>)
 8003c34:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2263      	movs	r2, #99	; 0x63
 8003c3a:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	1e5a      	subs	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2280      	movs	r2, #128	; 0x80
 8003c54:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff fabe 	bl	80031d8 <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c60:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8003c62:	f107 0314 	add.w	r3, r7, #20
 8003c66:	4619      	mov	r1, r3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff fc2a 	bl	80034c2 <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60bb      	str	r3, [r7, #8]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 8003c76:	f107 0308 	add.w	r3, r7, #8
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff fdff 	bl	8003880 <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff fad4 	bl	8003230 <HAL_TIM_Base_Start_IT>
    }
}
 8003c88:	bf00      	nop
 8003c8a:	3728      	adds	r7, #40	; 0x28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40014000 	.word	0x40014000
 8003c94:	00000000 	.word	0x00000000

08003c98 <STEPPER_SetSpeed>:

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	460a      	mov	r2, r1
 8003ca2:	71fb      	strb	r3, [r7, #7]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 8003cac:	79fa      	ldrb	r2, [r7, #7]
 8003cae:	492a      	ldr	r1, [pc, #168]	; (8003d58 <STEPPER_SetSpeed+0xc0>)
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	330c      	adds	r3, #12
 8003cbc:	88ba      	ldrh	r2, [r7, #4]
 8003cbe:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 8003cc0:	79fa      	ldrb	r2, [r7, #7]
 8003cc2:	4926      	ldr	r1, [pc, #152]	; (8003d5c <STEPPER_SetSpeed+0xc4>)
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	331b      	adds	r3, #27
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d10b      	bne.n	8003cee <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 8003cd6:	79fa      	ldrb	r2, [r7, #7]
 8003cd8:	4920      	ldr	r1, [pc, #128]	; (8003d5c <STEPPER_SetSpeed+0xc4>)
 8003cda:	4613      	mov	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	3318      	adds	r3, #24
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e009      	b.n	8003d02 <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 8003cee:	79fa      	ldrb	r2, [r7, #7]
 8003cf0:	491a      	ldr	r1, [pc, #104]	; (8003d5c <STEPPER_SetSpeed+0xc4>)
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	1a9b      	subs	r3, r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	3318      	adds	r3, #24
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 8003d02:	88bb      	ldrh	r3, [r7, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	fb02 f303 	mul.w	r3, r2, r3
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fc fba2 	bl	8000454 <__aeabi_ui2d>
 8003d10:	4603      	mov	r3, r0
 8003d12:	460c      	mov	r4, r1
 8003d14:	461a      	mov	r2, r3
 8003d16:	4623      	mov	r3, r4
 8003d18:	a10d      	add	r1, pc, #52	; (adr r1, 8003d50 <STEPPER_SetSpeed+0xb8>)
 8003d1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d1e:	f7fc fd3d 	bl	800079c <__aeabi_ddiv>
 8003d22:	4603      	mov	r3, r0
 8003d24:	460c      	mov	r4, r1
 8003d26:	461a      	mov	r2, r3
 8003d28:	4623      	mov	r3, r4
 8003d2a:	79fc      	ldrb	r4, [r7, #7]
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	4619      	mov	r1, r3
 8003d30:	f7fc fe1c 	bl	800096c <__aeabi_d2uiz>
 8003d34:	4601      	mov	r1, r0
 8003d36:	4a08      	ldr	r2, [pc, #32]	; (8003d58 <STEPPER_SetSpeed+0xc0>)
 8003d38:	4623      	mov	r3, r4
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4423      	add	r3, r4
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	3308      	adds	r3, #8
 8003d44:	6019      	str	r1, [r3, #0]
}
 8003d46:	bf00      	nop
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd90      	pop	{r4, r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	00000000 	.word	0x00000000
 8003d54:	40ed4c00 	.word	0x40ed4c00
 8003d58:	20000068 	.word	0x20000068
 8003d5c:	08004980 	.word	0x08004980

08003d60 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 8003d6a:	79fa      	ldrb	r2, [r7, #7]
 8003d6c:	499d      	ldr	r1, [pc, #628]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	331a      	adds	r3, #26
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f040 81d1 	bne.w	8004124 <STEPPER_One_Step+0x3c4>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8003d82:	79fa      	ldrb	r2, [r7, #7]
 8003d84:	4997      	ldr	r1, [pc, #604]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	440b      	add	r3, r1
 8003d90:	331b      	adds	r3, #27
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f040 808c 	bne.w	8003eb2 <STEPPER_One_Step+0x152>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8003d9a:	79fa      	ldrb	r2, [r7, #7]
 8003d9c:	4991      	ldr	r1, [pc, #580]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003d9e:	4613      	mov	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	79fa      	ldrb	r2, [r7, #7]
 8003dac:	498d      	ldr	r1, [pc, #564]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	3310      	adds	r3, #16
 8003dba:	881c      	ldrh	r4, [r3, #0]
 8003dbc:	79fa      	ldrb	r2, [r7, #7]
 8003dbe:	498a      	ldr	r1, [pc, #552]	; (8003fe8 <STEPPER_One_Step+0x288>)
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	330f      	adds	r3, #15
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	4b86      	ldr	r3, [pc, #536]	; (8003fec <STEPPER_One_Step+0x28c>)
 8003dd2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4621      	mov	r1, r4
 8003dda:	f7fe f8b3 	bl	8001f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8003dde:	79fa      	ldrb	r2, [r7, #7]
 8003de0:	4980      	ldr	r1, [pc, #512]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003de2:	4613      	mov	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	3304      	adds	r3, #4
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	79fa      	ldrb	r2, [r7, #7]
 8003df2:	497c      	ldr	r1, [pc, #496]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003df4:	4613      	mov	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	3312      	adds	r3, #18
 8003e00:	881c      	ldrh	r4, [r3, #0]
 8003e02:	79fa      	ldrb	r2, [r7, #7]
 8003e04:	4978      	ldr	r1, [pc, #480]	; (8003fe8 <STEPPER_One_Step+0x288>)
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	330f      	adds	r3, #15
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	4a75      	ldr	r2, [pc, #468]	; (8003fec <STEPPER_One_Step+0x28c>)
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	785b      	ldrb	r3, [r3, #1]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4621      	mov	r1, r4
 8003e20:	f7fe f890 	bl	8001f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8003e24:	79fa      	ldrb	r2, [r7, #7]
 8003e26:	496f      	ldr	r1, [pc, #444]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	3308      	adds	r3, #8
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	79fa      	ldrb	r2, [r7, #7]
 8003e38:	496a      	ldr	r1, [pc, #424]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	3314      	adds	r3, #20
 8003e46:	881c      	ldrh	r4, [r3, #0]
 8003e48:	79fa      	ldrb	r2, [r7, #7]
 8003e4a:	4967      	ldr	r1, [pc, #412]	; (8003fe8 <STEPPER_One_Step+0x288>)
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	330f      	adds	r3, #15
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	4a64      	ldr	r2, [pc, #400]	; (8003fec <STEPPER_One_Step+0x28c>)
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	789b      	ldrb	r3, [r3, #2]
 8003e62:	461a      	mov	r2, r3
 8003e64:	4621      	mov	r1, r4
 8003e66:	f7fe f86d 	bl	8001f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8003e6a:	79fa      	ldrb	r2, [r7, #7]
 8003e6c:	495d      	ldr	r1, [pc, #372]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003e6e:	4613      	mov	r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	330c      	adds	r3, #12
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	79fa      	ldrb	r2, [r7, #7]
 8003e7e:	4959      	ldr	r1, [pc, #356]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003e80:	4613      	mov	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	3316      	adds	r3, #22
 8003e8c:	881c      	ldrh	r4, [r3, #0]
 8003e8e:	79fa      	ldrb	r2, [r7, #7]
 8003e90:	4955      	ldr	r1, [pc, #340]	; (8003fe8 <STEPPER_One_Step+0x288>)
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	330f      	adds	r3, #15
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	4a52      	ldr	r2, [pc, #328]	; (8003fec <STEPPER_One_Step+0x28c>)
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	78db      	ldrb	r3, [r3, #3]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4621      	mov	r1, r4
 8003eac:	f7fe f84a 	bl	8001f44 <HAL_GPIO_WritePin>
 8003eb0:	e13d      	b.n	800412e <STEPPER_One_Step+0x3ce>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 8003eb2:	79fa      	ldrb	r2, [r7, #7]
 8003eb4:	494b      	ldr	r1, [pc, #300]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	1a9b      	subs	r3, r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	331b      	adds	r3, #27
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	f040 8095 	bne.w	8003ff4 <STEPPER_One_Step+0x294>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8003eca:	79fa      	ldrb	r2, [r7, #7]
 8003ecc:	4945      	ldr	r1, [pc, #276]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003ece:	4613      	mov	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	79fa      	ldrb	r2, [r7, #7]
 8003edc:	4941      	ldr	r1, [pc, #260]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003ede:	4613      	mov	r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	3310      	adds	r3, #16
 8003eea:	881c      	ldrh	r4, [r3, #0]
 8003eec:	79fa      	ldrb	r2, [r7, #7]
 8003eee:	493e      	ldr	r1, [pc, #248]	; (8003fe8 <STEPPER_One_Step+0x288>)
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	330f      	adds	r3, #15
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	4b3b      	ldr	r3, [pc, #236]	; (8003ff0 <STEPPER_One_Step+0x290>)
 8003f02:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8003f06:	461a      	mov	r2, r3
 8003f08:	4621      	mov	r1, r4
 8003f0a:	f7fe f81b 	bl	8001f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8003f0e:	79fa      	ldrb	r2, [r7, #7]
 8003f10:	4934      	ldr	r1, [pc, #208]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003f12:	4613      	mov	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	6818      	ldr	r0, [r3, #0]
 8003f20:	79fa      	ldrb	r2, [r7, #7]
 8003f22:	4930      	ldr	r1, [pc, #192]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003f24:	4613      	mov	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3312      	adds	r3, #18
 8003f30:	881c      	ldrh	r4, [r3, #0]
 8003f32:	79fa      	ldrb	r2, [r7, #7]
 8003f34:	492c      	ldr	r1, [pc, #176]	; (8003fe8 <STEPPER_One_Step+0x288>)
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	440b      	add	r3, r1
 8003f40:	330f      	adds	r3, #15
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	4a2a      	ldr	r2, [pc, #168]	; (8003ff0 <STEPPER_One_Step+0x290>)
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	785b      	ldrb	r3, [r3, #1]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4621      	mov	r1, r4
 8003f50:	f7fd fff8 	bl	8001f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8003f54:	79fa      	ldrb	r2, [r7, #7]
 8003f56:	4923      	ldr	r1, [pc, #140]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003f58:	4613      	mov	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	3308      	adds	r3, #8
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	79fa      	ldrb	r2, [r7, #7]
 8003f68:	491e      	ldr	r1, [pc, #120]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	1a9b      	subs	r3, r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	3314      	adds	r3, #20
 8003f76:	881c      	ldrh	r4, [r3, #0]
 8003f78:	79fa      	ldrb	r2, [r7, #7]
 8003f7a:	491b      	ldr	r1, [pc, #108]	; (8003fe8 <STEPPER_One_Step+0x288>)
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	330f      	adds	r3, #15
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4a19      	ldr	r2, [pc, #100]	; (8003ff0 <STEPPER_One_Step+0x290>)
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	789b      	ldrb	r3, [r3, #2]
 8003f92:	461a      	mov	r2, r3
 8003f94:	4621      	mov	r1, r4
 8003f96:	f7fd ffd5 	bl	8001f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8003f9a:	79fa      	ldrb	r2, [r7, #7]
 8003f9c:	4911      	ldr	r1, [pc, #68]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	330c      	adds	r3, #12
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	79fa      	ldrb	r2, [r7, #7]
 8003fae:	490d      	ldr	r1, [pc, #52]	; (8003fe4 <STEPPER_One_Step+0x284>)
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	3316      	adds	r3, #22
 8003fbc:	881c      	ldrh	r4, [r3, #0]
 8003fbe:	79fa      	ldrb	r2, [r7, #7]
 8003fc0:	4909      	ldr	r1, [pc, #36]	; (8003fe8 <STEPPER_One_Step+0x288>)
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	330f      	adds	r3, #15
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	4a07      	ldr	r2, [pc, #28]	; (8003ff0 <STEPPER_One_Step+0x290>)
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	78db      	ldrb	r3, [r3, #3]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4621      	mov	r1, r4
 8003fdc:	f7fd ffb2 	bl	8001f44 <HAL_GPIO_WritePin>
 8003fe0:	e0a5      	b.n	800412e <STEPPER_One_Step+0x3ce>
 8003fe2:	bf00      	nop
 8003fe4:	08004980 	.word	0x08004980
 8003fe8:	20000068 	.word	0x20000068
 8003fec:	20000008 	.word	0x20000008
 8003ff0:	20000018 	.word	0x20000018
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8003ff4:	79fa      	ldrb	r2, [r7, #7]
 8003ff6:	498d      	ldr	r1, [pc, #564]	; (800422c <STEPPER_One_Step+0x4cc>)
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	331b      	adds	r3, #27
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b02      	cmp	r3, #2
 8004008:	f040 8091 	bne.w	800412e <STEPPER_One_Step+0x3ce>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 800400c:	79fa      	ldrb	r2, [r7, #7]
 800400e:	4987      	ldr	r1, [pc, #540]	; (800422c <STEPPER_One_Step+0x4cc>)
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	79fa      	ldrb	r2, [r7, #7]
 800401e:	4983      	ldr	r1, [pc, #524]	; (800422c <STEPPER_One_Step+0x4cc>)
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	3310      	adds	r3, #16
 800402c:	881c      	ldrh	r4, [r3, #0]
 800402e:	79fa      	ldrb	r2, [r7, #7]
 8004030:	497f      	ldr	r1, [pc, #508]	; (8004230 <STEPPER_One_Step+0x4d0>)
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	330f      	adds	r3, #15
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	4b7c      	ldr	r3, [pc, #496]	; (8004234 <STEPPER_One_Step+0x4d4>)
 8004044:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8004048:	461a      	mov	r2, r3
 800404a:	4621      	mov	r1, r4
 800404c:	f7fd ff7a 	bl	8001f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8004050:	79fa      	ldrb	r2, [r7, #7]
 8004052:	4976      	ldr	r1, [pc, #472]	; (800422c <STEPPER_One_Step+0x4cc>)
 8004054:	4613      	mov	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	3304      	adds	r3, #4
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	79fa      	ldrb	r2, [r7, #7]
 8004064:	4971      	ldr	r1, [pc, #452]	; (800422c <STEPPER_One_Step+0x4cc>)
 8004066:	4613      	mov	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	3312      	adds	r3, #18
 8004072:	881c      	ldrh	r4, [r3, #0]
 8004074:	79fa      	ldrb	r2, [r7, #7]
 8004076:	496e      	ldr	r1, [pc, #440]	; (8004230 <STEPPER_One_Step+0x4d0>)
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	330f      	adds	r3, #15
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	4a6b      	ldr	r2, [pc, #428]	; (8004234 <STEPPER_One_Step+0x4d4>)
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	785b      	ldrb	r3, [r3, #1]
 800408e:	461a      	mov	r2, r3
 8004090:	4621      	mov	r1, r4
 8004092:	f7fd ff57 	bl	8001f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8004096:	79fa      	ldrb	r2, [r7, #7]
 8004098:	4964      	ldr	r1, [pc, #400]	; (800422c <STEPPER_One_Step+0x4cc>)
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	3308      	adds	r3, #8
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	79fa      	ldrb	r2, [r7, #7]
 80040aa:	4960      	ldr	r1, [pc, #384]	; (800422c <STEPPER_One_Step+0x4cc>)
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	1a9b      	subs	r3, r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	3314      	adds	r3, #20
 80040b8:	881c      	ldrh	r4, [r3, #0]
 80040ba:	79fa      	ldrb	r2, [r7, #7]
 80040bc:	495c      	ldr	r1, [pc, #368]	; (8004230 <STEPPER_One_Step+0x4d0>)
 80040be:	4613      	mov	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	330f      	adds	r3, #15
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	4a59      	ldr	r2, [pc, #356]	; (8004234 <STEPPER_One_Step+0x4d4>)
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	789b      	ldrb	r3, [r3, #2]
 80040d4:	461a      	mov	r2, r3
 80040d6:	4621      	mov	r1, r4
 80040d8:	f7fd ff34 	bl	8001f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 80040dc:	79fa      	ldrb	r2, [r7, #7]
 80040de:	4953      	ldr	r1, [pc, #332]	; (800422c <STEPPER_One_Step+0x4cc>)
 80040e0:	4613      	mov	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	330c      	adds	r3, #12
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	79fa      	ldrb	r2, [r7, #7]
 80040f0:	494e      	ldr	r1, [pc, #312]	; (800422c <STEPPER_One_Step+0x4cc>)
 80040f2:	4613      	mov	r3, r2
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	3316      	adds	r3, #22
 80040fe:	881c      	ldrh	r4, [r3, #0]
 8004100:	79fa      	ldrb	r2, [r7, #7]
 8004102:	494b      	ldr	r1, [pc, #300]	; (8004230 <STEPPER_One_Step+0x4d0>)
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	330f      	adds	r3, #15
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	4a48      	ldr	r2, [pc, #288]	; (8004234 <STEPPER_One_Step+0x4d4>)
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	78db      	ldrb	r3, [r3, #3]
 800411a:	461a      	mov	r2, r3
 800411c:	4621      	mov	r1, r4
 800411e:	f7fd ff11 	bl	8001f44 <HAL_GPIO_WritePin>
 8004122:	e004      	b.n	800412e <STEPPER_One_Step+0x3ce>
		}
	}
	// For BiPolar Stepper Motors
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
 8004124:	79fa      	ldrb	r2, [r7, #7]
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	009b      	lsls	r3, r3, #2
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 800412e:	79fa      	ldrb	r2, [r7, #7]
 8004130:	493f      	ldr	r1, [pc, #252]	; (8004230 <STEPPER_One_Step+0x4d0>)
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	3311      	adds	r3, #17
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d132      	bne.n	80041aa <STEPPER_One_Step+0x44a>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8004144:	79fa      	ldrb	r2, [r7, #7]
 8004146:	493a      	ldr	r1, [pc, #232]	; (8004230 <STEPPER_One_Step+0x4d0>)
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	330f      	adds	r3, #15
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d112      	bne.n	8004180 <STEPPER_One_Step+0x420>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 800415a:	79f9      	ldrb	r1, [r7, #7]
 800415c:	79fa      	ldrb	r2, [r7, #7]
 800415e:	4834      	ldr	r0, [pc, #208]	; (8004230 <STEPPER_One_Step+0x4d0>)
 8004160:	460b      	mov	r3, r1
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4403      	add	r3, r0
 800416a:	3310      	adds	r3, #16
 800416c:	7818      	ldrb	r0, [r3, #0]
 800416e:	4930      	ldr	r1, [pc, #192]	; (8004230 <STEPPER_One_Step+0x4d0>)
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	330f      	adds	r3, #15
 800417c:	4602      	mov	r2, r0
 800417e:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 8004180:	79fa      	ldrb	r2, [r7, #7]
 8004182:	492b      	ldr	r1, [pc, #172]	; (8004230 <STEPPER_One_Step+0x4d0>)
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	330f      	adds	r3, #15
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	3b01      	subs	r3, #1
 8004194:	b2d8      	uxtb	r0, r3
 8004196:	4926      	ldr	r1, [pc, #152]	; (8004230 <STEPPER_One_Step+0x4d0>)
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	330f      	adds	r3, #15
 80041a4:	4602      	mov	r2, r0
 80041a6:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 80041a8:	e03c      	b.n	8004224 <STEPPER_One_Step+0x4c4>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 80041aa:	79fa      	ldrb	r2, [r7, #7]
 80041ac:	4920      	ldr	r1, [pc, #128]	; (8004230 <STEPPER_One_Step+0x4d0>)
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	3311      	adds	r3, #17
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d131      	bne.n	8004224 <STEPPER_One_Step+0x4c4>
		gs_STEPPER_info[i].Step_Index++;
 80041c0:	79fa      	ldrb	r2, [r7, #7]
 80041c2:	491b      	ldr	r1, [pc, #108]	; (8004230 <STEPPER_One_Step+0x4d0>)
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	330f      	adds	r3, #15
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	3301      	adds	r3, #1
 80041d4:	b2d8      	uxtb	r0, r3
 80041d6:	4916      	ldr	r1, [pc, #88]	; (8004230 <STEPPER_One_Step+0x4d0>)
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	330f      	adds	r3, #15
 80041e4:	4602      	mov	r2, r0
 80041e6:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 80041e8:	79fa      	ldrb	r2, [r7, #7]
 80041ea:	4911      	ldr	r1, [pc, #68]	; (8004230 <STEPPER_One_Step+0x4d0>)
 80041ec:	4613      	mov	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	330f      	adds	r3, #15
 80041f8:	7819      	ldrb	r1, [r3, #0]
 80041fa:	79fa      	ldrb	r2, [r7, #7]
 80041fc:	480c      	ldr	r0, [pc, #48]	; (8004230 <STEPPER_One_Step+0x4d0>)
 80041fe:	4613      	mov	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4403      	add	r3, r0
 8004208:	3310      	adds	r3, #16
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	4299      	cmp	r1, r3
 800420e:	d109      	bne.n	8004224 <STEPPER_One_Step+0x4c4>
			gs_STEPPER_info[i].Step_Index = 0;
 8004210:	79fa      	ldrb	r2, [r7, #7]
 8004212:	4907      	ldr	r1, [pc, #28]	; (8004230 <STEPPER_One_Step+0x4d0>)
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	330f      	adds	r3, #15
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	bd90      	pop	{r4, r7, pc}
 800422c:	08004980 	.word	0x08004980
 8004230:	20000068 	.word	0x20000068
 8004234:	20000028 	.word	0x20000028

08004238 <STEPPER_Step_NonBlocking>:
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
}

void STEPPER_Step_NonBlocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	6039      	str	r1, [r7, #0]
 8004242:	71fb      	strb	r3, [r7, #7]
 8004244:	4613      	mov	r3, r2
 8004246:	71bb      	strb	r3, [r7, #6]
	gs_STEPPER_info[au8_STEPPER_Instance].Steps += au32_Steps;
 8004248:	79fa      	ldrb	r2, [r7, #7]
 800424a:	4910      	ldr	r1, [pc, #64]	; (800428c <STEPPER_Step_NonBlocking+0x54>)
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	6819      	ldr	r1, [r3, #0]
 8004258:	79fa      	ldrb	r2, [r7, #7]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	4419      	add	r1, r3
 800425e:	480b      	ldr	r0, [pc, #44]	; (800428c <STEPPER_Step_NonBlocking+0x54>)
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4403      	add	r3, r0
 800426a:	6019      	str	r1, [r3, #0]
	gs_STEPPER_info[au8_STEPPER_Instance].Dir = au8_DIR;
 800426c:	79fa      	ldrb	r2, [r7, #7]
 800426e:	4907      	ldr	r1, [pc, #28]	; (800428c <STEPPER_Step_NonBlocking+0x54>)
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	3311      	adds	r3, #17
 800427c:	79ba      	ldrb	r2, [r7, #6]
 800427e:	701a      	strb	r2, [r3, #0]
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	20000068 	.word	0x20000068

08004290 <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8004298:	2300      	movs	r3, #0
 800429a:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a34      	ldr	r2, [pc, #208]	; (8004374 <STEPPER_TMR_OVF_ISR+0xe4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d162      	bne.n	800436c <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 80042a6:	2300      	movs	r3, #0
 80042a8:	73fb      	strb	r3, [r7, #15]
 80042aa:	e05c      	b.n	8004366 <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 80042ac:	7bfa      	ldrb	r2, [r7, #15]
 80042ae:	4932      	ldr	r1, [pc, #200]	; (8004378 <STEPPER_TMR_OVF_ISR+0xe8>)
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	3304      	adds	r3, #4
 80042bc:	6819      	ldr	r1, [r3, #0]
 80042be:	7bfa      	ldrb	r2, [r7, #15]
 80042c0:	482d      	ldr	r0, [pc, #180]	; (8004378 <STEPPER_TMR_OVF_ISR+0xe8>)
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4403      	add	r3, r0
 80042cc:	3308      	adds	r3, #8
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4299      	cmp	r1, r3
 80042d2:	d333      	bcc.n	800433c <STEPPER_TMR_OVF_ISR+0xac>
 80042d4:	7bfa      	ldrb	r2, [r7, #15]
 80042d6:	4928      	ldr	r1, [pc, #160]	; (8004378 <STEPPER_TMR_OVF_ISR+0xe8>)
 80042d8:	4613      	mov	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	330e      	adds	r3, #14
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d028      	beq.n	800433c <STEPPER_TMR_OVF_ISR+0xac>
 80042ea:	7bfa      	ldrb	r2, [r7, #15]
 80042ec:	4922      	ldr	r1, [pc, #136]	; (8004378 <STEPPER_TMR_OVF_ISR+0xe8>)
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01e      	beq.n	800433c <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff fd2d 	bl	8003d60 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 8004306:	7bfa      	ldrb	r2, [r7, #15]
 8004308:	491b      	ldr	r1, [pc, #108]	; (8004378 <STEPPER_TMR_OVF_ISR+0xe8>)
 800430a:	4613      	mov	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	1e59      	subs	r1, r3, #1
 8004318:	4817      	ldr	r0, [pc, #92]	; (8004378 <STEPPER_TMR_OVF_ISR+0xe8>)
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4403      	add	r3, r0
 8004324:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 8004326:	7bfa      	ldrb	r2, [r7, #15]
 8004328:	4913      	ldr	r1, [pc, #76]	; (8004378 <STEPPER_TMR_OVF_ISR+0xe8>)
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	3304      	adds	r3, #4
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	e011      	b.n	8004360 <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 800433c:	7bfa      	ldrb	r2, [r7, #15]
 800433e:	490e      	ldr	r1, [pc, #56]	; (8004378 <STEPPER_TMR_OVF_ISR+0xe8>)
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	3304      	adds	r3, #4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	1c59      	adds	r1, r3, #1
 8004350:	4809      	ldr	r0, [pc, #36]	; (8004378 <STEPPER_TMR_OVF_ISR+0xe8>)
 8004352:	4613      	mov	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4403      	add	r3, r0
 800435c:	3304      	adds	r3, #4
 800435e:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	3301      	adds	r3, #1
 8004364:	73fb      	strb	r3, [r7, #15]
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d09f      	beq.n	80042ac <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40014000 	.word	0x40014000
 8004378:	20000068 	.word	0x20000068

0800437c <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);

int main(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
	uint16_t AD_RES = 0;
 8004382:	2300      	movs	r3, #0
 8004384:	80bb      	strh	r3, [r7, #4]
	uint8_t Stepper1_Dir = DIR_CW;
 8004386:	2300      	movs	r3, #0
 8004388:	71fb      	strb	r3, [r7, #7]

    HAL_Init();
 800438a:	f7fc fb0f 	bl	80009ac <HAL_Init>
    SystemClock_Config();
 800438e:	f000 f856 	bl	800443e <SystemClock_Config>
    MX_GPIO_Init();
 8004392:	f000 f93d 	bl	8004610 <MX_GPIO_Init>
    MX_ADC1_Init();
 8004396:	f000 f8d5 	bl	8004544 <MX_ADC1_Init>
    STEPPERS_Init_TMR(&htim15);
 800439a:	4820      	ldr	r0, [pc, #128]	; (800441c <main+0xa0>)
 800439c:	f7ff fc30 	bl	8003c00 <STEPPERS_Init_TMR>
    STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 200000, Stepper1_Dir);
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	461a      	mov	r2, r3
 80043a4:	491e      	ldr	r1, [pc, #120]	; (8004420 <main+0xa4>)
 80043a6:	2000      	movs	r0, #0
 80043a8:	f7ff ff46 	bl	8004238 <STEPPER_Step_NonBlocking>

    while (1)
    {
    	HAL_ADC_Start(&hadc1);
 80043ac:	481d      	ldr	r0, [pc, #116]	; (8004424 <main+0xa8>)
 80043ae:	f7fc fe8f 	bl	80010d0 <HAL_ADC_Start>
    	HAL_ADC_PollForConversion(&hadc1, 1);
 80043b2:	2101      	movs	r1, #1
 80043b4:	481b      	ldr	r0, [pc, #108]	; (8004424 <main+0xa8>)
 80043b6:	f7fc feee 	bl	8001196 <HAL_ADC_PollForConversion>
    	AD_RES = HAL_ADC_GetValue(&hadc1);
 80043ba:	481a      	ldr	r0, [pc, #104]	; (8004424 <main+0xa8>)
 80043bc:	f7fc ff73 	bl	80012a6 <HAL_ADC_GetValue>
 80043c0:	4603      	mov	r3, r0
 80043c2:	80bb      	strh	r3, [r7, #4]
    	STEPPER_SetSpeed(STEPPER_MOTOR1, AD_RES>>8);
 80043c4:	88bb      	ldrh	r3, [r7, #4]
 80043c6:	0a1b      	lsrs	r3, r3, #8
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	4619      	mov	r1, r3
 80043cc:	2000      	movs	r0, #0
 80043ce:	f7ff fc63 	bl	8003c98 <STEPPER_SetSpeed>
    	if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1))
 80043d2:	2102      	movs	r1, #2
 80043d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043d8:	f7fd fd9c 	bl	8001f14 <HAL_GPIO_ReadPin>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d017      	beq.n	8004412 <main+0x96>
    	{
    		if(Stepper1_Dir == DIR_CW)
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d102      	bne.n	80043ee <main+0x72>
    		{
    			Stepper1_Dir = DIR_CCW;
 80043e8:	2301      	movs	r3, #1
 80043ea:	71fb      	strb	r3, [r7, #7]
 80043ec:	e001      	b.n	80043f2 <main+0x76>
    		}
    		else
    		{
    			Stepper1_Dir = DIR_CW;
 80043ee:	2300      	movs	r3, #0
 80043f0:	71fb      	strb	r3, [r7, #7]
    		}
    		STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 1000, Stepper1_Dir);
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	461a      	mov	r2, r3
 80043f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80043fa:	2000      	movs	r0, #0
 80043fc:	f7ff ff1c 	bl	8004238 <STEPPER_Step_NonBlocking>
    		while(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1));
 8004400:	bf00      	nop
 8004402:	2102      	movs	r1, #2
 8004404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004408:	f7fd fd84 	bl	8001f14 <HAL_GPIO_ReadPin>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f7      	bne.n	8004402 <main+0x86>
    	}
    	HAL_Delay(1);
 8004412:	2001      	movs	r0, #1
 8004414:	f7fc fb3a 	bl	8000a8c <HAL_Delay>
    	HAL_ADC_Start(&hadc1);
 8004418:	e7c8      	b.n	80043ac <main+0x30>
 800441a:	bf00      	nop
 800441c:	20000080 	.word	0x20000080
 8004420:	00030d40 	.word	0x00030d40
 8004424:	200000c0 	.word	0x200000c0

08004428 <HAL_TIM_PeriodElapsedCallback>:
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
	STEPPER_TMR_OVF_ISR(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff ff2d 	bl	8004290 <STEPPER_TMR_OVF_ISR>
}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b0ac      	sub	sp, #176	; 0xb0
 8004442:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004444:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004448:	2244      	movs	r2, #68	; 0x44
 800444a:	2100      	movs	r1, #0
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fa83 	bl	8004958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004452:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	605a      	str	r2, [r3, #4]
 800445c:	609a      	str	r2, [r3, #8]
 800445e:	60da      	str	r2, [r3, #12]
 8004460:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004462:	1d3b      	adds	r3, r7, #4
 8004464:	2254      	movs	r2, #84	; 0x54
 8004466:	2100      	movs	r1, #0
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fa75 	bl	8004958 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800446e:	2310      	movs	r3, #16
 8004470:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004472:	2301      	movs	r3, #1
 8004474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004478:	2300      	movs	r3, #0
 800447a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800447e:	2360      	movs	r3, #96	; 0x60
 8004480:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004484:	2302      	movs	r3, #2
 8004486:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800448a:	2301      	movs	r3, #1
 800448c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004490:	2301      	movs	r3, #1
 8004492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8004496:	2328      	movs	r3, #40	; 0x28
 8004498:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800449c:	2307      	movs	r3, #7
 800449e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80044a2:	2302      	movs	r3, #2
 80044a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80044a8:	2302      	movs	r3, #2
 80044aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fd fdc2 	bl	800203c <HAL_RCC_OscConfig>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80044be:	f000 f8cf 	bl	8004660 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044c2:	230f      	movs	r3, #15
 80044c4:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044c6:	2303      	movs	r3, #3
 80044c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044ca:	2300      	movs	r3, #0
 80044cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80044ce:	2300      	movs	r3, #0
 80044d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80044d2:	2300      	movs	r3, #0
 80044d4:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80044d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044da:	2104      	movs	r1, #4
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fe f9cd 	bl	800287c <HAL_RCC_ClockConfig>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <SystemClock_Config+0xae>
  {
    Error_Handler();
 80044e8:	f000 f8ba 	bl	8004660 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80044ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80044f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80044f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80044f8:	2301      	movs	r3, #1
 80044fa:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80044fc:	2301      	movs	r3, #1
 80044fe:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8004500:	2310      	movs	r3, #16
 8004502:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004504:	2307      	movs	r3, #7
 8004506:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004508:	2302      	movs	r3, #2
 800450a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800450c:	2302      	movs	r3, #2
 800450e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004510:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004514:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004516:	1d3b      	adds	r3, r7, #4
 8004518:	4618      	mov	r0, r3
 800451a:	f7fe fb7b 	bl	8002c14 <HAL_RCCEx_PeriphCLKConfig>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8004524:	f000 f89c 	bl	8004660 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004528:	f44f 7000 	mov.w	r0, #512	; 0x200
 800452c:	f7fd fd30 	bl	8001f90 <HAL_PWREx_ControlVoltageScaling>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8004536:	f000 f893 	bl	8004660 <Error_Handler>
  }
}
 800453a:	bf00      	nop
 800453c:	37b0      	adds	r7, #176	; 0xb0
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800454a:	463b      	mov	r3, r7
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	60da      	str	r2, [r3, #12]
 8004556:	611a      	str	r2, [r3, #16]
 8004558:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800455a:	4b2a      	ldr	r3, [pc, #168]	; (8004604 <MX_ADC1_Init+0xc0>)
 800455c:	4a2a      	ldr	r2, [pc, #168]	; (8004608 <MX_ADC1_Init+0xc4>)
 800455e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004560:	4b28      	ldr	r3, [pc, #160]	; (8004604 <MX_ADC1_Init+0xc0>)
 8004562:	2200      	movs	r2, #0
 8004564:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004566:	4b27      	ldr	r3, [pc, #156]	; (8004604 <MX_ADC1_Init+0xc0>)
 8004568:	2200      	movs	r2, #0
 800456a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800456c:	4b25      	ldr	r3, [pc, #148]	; (8004604 <MX_ADC1_Init+0xc0>)
 800456e:	2200      	movs	r2, #0
 8004570:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004572:	4b24      	ldr	r3, [pc, #144]	; (8004604 <MX_ADC1_Init+0xc0>)
 8004574:	2200      	movs	r2, #0
 8004576:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004578:	4b22      	ldr	r3, [pc, #136]	; (8004604 <MX_ADC1_Init+0xc0>)
 800457a:	2204      	movs	r2, #4
 800457c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800457e:	4b21      	ldr	r3, [pc, #132]	; (8004604 <MX_ADC1_Init+0xc0>)
 8004580:	2200      	movs	r2, #0
 8004582:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004584:	4b1f      	ldr	r3, [pc, #124]	; (8004604 <MX_ADC1_Init+0xc0>)
 8004586:	2200      	movs	r2, #0
 8004588:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800458a:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <MX_ADC1_Init+0xc0>)
 800458c:	2201      	movs	r2, #1
 800458e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004590:	4b1c      	ldr	r3, [pc, #112]	; (8004604 <MX_ADC1_Init+0xc0>)
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8004598:	4b1a      	ldr	r3, [pc, #104]	; (8004604 <MX_ADC1_Init+0xc0>)
 800459a:	2201      	movs	r2, #1
 800459c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800459e:	4b19      	ldr	r3, [pc, #100]	; (8004604 <MX_ADC1_Init+0xc0>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80045a4:	4b17      	ldr	r3, [pc, #92]	; (8004604 <MX_ADC1_Init+0xc0>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80045aa:	4b16      	ldr	r3, [pc, #88]	; (8004604 <MX_ADC1_Init+0xc0>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80045b2:	4b14      	ldr	r3, [pc, #80]	; (8004604 <MX_ADC1_Init+0xc0>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80045b8:	4b12      	ldr	r3, [pc, #72]	; (8004604 <MX_ADC1_Init+0xc0>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80045c0:	4810      	ldr	r0, [pc, #64]	; (8004604 <MX_ADC1_Init+0xc0>)
 80045c2:	f7fc fc3f 	bl	8000e44 <HAL_ADC_Init>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80045cc:	f000 f848 	bl	8004660 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80045d0:	4b0e      	ldr	r3, [pc, #56]	; (800460c <MX_ADC1_Init+0xc8>)
 80045d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80045d4:	2306      	movs	r3, #6
 80045d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80045d8:	2304      	movs	r3, #4
 80045da:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80045dc:	237f      	movs	r3, #127	; 0x7f
 80045de:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80045e0:	2304      	movs	r3, #4
 80045e2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80045e8:	463b      	mov	r3, r7
 80045ea:	4619      	mov	r1, r3
 80045ec:	4805      	ldr	r0, [pc, #20]	; (8004604 <MX_ADC1_Init+0xc0>)
 80045ee:	f7fc fe67 	bl	80012c0 <HAL_ADC_ConfigChannel>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80045f8:	f000 f832 	bl	8004660 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80045fc:	bf00      	nop
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	200000c0 	.word	0x200000c0
 8004608:	50040000 	.word	0x50040000
 800460c:	14f00020 	.word	0x14f00020

08004610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004616:	1d3b      	adds	r3, r7, #4
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	605a      	str	r2, [r3, #4]
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	60da      	str	r2, [r3, #12]
 8004622:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004624:	4b0d      	ldr	r3, [pc, #52]	; (800465c <MX_GPIO_Init+0x4c>)
 8004626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004628:	4a0c      	ldr	r2, [pc, #48]	; (800465c <MX_GPIO_Init+0x4c>)
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004630:	4b0a      	ldr	r3, [pc, #40]	; (800465c <MX_GPIO_Init+0x4c>)
 8004632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	603b      	str	r3, [r7, #0]
 800463a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800463c:	2302      	movs	r3, #2
 800463e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004640:	2300      	movs	r3, #0
 8004642:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004648:	1d3b      	adds	r3, r7, #4
 800464a:	4619      	mov	r1, r3
 800464c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004650:	f7fd faf6 	bl	8001c40 <HAL_GPIO_Init>

}
 8004654:	bf00      	nop
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40021000 	.word	0x40021000

08004660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004664:	bf00      	nop
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
	...

08004670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004676:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <HAL_MspInit+0x44>)
 8004678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467a:	4a0e      	ldr	r2, [pc, #56]	; (80046b4 <HAL_MspInit+0x44>)
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	6613      	str	r3, [r2, #96]	; 0x60
 8004682:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <HAL_MspInit+0x44>)
 8004684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	607b      	str	r3, [r7, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800468e:	4b09      	ldr	r3, [pc, #36]	; (80046b4 <HAL_MspInit+0x44>)
 8004690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004692:	4a08      	ldr	r2, [pc, #32]	; (80046b4 <HAL_MspInit+0x44>)
 8004694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004698:	6593      	str	r3, [r2, #88]	; 0x58
 800469a:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <HAL_MspInit+0x44>)
 800469c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40021000 	.word	0x40021000

080046b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08a      	sub	sp, #40	; 0x28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c0:	f107 0314 	add.w	r3, r7, #20
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	605a      	str	r2, [r3, #4]
 80046ca:	609a      	str	r2, [r3, #8]
 80046cc:	60da      	str	r2, [r3, #12]
 80046ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a15      	ldr	r2, [pc, #84]	; (800472c <HAL_ADC_MspInit+0x74>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d124      	bne.n	8004724 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80046da:	4b15      	ldr	r3, [pc, #84]	; (8004730 <HAL_ADC_MspInit+0x78>)
 80046dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046de:	4a14      	ldr	r2, [pc, #80]	; (8004730 <HAL_ADC_MspInit+0x78>)
 80046e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046e6:	4b12      	ldr	r3, [pc, #72]	; (8004730 <HAL_ADC_MspInit+0x78>)
 80046e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f2:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <HAL_ADC_MspInit+0x78>)
 80046f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f6:	4a0e      	ldr	r2, [pc, #56]	; (8004730 <HAL_ADC_MspInit+0x78>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <HAL_ADC_MspInit+0x78>)
 8004700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800470a:	2301      	movs	r3, #1
 800470c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800470e:	230b      	movs	r3, #11
 8004710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004712:	2300      	movs	r3, #0
 8004714:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004716:	f107 0314 	add.w	r3, r7, #20
 800471a:	4619      	mov	r1, r3
 800471c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004720:	f7fd fa8e 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004724:	bf00      	nop
 8004726:	3728      	adds	r7, #40	; 0x28
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	50040000 	.word	0x50040000
 8004730:	40021000 	.word	0x40021000

08004734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a0d      	ldr	r2, [pc, #52]	; (8004778 <HAL_TIM_Base_MspInit+0x44>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d113      	bne.n	800476e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004746:	4b0d      	ldr	r3, [pc, #52]	; (800477c <HAL_TIM_Base_MspInit+0x48>)
 8004748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474a:	4a0c      	ldr	r2, [pc, #48]	; (800477c <HAL_TIM_Base_MspInit+0x48>)
 800474c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004750:	6613      	str	r3, [r2, #96]	; 0x60
 8004752:	4b0a      	ldr	r3, [pc, #40]	; (800477c <HAL_TIM_Base_MspInit+0x48>)
 8004754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800475e:	2200      	movs	r2, #0
 8004760:	2100      	movs	r1, #0
 8004762:	2018      	movs	r0, #24
 8004764:	f7fd fa35 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004768:	2018      	movs	r0, #24
 800476a:	f7fd fa4e 	bl	8001c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40014000 	.word	0x40014000
 800477c:	40021000 	.word	0x40021000

08004780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004784:	bf00      	nop
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800478e:	b480      	push	{r7}
 8004790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004792:	e7fe      	b.n	8004792 <HardFault_Handler+0x4>

08004794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004798:	e7fe      	b.n	8004798 <MemManage_Handler+0x4>

0800479a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800479a:	b480      	push	{r7}
 800479c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800479e:	e7fe      	b.n	800479e <BusFault_Handler+0x4>

080047a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047a4:	e7fe      	b.n	80047a4 <UsageFault_Handler+0x4>

080047a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047a6:	b480      	push	{r7}
 80047a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047aa:	bf00      	nop
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047b8:	bf00      	nop
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047c2:	b480      	push	{r7}
 80047c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047c6:	bf00      	nop
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047d4:	f7fc f93c 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047d8:	bf00      	nop
 80047da:	bd80      	pop	{r7, pc}

080047dc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80047e0:	4802      	ldr	r0, [pc, #8]	; (80047ec <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80047e2:	f7fe fd4f 	bl	8003284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80047e6:	bf00      	nop
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20000080 	.word	0x20000080

080047f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047f4:	4b17      	ldr	r3, [pc, #92]	; (8004854 <SystemInit+0x64>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fa:	4a16      	ldr	r2, [pc, #88]	; (8004854 <SystemInit+0x64>)
 80047fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004804:	4b14      	ldr	r3, [pc, #80]	; (8004858 <SystemInit+0x68>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a13      	ldr	r2, [pc, #76]	; (8004858 <SystemInit+0x68>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004810:	4b11      	ldr	r3, [pc, #68]	; (8004858 <SystemInit+0x68>)
 8004812:	2200      	movs	r2, #0
 8004814:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004816:	4b10      	ldr	r3, [pc, #64]	; (8004858 <SystemInit+0x68>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a0f      	ldr	r2, [pc, #60]	; (8004858 <SystemInit+0x68>)
 800481c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004820:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004824:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004826:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <SystemInit+0x68>)
 8004828:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800482c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800482e:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <SystemInit+0x68>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a09      	ldr	r2, [pc, #36]	; (8004858 <SystemInit+0x68>)
 8004834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004838:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800483a:	4b07      	ldr	r3, [pc, #28]	; (8004858 <SystemInit+0x68>)
 800483c:	2200      	movs	r2, #0
 800483e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004840:	4b04      	ldr	r3, [pc, #16]	; (8004854 <SystemInit+0x64>)
 8004842:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004846:	609a      	str	r2, [r3, #8]
#endif
}
 8004848:	bf00      	nop
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	e000ed00 	.word	0xe000ed00
 8004858:	40021000 	.word	0x40021000

0800485c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800485c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004894 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004860:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004862:	e003      	b.n	800486c <LoopCopyDataInit>

08004864 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004866:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004868:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800486a:	3104      	adds	r1, #4

0800486c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800486c:	480b      	ldr	r0, [pc, #44]	; (800489c <LoopForever+0xa>)
	ldr	r3, =_edata
 800486e:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004870:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004872:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004874:	d3f6      	bcc.n	8004864 <CopyDataInit>
	ldr	r2, =_sbss
 8004876:	4a0b      	ldr	r2, [pc, #44]	; (80048a4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004878:	e002      	b.n	8004880 <LoopFillZerobss>

0800487a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800487a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800487c:	f842 3b04 	str.w	r3, [r2], #4

08004880 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004880:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <LoopForever+0x16>)
	cmp	r2, r3
 8004882:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004884:	d3f9      	bcc.n	800487a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004886:	f7ff ffb3 	bl	80047f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800488a:	f000 f841 	bl	8004910 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800488e:	f7ff fd75 	bl	800437c <main>

08004892 <LoopForever>:

LoopForever:
    b LoopForever
 8004892:	e7fe      	b.n	8004892 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004894:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8004898:	080049e4 	.word	0x080049e4
	ldr	r0, =_sdata
 800489c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80048a0:	2000004c 	.word	0x2000004c
	ldr	r2, =_sbss
 80048a4:	2000004c 	.word	0x2000004c
	ldr	r3, = _ebss
 80048a8:	20000124 	.word	0x20000124

080048ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80048ac:	e7fe      	b.n	80048ac <ADC1_IRQHandler>
	...

080048b0 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80048b4:	4b14      	ldr	r3, [pc, #80]	; (8004908 <DWT_Delay_Init+0x58>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4a13      	ldr	r2, [pc, #76]	; (8004908 <DWT_Delay_Init+0x58>)
 80048ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048be:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80048c0:	4b11      	ldr	r3, [pc, #68]	; (8004908 <DWT_Delay_Init+0x58>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	4a10      	ldr	r2, [pc, #64]	; (8004908 <DWT_Delay_Init+0x58>)
 80048c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ca:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80048cc:	4b0f      	ldr	r3, [pc, #60]	; (800490c <DWT_Delay_Init+0x5c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a0e      	ldr	r2, [pc, #56]	; (800490c <DWT_Delay_Init+0x5c>)
 80048d2:	f023 0301 	bic.w	r3, r3, #1
 80048d6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80048d8:	4b0c      	ldr	r3, [pc, #48]	; (800490c <DWT_Delay_Init+0x5c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a0b      	ldr	r2, [pc, #44]	; (800490c <DWT_Delay_Init+0x5c>)
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80048e4:	4b09      	ldr	r3, [pc, #36]	; (800490c <DWT_Delay_Init+0x5c>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80048ea:	bf00      	nop
    __ASM volatile ("NOP");
 80048ec:	bf00      	nop
    __ASM volatile ("NOP");
 80048ee:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80048f0:	4b06      	ldr	r3, [pc, #24]	; (800490c <DWT_Delay_Init+0x5c>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80048f8:	2300      	movs	r3, #0
 80048fa:	e000      	b.n	80048fe <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80048fc:	2301      	movs	r3, #1
    }
}
 80048fe:	4618      	mov	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	e000edf0 	.word	0xe000edf0
 800490c:	e0001000 	.word	0xe0001000

08004910 <__libc_init_array>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	4e0d      	ldr	r6, [pc, #52]	; (8004948 <__libc_init_array+0x38>)
 8004914:	4c0d      	ldr	r4, [pc, #52]	; (800494c <__libc_init_array+0x3c>)
 8004916:	1ba4      	subs	r4, r4, r6
 8004918:	10a4      	asrs	r4, r4, #2
 800491a:	2500      	movs	r5, #0
 800491c:	42a5      	cmp	r5, r4
 800491e:	d109      	bne.n	8004934 <__libc_init_array+0x24>
 8004920:	4e0b      	ldr	r6, [pc, #44]	; (8004950 <__libc_init_array+0x40>)
 8004922:	4c0c      	ldr	r4, [pc, #48]	; (8004954 <__libc_init_array+0x44>)
 8004924:	f000 f820 	bl	8004968 <_init>
 8004928:	1ba4      	subs	r4, r4, r6
 800492a:	10a4      	asrs	r4, r4, #2
 800492c:	2500      	movs	r5, #0
 800492e:	42a5      	cmp	r5, r4
 8004930:	d105      	bne.n	800493e <__libc_init_array+0x2e>
 8004932:	bd70      	pop	{r4, r5, r6, pc}
 8004934:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004938:	4798      	blx	r3
 800493a:	3501      	adds	r5, #1
 800493c:	e7ee      	b.n	800491c <__libc_init_array+0xc>
 800493e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004942:	4798      	blx	r3
 8004944:	3501      	adds	r5, #1
 8004946:	e7f2      	b.n	800492e <__libc_init_array+0x1e>
 8004948:	080049dc 	.word	0x080049dc
 800494c:	080049dc 	.word	0x080049dc
 8004950:	080049dc 	.word	0x080049dc
 8004954:	080049e0 	.word	0x080049e0

08004958 <memset>:
 8004958:	4402      	add	r2, r0
 800495a:	4603      	mov	r3, r0
 800495c:	4293      	cmp	r3, r2
 800495e:	d100      	bne.n	8004962 <memset+0xa>
 8004960:	4770      	bx	lr
 8004962:	f803 1b01 	strb.w	r1, [r3], #1
 8004966:	e7f9      	b.n	800495c <memset+0x4>

08004968 <_init>:
 8004968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496a:	bf00      	nop
 800496c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800496e:	bc08      	pop	{r3}
 8004970:	469e      	mov	lr, r3
 8004972:	4770      	bx	lr

08004974 <_fini>:
 8004974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004976:	bf00      	nop
 8004978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497a:	bc08      	pop	{r3}
 800497c:	469e      	mov	lr, r3
 800497e:	4770      	bx	lr
