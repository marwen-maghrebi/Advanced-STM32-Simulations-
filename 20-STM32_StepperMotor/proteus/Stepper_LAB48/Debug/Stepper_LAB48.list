
Stepper_LAB48.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000269c  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800282c  0800282c  0001282c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002888  08002888  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08002888  08002888  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002888  08002888  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002888  08002888  00012888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800288c  0800288c  0001288c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08002890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  2000004c  080028dc  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080028dc  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b00  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013b1  00000000  00000000  00026b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005d8  00000000  00000000  00027f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000508  00000000  00000000  00028508  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f5c5  00000000  00000000  00028a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000077e7  00000000  00000000  00047fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bf4a7  00000000  00000000  0004f7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010ec63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015dc  00000000  00000000  0010ece0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000004c 	.word	0x2000004c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002814 	.word	0x08002814

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000050 	.word	0x20000050
 80001cc:	08002814 	.word	0x08002814

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b6:	2003      	movs	r0, #3
 80009b8:	f000 f91a 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 f80d 	bl	80009dc <HAL_InitTick>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	e001      	b.n	80009d2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ce:	f001 fe13 	bl	80025f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009d2:	79fb      	ldrb	r3, [r7, #7]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <HAL_InitTick+0x68>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d022      	beq.n	8000a36 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_InitTick+0x6c>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <HAL_InitTick+0x68>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 f91a 	bl	8000c3e <HAL_SYSTICK_Config>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d10f      	bne.n	8000a30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b0f      	cmp	r3, #15
 8000a14:	d809      	bhi.n	8000a2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a16:	2200      	movs	r2, #0
 8000a18:	6879      	ldr	r1, [r7, #4]
 8000a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1e:	f000 f8f2 	bl	8000c06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_InitTick+0x70>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	e007      	b.n	8000a3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	73fb      	strb	r3, [r7, #15]
 8000a2e:	e004      	b.n	8000a3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	73fb      	strb	r3, [r7, #15]
 8000a34:	e001      	b.n	8000a3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000004 	.word	0x20000004
 8000a48:	20000048 	.word	0x20000048
 8000a4c:	20000000 	.word	0x20000000

08000a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_IncTick+0x1c>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_IncTick+0x20>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	4a03      	ldr	r2, [pc, #12]	; (8000a6c <HAL_IncTick+0x1c>)
 8000a60:	6013      	str	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	2000007c 	.word	0x2000007c
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <HAL_GetTick+0x14>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	2000007c 	.word	0x2000007c

08000a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000abe:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	60d3      	str	r3, [r2, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <__NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	; (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	; 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bbc:	d301      	bcc.n	8000bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00f      	b.n	8000be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <SysTick_Config+0x40>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bca:	210f      	movs	r1, #15
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f7ff ff8e 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <SysTick_Config+0x40>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <SysTick_Config+0x40>)
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	e000e010 	.word	0xe000e010

08000bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff47 	bl	8000a8c <__NVIC_SetPriorityGrouping>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c18:	f7ff ff5c 	bl	8000ad4 <__NVIC_GetPriorityGrouping>
 8000c1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f7ff ff8e 	bl	8000b44 <NVIC_EncodePriority>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff5d 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ffb0 	bl	8000bac <SysTick_Config>
 8000c4c:	4603      	mov	r3, r0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c66:	e148      	b.n	8000efa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	4013      	ands	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 813a 	beq.w	8000ef4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d00b      	beq.n	8000ca0 <HAL_GPIO_Init+0x48>
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d007      	beq.n	8000ca0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c94:	2b11      	cmp	r3, #17
 8000c96:	d003      	beq.n	8000ca0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b12      	cmp	r3, #18
 8000c9e:	d130      	bne.n	8000d02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	091b      	lsrs	r3, r3, #4
 8000cec:	f003 0201 	and.w	r2, r3, #1
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d003      	beq.n	8000d42 <HAL_GPIO_Init+0xea>
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b12      	cmp	r3, #18
 8000d40:	d123      	bne.n	8000d8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	08da      	lsrs	r2, r3, #3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3208      	adds	r2, #8
 8000d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	220f      	movs	r2, #15
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	691a      	ldr	r2, [r3, #16]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	08da      	lsrs	r2, r3, #3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3208      	adds	r2, #8
 8000d84:	6939      	ldr	r1, [r7, #16]
 8000d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	2203      	movs	r2, #3
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 0203 	and.w	r2, r3, #3
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 8094 	beq.w	8000ef4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dcc:	4b52      	ldr	r3, [pc, #328]	; (8000f18 <HAL_GPIO_Init+0x2c0>)
 8000dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd0:	4a51      	ldr	r2, [pc, #324]	; (8000f18 <HAL_GPIO_Init+0x2c0>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd8:	4b4f      	ldr	r3, [pc, #316]	; (8000f18 <HAL_GPIO_Init+0x2c0>)
 8000dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000de4:	4a4d      	ldr	r2, [pc, #308]	; (8000f1c <HAL_GPIO_Init+0x2c4>)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	220f      	movs	r2, #15
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e0e:	d00d      	beq.n	8000e2c <HAL_GPIO_Init+0x1d4>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a43      	ldr	r2, [pc, #268]	; (8000f20 <HAL_GPIO_Init+0x2c8>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d007      	beq.n	8000e28 <HAL_GPIO_Init+0x1d0>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a42      	ldr	r2, [pc, #264]	; (8000f24 <HAL_GPIO_Init+0x2cc>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d101      	bne.n	8000e24 <HAL_GPIO_Init+0x1cc>
 8000e20:	2302      	movs	r3, #2
 8000e22:	e004      	b.n	8000e2e <HAL_GPIO_Init+0x1d6>
 8000e24:	2307      	movs	r3, #7
 8000e26:	e002      	b.n	8000e2e <HAL_GPIO_Init+0x1d6>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e000      	b.n	8000e2e <HAL_GPIO_Init+0x1d6>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	f002 0203 	and.w	r2, r2, #3
 8000e34:	0092      	lsls	r2, r2, #2
 8000e36:	4093      	lsls	r3, r2
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e3e:	4937      	ldr	r1, [pc, #220]	; (8000f1c <HAL_GPIO_Init+0x2c4>)
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e4c:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e70:	4a2d      	ldr	r2, [pc, #180]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e76:	4b2c      	ldr	r3, [pc, #176]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e9a:	4a23      	ldr	r2, [pc, #140]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ea0:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ec4:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000eee:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	fa22 f303 	lsr.w	r3, r2, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f47f aeaf 	bne.w	8000c68 <HAL_GPIO_Init+0x10>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	371c      	adds	r7, #28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010000 	.word	0x40010000
 8000f20:	48000400 	.word	0x48000400
 8000f24:	48000800 	.word	0x48000800
 8000f28:	40010400 	.word	0x40010400

08000f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	807b      	strh	r3, [r7, #2]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f3c:	787b      	ldrb	r3, [r7, #1]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f42:	887a      	ldrh	r2, [r7, #2]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f48:	e002      	b.n	8000f50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40007000 	.word	0x40007000

08000f78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f86:	d130      	bne.n	8000fea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f88:	4b23      	ldr	r3, [pc, #140]	; (8001018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f94:	d038      	beq.n	8001008 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f9e:	4a1e      	ldr	r2, [pc, #120]	; (8001018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fa0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2232      	movs	r2, #50	; 0x32
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	4a1b      	ldr	r2, [pc, #108]	; (8001020 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb6:	0c9b      	lsrs	r3, r3, #18
 8000fb8:	3301      	adds	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fbc:	e002      	b.n	8000fc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fd0:	d102      	bne.n	8000fd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1f2      	bne.n	8000fbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fe4:	d110      	bne.n	8001008 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e00f      	b.n	800100a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff6:	d007      	beq.n	8001008 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001000:	4a05      	ldr	r2, [pc, #20]	; (8001018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001006:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40007000 	.word	0x40007000
 800101c:	20000048 	.word	0x20000048
 8001020:	431bde83 	.word	0x431bde83

08001024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	f000 bc11 	b.w	800185a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001038:	4ba0      	ldr	r3, [pc, #640]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 030c 	and.w	r3, r3, #12
 8001040:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001042:	4b9e      	ldr	r3, [pc, #632]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0310 	and.w	r3, r3, #16
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80e4 	beq.w	8001222 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d007      	beq.n	8001070 <HAL_RCC_OscConfig+0x4c>
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2b0c      	cmp	r3, #12
 8001064:	f040 808b 	bne.w	800117e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2b01      	cmp	r3, #1
 800106c:	f040 8087 	bne.w	800117e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001070:	4b92      	ldr	r3, [pc, #584]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <HAL_RCC_OscConfig+0x64>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e3e8      	b.n	800185a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a1a      	ldr	r2, [r3, #32]
 800108c:	4b8b      	ldr	r3, [pc, #556]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <HAL_RCC_OscConfig+0x7e>
 8001098:	4b88      	ldr	r3, [pc, #544]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010a0:	e005      	b.n	80010ae <HAL_RCC_OscConfig+0x8a>
 80010a2:	4b86      	ldr	r3, [pc, #536]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80010a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d223      	bcs.n	80010fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fd4c 	bl	8001b54 <RCC_SetFlashLatencyFromMSIRange>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e3c9      	b.n	800185a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010c6:	4b7d      	ldr	r3, [pc, #500]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a7c      	ldr	r2, [pc, #496]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	4b7a      	ldr	r3, [pc, #488]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	4977      	ldr	r1, [pc, #476]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010e4:	4b75      	ldr	r3, [pc, #468]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	4972      	ldr	r1, [pc, #456]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	604b      	str	r3, [r1, #4]
 80010f8:	e025      	b.n	8001146 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010fa:	4b70      	ldr	r3, [pc, #448]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a6f      	ldr	r2, [pc, #444]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b6d      	ldr	r3, [pc, #436]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	496a      	ldr	r1, [pc, #424]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 8001114:	4313      	orrs	r3, r2
 8001116:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001118:	4b68      	ldr	r3, [pc, #416]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	4965      	ldr	r1, [pc, #404]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d109      	bne.n	8001146 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fd0c 	bl	8001b54 <RCC_SetFlashLatencyFromMSIRange>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e389      	b.n	800185a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001146:	f000 fc6f 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 800114a:	4601      	mov	r1, r0
 800114c:	4b5b      	ldr	r3, [pc, #364]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	4a5a      	ldr	r2, [pc, #360]	; (80012c0 <HAL_RCC_OscConfig+0x29c>)
 8001158:	5cd3      	ldrb	r3, [r2, r3]
 800115a:	f003 031f 	and.w	r3, r3, #31
 800115e:	fa21 f303 	lsr.w	r3, r1, r3
 8001162:	4a58      	ldr	r2, [pc, #352]	; (80012c4 <HAL_RCC_OscConfig+0x2a0>)
 8001164:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001166:	4b58      	ldr	r3, [pc, #352]	; (80012c8 <HAL_RCC_OscConfig+0x2a4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fc36 	bl	80009dc <HAL_InitTick>
 8001170:	4603      	mov	r3, r0
 8001172:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d052      	beq.n	8001220 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	e36d      	b.n	800185a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d032      	beq.n	80011ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001186:	4b4d      	ldr	r3, [pc, #308]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a4c      	ldr	r2, [pc, #304]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001192:	f7ff fc6f 	bl	8000a74 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800119a:	f7ff fc6b 	bl	8000a74 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e356      	b.n	800185a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011ac:	4b43      	ldr	r3, [pc, #268]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011b8:	4b40      	ldr	r3, [pc, #256]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a3f      	ldr	r2, [pc, #252]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80011be:	f043 0308 	orr.w	r3, r3, #8
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	493a      	ldr	r1, [pc, #232]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d6:	4b39      	ldr	r3, [pc, #228]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	4935      	ldr	r1, [pc, #212]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	604b      	str	r3, [r1, #4]
 80011ea:	e01a      	b.n	8001222 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011ec:	4b33      	ldr	r3, [pc, #204]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a32      	ldr	r2, [pc, #200]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80011f2:	f023 0301 	bic.w	r3, r3, #1
 80011f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fc3c 	bl	8000a74 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001200:	f7ff fc38 	bl	8000a74 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e323      	b.n	800185a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001212:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_RCC_OscConfig+0x1dc>
 800121e:	e000      	b.n	8001222 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001220:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d073      	beq.n	8001316 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2b08      	cmp	r3, #8
 8001232:	d005      	beq.n	8001240 <HAL_RCC_OscConfig+0x21c>
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2b0c      	cmp	r3, #12
 8001238:	d10e      	bne.n	8001258 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2b03      	cmp	r3, #3
 800123e:	d10b      	bne.n	8001258 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d063      	beq.n	8001314 <HAL_RCC_OscConfig+0x2f0>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d15f      	bne.n	8001314 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e300      	b.n	800185a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001260:	d106      	bne.n	8001270 <HAL_RCC_OscConfig+0x24c>
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a15      	ldr	r2, [pc, #84]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e01d      	b.n	80012ac <HAL_RCC_OscConfig+0x288>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001278:	d10c      	bne.n	8001294 <HAL_RCC_OscConfig+0x270>
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 8001280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 800128c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e00b      	b.n	80012ac <HAL_RCC_OscConfig+0x288>
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a08      	ldr	r2, [pc, #32]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 800129a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a05      	ldr	r2, [pc, #20]	; (80012bc <HAL_RCC_OscConfig+0x298>)
 80012a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d01b      	beq.n	80012ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff fbde 	bl	8000a74 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ba:	e010      	b.n	80012de <HAL_RCC_OscConfig+0x2ba>
 80012bc:	40021000 	.word	0x40021000
 80012c0:	08002848 	.word	0x08002848
 80012c4:	20000048 	.word	0x20000048
 80012c8:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fbd2 	bl	8000a74 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	; 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e2bd      	b.n	800185a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012de:	4baf      	ldr	r3, [pc, #700]	; (800159c <HAL_RCC_OscConfig+0x578>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0x2a8>
 80012ea:	e014      	b.n	8001316 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ec:	f7ff fbc2 	bl	8000a74 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fbbe 	bl	8000a74 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e2a9      	b.n	800185a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001306:	4ba5      	ldr	r3, [pc, #660]	; (800159c <HAL_RCC_OscConfig+0x578>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x2d0>
 8001312:	e000      	b.n	8001316 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d060      	beq.n	80013e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	2b04      	cmp	r3, #4
 8001326:	d005      	beq.n	8001334 <HAL_RCC_OscConfig+0x310>
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2b0c      	cmp	r3, #12
 800132c:	d119      	bne.n	8001362 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d116      	bne.n	8001362 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001334:	4b99      	ldr	r3, [pc, #612]	; (800159c <HAL_RCC_OscConfig+0x578>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <HAL_RCC_OscConfig+0x328>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e286      	b.n	800185a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134c:	4b93      	ldr	r3, [pc, #588]	; (800159c <HAL_RCC_OscConfig+0x578>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	061b      	lsls	r3, r3, #24
 800135a:	4990      	ldr	r1, [pc, #576]	; (800159c <HAL_RCC_OscConfig+0x578>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001360:	e040      	b.n	80013e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d023      	beq.n	80013b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800136a:	4b8c      	ldr	r3, [pc, #560]	; (800159c <HAL_RCC_OscConfig+0x578>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a8b      	ldr	r2, [pc, #556]	; (800159c <HAL_RCC_OscConfig+0x578>)
 8001370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	f7ff fb7d 	bl	8000a74 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff fb79 	bl	8000a74 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e264      	b.n	800185a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001390:	4b82      	ldr	r3, [pc, #520]	; (800159c <HAL_RCC_OscConfig+0x578>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139c:	4b7f      	ldr	r3, [pc, #508]	; (800159c <HAL_RCC_OscConfig+0x578>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	061b      	lsls	r3, r3, #24
 80013aa:	497c      	ldr	r1, [pc, #496]	; (800159c <HAL_RCC_OscConfig+0x578>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
 80013b0:	e018      	b.n	80013e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b2:	4b7a      	ldr	r3, [pc, #488]	; (800159c <HAL_RCC_OscConfig+0x578>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a79      	ldr	r2, [pc, #484]	; (800159c <HAL_RCC_OscConfig+0x578>)
 80013b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013be:	f7ff fb59 	bl	8000a74 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c6:	f7ff fb55 	bl	8000a74 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e240      	b.n	800185a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013d8:	4b70      	ldr	r3, [pc, #448]	; (800159c <HAL_RCC_OscConfig+0x578>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f0      	bne.n	80013c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d03c      	beq.n	800146a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d01c      	beq.n	8001432 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f8:	4b68      	ldr	r3, [pc, #416]	; (800159c <HAL_RCC_OscConfig+0x578>)
 80013fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013fe:	4a67      	ldr	r2, [pc, #412]	; (800159c <HAL_RCC_OscConfig+0x578>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001408:	f7ff fb34 	bl	8000a74 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001410:	f7ff fb30 	bl	8000a74 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e21b      	b.n	800185a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001422:	4b5e      	ldr	r3, [pc, #376]	; (800159c <HAL_RCC_OscConfig+0x578>)
 8001424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0ef      	beq.n	8001410 <HAL_RCC_OscConfig+0x3ec>
 8001430:	e01b      	b.n	800146a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001432:	4b5a      	ldr	r3, [pc, #360]	; (800159c <HAL_RCC_OscConfig+0x578>)
 8001434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001438:	4a58      	ldr	r2, [pc, #352]	; (800159c <HAL_RCC_OscConfig+0x578>)
 800143a:	f023 0301 	bic.w	r3, r3, #1
 800143e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001442:	f7ff fb17 	bl	8000a74 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800144a:	f7ff fb13 	bl	8000a74 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e1fe      	b.n	800185a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800145c:	4b4f      	ldr	r3, [pc, #316]	; (800159c <HAL_RCC_OscConfig+0x578>)
 800145e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1ef      	bne.n	800144a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 80a6 	beq.w	80015c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800147c:	4b47      	ldr	r3, [pc, #284]	; (800159c <HAL_RCC_OscConfig+0x578>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10d      	bne.n	80014a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001488:	4b44      	ldr	r3, [pc, #272]	; (800159c <HAL_RCC_OscConfig+0x578>)
 800148a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148c:	4a43      	ldr	r2, [pc, #268]	; (800159c <HAL_RCC_OscConfig+0x578>)
 800148e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001492:	6593      	str	r3, [r2, #88]	; 0x58
 8001494:	4b41      	ldr	r3, [pc, #260]	; (800159c <HAL_RCC_OscConfig+0x578>)
 8001496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014a0:	2301      	movs	r3, #1
 80014a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a4:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <HAL_RCC_OscConfig+0x57c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d118      	bne.n	80014e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014b0:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <HAL_RCC_OscConfig+0x57c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a3a      	ldr	r2, [pc, #232]	; (80015a0 <HAL_RCC_OscConfig+0x57c>)
 80014b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014bc:	f7ff fada 	bl	8000a74 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c4:	f7ff fad6 	bl	8000a74 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e1c1      	b.n	800185a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d6:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <HAL_RCC_OscConfig+0x57c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d108      	bne.n	80014fc <HAL_RCC_OscConfig+0x4d8>
 80014ea:	4b2c      	ldr	r3, [pc, #176]	; (800159c <HAL_RCC_OscConfig+0x578>)
 80014ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f0:	4a2a      	ldr	r2, [pc, #168]	; (800159c <HAL_RCC_OscConfig+0x578>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014fa:	e024      	b.n	8001546 <HAL_RCC_OscConfig+0x522>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b05      	cmp	r3, #5
 8001502:	d110      	bne.n	8001526 <HAL_RCC_OscConfig+0x502>
 8001504:	4b25      	ldr	r3, [pc, #148]	; (800159c <HAL_RCC_OscConfig+0x578>)
 8001506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150a:	4a24      	ldr	r2, [pc, #144]	; (800159c <HAL_RCC_OscConfig+0x578>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <HAL_RCC_OscConfig+0x578>)
 8001516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151a:	4a20      	ldr	r2, [pc, #128]	; (800159c <HAL_RCC_OscConfig+0x578>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001524:	e00f      	b.n	8001546 <HAL_RCC_OscConfig+0x522>
 8001526:	4b1d      	ldr	r3, [pc, #116]	; (800159c <HAL_RCC_OscConfig+0x578>)
 8001528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152c:	4a1b      	ldr	r2, [pc, #108]	; (800159c <HAL_RCC_OscConfig+0x578>)
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <HAL_RCC_OscConfig+0x578>)
 8001538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153c:	4a17      	ldr	r2, [pc, #92]	; (800159c <HAL_RCC_OscConfig+0x578>)
 800153e:	f023 0304 	bic.w	r3, r3, #4
 8001542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d016      	beq.n	800157c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154e:	f7ff fa91 	bl	8000a74 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001554:	e00a      	b.n	800156c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001556:	f7ff fa8d 	bl	8000a74 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	f241 3288 	movw	r2, #5000	; 0x1388
 8001564:	4293      	cmp	r3, r2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e176      	b.n	800185a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_RCC_OscConfig+0x578>)
 800156e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0ed      	beq.n	8001556 <HAL_RCC_OscConfig+0x532>
 800157a:	e01a      	b.n	80015b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157c:	f7ff fa7a 	bl	8000a74 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001582:	e00f      	b.n	80015a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f7ff fa76 	bl	8000a74 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d906      	bls.n	80015a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e15f      	b.n	800185a <HAL_RCC_OscConfig+0x836>
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000
 80015a0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015a4:	4baa      	ldr	r3, [pc, #680]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 80015a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1e8      	bne.n	8001584 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015b2:	7ffb      	ldrb	r3, [r7, #31]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d105      	bne.n	80015c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b8:	4ba5      	ldr	r3, [pc, #660]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 80015ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015bc:	4aa4      	ldr	r2, [pc, #656]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 80015be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0320 	and.w	r3, r3, #32
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d03c      	beq.n	800164a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d01c      	beq.n	8001612 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015d8:	4b9d      	ldr	r3, [pc, #628]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 80015da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015de:	4a9c      	ldr	r2, [pc, #624]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e8:	f7ff fa44 	bl	8000a74 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015f0:	f7ff fa40 	bl	8000a74 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e12b      	b.n	800185a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001602:	4b93      	ldr	r3, [pc, #588]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 8001604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0ef      	beq.n	80015f0 <HAL_RCC_OscConfig+0x5cc>
 8001610:	e01b      	b.n	800164a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001612:	4b8f      	ldr	r3, [pc, #572]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 8001614:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001618:	4a8d      	ldr	r2, [pc, #564]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001622:	f7ff fa27 	bl	8000a74 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800162a:	f7ff fa23 	bl	8000a74 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e10e      	b.n	800185a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800163c:	4b84      	ldr	r3, [pc, #528]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 800163e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1ef      	bne.n	800162a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8102 	beq.w	8001858 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001658:	2b02      	cmp	r3, #2
 800165a:	f040 80c5 	bne.w	80017e8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800165e:	4b7c      	ldr	r3, [pc, #496]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f003 0203 	and.w	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166e:	429a      	cmp	r2, r3
 8001670:	d12c      	bne.n	80016cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	3b01      	subs	r3, #1
 800167e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001680:	429a      	cmp	r2, r3
 8001682:	d123      	bne.n	80016cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d11b      	bne.n	80016cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d113      	bne.n	80016cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ae:	085b      	lsrs	r3, r3, #1
 80016b0:	3b01      	subs	r3, #1
 80016b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d109      	bne.n	80016cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	085b      	lsrs	r3, r3, #1
 80016c4:	3b01      	subs	r3, #1
 80016c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d067      	beq.n	800179c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2b0c      	cmp	r3, #12
 80016d0:	d062      	beq.n	8001798 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016d2:	4b5f      	ldr	r3, [pc, #380]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0bb      	b.n	800185a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016e2:	4b5b      	ldr	r3, [pc, #364]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a5a      	ldr	r2, [pc, #360]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 80016e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016ee:	f7ff f9c1 	bl	8000a74 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f6:	f7ff f9bd 	bl	8000a74 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e0a8      	b.n	800185a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001708:	4b51      	ldr	r3, [pc, #324]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001714:	4b4e      	ldr	r3, [pc, #312]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	4b4e      	ldr	r3, [pc, #312]	; (8001854 <HAL_RCC_OscConfig+0x830>)
 800171a:	4013      	ands	r3, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001724:	3a01      	subs	r2, #1
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	4311      	orrs	r1, r2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800172e:	0212      	lsls	r2, r2, #8
 8001730:	4311      	orrs	r1, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001736:	0852      	lsrs	r2, r2, #1
 8001738:	3a01      	subs	r2, #1
 800173a:	0552      	lsls	r2, r2, #21
 800173c:	4311      	orrs	r1, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001742:	0852      	lsrs	r2, r2, #1
 8001744:	3a01      	subs	r2, #1
 8001746:	0652      	lsls	r2, r2, #25
 8001748:	4311      	orrs	r1, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800174e:	06d2      	lsls	r2, r2, #27
 8001750:	430a      	orrs	r2, r1
 8001752:	493f      	ldr	r1, [pc, #252]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 8001754:	4313      	orrs	r3, r2
 8001756:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001758:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a3c      	ldr	r2, [pc, #240]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 800175e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001762:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001764:	4b3a      	ldr	r3, [pc, #232]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4a39      	ldr	r2, [pc, #228]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 800176a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800176e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001770:	f7ff f980 	bl	8000a74 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff f97c 	bl	8000a74 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e067      	b.n	800185a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178a:	4b31      	ldr	r3, [pc, #196]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001796:	e05f      	b.n	8001858 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e05e      	b.n	800185a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179c:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d157      	bne.n	8001858 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017a8:	4b29      	ldr	r3, [pc, #164]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a28      	ldr	r2, [pc, #160]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 80017ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017b4:	4b26      	ldr	r3, [pc, #152]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	4a25      	ldr	r2, [pc, #148]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 80017ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017c0:	f7ff f958 	bl	8000a74 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff f954 	bl	8000a74 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e03f      	b.n	800185a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x7a4>
 80017e6:	e037      	b.n	8001858 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2b0c      	cmp	r3, #12
 80017ec:	d02d      	beq.n	800184a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a17      	ldr	r2, [pc, #92]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 80017f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017f8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d105      	bne.n	8001812 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	4a11      	ldr	r2, [pc, #68]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 800180c:	f023 0303 	bic.w	r3, r3, #3
 8001810:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 8001818:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800181c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001820:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001822:	f7ff f927 	bl	8000a74 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182a:	f7ff f923 	bl	8000a74 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e00e      	b.n	800185a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <HAL_RCC_OscConfig+0x82c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f0      	bne.n	800182a <HAL_RCC_OscConfig+0x806>
 8001848:	e006      	b.n	8001858 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e005      	b.n	800185a <HAL_RCC_OscConfig+0x836>
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000
 8001854:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop

08001864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0c8      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b66      	ldr	r3, [pc, #408]	; (8001a14 <HAL_RCC_ClockConfig+0x1b0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d910      	bls.n	80018a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b63      	ldr	r3, [pc, #396]	; (8001a14 <HAL_RCC_ClockConfig+0x1b0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 0207 	bic.w	r2, r3, #7
 800188e:	4961      	ldr	r1, [pc, #388]	; (8001a14 <HAL_RCC_ClockConfig+0x1b0>)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b5f      	ldr	r3, [pc, #380]	; (8001a14 <HAL_RCC_ClockConfig+0x1b0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0b0      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d04c      	beq.n	800194e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d107      	bne.n	80018cc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018bc:	4b56      	ldr	r3, [pc, #344]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d121      	bne.n	800190c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e09e      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d107      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018d4:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d115      	bne.n	800190c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e092      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d107      	bne.n	80018fc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ec:	4b4a      	ldr	r3, [pc, #296]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d109      	bne.n	800190c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e086      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018fc:	4b46      	ldr	r3, [pc, #280]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e07e      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800190c:	4b42      	ldr	r3, [pc, #264]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f023 0203 	bic.w	r2, r3, #3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	493f      	ldr	r1, [pc, #252]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800191e:	f7ff f8a9 	bl	8000a74 <HAL_GetTick>
 8001922:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001924:	e00a      	b.n	800193c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001926:	f7ff f8a5 	bl	8000a74 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f241 3288 	movw	r2, #5000	; 0x1388
 8001934:	4293      	cmp	r3, r2
 8001936:	d901      	bls.n	800193c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e066      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 020c 	and.w	r2, r3, #12
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	429a      	cmp	r2, r3
 800194c:	d1eb      	bne.n	8001926 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d008      	beq.n	800196c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195a:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	492c      	ldr	r1, [pc, #176]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 8001968:	4313      	orrs	r3, r2
 800196a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800196c:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <HAL_RCC_ClockConfig+0x1b0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d210      	bcs.n	800199c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <HAL_RCC_ClockConfig+0x1b0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 0207 	bic.w	r2, r3, #7
 8001982:	4924      	ldr	r1, [pc, #144]	; (8001a14 <HAL_RCC_ClockConfig+0x1b0>)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <HAL_RCC_ClockConfig+0x1b0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e036      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	4918      	ldr	r1, [pc, #96]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d009      	beq.n	80019da <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4910      	ldr	r1, [pc, #64]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019da:	f000 f825 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 80019de:	4601      	mov	r1, r0
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_RCC_ClockConfig+0x1b4>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 80019ec:	5cd3      	ldrb	r3, [r2, r3]
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	fa21 f303 	lsr.w	r3, r1, r3
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe ffec 	bl	80009dc <HAL_InitTick>
 8001a04:	4603      	mov	r3, r0
 8001a06:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a08:	7afb      	ldrb	r3, [r7, #11]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40022000 	.word	0x40022000
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08002848 	.word	0x08002848
 8001a20:	20000048 	.word	0x20000048
 8001a24:	20000000 	.word	0x20000000

08001a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a36:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x104>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a40:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x104>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x34>
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	d121      	bne.n	8001a9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d11e      	bne.n	8001a9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a5c:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x104>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d107      	bne.n	8001a78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a68:	4b30      	ldr	r3, [pc, #192]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x104>)
 8001a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a6e:	0a1b      	lsrs	r3, r3, #8
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	e005      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a78:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x104>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a84:	4a2a      	ldr	r2, [pc, #168]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10d      	bne.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d102      	bne.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001aa0:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001aa2:	61bb      	str	r3, [r7, #24]
 8001aa4:	e004      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001aac:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001aae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	2b0c      	cmp	r3, #12
 8001ab4:	d133      	bne.n	8001b1e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x104>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d002      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0xa4>
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d003      	beq.n	8001ad2 <HAL_RCC_GetSysClockFreq+0xaa>
 8001aca:	e005      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ace:	617b      	str	r3, [r7, #20]
      break;
 8001ad0:	e005      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ad2:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ad4:	617b      	str	r3, [r7, #20]
      break;
 8001ad6:	e002      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	617b      	str	r3, [r7, #20]
      break;
 8001adc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x104>)
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	3301      	adds	r3, #1
 8001aea:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x104>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	fb02 f203 	mul.w	r2, r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x104>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	0e5b      	lsrs	r3, r3, #25
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b1e:	69bb      	ldr	r3, [r7, #24]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3724      	adds	r7, #36	; 0x24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	08002858 	.word	0x08002858
 8001b34:	00f42400 	.word	0x00f42400
 8001b38:	007a1200 	.word	0x007a1200

08001b3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000048 	.word	0x20000048

08001b54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b60:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b6c:	f7ff f9f6 	bl	8000f5c <HAL_PWREx_GetVoltageRange>
 8001b70:	6178      	str	r0, [r7, #20]
 8001b72:	e014      	b.n	8001b9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b78:	4a24      	ldr	r2, [pc, #144]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b80:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b8c:	f7ff f9e6 	bl	8000f5c <HAL_PWREx_GetVoltageRange>
 8001b90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba4:	d10b      	bne.n	8001bbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b80      	cmp	r3, #128	; 0x80
 8001baa:	d919      	bls.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2ba0      	cmp	r3, #160	; 0xa0
 8001bb0:	d902      	bls.n	8001bb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	e013      	b.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bb8:	2301      	movs	r3, #1
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	e010      	b.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b80      	cmp	r3, #128	; 0x80
 8001bc2:	d902      	bls.n	8001bca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	e00a      	b.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b80      	cmp	r3, #128	; 0x80
 8001bce:	d102      	bne.n	8001bd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	e004      	b.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b70      	cmp	r3, #112	; 0x70
 8001bda:	d101      	bne.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bdc:	2301      	movs	r3, #1
 8001bde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 0207 	bic.w	r2, r3, #7
 8001be8:	4909      	ldr	r1, [pc, #36]	; (8001c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d001      	beq.n	8001c02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40022000 	.word	0x40022000

08001c14 <DWT_Delay_ms>:
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
}

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <DWT_Delay_ms+0x40>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8001c22:	f7ff ff8b 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <DWT_Delay_ms+0x44>)
 8001c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8001c2e:	099b      	lsrs	r3, r3, #6
 8001c30:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8001c3c:	bf00      	nop
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <DWT_Delay_ms+0x40>)
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1ad2      	subs	r2, r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d3f8      	bcc.n	8001c3e <DWT_Delay_ms+0x2a>
}
 8001c4c:	bf00      	nop
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	e0001000 	.word	0xe0001000
 8001c58:	10624dd3 	.word	0x10624dd3

08001c5c <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c62:	f107 0310 	add.w	r3, r7, #16
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    DWT_Delay_Init();
 8001c7e:	f000 fd6d 	bl	800275c <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c88:	e102      	b.n	8001e90 <STEPPERS_Init+0x234>
    {
    	for(j=0; j<4; j++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c90:	e079      	b.n	8001d86 <STEPPERS_Init+0x12a>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 8001c92:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001c96:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001c9a:	4889      	ldr	r0, [pc, #548]	; (8001ec0 <STEPPERS_Init+0x264>)
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001ca8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cac:	d10c      	bne.n	8001cc8 <STEPPERS_Init+0x6c>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	4b85      	ldr	r3, [pc, #532]	; (8001ec4 <STEPPERS_Init+0x268>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	4a84      	ldr	r2, [pc, #528]	; (8001ec4 <STEPPERS_Init+0x268>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cba:	4b82      	ldr	r3, [pc, #520]	; (8001ec4 <STEPPERS_Init+0x268>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	e034      	b.n	8001d32 <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 8001cc8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001ccc:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001cd0:	487b      	ldr	r0, [pc, #492]	; (8001ec0 <STEPPERS_Init+0x264>)
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	440b      	add	r3, r1
 8001cda:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001cde:	4a7a      	ldr	r2, [pc, #488]	; (8001ec8 <STEPPERS_Init+0x26c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d10c      	bne.n	8001cfe <STEPPERS_Init+0xa2>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce4:	4b77      	ldr	r3, [pc, #476]	; (8001ec4 <STEPPERS_Init+0x268>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce8:	4a76      	ldr	r2, [pc, #472]	; (8001ec4 <STEPPERS_Init+0x268>)
 8001cea:	f043 0302 	orr.w	r3, r3, #2
 8001cee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf0:	4b74      	ldr	r3, [pc, #464]	; (8001ec4 <STEPPERS_Init+0x268>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	e019      	b.n	8001d32 <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 8001cfe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001d02:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001d06:	486e      	ldr	r0, [pc, #440]	; (8001ec0 <STEPPERS_Init+0x264>)
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001d14:	4a6d      	ldr	r2, [pc, #436]	; (8001ecc <STEPPERS_Init+0x270>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d10b      	bne.n	8001d32 <STEPPERS_Init+0xd6>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1a:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <STEPPERS_Init+0x268>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	4a69      	ldr	r2, [pc, #420]	; (8001ec4 <STEPPERS_Init+0x268>)
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d26:	4b67      	ldr	r3, [pc, #412]	; (8001ec4 <STEPPERS_Init+0x268>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 8001d32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001d36:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001d3a:	4861      	ldr	r0, [pc, #388]	; (8001ec0 <STEPPERS_Init+0x264>)
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	440b      	add	r3, r1
 8001d46:	3308      	adds	r3, #8
 8001d48:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001d4c:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 8001d5a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001d5e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001d62:	4857      	ldr	r0, [pc, #348]	; (8001ec0 <STEPPERS_Init+0x264>)
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001d70:	f107 0210 	add.w	r2, r7, #16
 8001d74:	4611      	mov	r1, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe ff6e 	bl	8000c58 <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 8001d7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d80:	3301      	adds	r3, #1
 8001d82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001d86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d981      	bls.n	8001c92 <STEPPERS_Init+0x36>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CW;
 8001d8e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001d92:	494f      	ldr	r1, [pc, #316]	; (8001ed0 <STEPPERS_Init+0x274>)
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	3311      	adds	r3, #17
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 8001da4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001da8:	4949      	ldr	r1, [pc, #292]	; (8001ed0 <STEPPERS_Init+0x274>)
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	330f      	adds	r3, #15
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 8001dba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001dbe:	4944      	ldr	r1, [pc, #272]	; (8001ed0 <STEPPERS_Init+0x274>)
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 8001dce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001dd2:	493f      	ldr	r1, [pc, #252]	; (8001ed0 <STEPPERS_Init+0x274>)
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	3304      	adds	r3, #4
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 8001de4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001de8:	4939      	ldr	r1, [pc, #228]	; (8001ed0 <STEPPERS_Init+0x274>)
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	3308      	adds	r3, #8
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 8001dfa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001dfe:	4934      	ldr	r1, [pc, #208]	; (8001ed0 <STEPPERS_Init+0x274>)
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	330e      	adds	r3, #14
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8001e10:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001e14:	492a      	ldr	r1, [pc, #168]	; (8001ec0 <STEPPERS_Init+0x264>)
 8001e16:	4613      	mov	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	1a9b      	subs	r3, r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	331b      	adds	r3, #27
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d00b      	beq.n	8001e40 <STEPPERS_Init+0x1e4>
 8001e28:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001e2c:	4924      	ldr	r1, [pc, #144]	; (8001ec0 <STEPPERS_Init+0x264>)
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	1a9b      	subs	r3, r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	440b      	add	r3, r1
 8001e38:	331b      	adds	r3, #27
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10b      	bne.n	8001e58 <STEPPERS_Init+0x1fc>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 8001e40:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001e44:	4922      	ldr	r1, [pc, #136]	; (8001ed0 <STEPPERS_Init+0x274>)
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	3310      	adds	r3, #16
 8001e52:	2204      	movs	r2, #4
 8001e54:	701a      	strb	r2, [r3, #0]
 8001e56:	e016      	b.n	8001e86 <STEPPERS_Init+0x22a>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8001e58:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001e5c:	4918      	ldr	r1, [pc, #96]	; (8001ec0 <STEPPERS_Init+0x264>)
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	331b      	adds	r3, #27
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d10a      	bne.n	8001e86 <STEPPERS_Init+0x22a>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 8001e70:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001e74:	4916      	ldr	r1, [pc, #88]	; (8001ed0 <STEPPERS_Init+0x274>)
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	3310      	adds	r3, #16
 8001e82:	2208      	movs	r2, #8
 8001e84:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 8001e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f43f aef8 	beq.w	8001c8a <STEPPERS_Init+0x2e>
    	}
    }
    // for debug
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eaa:	f107 0310 	add.w	r3, r7, #16
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <STEPPERS_Init+0x26c>)
 8001eb2:	f7fe fed1 	bl	8000c58 <HAL_GPIO_Init>
}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	; 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	0800282c 	.word	0x0800282c
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	48000400 	.word	0x48000400
 8001ecc:	48000800 	.word	0x48000800
 8001ed0:	20000068 	.word	0x20000068
 8001ed4:	00000000 	.word	0x00000000

08001ed8 <STEPPER_SetSpeed>:
    	HAL_TIM_Base_Start_IT(TMR_Handle);
    }
}

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	460a      	mov	r2, r1
 8001ee2:	71fb      	strb	r3, [r7, #7]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 8001eec:	79fa      	ldrb	r2, [r7, #7]
 8001eee:	492a      	ldr	r1, [pc, #168]	; (8001f98 <STEPPER_SetSpeed+0xc0>)
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	330c      	adds	r3, #12
 8001efc:	88ba      	ldrh	r2, [r7, #4]
 8001efe:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 8001f00:	79fa      	ldrb	r2, [r7, #7]
 8001f02:	4926      	ldr	r1, [pc, #152]	; (8001f9c <STEPPER_SetSpeed+0xc4>)
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	331b      	adds	r3, #27
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d10b      	bne.n	8001f2e <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 8001f16:	79fa      	ldrb	r2, [r7, #7]
 8001f18:	4920      	ldr	r1, [pc, #128]	; (8001f9c <STEPPER_SetSpeed+0xc4>)
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	3318      	adds	r3, #24
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	e009      	b.n	8001f42 <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 8001f2e:	79fa      	ldrb	r2, [r7, #7]
 8001f30:	491a      	ldr	r1, [pc, #104]	; (8001f9c <STEPPER_SetSpeed+0xc4>)
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	1a9b      	subs	r3, r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	3318      	adds	r3, #24
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 8001f42:	88bb      	ldrh	r3, [r7, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	fb02 f303 	mul.w	r3, r2, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fa82 	bl	8000454 <__aeabi_ui2d>
 8001f50:	4603      	mov	r3, r0
 8001f52:	460c      	mov	r4, r1
 8001f54:	461a      	mov	r2, r3
 8001f56:	4623      	mov	r3, r4
 8001f58:	a10d      	add	r1, pc, #52	; (adr r1, 8001f90 <STEPPER_SetSpeed+0xb8>)
 8001f5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f5e:	f7fe fc1d 	bl	800079c <__aeabi_ddiv>
 8001f62:	4603      	mov	r3, r0
 8001f64:	460c      	mov	r4, r1
 8001f66:	461a      	mov	r2, r3
 8001f68:	4623      	mov	r3, r4
 8001f6a:	79fc      	ldrb	r4, [r7, #7]
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f7fe fcfc 	bl	800096c <__aeabi_d2uiz>
 8001f74:	4601      	mov	r1, r0
 8001f76:	4a08      	ldr	r2, [pc, #32]	; (8001f98 <STEPPER_SetSpeed+0xc0>)
 8001f78:	4623      	mov	r3, r4
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4423      	add	r3, r4
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	3308      	adds	r3, #8
 8001f84:	6019      	str	r1, [r3, #0]
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd90      	pop	{r4, r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	00000000 	.word	0x00000000
 8001f94:	40ed4c00 	.word	0x40ed4c00
 8001f98:	20000068 	.word	0x20000068
 8001f9c:	0800282c 	.word	0x0800282c

08001fa0 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 8001faa:	79fa      	ldrb	r2, [r7, #7]
 8001fac:	499d      	ldr	r1, [pc, #628]	; (8002224 <STEPPER_One_Step+0x284>)
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	331a      	adds	r3, #26
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f040 81d1 	bne.w	8002364 <STEPPER_One_Step+0x3c4>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8001fc2:	79fa      	ldrb	r2, [r7, #7]
 8001fc4:	4997      	ldr	r1, [pc, #604]	; (8002224 <STEPPER_One_Step+0x284>)
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	1a9b      	subs	r3, r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	331b      	adds	r3, #27
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f040 808c 	bne.w	80020f2 <STEPPER_One_Step+0x152>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8001fda:	79fa      	ldrb	r2, [r7, #7]
 8001fdc:	4991      	ldr	r1, [pc, #580]	; (8002224 <STEPPER_One_Step+0x284>)
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	79fa      	ldrb	r2, [r7, #7]
 8001fec:	498d      	ldr	r1, [pc, #564]	; (8002224 <STEPPER_One_Step+0x284>)
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	3310      	adds	r3, #16
 8001ffa:	881c      	ldrh	r4, [r3, #0]
 8001ffc:	79fa      	ldrb	r2, [r7, #7]
 8001ffe:	498a      	ldr	r1, [pc, #552]	; (8002228 <STEPPER_One_Step+0x288>)
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	330f      	adds	r3, #15
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	4b86      	ldr	r3, [pc, #536]	; (800222c <STEPPER_One_Step+0x28c>)
 8002012:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8002016:	461a      	mov	r2, r3
 8002018:	4621      	mov	r1, r4
 800201a:	f7fe ff87 	bl	8000f2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 800201e:	79fa      	ldrb	r2, [r7, #7]
 8002020:	4980      	ldr	r1, [pc, #512]	; (8002224 <STEPPER_One_Step+0x284>)
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	3304      	adds	r3, #4
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	79fa      	ldrb	r2, [r7, #7]
 8002032:	497c      	ldr	r1, [pc, #496]	; (8002224 <STEPPER_One_Step+0x284>)
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	3312      	adds	r3, #18
 8002040:	881c      	ldrh	r4, [r3, #0]
 8002042:	79fa      	ldrb	r2, [r7, #7]
 8002044:	4978      	ldr	r1, [pc, #480]	; (8002228 <STEPPER_One_Step+0x288>)
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	330f      	adds	r3, #15
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	4a75      	ldr	r2, [pc, #468]	; (800222c <STEPPER_One_Step+0x28c>)
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	785b      	ldrb	r3, [r3, #1]
 800205c:	461a      	mov	r2, r3
 800205e:	4621      	mov	r1, r4
 8002060:	f7fe ff64 	bl	8000f2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8002064:	79fa      	ldrb	r2, [r7, #7]
 8002066:	496f      	ldr	r1, [pc, #444]	; (8002224 <STEPPER_One_Step+0x284>)
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	3308      	adds	r3, #8
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	79fa      	ldrb	r2, [r7, #7]
 8002078:	496a      	ldr	r1, [pc, #424]	; (8002224 <STEPPER_One_Step+0x284>)
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	1a9b      	subs	r3, r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	3314      	adds	r3, #20
 8002086:	881c      	ldrh	r4, [r3, #0]
 8002088:	79fa      	ldrb	r2, [r7, #7]
 800208a:	4967      	ldr	r1, [pc, #412]	; (8002228 <STEPPER_One_Step+0x288>)
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	330f      	adds	r3, #15
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	4a64      	ldr	r2, [pc, #400]	; (800222c <STEPPER_One_Step+0x28c>)
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	789b      	ldrb	r3, [r3, #2]
 80020a2:	461a      	mov	r2, r3
 80020a4:	4621      	mov	r1, r4
 80020a6:	f7fe ff41 	bl	8000f2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 80020aa:	79fa      	ldrb	r2, [r7, #7]
 80020ac:	495d      	ldr	r1, [pc, #372]	; (8002224 <STEPPER_One_Step+0x284>)
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	330c      	adds	r3, #12
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	79fa      	ldrb	r2, [r7, #7]
 80020be:	4959      	ldr	r1, [pc, #356]	; (8002224 <STEPPER_One_Step+0x284>)
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	3316      	adds	r3, #22
 80020cc:	881c      	ldrh	r4, [r3, #0]
 80020ce:	79fa      	ldrb	r2, [r7, #7]
 80020d0:	4955      	ldr	r1, [pc, #340]	; (8002228 <STEPPER_One_Step+0x288>)
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	330f      	adds	r3, #15
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4a52      	ldr	r2, [pc, #328]	; (800222c <STEPPER_One_Step+0x28c>)
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	78db      	ldrb	r3, [r3, #3]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4621      	mov	r1, r4
 80020ec:	f7fe ff1e 	bl	8000f2c <HAL_GPIO_WritePin>
 80020f0:	e13d      	b.n	800236e <STEPPER_One_Step+0x3ce>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 80020f2:	79fa      	ldrb	r2, [r7, #7]
 80020f4:	494b      	ldr	r1, [pc, #300]	; (8002224 <STEPPER_One_Step+0x284>)
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	331b      	adds	r3, #27
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b01      	cmp	r3, #1
 8002106:	f040 8095 	bne.w	8002234 <STEPPER_One_Step+0x294>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 800210a:	79fa      	ldrb	r2, [r7, #7]
 800210c:	4945      	ldr	r1, [pc, #276]	; (8002224 <STEPPER_One_Step+0x284>)
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	1a9b      	subs	r3, r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	79fa      	ldrb	r2, [r7, #7]
 800211c:	4941      	ldr	r1, [pc, #260]	; (8002224 <STEPPER_One_Step+0x284>)
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3310      	adds	r3, #16
 800212a:	881c      	ldrh	r4, [r3, #0]
 800212c:	79fa      	ldrb	r2, [r7, #7]
 800212e:	493e      	ldr	r1, [pc, #248]	; (8002228 <STEPPER_One_Step+0x288>)
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	330f      	adds	r3, #15
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <STEPPER_One_Step+0x290>)
 8002142:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8002146:	461a      	mov	r2, r3
 8002148:	4621      	mov	r1, r4
 800214a:	f7fe feef 	bl	8000f2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 800214e:	79fa      	ldrb	r2, [r7, #7]
 8002150:	4934      	ldr	r1, [pc, #208]	; (8002224 <STEPPER_One_Step+0x284>)
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	3304      	adds	r3, #4
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	79fa      	ldrb	r2, [r7, #7]
 8002162:	4930      	ldr	r1, [pc, #192]	; (8002224 <STEPPER_One_Step+0x284>)
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3312      	adds	r3, #18
 8002170:	881c      	ldrh	r4, [r3, #0]
 8002172:	79fa      	ldrb	r2, [r7, #7]
 8002174:	492c      	ldr	r1, [pc, #176]	; (8002228 <STEPPER_One_Step+0x288>)
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	330f      	adds	r3, #15
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4a2a      	ldr	r2, [pc, #168]	; (8002230 <STEPPER_One_Step+0x290>)
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	785b      	ldrb	r3, [r3, #1]
 800218c:	461a      	mov	r2, r3
 800218e:	4621      	mov	r1, r4
 8002190:	f7fe fecc 	bl	8000f2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8002194:	79fa      	ldrb	r2, [r7, #7]
 8002196:	4923      	ldr	r1, [pc, #140]	; (8002224 <STEPPER_One_Step+0x284>)
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	3308      	adds	r3, #8
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	79fa      	ldrb	r2, [r7, #7]
 80021a8:	491e      	ldr	r1, [pc, #120]	; (8002224 <STEPPER_One_Step+0x284>)
 80021aa:	4613      	mov	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	3314      	adds	r3, #20
 80021b6:	881c      	ldrh	r4, [r3, #0]
 80021b8:	79fa      	ldrb	r2, [r7, #7]
 80021ba:	491b      	ldr	r1, [pc, #108]	; (8002228 <STEPPER_One_Step+0x288>)
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	330f      	adds	r3, #15
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	4a19      	ldr	r2, [pc, #100]	; (8002230 <STEPPER_One_Step+0x290>)
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	789b      	ldrb	r3, [r3, #2]
 80021d2:	461a      	mov	r2, r3
 80021d4:	4621      	mov	r1, r4
 80021d6:	f7fe fea9 	bl	8000f2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 80021da:	79fa      	ldrb	r2, [r7, #7]
 80021dc:	4911      	ldr	r1, [pc, #68]	; (8002224 <STEPPER_One_Step+0x284>)
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	330c      	adds	r3, #12
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	79fa      	ldrb	r2, [r7, #7]
 80021ee:	490d      	ldr	r1, [pc, #52]	; (8002224 <STEPPER_One_Step+0x284>)
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	3316      	adds	r3, #22
 80021fc:	881c      	ldrh	r4, [r3, #0]
 80021fe:	79fa      	ldrb	r2, [r7, #7]
 8002200:	4909      	ldr	r1, [pc, #36]	; (8002228 <STEPPER_One_Step+0x288>)
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	330f      	adds	r3, #15
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <STEPPER_One_Step+0x290>)
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	78db      	ldrb	r3, [r3, #3]
 8002218:	461a      	mov	r2, r3
 800221a:	4621      	mov	r1, r4
 800221c:	f7fe fe86 	bl	8000f2c <HAL_GPIO_WritePin>
 8002220:	e0a5      	b.n	800236e <STEPPER_One_Step+0x3ce>
 8002222:	bf00      	nop
 8002224:	0800282c 	.word	0x0800282c
 8002228:	20000068 	.word	0x20000068
 800222c:	20000008 	.word	0x20000008
 8002230:	20000018 	.word	0x20000018
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8002234:	79fa      	ldrb	r2, [r7, #7]
 8002236:	498d      	ldr	r1, [pc, #564]	; (800246c <STEPPER_One_Step+0x4cc>)
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	331b      	adds	r3, #27
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b02      	cmp	r3, #2
 8002248:	f040 8091 	bne.w	800236e <STEPPER_One_Step+0x3ce>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 800224c:	79fa      	ldrb	r2, [r7, #7]
 800224e:	4987      	ldr	r1, [pc, #540]	; (800246c <STEPPER_One_Step+0x4cc>)
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	79fa      	ldrb	r2, [r7, #7]
 800225e:	4983      	ldr	r1, [pc, #524]	; (800246c <STEPPER_One_Step+0x4cc>)
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	3310      	adds	r3, #16
 800226c:	881c      	ldrh	r4, [r3, #0]
 800226e:	79fa      	ldrb	r2, [r7, #7]
 8002270:	497f      	ldr	r1, [pc, #508]	; (8002470 <STEPPER_One_Step+0x4d0>)
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	330f      	adds	r3, #15
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	4b7c      	ldr	r3, [pc, #496]	; (8002474 <STEPPER_One_Step+0x4d4>)
 8002284:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8002288:	461a      	mov	r2, r3
 800228a:	4621      	mov	r1, r4
 800228c:	f7fe fe4e 	bl	8000f2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8002290:	79fa      	ldrb	r2, [r7, #7]
 8002292:	4976      	ldr	r1, [pc, #472]	; (800246c <STEPPER_One_Step+0x4cc>)
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	3304      	adds	r3, #4
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	79fa      	ldrb	r2, [r7, #7]
 80022a4:	4971      	ldr	r1, [pc, #452]	; (800246c <STEPPER_One_Step+0x4cc>)
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	1a9b      	subs	r3, r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	3312      	adds	r3, #18
 80022b2:	881c      	ldrh	r4, [r3, #0]
 80022b4:	79fa      	ldrb	r2, [r7, #7]
 80022b6:	496e      	ldr	r1, [pc, #440]	; (8002470 <STEPPER_One_Step+0x4d0>)
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	330f      	adds	r3, #15
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	4a6b      	ldr	r2, [pc, #428]	; (8002474 <STEPPER_One_Step+0x4d4>)
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	785b      	ldrb	r3, [r3, #1]
 80022ce:	461a      	mov	r2, r3
 80022d0:	4621      	mov	r1, r4
 80022d2:	f7fe fe2b 	bl	8000f2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 80022d6:	79fa      	ldrb	r2, [r7, #7]
 80022d8:	4964      	ldr	r1, [pc, #400]	; (800246c <STEPPER_One_Step+0x4cc>)
 80022da:	4613      	mov	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	3308      	adds	r3, #8
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	79fa      	ldrb	r2, [r7, #7]
 80022ea:	4960      	ldr	r1, [pc, #384]	; (800246c <STEPPER_One_Step+0x4cc>)
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	3314      	adds	r3, #20
 80022f8:	881c      	ldrh	r4, [r3, #0]
 80022fa:	79fa      	ldrb	r2, [r7, #7]
 80022fc:	495c      	ldr	r1, [pc, #368]	; (8002470 <STEPPER_One_Step+0x4d0>)
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	330f      	adds	r3, #15
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	4a59      	ldr	r2, [pc, #356]	; (8002474 <STEPPER_One_Step+0x4d4>)
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	789b      	ldrb	r3, [r3, #2]
 8002314:	461a      	mov	r2, r3
 8002316:	4621      	mov	r1, r4
 8002318:	f7fe fe08 	bl	8000f2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800231c:	79fa      	ldrb	r2, [r7, #7]
 800231e:	4953      	ldr	r1, [pc, #332]	; (800246c <STEPPER_One_Step+0x4cc>)
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	330c      	adds	r3, #12
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	79fa      	ldrb	r2, [r7, #7]
 8002330:	494e      	ldr	r1, [pc, #312]	; (800246c <STEPPER_One_Step+0x4cc>)
 8002332:	4613      	mov	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	3316      	adds	r3, #22
 800233e:	881c      	ldrh	r4, [r3, #0]
 8002340:	79fa      	ldrb	r2, [r7, #7]
 8002342:	494b      	ldr	r1, [pc, #300]	; (8002470 <STEPPER_One_Step+0x4d0>)
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	330f      	adds	r3, #15
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	4a48      	ldr	r2, [pc, #288]	; (8002474 <STEPPER_One_Step+0x4d4>)
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	78db      	ldrb	r3, [r3, #3]
 800235a:	461a      	mov	r2, r3
 800235c:	4621      	mov	r1, r4
 800235e:	f7fe fde5 	bl	8000f2c <HAL_GPIO_WritePin>
 8002362:	e004      	b.n	800236e <STEPPER_One_Step+0x3ce>
		}
	}
	// For BiPolar Stepper Motors
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
 8002364:	79fa      	ldrb	r2, [r7, #7]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 800236e:	79fa      	ldrb	r2, [r7, #7]
 8002370:	493f      	ldr	r1, [pc, #252]	; (8002470 <STEPPER_One_Step+0x4d0>)
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	3311      	adds	r3, #17
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d132      	bne.n	80023ea <STEPPER_One_Step+0x44a>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8002384:	79fa      	ldrb	r2, [r7, #7]
 8002386:	493a      	ldr	r1, [pc, #232]	; (8002470 <STEPPER_One_Step+0x4d0>)
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	330f      	adds	r3, #15
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d112      	bne.n	80023c0 <STEPPER_One_Step+0x420>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 800239a:	79f9      	ldrb	r1, [r7, #7]
 800239c:	79fa      	ldrb	r2, [r7, #7]
 800239e:	4834      	ldr	r0, [pc, #208]	; (8002470 <STEPPER_One_Step+0x4d0>)
 80023a0:	460b      	mov	r3, r1
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4403      	add	r3, r0
 80023aa:	3310      	adds	r3, #16
 80023ac:	7818      	ldrb	r0, [r3, #0]
 80023ae:	4930      	ldr	r1, [pc, #192]	; (8002470 <STEPPER_One_Step+0x4d0>)
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	330f      	adds	r3, #15
 80023bc:	4602      	mov	r2, r0
 80023be:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 80023c0:	79fa      	ldrb	r2, [r7, #7]
 80023c2:	492b      	ldr	r1, [pc, #172]	; (8002470 <STEPPER_One_Step+0x4d0>)
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	330f      	adds	r3, #15
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b2d8      	uxtb	r0, r3
 80023d6:	4926      	ldr	r1, [pc, #152]	; (8002470 <STEPPER_One_Step+0x4d0>)
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	330f      	adds	r3, #15
 80023e4:	4602      	mov	r2, r0
 80023e6:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 80023e8:	e03c      	b.n	8002464 <STEPPER_One_Step+0x4c4>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 80023ea:	79fa      	ldrb	r2, [r7, #7]
 80023ec:	4920      	ldr	r1, [pc, #128]	; (8002470 <STEPPER_One_Step+0x4d0>)
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	3311      	adds	r3, #17
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d131      	bne.n	8002464 <STEPPER_One_Step+0x4c4>
		gs_STEPPER_info[i].Step_Index++;
 8002400:	79fa      	ldrb	r2, [r7, #7]
 8002402:	491b      	ldr	r1, [pc, #108]	; (8002470 <STEPPER_One_Step+0x4d0>)
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	330f      	adds	r3, #15
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	3301      	adds	r3, #1
 8002414:	b2d8      	uxtb	r0, r3
 8002416:	4916      	ldr	r1, [pc, #88]	; (8002470 <STEPPER_One_Step+0x4d0>)
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	330f      	adds	r3, #15
 8002424:	4602      	mov	r2, r0
 8002426:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 8002428:	79fa      	ldrb	r2, [r7, #7]
 800242a:	4911      	ldr	r1, [pc, #68]	; (8002470 <STEPPER_One_Step+0x4d0>)
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	330f      	adds	r3, #15
 8002438:	7819      	ldrb	r1, [r3, #0]
 800243a:	79fa      	ldrb	r2, [r7, #7]
 800243c:	480c      	ldr	r0, [pc, #48]	; (8002470 <STEPPER_One_Step+0x4d0>)
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4403      	add	r3, r0
 8002448:	3310      	adds	r3, #16
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	4299      	cmp	r1, r3
 800244e:	d109      	bne.n	8002464 <STEPPER_One_Step+0x4c4>
			gs_STEPPER_info[i].Step_Index = 0;
 8002450:	79fa      	ldrb	r2, [r7, #7]
 8002452:	4907      	ldr	r1, [pc, #28]	; (8002470 <STEPPER_One_Step+0x4d0>)
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	330f      	adds	r3, #15
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bd90      	pop	{r4, r7, pc}
 800246c:	0800282c 	.word	0x0800282c
 8002470:	20000068 	.word	0x20000068
 8002474:	20000028 	.word	0x20000028

08002478 <STEPPER_Step_Blocking>:

void STEPPER_Step_Blocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	71fb      	strb	r3, [r7, #7]
 8002484:	4613      	mov	r3, r2
 8002486:	71bb      	strb	r3, [r7, #6]
	uint32_t i = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
	uint32_t DelayTimeMs = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	60bb      	str	r3, [r7, #8]

	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 1;
 8002490:	79fa      	ldrb	r2, [r7, #7]
 8002492:	4921      	ldr	r1, [pc, #132]	; (8002518 <STEPPER_Step_Blocking+0xa0>)
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	330e      	adds	r3, #14
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
	DelayTimeMs = (60000/(gs_STEPPER_info[au8_STEPPER_Instance].RPM * STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV));
 80024a4:	79fa      	ldrb	r2, [r7, #7]
 80024a6:	491c      	ldr	r1, [pc, #112]	; (8002518 <STEPPER_Step_Blocking+0xa0>)
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	330c      	adds	r3, #12
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	79fa      	ldrb	r2, [r7, #7]
 80024ba:	4918      	ldr	r1, [pc, #96]	; (800251c <STEPPER_Step_Blocking+0xa4>)
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	3318      	adds	r3, #24
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	fb03 f300 	mul.w	r3, r3, r0
 80024ce:	f64e 2260 	movw	r2, #60000	; 0xea60
 80024d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80024d6:	60bb      	str	r3, [r7, #8]
	// Send The Control Signals
	for(i=0; i<au32_Steps; i++)
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	e009      	b.n	80024f2 <STEPPER_Step_Blocking+0x7a>
	{
		STEPPER_One_Step(au8_STEPPER_Instance);
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fd5d 	bl	8001fa0 <STEPPER_One_Step>
		DWT_Delay_ms(DelayTimeMs);
 80024e6:	68b8      	ldr	r0, [r7, #8]
 80024e8:	f7ff fb94 	bl	8001c14 <DWT_Delay_ms>
	for(i=0; i<au32_Steps; i++)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3301      	adds	r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d3f1      	bcc.n	80024de <STEPPER_Step_Blocking+0x66>
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
 80024fa:	79fa      	ldrb	r2, [r7, #7]
 80024fc:	4906      	ldr	r1, [pc, #24]	; (8002518 <STEPPER_Step_Blocking+0xa0>)
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	330e      	adds	r3, #14
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000068 	.word	0x20000068
 800251c:	0800282c 	.word	0x0800282c

08002520 <main>:


void SystemClock_Config(void);

int main(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
    HAL_Init();
 8002524:	f7fe fa42 	bl	80009ac <HAL_Init>
    SystemClock_Config();
 8002528:	f000 f80d 	bl	8002546 <SystemClock_Config>
    STEPPERS_Init();
 800252c:	f7ff fb96 	bl	8001c5c <STEPPERS_Init>
    STEPPER_SetSpeed(STEPPER_MOTOR1, 10);
 8002530:	210a      	movs	r1, #10
 8002532:	2000      	movs	r0, #0
 8002534:	f7ff fcd0 	bl	8001ed8 <STEPPER_SetSpeed>
    STEPPER_Step_Blocking(STEPPER_MOTOR1, 6000, DIR_CW);
 8002538:	2200      	movs	r2, #0
 800253a:	f241 7170 	movw	r1, #6000	; 0x1770
 800253e:	2000      	movs	r0, #0
 8002540:	f7ff ff9a 	bl	8002478 <STEPPER_Step_Blocking>

    while (1)
 8002544:	e7fe      	b.n	8002544 <main+0x24>

08002546 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b096      	sub	sp, #88	; 0x58
 800254a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	2244      	movs	r2, #68	; 0x44
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f000 f955 	bl	8002804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800255a:	463b      	mov	r3, r7
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002568:	2310      	movs	r3, #16
 800256a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800256c:	2301      	movs	r3, #1
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002574:	2360      	movs	r3, #96	; 0x60
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002578:	2302      	movs	r3, #2
 800257a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800257c:	2301      	movs	r3, #1
 800257e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002580:	2301      	movs	r3, #1
 8002582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002584:	2328      	movs	r3, #40	; 0x28
 8002586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002588:	2307      	movs	r3, #7
 800258a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800258c:	2302      	movs	r3, #2
 800258e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002590:	2302      	movs	r3, #2
 8002592:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe fd43 	bl	8001024 <HAL_RCC_OscConfig>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80025a4:	f000 f821 	bl	80025ea <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025a8:	230f      	movs	r3, #15
 80025aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ac:	2303      	movs	r3, #3
 80025ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80025bc:	463b      	mov	r3, r7
 80025be:	2104      	movs	r1, #4
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff f94f 	bl	8001864 <HAL_RCC_ClockConfig>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80025cc:	f000 f80d 	bl	80025ea <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80025d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80025d4:	f7fe fcd0 	bl	8000f78 <HAL_PWREx_ControlVoltageScaling>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80025de:	f000 f804 	bl	80025ea <Error_Handler>
  }
}
 80025e2:	bf00      	nop
 80025e4:	3758      	adds	r7, #88	; 0x58
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	4b0f      	ldr	r3, [pc, #60]	; (800263c <HAL_MspInit+0x44>)
 8002600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002602:	4a0e      	ldr	r2, [pc, #56]	; (800263c <HAL_MspInit+0x44>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6613      	str	r3, [r2, #96]	; 0x60
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <HAL_MspInit+0x44>)
 800260c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_MspInit+0x44>)
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	4a08      	ldr	r2, [pc, #32]	; (800263c <HAL_MspInit+0x44>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002620:	6593      	str	r3, [r2, #88]	; 0x58
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_MspInit+0x44>)
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000

08002640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002652:	e7fe      	b.n	8002652 <HardFault_Handler+0x4>

08002654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <MemManage_Handler+0x4>

0800265a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800265e:	e7fe      	b.n	800265e <BusFault_Handler+0x4>

08002660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002664:	e7fe      	b.n	8002664 <UsageFault_Handler+0x4>

08002666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002694:	f7fe f9dc 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}

0800269c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a0:	4b17      	ldr	r3, [pc, #92]	; (8002700 <SystemInit+0x64>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	4a16      	ldr	r2, [pc, #88]	; (8002700 <SystemInit+0x64>)
 80026a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80026b0:	4b14      	ldr	r3, [pc, #80]	; (8002704 <SystemInit+0x68>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a13      	ldr	r2, [pc, #76]	; (8002704 <SystemInit+0x68>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <SystemInit+0x68>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <SystemInit+0x68>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a0f      	ldr	r2, [pc, #60]	; (8002704 <SystemInit+0x68>)
 80026c8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80026cc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80026d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80026d2:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <SystemInit+0x68>)
 80026d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026d8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <SystemInit+0x68>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a09      	ldr	r2, [pc, #36]	; (8002704 <SystemInit+0x68>)
 80026e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <SystemInit+0x68>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <SystemInit+0x64>)
 80026ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026f2:	609a      	str	r2, [r3, #8]
#endif
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000ed00 	.word	0xe000ed00
 8002704:	40021000 	.word	0x40021000

08002708 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002740 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800270c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800270e:	e003      	b.n	8002718 <LoopCopyDataInit>

08002710 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002712:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002714:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002716:	3104      	adds	r1, #4

08002718 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002718:	480b      	ldr	r0, [pc, #44]	; (8002748 <LoopForever+0xa>)
	ldr	r3, =_edata
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <LoopForever+0xe>)
	adds	r2, r0, r1
 800271c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800271e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002720:	d3f6      	bcc.n	8002710 <CopyDataInit>
	ldr	r2, =_sbss
 8002722:	4a0b      	ldr	r2, [pc, #44]	; (8002750 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002724:	e002      	b.n	800272c <LoopFillZerobss>

08002726 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002726:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002728:	f842 3b04 	str.w	r3, [r2], #4

0800272c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <LoopForever+0x16>)
	cmp	r2, r3
 800272e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002730:	d3f9      	bcc.n	8002726 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002732:	f7ff ffb3 	bl	800269c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002736:	f000 f841 	bl	80027bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800273a:	f7ff fef1 	bl	8002520 <main>

0800273e <LoopForever>:

LoopForever:
    b LoopForever
 800273e:	e7fe      	b.n	800273e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002740:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002744:	08002890 	.word	0x08002890
	ldr	r0, =_sdata
 8002748:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800274c:	2000004c 	.word	0x2000004c
	ldr	r2, =_sbss
 8002750:	2000004c 	.word	0x2000004c
	ldr	r3, = _ebss
 8002754:	20000080 	.word	0x20000080

08002758 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002758:	e7fe      	b.n	8002758 <ADC1_IRQHandler>
	...

0800275c <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8002760:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <DWT_Delay_Init+0x58>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <DWT_Delay_Init+0x58>)
 8002766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800276a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <DWT_Delay_Init+0x58>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4a10      	ldr	r2, [pc, #64]	; (80027b4 <DWT_Delay_Init+0x58>)
 8002772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002776:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002778:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <DWT_Delay_Init+0x5c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <DWT_Delay_Init+0x5c>)
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <DWT_Delay_Init+0x5c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <DWT_Delay_Init+0x5c>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <DWT_Delay_Init+0x5c>)
 8002792:	2200      	movs	r2, #0
 8002794:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8002796:	bf00      	nop
    __ASM volatile ("NOP");
 8002798:	bf00      	nop
    __ASM volatile ("NOP");
 800279a:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <DWT_Delay_Init+0x5c>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80027a4:	2300      	movs	r3, #0
 80027a6:	e000      	b.n	80027aa <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80027a8:	2301      	movs	r3, #1
    }
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	e000edf0 	.word	0xe000edf0
 80027b8:	e0001000 	.word	0xe0001000

080027bc <__libc_init_array>:
 80027bc:	b570      	push	{r4, r5, r6, lr}
 80027be:	4e0d      	ldr	r6, [pc, #52]	; (80027f4 <__libc_init_array+0x38>)
 80027c0:	4c0d      	ldr	r4, [pc, #52]	; (80027f8 <__libc_init_array+0x3c>)
 80027c2:	1ba4      	subs	r4, r4, r6
 80027c4:	10a4      	asrs	r4, r4, #2
 80027c6:	2500      	movs	r5, #0
 80027c8:	42a5      	cmp	r5, r4
 80027ca:	d109      	bne.n	80027e0 <__libc_init_array+0x24>
 80027cc:	4e0b      	ldr	r6, [pc, #44]	; (80027fc <__libc_init_array+0x40>)
 80027ce:	4c0c      	ldr	r4, [pc, #48]	; (8002800 <__libc_init_array+0x44>)
 80027d0:	f000 f820 	bl	8002814 <_init>
 80027d4:	1ba4      	subs	r4, r4, r6
 80027d6:	10a4      	asrs	r4, r4, #2
 80027d8:	2500      	movs	r5, #0
 80027da:	42a5      	cmp	r5, r4
 80027dc:	d105      	bne.n	80027ea <__libc_init_array+0x2e>
 80027de:	bd70      	pop	{r4, r5, r6, pc}
 80027e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027e4:	4798      	blx	r3
 80027e6:	3501      	adds	r5, #1
 80027e8:	e7ee      	b.n	80027c8 <__libc_init_array+0xc>
 80027ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027ee:	4798      	blx	r3
 80027f0:	3501      	adds	r5, #1
 80027f2:	e7f2      	b.n	80027da <__libc_init_array+0x1e>
 80027f4:	08002888 	.word	0x08002888
 80027f8:	08002888 	.word	0x08002888
 80027fc:	08002888 	.word	0x08002888
 8002800:	0800288c 	.word	0x0800288c

08002804 <memset>:
 8002804:	4402      	add	r2, r0
 8002806:	4603      	mov	r3, r0
 8002808:	4293      	cmp	r3, r2
 800280a:	d100      	bne.n	800280e <memset+0xa>
 800280c:	4770      	bx	lr
 800280e:	f803 1b01 	strb.w	r1, [r3], #1
 8002812:	e7f9      	b.n	8002808 <memset+0x4>

08002814 <_init>:
 8002814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002816:	bf00      	nop
 8002818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281a:	bc08      	pop	{r3}
 800281c:	469e      	mov	lr, r3
 800281e:	4770      	bx	lr

08002820 <_fini>:
 8002820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002822:	bf00      	nop
 8002824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002826:	bc08      	pop	{r3}
 8002828:	469e      	mov	lr, r3
 800282a:	4770      	bx	lr
