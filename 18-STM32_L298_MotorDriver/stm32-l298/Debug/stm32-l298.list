
stm32-l298.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000305c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003168  08003168  00004168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031e0  080031e0  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  080031e0  080031e0  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031e0  080031e0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031e0  080031e0  000041e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031e4  080031e4  000041e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080031e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000005c  08003244  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08003244  00005264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adf2  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000189f  00000000  00000000  0000fe77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00011718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000908  00000000  00000000  00012298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017562  00000000  00000000  00012ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cbdd  00000000  00000000  0002a102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008816b  00000000  00000000  00036cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bee4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003558  00000000  00000000  000bee90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000c23e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003150 	.word	0x08003150

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003150 	.word	0x08003150

0800014c <checkKeys>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void checkKeys(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
    // Keys Trigger
    uint8_t plusA = HAL_GPIO_ReadPin(GPIOA, KEY_PLUS_A_PIN) ? 0 : 1;
 8000152:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000156:	4873      	ldr	r0, [pc, #460]	@ (8000324 <checkKeys+0x1d8>)
 8000158:	f000 ff7a 	bl	8001050 <HAL_GPIO_ReadPin>
 800015c:	4603      	mov	r3, r0
 800015e:	2b00      	cmp	r3, #0
 8000160:	bf0c      	ite	eq
 8000162:	2301      	moveq	r3, #1
 8000164:	2300      	movne	r3, #0
 8000166:	b2db      	uxtb	r3, r3
 8000168:	71fb      	strb	r3, [r7, #7]
    if (plusA == oldPlusA)
 800016a:	4b6f      	ldr	r3, [pc, #444]	@ (8000328 <checkKeys+0x1dc>)
 800016c:	781b      	ldrb	r3, [r3, #0]
 800016e:	79fa      	ldrb	r2, [r7, #7]
 8000170:	429a      	cmp	r2, r3
 8000172:	d102      	bne.n	800017a <checkKeys+0x2e>
        plusA = 0;
 8000174:	2300      	movs	r3, #0
 8000176:	71fb      	strb	r3, [r7, #7]
 8000178:	e002      	b.n	8000180 <checkKeys+0x34>
    else
        oldPlusA = plusA;
 800017a:	4a6b      	ldr	r2, [pc, #428]	@ (8000328 <checkKeys+0x1dc>)
 800017c:	79fb      	ldrb	r3, [r7, #7]
 800017e:	7013      	strb	r3, [r2, #0]

    uint8_t minusA = HAL_GPIO_ReadPin(GPIOA, KEY_MINUS_A_PIN) ? 0 : 1;
 8000180:	2102      	movs	r1, #2
 8000182:	4868      	ldr	r0, [pc, #416]	@ (8000324 <checkKeys+0x1d8>)
 8000184:	f000 ff64 	bl	8001050 <HAL_GPIO_ReadPin>
 8000188:	4603      	mov	r3, r0
 800018a:	2b00      	cmp	r3, #0
 800018c:	bf0c      	ite	eq
 800018e:	2301      	moveq	r3, #1
 8000190:	2300      	movne	r3, #0
 8000192:	b2db      	uxtb	r3, r3
 8000194:	71bb      	strb	r3, [r7, #6]
    if (minusA == oldMinusA)
 8000196:	4b65      	ldr	r3, [pc, #404]	@ (800032c <checkKeys+0x1e0>)
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	79ba      	ldrb	r2, [r7, #6]
 800019c:	429a      	cmp	r2, r3
 800019e:	d102      	bne.n	80001a6 <checkKeys+0x5a>
        minusA = 0;
 80001a0:	2300      	movs	r3, #0
 80001a2:	71bb      	strb	r3, [r7, #6]
 80001a4:	e002      	b.n	80001ac <checkKeys+0x60>
    else
        oldMinusA = minusA;
 80001a6:	4a61      	ldr	r2, [pc, #388]	@ (800032c <checkKeys+0x1e0>)
 80001a8:	79bb      	ldrb	r3, [r7, #6]
 80001aa:	7013      	strb	r3, [r2, #0]

    uint8_t breakA = HAL_GPIO_ReadPin(GPIOA, KEY_BREAK_A_PIN) ? 0 : 1;
 80001ac:	2120      	movs	r1, #32
 80001ae:	485d      	ldr	r0, [pc, #372]	@ (8000324 <checkKeys+0x1d8>)
 80001b0:	f000 ff4e 	bl	8001050 <HAL_GPIO_ReadPin>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	bf0c      	ite	eq
 80001ba:	2301      	moveq	r3, #1
 80001bc:	2300      	movne	r3, #0
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	717b      	strb	r3, [r7, #5]
    if (breakA == oldBreakA)
 80001c2:	4b5b      	ldr	r3, [pc, #364]	@ (8000330 <checkKeys+0x1e4>)
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	797a      	ldrb	r2, [r7, #5]
 80001c8:	429a      	cmp	r2, r3
 80001ca:	d102      	bne.n	80001d2 <checkKeys+0x86>
        breakA = 0;
 80001cc:	2300      	movs	r3, #0
 80001ce:	717b      	strb	r3, [r7, #5]
 80001d0:	e002      	b.n	80001d8 <checkKeys+0x8c>
    else
        oldBreakA = breakA;
 80001d2:	4a57      	ldr	r2, [pc, #348]	@ (8000330 <checkKeys+0x1e4>)
 80001d4:	797b      	ldrb	r3, [r7, #5]
 80001d6:	7013      	strb	r3, [r2, #0]

    uint8_t plusB = HAL_GPIO_ReadPin(GPIOA, KEY_PLUS_B_PIN) ? 0 : 1;
 80001d8:	2104      	movs	r1, #4
 80001da:	4852      	ldr	r0, [pc, #328]	@ (8000324 <checkKeys+0x1d8>)
 80001dc:	f000 ff38 	bl	8001050 <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	bf0c      	ite	eq
 80001e6:	2301      	moveq	r3, #1
 80001e8:	2300      	movne	r3, #0
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	713b      	strb	r3, [r7, #4]
    if (plusB == oldPlusB)
 80001ee:	4b51      	ldr	r3, [pc, #324]	@ (8000334 <checkKeys+0x1e8>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	793a      	ldrb	r2, [r7, #4]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d102      	bne.n	80001fe <checkKeys+0xb2>
        plusB = 0;
 80001f8:	2300      	movs	r3, #0
 80001fa:	713b      	strb	r3, [r7, #4]
 80001fc:	e002      	b.n	8000204 <checkKeys+0xb8>
    else
        oldPlusB = plusB;
 80001fe:	4a4d      	ldr	r2, [pc, #308]	@ (8000334 <checkKeys+0x1e8>)
 8000200:	793b      	ldrb	r3, [r7, #4]
 8000202:	7013      	strb	r3, [r2, #0]

    uint8_t minusB = HAL_GPIO_ReadPin(GPIOA, KEY_MINUS_B_PIN) ? 0 : 1;
 8000204:	2108      	movs	r1, #8
 8000206:	4847      	ldr	r0, [pc, #284]	@ (8000324 <checkKeys+0x1d8>)
 8000208:	f000 ff22 	bl	8001050 <HAL_GPIO_ReadPin>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	bf0c      	ite	eq
 8000212:	2301      	moveq	r3, #1
 8000214:	2300      	movne	r3, #0
 8000216:	b2db      	uxtb	r3, r3
 8000218:	70fb      	strb	r3, [r7, #3]
    if (minusB == oldMinusB)
 800021a:	4b47      	ldr	r3, [pc, #284]	@ (8000338 <checkKeys+0x1ec>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	78fa      	ldrb	r2, [r7, #3]
 8000220:	429a      	cmp	r2, r3
 8000222:	d102      	bne.n	800022a <checkKeys+0xde>
        minusB = 0;
 8000224:	2300      	movs	r3, #0
 8000226:	70fb      	strb	r3, [r7, #3]
 8000228:	e002      	b.n	8000230 <checkKeys+0xe4>
    else
        oldMinusB = minusB;
 800022a:	4a43      	ldr	r2, [pc, #268]	@ (8000338 <checkKeys+0x1ec>)
 800022c:	78fb      	ldrb	r3, [r7, #3]
 800022e:	7013      	strb	r3, [r2, #0]

    uint8_t breakB = HAL_GPIO_ReadPin(GPIOA, KEY_BREAK_B_PIN) ? 0 : 1;
 8000230:	2180      	movs	r1, #128	@ 0x80
 8000232:	483c      	ldr	r0, [pc, #240]	@ (8000324 <checkKeys+0x1d8>)
 8000234:	f000 ff0c 	bl	8001050 <HAL_GPIO_ReadPin>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	bf0c      	ite	eq
 800023e:	2301      	moveq	r3, #1
 8000240:	2300      	movne	r3, #0
 8000242:	b2db      	uxtb	r3, r3
 8000244:	70bb      	strb	r3, [r7, #2]
    if (breakB == oldBreakB)
 8000246:	4b3d      	ldr	r3, [pc, #244]	@ (800033c <checkKeys+0x1f0>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	78ba      	ldrb	r2, [r7, #2]
 800024c:	429a      	cmp	r2, r3
 800024e:	d102      	bne.n	8000256 <checkKeys+0x10a>
        breakB = 0;
 8000250:	2300      	movs	r3, #0
 8000252:	70bb      	strb	r3, [r7, #2]
 8000254:	e002      	b.n	800025c <checkKeys+0x110>
    else
        oldBreakB = breakB;
 8000256:	4a39      	ldr	r2, [pc, #228]	@ (800033c <checkKeys+0x1f0>)
 8000258:	78bb      	ldrb	r3, [r7, #2]
 800025a:	7013      	strb	r3, [r2, #0]

    // Keys Reaction
    if (plusA)
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d010      	beq.n	8000284 <checkKeys+0x138>
    {
        speedA += 50;
 8000262:	4b37      	ldr	r3, [pc, #220]	@ (8000340 <checkKeys+0x1f4>)
 8000264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000268:	b29b      	uxth	r3, r3
 800026a:	3332      	adds	r3, #50	@ 0x32
 800026c:	b29b      	uxth	r3, r3
 800026e:	b21a      	sxth	r2, r3
 8000270:	4b33      	ldr	r3, [pc, #204]	@ (8000340 <checkKeys+0x1f4>)
 8000272:	801a      	strh	r2, [r3, #0]
        if (speedA > 250)
 8000274:	4b32      	ldr	r3, [pc, #200]	@ (8000340 <checkKeys+0x1f4>)
 8000276:	f9b3 3000 	ldrsh.w	r3, [r3]
 800027a:	2bfa      	cmp	r3, #250	@ 0xfa
 800027c:	dd02      	ble.n	8000284 <checkKeys+0x138>
            speedA = 250;
 800027e:	4b30      	ldr	r3, [pc, #192]	@ (8000340 <checkKeys+0x1f4>)
 8000280:	22fa      	movs	r2, #250	@ 0xfa
 8000282:	801a      	strh	r2, [r3, #0]
    }
    if (minusA)
 8000284:	79bb      	ldrb	r3, [r7, #6]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d012      	beq.n	80002b0 <checkKeys+0x164>
    {
        speedA -= 50;
 800028a:	4b2d      	ldr	r3, [pc, #180]	@ (8000340 <checkKeys+0x1f4>)
 800028c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000290:	b29b      	uxth	r3, r3
 8000292:	3b32      	subs	r3, #50	@ 0x32
 8000294:	b29b      	uxth	r3, r3
 8000296:	b21a      	sxth	r2, r3
 8000298:	4b29      	ldr	r3, [pc, #164]	@ (8000340 <checkKeys+0x1f4>)
 800029a:	801a      	strh	r2, [r3, #0]
        if (speedA < -250)
 800029c:	4b28      	ldr	r3, [pc, #160]	@ (8000340 <checkKeys+0x1f4>)
 800029e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002a2:	f113 0ffa 	cmn.w	r3, #250	@ 0xfa
 80002a6:	da03      	bge.n	80002b0 <checkKeys+0x164>
            speedA = -250;
 80002a8:	4b25      	ldr	r3, [pc, #148]	@ (8000340 <checkKeys+0x1f4>)
 80002aa:	f64f 7206 	movw	r2, #65286	@ 0xff06
 80002ae:	801a      	strh	r2, [r3, #0]
    }
    if (breakA)
 80002b0:	797b      	ldrb	r3, [r7, #5]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d002      	beq.n	80002bc <checkKeys+0x170>
        speedA = 0;
 80002b6:	4b22      	ldr	r3, [pc, #136]	@ (8000340 <checkKeys+0x1f4>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	801a      	strh	r2, [r3, #0]
    if (plusB)
 80002bc:	793b      	ldrb	r3, [r7, #4]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d010      	beq.n	80002e4 <checkKeys+0x198>
    {
        speedB += 50;
 80002c2:	4b20      	ldr	r3, [pc, #128]	@ (8000344 <checkKeys+0x1f8>)
 80002c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002c8:	b29b      	uxth	r3, r3
 80002ca:	3332      	adds	r3, #50	@ 0x32
 80002cc:	b29b      	uxth	r3, r3
 80002ce:	b21a      	sxth	r2, r3
 80002d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000344 <checkKeys+0x1f8>)
 80002d2:	801a      	strh	r2, [r3, #0]
        if (speedB > 250)
 80002d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000344 <checkKeys+0x1f8>)
 80002d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002da:	2bfa      	cmp	r3, #250	@ 0xfa
 80002dc:	dd02      	ble.n	80002e4 <checkKeys+0x198>
            speedB = 250;
 80002de:	4b19      	ldr	r3, [pc, #100]	@ (8000344 <checkKeys+0x1f8>)
 80002e0:	22fa      	movs	r2, #250	@ 0xfa
 80002e2:	801a      	strh	r2, [r3, #0]
    }
    if (minusB)
 80002e4:	78fb      	ldrb	r3, [r7, #3]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d012      	beq.n	8000310 <checkKeys+0x1c4>
    {
        speedB -= 50;
 80002ea:	4b16      	ldr	r3, [pc, #88]	@ (8000344 <checkKeys+0x1f8>)
 80002ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	3b32      	subs	r3, #50	@ 0x32
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	b21a      	sxth	r2, r3
 80002f8:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <checkKeys+0x1f8>)
 80002fa:	801a      	strh	r2, [r3, #0]
        if (speedB < -250)
 80002fc:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <checkKeys+0x1f8>)
 80002fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000302:	f113 0ffa 	cmn.w	r3, #250	@ 0xfa
 8000306:	da03      	bge.n	8000310 <checkKeys+0x1c4>
            speedB = -250;
 8000308:	4b0e      	ldr	r3, [pc, #56]	@ (8000344 <checkKeys+0x1f8>)
 800030a:	f64f 7206 	movw	r2, #65286	@ 0xff06
 800030e:	801a      	strh	r2, [r3, #0]
    }
    if (breakB)
 8000310:	78bb      	ldrb	r3, [r7, #2]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d002      	beq.n	800031c <checkKeys+0x1d0>
        speedB = 0;
 8000316:	4b0b      	ldr	r3, [pc, #44]	@ (8000344 <checkKeys+0x1f8>)
 8000318:	2200      	movs	r2, #0
 800031a:	801a      	strh	r2, [r3, #0]
}
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	40010800 	.word	0x40010800
 8000328:	2000010c 	.word	0x2000010c
 800032c:	2000010d 	.word	0x2000010d
 8000330:	2000010e 	.word	0x2000010e
 8000334:	2000010f 	.word	0x2000010f
 8000338:	20000110 	.word	0x20000110
 800033c:	20000111 	.word	0x20000111
 8000340:	20000108 	.word	0x20000108
 8000344:	2000010a 	.word	0x2000010a

08000348 <updateMotors>:

void updateMotors(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	 // Speed
	    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t)(abs(speedA) * TIM_PERIOD / 255));
 800034c:	4b2a      	ldr	r3, [pc, #168]	@ (80003f8 <updateMotors+0xb0>)
 800034e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000352:	2b00      	cmp	r3, #0
 8000354:	bfb8      	it	lt
 8000356:	425b      	neglt	r3, r3
 8000358:	b29b      	uxth	r3, r3
 800035a:	461a      	mov	r2, r3
 800035c:	4b27      	ldr	r3, [pc, #156]	@ (80003fc <updateMotors+0xb4>)
 800035e:	fb03 f202 	mul.w	r2, r3, r2
 8000362:	4b27      	ldr	r3, [pc, #156]	@ (8000400 <updateMotors+0xb8>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	635a      	str	r2, [r3, #52]	@ 0x34
	    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (uint32_t)(abs(speedB) * TIM_PERIOD / 255));
 8000368:	4b26      	ldr	r3, [pc, #152]	@ (8000404 <updateMotors+0xbc>)
 800036a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800036e:	2b00      	cmp	r3, #0
 8000370:	bfb8      	it	lt
 8000372:	425b      	neglt	r3, r3
 8000374:	b29b      	uxth	r3, r3
 8000376:	461a      	mov	r2, r3
 8000378:	4b20      	ldr	r3, [pc, #128]	@ (80003fc <updateMotors+0xb4>)
 800037a:	fb03 f202 	mul.w	r2, r3, r2
 800037e:	4b20      	ldr	r3, [pc, #128]	@ (8000400 <updateMotors+0xb8>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Direction
    HAL_GPIO_WritePin(GPIOB, DIR_A_PIN, (speedA > 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000384:	4b1c      	ldr	r3, [pc, #112]	@ (80003f8 <updateMotors+0xb0>)
 8000386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800038a:	2b00      	cmp	r3, #0
 800038c:	bfcc      	ite	gt
 800038e:	2301      	movgt	r3, #1
 8000390:	2300      	movle	r3, #0
 8000392:	b2db      	uxtb	r3, r3
 8000394:	461a      	mov	r2, r3
 8000396:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800039a:	481b      	ldr	r0, [pc, #108]	@ (8000408 <updateMotors+0xc0>)
 800039c:	f000 fe6f 	bl	800107e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, DIR_B_PIN, (speedB > 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003a0:	4b18      	ldr	r3, [pc, #96]	@ (8000404 <updateMotors+0xbc>)
 80003a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	bfcc      	ite	gt
 80003aa:	2301      	movgt	r3, #1
 80003ac:	2300      	movle	r3, #0
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	461a      	mov	r2, r3
 80003b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003b6:	4814      	ldr	r0, [pc, #80]	@ (8000408 <updateMotors+0xc0>)
 80003b8:	f000 fe61 	bl	800107e <HAL_GPIO_WritePin>

    // Brake On/Off
    HAL_GPIO_WritePin(GPIOA, BRAKE_A_PIN, (speedA == 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003bc:	4b0e      	ldr	r3, [pc, #56]	@ (80003f8 <updateMotors+0xb0>)
 80003be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	bf0c      	ite	eq
 80003c6:	2301      	moveq	r3, #1
 80003c8:	2300      	movne	r3, #0
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	461a      	mov	r2, r3
 80003ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003d2:	480e      	ldr	r0, [pc, #56]	@ (800040c <updateMotors+0xc4>)
 80003d4:	f000 fe53 	bl	800107e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, BRAKE_B_PIN, (speedB == 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000404 <updateMotors+0xbc>)
 80003da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	bf0c      	ite	eq
 80003e2:	2301      	moveq	r3, #1
 80003e4:	2300      	movne	r3, #0
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	461a      	mov	r2, r3
 80003ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003ee:	4807      	ldr	r0, [pc, #28]	@ (800040c <updateMotors+0xc4>)
 80003f0:	f000 fe45 	bl	800107e <HAL_GPIO_WritePin>
}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000108 	.word	0x20000108
 80003fc:	0004e200 	.word	0x0004e200
 8000400:	20000078 	.word	0x20000078
 8000404:	2000010a 	.word	0x2000010a
 8000408:	40010c00 	.word	0x40010c00
 800040c:	40010800 	.word	0x40010800

08000410 <printSpeeds>:

void printSpeeds(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b08e      	sub	sp, #56	@ 0x38
 8000414:	af00      	add	r7, sp, #0
    char buffer[50];
    int len = sprintf(buffer, "Speed A = %d B = %d\r\n", speedA, speedB);
 8000416:	4b0c      	ldr	r3, [pc, #48]	@ (8000448 <printSpeeds+0x38>)
 8000418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800041c:	461a      	mov	r2, r3
 800041e:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <printSpeeds+0x3c>)
 8000420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000424:	4638      	mov	r0, r7
 8000426:	490a      	ldr	r1, [pc, #40]	@ (8000450 <printSpeeds+0x40>)
 8000428:	f002 f9e2 	bl	80027f0 <siprintf>
 800042c:	6378      	str	r0, [r7, #52]	@ 0x34
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 800042e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000430:	b29a      	uxth	r2, r3
 8000432:	4639      	mov	r1, r7
 8000434:	f04f 33ff 	mov.w	r3, #4294967295
 8000438:	4806      	ldr	r0, [pc, #24]	@ (8000454 <printSpeeds+0x44>)
 800043a:	f002 f859 	bl	80024f0 <HAL_UART_Transmit>
}
 800043e:	bf00      	nop
 8000440:	3738      	adds	r7, #56	@ 0x38
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000108 	.word	0x20000108
 800044c:	2000010a 	.word	0x2000010a
 8000450:	08003168 	.word	0x08003168
 8000454:	200000c0 	.word	0x200000c0

08000458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800045e:	f000 fb11 	bl	8000a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000462:	f000 f833 	bl	80004cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000466:	f000 f91f 	bl	80006a8 <MX_GPIO_Init>
  MX_TIM3_Init();
 800046a:	f000 f871 	bl	8000550 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800046e:	f000 f8f1 	bl	8000654 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Start PWM.
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000472:	2108      	movs	r1, #8
 8000474:	4812      	ldr	r0, [pc, #72]	@ (80004c0 <main+0x68>)
 8000476:	f001 fad3 	bl	8001a20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800047a:	2100      	movs	r1, #0
 800047c:	4810      	ldr	r0, [pc, #64]	@ (80004c0 <main+0x68>)
 800047e:	f001 facf 	bl	8001a20 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int16_t oldSpeedA = speedA;
 8000482:	4b10      	ldr	r3, [pc, #64]	@ (80004c4 <main+0x6c>)
 8000484:	881b      	ldrh	r3, [r3, #0]
 8000486:	80fb      	strh	r3, [r7, #6]
	  int16_t oldSpeedB = speedB;
 8000488:	4b0f      	ldr	r3, [pc, #60]	@ (80004c8 <main+0x70>)
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	80bb      	strh	r3, [r7, #4]

	  checkKeys();
 800048e:	f7ff fe5d 	bl	800014c <checkKeys>
	  updateMotors();
 8000492:	f7ff ff59 	bl	8000348 <updateMotors>

	  if (speedA != oldSpeedA || speedB != oldSpeedB)
 8000496:	4b0b      	ldr	r3, [pc, #44]	@ (80004c4 <main+0x6c>)
 8000498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800049c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d106      	bne.n	80004b2 <main+0x5a>
 80004a4:	4b08      	ldr	r3, [pc, #32]	@ (80004c8 <main+0x70>)
 80004a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004aa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d001      	beq.n	80004b6 <main+0x5e>
	  {
		  printSpeeds();
 80004b2:	f7ff ffad 	bl	8000410 <printSpeeds>
	  }

	  HAL_Delay(10);  // Small delay to prevent too rapid updates
 80004b6:	200a      	movs	r0, #10
 80004b8:	f000 fb46 	bl	8000b48 <HAL_Delay>
  {
 80004bc:	e7e1      	b.n	8000482 <main+0x2a>
 80004be:	bf00      	nop
 80004c0:	20000078 	.word	0x20000078
 80004c4:	20000108 	.word	0x20000108
 80004c8:	2000010a 	.word	0x2000010a

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b090      	sub	sp, #64	@ 0x40
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	f107 0318 	add.w	r3, r7, #24
 80004d6:	2228      	movs	r2, #40	@ 0x28
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 f9a8 	bl	8002830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ee:	2302      	movs	r3, #2
 80004f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f2:	2301      	movs	r3, #1
 80004f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f6:	2310      	movs	r3, #16
 80004f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fa:	2302      	movs	r3, #2
 80004fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80004fe:	2300      	movs	r3, #0
 8000500:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000502:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000506:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000508:	f107 0318 	add.w	r3, r7, #24
 800050c:	4618      	mov	r0, r3
 800050e:	f000 fdcf 	bl	80010b0 <HAL_RCC_OscConfig>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000518:	f000 f92a 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051c:	230f      	movs	r3, #15
 800051e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000520:	2302      	movs	r3, #2
 8000522:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000528:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800052c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f001 f83c 	bl	80015b4 <HAL_RCC_ClockConfig>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000542:	f000 f915 	bl	8000770 <Error_Handler>
  }
}
 8000546:	bf00      	nop
 8000548:	3740      	adds	r7, #64	@ 0x40
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
	...

08000550 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08e      	sub	sp, #56	@ 0x38
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000556:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000564:	f107 0320 	add.w	r3, r7, #32
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
 800057c:	615a      	str	r2, [r3, #20]
 800057e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000580:	4b31      	ldr	r3, [pc, #196]	@ (8000648 <MX_TIM3_Init+0xf8>)
 8000582:	4a32      	ldr	r2, [pc, #200]	@ (800064c <MX_TIM3_Init+0xfc>)
 8000584:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000586:	4b30      	ldr	r3, [pc, #192]	@ (8000648 <MX_TIM3_Init+0xf8>)
 8000588:	2200      	movs	r2, #0
 800058a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058c:	4b2e      	ldr	r3, [pc, #184]	@ (8000648 <MX_TIM3_Init+0xf8>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM_PERIOD;
 8000592:	4b2d      	ldr	r3, [pc, #180]	@ (8000648 <MX_TIM3_Init+0xf8>)
 8000594:	4a2e      	ldr	r2, [pc, #184]	@ (8000650 <MX_TIM3_Init+0x100>)
 8000596:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000598:	4b2b      	ldr	r3, [pc, #172]	@ (8000648 <MX_TIM3_Init+0xf8>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800059e:	4b2a      	ldr	r3, [pc, #168]	@ (8000648 <MX_TIM3_Init+0xf8>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005a4:	4828      	ldr	r0, [pc, #160]	@ (8000648 <MX_TIM3_Init+0xf8>)
 80005a6:	f001 f993 	bl	80018d0 <HAL_TIM_Base_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80005b0:	f000 f8de 	bl	8000770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005be:	4619      	mov	r1, r3
 80005c0:	4821      	ldr	r0, [pc, #132]	@ (8000648 <MX_TIM3_Init+0xf8>)
 80005c2:	f001 fb8b 	bl	8001cdc <HAL_TIM_ConfigClockSource>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80005cc:	f000 f8d0 	bl	8000770 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005d0:	481d      	ldr	r0, [pc, #116]	@ (8000648 <MX_TIM3_Init+0xf8>)
 80005d2:	f001 f9cc 	bl	800196e <HAL_TIM_PWM_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80005dc:	f000 f8c8 	bl	8000770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4619      	mov	r1, r3
 80005ee:	4816      	ldr	r0, [pc, #88]	@ (8000648 <MX_TIM3_Init+0xf8>)
 80005f0:	f001 fed6 	bl	80023a0 <HAL_TIMEx_MasterConfigSynchronization>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80005fa:	f000 f8b9 	bl	8000770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005fe:	2360      	movs	r3, #96	@ 0x60
 8000600:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	4619      	mov	r1, r3
 8000614:	480c      	ldr	r0, [pc, #48]	@ (8000648 <MX_TIM3_Init+0xf8>)
 8000616:	f001 fa9f 	bl	8001b58 <HAL_TIM_PWM_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000620:	f000 f8a6 	bl	8000770 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2208      	movs	r2, #8
 8000628:	4619      	mov	r1, r3
 800062a:	4807      	ldr	r0, [pc, #28]	@ (8000648 <MX_TIM3_Init+0xf8>)
 800062c:	f001 fa94 	bl	8001b58 <HAL_TIM_PWM_ConfigChannel>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8000636:	f000 f89b 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800063a:	4803      	ldr	r0, [pc, #12]	@ (8000648 <MX_TIM3_Init+0xf8>)
 800063c:	f000 f8ee 	bl	800081c <HAL_TIM_MspPostInit>

}
 8000640:	bf00      	nop
 8000642:	3738      	adds	r7, #56	@ 0x38
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000078 	.word	0x20000078
 800064c:	40000400 	.word	0x40000400
 8000650:	0004e1ff 	.word	0x0004e1ff

08000654 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_USART1_UART_Init+0x4c>)
 800065a:	4a12      	ldr	r2, [pc, #72]	@ (80006a4 <MX_USART1_UART_Init+0x50>)
 800065c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_USART1_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_USART1_UART_Init+0x4c>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_USART1_UART_Init+0x4c>)
 800068c:	f001 fee0 	bl	8002450 <HAL_UART_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000696:	f000 f86b 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200000c0 	.word	0x200000c0
 80006a4:	40013800 	.word	0x40013800

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 0308 	add.w	r3, r7, #8
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	4b29      	ldr	r3, [pc, #164]	@ (8000764 <MX_GPIO_Init+0xbc>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a28      	ldr	r2, [pc, #160]	@ (8000764 <MX_GPIO_Init+0xbc>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b26      	ldr	r3, [pc, #152]	@ (8000764 <MX_GPIO_Init+0xbc>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d4:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <MX_GPIO_Init+0xbc>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a22      	ldr	r2, [pc, #136]	@ (8000764 <MX_GPIO_Init+0xbc>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <MX_GPIO_Init+0xbc>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0308 	and.w	r3, r3, #8
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80006f2:	481d      	ldr	r0, [pc, #116]	@ (8000768 <MX_GPIO_Init+0xc0>)
 80006f4:	f000 fcc3 	bl	800107e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80006fe:	481b      	ldr	r0, [pc, #108]	@ (800076c <MX_GPIO_Init+0xc4>)
 8000700:	f000 fcbd 	bl	800107e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8000704:	f240 43ae 	movw	r3, #1198	@ 0x4ae
 8000708:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_7|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 0308 	add.w	r3, r7, #8
 8000716:	4619      	mov	r1, r3
 8000718:	4814      	ldr	r0, [pc, #80]	@ (800076c <MX_GPIO_Init+0xc4>)
 800071a:	f000 fb1d 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800071e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000722:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2302      	movs	r3, #2
 800072e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	4619      	mov	r1, r3
 8000736:	480c      	ldr	r0, [pc, #48]	@ (8000768 <MX_GPIO_Init+0xc0>)
 8000738:	f000 fb0e 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800073c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000740:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2302      	movs	r3, #2
 800074c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	4619      	mov	r1, r3
 8000754:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_GPIO_Init+0xc4>)
 8000756:	f000 faff 	bl	8000d58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800075a:	bf00      	nop
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000
 8000768:	40010c00 	.word	0x40010c00
 800076c:	40010800 	.word	0x40010800

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <Error_Handler+0x8>

0800077c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <HAL_MspInit+0x5c>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	4a14      	ldr	r2, [pc, #80]	@ (80007d8 <HAL_MspInit+0x5c>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6193      	str	r3, [r2, #24]
 800078e:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <HAL_MspInit+0x5c>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <HAL_MspInit+0x5c>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	4a0e      	ldr	r2, [pc, #56]	@ (80007d8 <HAL_MspInit+0x5c>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a4:	61d3      	str	r3, [r2, #28]
 80007a6:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <HAL_MspInit+0x5c>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80007b2:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <HAL_MspInit+0x60>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <HAL_MspInit+0x60>)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010000 	.word	0x40010000

080007e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a09      	ldr	r2, [pc, #36]	@ (8000814 <HAL_TIM_Base_MspInit+0x34>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d10b      	bne.n	800080a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007f2:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <HAL_TIM_Base_MspInit+0x38>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a08      	ldr	r2, [pc, #32]	@ (8000818 <HAL_TIM_Base_MspInit+0x38>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <HAL_TIM_Base_MspInit+0x38>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800080a:	bf00      	nop
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	40000400 	.word	0x40000400
 8000818:	40021000 	.word	0x40021000

0800081c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a1b      	ldr	r2, [pc, #108]	@ (80008a4 <HAL_TIM_MspPostInit+0x88>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d12f      	bne.n	800089c <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4b1a      	ldr	r3, [pc, #104]	@ (80008a8 <HAL_TIM_MspPostInit+0x8c>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a19      	ldr	r2, [pc, #100]	@ (80008a8 <HAL_TIM_MspPostInit+0x8c>)
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <HAL_TIM_MspPostInit+0x8c>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0304 	and.w	r3, r3, #4
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <HAL_TIM_MspPostInit+0x8c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a13      	ldr	r2, [pc, #76]	@ (80008a8 <HAL_TIM_MspPostInit+0x8c>)
 800085a:	f043 0308 	orr.w	r3, r3, #8
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <HAL_TIM_MspPostInit+0x8c>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0308 	and.w	r3, r3, #8
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = pwmAPin_Pin;
 800086c:	2340      	movs	r3, #64	@ 0x40
 800086e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2302      	movs	r3, #2
 8000876:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(pwmAPin_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	4619      	mov	r1, r3
 800087e:	480b      	ldr	r0, [pc, #44]	@ (80008ac <HAL_TIM_MspPostInit+0x90>)
 8000880:	f000 fa6a 	bl	8000d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = pwmBPin_Pin;
 8000884:	2301      	movs	r3, #1
 8000886:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2302      	movs	r3, #2
 800088e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(pwmBPin_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	4619      	mov	r1, r3
 8000896:	4806      	ldr	r0, [pc, #24]	@ (80008b0 <HAL_TIM_MspPostInit+0x94>)
 8000898:	f000 fa5e 	bl	8000d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	3720      	adds	r7, #32
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40000400 	.word	0x40000400
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40010800 	.word	0x40010800
 80008b0:	40010c00 	.word	0x40010c00

080008b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	@ 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a22      	ldr	r2, [pc, #136]	@ (8000958 <HAL_UART_MspInit+0xa4>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d13d      	bne.n	8000950 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008d4:	4b21      	ldr	r3, [pc, #132]	@ (800095c <HAL_UART_MspInit+0xa8>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a20      	ldr	r2, [pc, #128]	@ (800095c <HAL_UART_MspInit+0xa8>)
 80008da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b1e      	ldr	r3, [pc, #120]	@ (800095c <HAL_UART_MspInit+0xa8>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ec:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <HAL_UART_MspInit+0xa8>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a1a      	ldr	r2, [pc, #104]	@ (800095c <HAL_UART_MspInit+0xa8>)
 80008f2:	f043 0308 	orr.w	r3, r3, #8
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b18      	ldr	r3, [pc, #96]	@ (800095c <HAL_UART_MspInit+0xa8>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000904:	2340      	movs	r3, #64	@ 0x40
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	4812      	ldr	r0, [pc, #72]	@ (8000960 <HAL_UART_MspInit+0xac>)
 8000918:	f000 fa1e 	bl	8000d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800091c:	2380      	movs	r3, #128	@ 0x80
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	480c      	ldr	r0, [pc, #48]	@ (8000960 <HAL_UART_MspInit+0xac>)
 8000930:	f000 fa12 	bl	8000d58 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000934:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <HAL_UART_MspInit+0xb0>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
 800093a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
 8000942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
 800094a:	4a06      	ldr	r2, [pc, #24]	@ (8000964 <HAL_UART_MspInit+0xb0>)
 800094c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800094e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	@ 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40013800 	.word	0x40013800
 800095c:	40021000 	.word	0x40021000
 8000960:	40010c00 	.word	0x40010c00
 8000964:	40010000 	.word	0x40010000

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <NMI_Handler+0x4>

08000970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <MemManage_Handler+0x4>

08000980 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <UsageFault_Handler+0x4>

08000990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f8aa 	bl	8000b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c8:	4a14      	ldr	r2, [pc, #80]	@ (8000a1c <_sbrk+0x5c>)
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <_sbrk+0x60>)
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d4:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009dc:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <_sbrk+0x64>)
 80009de:	4a12      	ldr	r2, [pc, #72]	@ (8000a28 <_sbrk+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d207      	bcs.n	8000a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f0:	f001 ff26 	bl	8002840 <__errno>
 80009f4:	4603      	mov	r3, r0
 80009f6:	220c      	movs	r2, #12
 80009f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	e009      	b.n	8000a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a00:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a06:	4b07      	ldr	r3, [pc, #28]	@ (8000a24 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4a05      	ldr	r2, [pc, #20]	@ (8000a24 <_sbrk+0x64>)
 8000a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20002800 	.word	0x20002800
 8000a20:	00000400 	.word	0x00000400
 8000a24:	20000114 	.word	0x20000114
 8000a28:	20000268 	.word	0x20000268

08000a2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a38:	f7ff fff8 	bl	8000a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a3c:	480b      	ldr	r0, [pc, #44]	@ (8000a6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a3e:	490c      	ldr	r1, [pc, #48]	@ (8000a70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a40:	4a0c      	ldr	r2, [pc, #48]	@ (8000a74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a09      	ldr	r2, [pc, #36]	@ (8000a78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a54:	4c09      	ldr	r4, [pc, #36]	@ (8000a7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a62:	f001 fef3 	bl	800284c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a66:	f7ff fcf7 	bl	8000458 <main>
  bx lr
 8000a6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a74:	080031e8 	.word	0x080031e8
  ldr r2, =_sbss
 8000a78:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a7c:	20000264 	.word	0x20000264

08000a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_2_IRQHandler>
	...

08000a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <HAL_Init+0x28>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a07      	ldr	r2, [pc, #28]	@ (8000aac <HAL_Init+0x28>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f92b 	bl	8000cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9a:	200f      	movs	r0, #15
 8000a9c:	f000 f808 	bl	8000ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa0:	f7ff fe6c 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40022000 	.word	0x40022000

08000ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab8:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <HAL_InitTick+0x54>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <HAL_InitTick+0x58>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f935 	bl	8000d3e <HAL_SYSTICK_Config>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00e      	b.n	8000afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	d80a      	bhi.n	8000afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f000 f90b 	bl	8000d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af0:	4a06      	ldr	r2, [pc, #24]	@ (8000b0c <HAL_InitTick+0x5c>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e000      	b.n	8000afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000000 	.word	0x20000000
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20000004 	.word	0x20000004

08000b10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b14:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <HAL_IncTick+0x1c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <HAL_IncTick+0x20>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a03      	ldr	r2, [pc, #12]	@ (8000b30 <HAL_IncTick+0x20>)
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000118 	.word	0x20000118

08000b34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b02      	ldr	r3, [pc, #8]	@ (8000b44 <HAL_GetTick+0x10>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	20000118 	.word	0x20000118

08000b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b50:	f7ff fff0 	bl	8000b34 <HAL_GetTick>
 8000b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b60:	d005      	beq.n	8000b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b62:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <HAL_Delay+0x44>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b6e:	bf00      	nop
 8000b70:	f7ff ffe0 	bl	8000b34 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d8f7      	bhi.n	8000b70 <HAL_Delay+0x28>
  {
  }
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	@ (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	@ (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	@ (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	@ (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	@ 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	@ 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cbc:	d301      	bcc.n	8000cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00f      	b.n	8000ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <SysTick_Config+0x40>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cca:	210f      	movs	r1, #15
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f7ff ff90 	bl	8000bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd4:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <SysTick_Config+0x40>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cda:	4b04      	ldr	r3, [pc, #16]	@ (8000cec <SysTick_Config+0x40>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	e000e010 	.word	0xe000e010

08000cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ff49 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d18:	f7ff ff5e 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	6978      	ldr	r0, [r7, #20]
 8000d24:	f7ff ff90 	bl	8000c48 <NVIC_EncodePriority>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff5f 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ffb0 	bl	8000cac <SysTick_Config>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b08b      	sub	sp, #44	@ 0x2c
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6a:	e161      	b.n	8001030 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	69fa      	ldr	r2, [r7, #28]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	f040 8150 	bne.w	800102a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	4a97      	ldr	r2, [pc, #604]	@ (8000fec <HAL_GPIO_Init+0x294>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d05e      	beq.n	8000e52 <HAL_GPIO_Init+0xfa>
 8000d94:	4a95      	ldr	r2, [pc, #596]	@ (8000fec <HAL_GPIO_Init+0x294>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d875      	bhi.n	8000e86 <HAL_GPIO_Init+0x12e>
 8000d9a:	4a95      	ldr	r2, [pc, #596]	@ (8000ff0 <HAL_GPIO_Init+0x298>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d058      	beq.n	8000e52 <HAL_GPIO_Init+0xfa>
 8000da0:	4a93      	ldr	r2, [pc, #588]	@ (8000ff0 <HAL_GPIO_Init+0x298>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d86f      	bhi.n	8000e86 <HAL_GPIO_Init+0x12e>
 8000da6:	4a93      	ldr	r2, [pc, #588]	@ (8000ff4 <HAL_GPIO_Init+0x29c>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d052      	beq.n	8000e52 <HAL_GPIO_Init+0xfa>
 8000dac:	4a91      	ldr	r2, [pc, #580]	@ (8000ff4 <HAL_GPIO_Init+0x29c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d869      	bhi.n	8000e86 <HAL_GPIO_Init+0x12e>
 8000db2:	4a91      	ldr	r2, [pc, #580]	@ (8000ff8 <HAL_GPIO_Init+0x2a0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d04c      	beq.n	8000e52 <HAL_GPIO_Init+0xfa>
 8000db8:	4a8f      	ldr	r2, [pc, #572]	@ (8000ff8 <HAL_GPIO_Init+0x2a0>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d863      	bhi.n	8000e86 <HAL_GPIO_Init+0x12e>
 8000dbe:	4a8f      	ldr	r2, [pc, #572]	@ (8000ffc <HAL_GPIO_Init+0x2a4>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d046      	beq.n	8000e52 <HAL_GPIO_Init+0xfa>
 8000dc4:	4a8d      	ldr	r2, [pc, #564]	@ (8000ffc <HAL_GPIO_Init+0x2a4>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d85d      	bhi.n	8000e86 <HAL_GPIO_Init+0x12e>
 8000dca:	2b12      	cmp	r3, #18
 8000dcc:	d82a      	bhi.n	8000e24 <HAL_GPIO_Init+0xcc>
 8000dce:	2b12      	cmp	r3, #18
 8000dd0:	d859      	bhi.n	8000e86 <HAL_GPIO_Init+0x12e>
 8000dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8000dd8 <HAL_GPIO_Init+0x80>)
 8000dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd8:	08000e53 	.word	0x08000e53
 8000ddc:	08000e2d 	.word	0x08000e2d
 8000de0:	08000e3f 	.word	0x08000e3f
 8000de4:	08000e81 	.word	0x08000e81
 8000de8:	08000e87 	.word	0x08000e87
 8000dec:	08000e87 	.word	0x08000e87
 8000df0:	08000e87 	.word	0x08000e87
 8000df4:	08000e87 	.word	0x08000e87
 8000df8:	08000e87 	.word	0x08000e87
 8000dfc:	08000e87 	.word	0x08000e87
 8000e00:	08000e87 	.word	0x08000e87
 8000e04:	08000e87 	.word	0x08000e87
 8000e08:	08000e87 	.word	0x08000e87
 8000e0c:	08000e87 	.word	0x08000e87
 8000e10:	08000e87 	.word	0x08000e87
 8000e14:	08000e87 	.word	0x08000e87
 8000e18:	08000e87 	.word	0x08000e87
 8000e1c:	08000e35 	.word	0x08000e35
 8000e20:	08000e49 	.word	0x08000e49
 8000e24:	4a76      	ldr	r2, [pc, #472]	@ (8001000 <HAL_GPIO_Init+0x2a8>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d013      	beq.n	8000e52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e2a:	e02c      	b.n	8000e86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	623b      	str	r3, [r7, #32]
          break;
 8000e32:	e029      	b.n	8000e88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	623b      	str	r3, [r7, #32]
          break;
 8000e3c:	e024      	b.n	8000e88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	3308      	adds	r3, #8
 8000e44:	623b      	str	r3, [r7, #32]
          break;
 8000e46:	e01f      	b.n	8000e88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	330c      	adds	r3, #12
 8000e4e:	623b      	str	r3, [r7, #32]
          break;
 8000e50:	e01a      	b.n	8000e88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d102      	bne.n	8000e60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	623b      	str	r3, [r7, #32]
          break;
 8000e5e:	e013      	b.n	8000e88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d105      	bne.n	8000e74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e68:	2308      	movs	r3, #8
 8000e6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69fa      	ldr	r2, [r7, #28]
 8000e70:	611a      	str	r2, [r3, #16]
          break;
 8000e72:	e009      	b.n	8000e88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e74:	2308      	movs	r3, #8
 8000e76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69fa      	ldr	r2, [r7, #28]
 8000e7c:	615a      	str	r2, [r3, #20]
          break;
 8000e7e:	e003      	b.n	8000e88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
          break;
 8000e84:	e000      	b.n	8000e88 <HAL_GPIO_Init+0x130>
          break;
 8000e86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	2bff      	cmp	r3, #255	@ 0xff
 8000e8c:	d801      	bhi.n	8000e92 <HAL_GPIO_Init+0x13a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	e001      	b.n	8000e96 <HAL_GPIO_Init+0x13e>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3304      	adds	r3, #4
 8000e96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	2bff      	cmp	r3, #255	@ 0xff
 8000e9c:	d802      	bhi.n	8000ea4 <HAL_GPIO_Init+0x14c>
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	e002      	b.n	8000eaa <HAL_GPIO_Init+0x152>
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea6:	3b08      	subs	r3, #8
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	210f      	movs	r1, #15
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	401a      	ands	r2, r3
 8000ebc:	6a39      	ldr	r1, [r7, #32]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 80a9 	beq.w	800102a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed8:	4b4a      	ldr	r3, [pc, #296]	@ (8001004 <HAL_GPIO_Init+0x2ac>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a49      	ldr	r2, [pc, #292]	@ (8001004 <HAL_GPIO_Init+0x2ac>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b47      	ldr	r3, [pc, #284]	@ (8001004 <HAL_GPIO_Init+0x2ac>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ef0:	4a45      	ldr	r2, [pc, #276]	@ (8001008 <HAL_GPIO_Init+0x2b0>)
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	4013      	ands	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a3d      	ldr	r2, [pc, #244]	@ (800100c <HAL_GPIO_Init+0x2b4>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d00d      	beq.n	8000f38 <HAL_GPIO_Init+0x1e0>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a3c      	ldr	r2, [pc, #240]	@ (8001010 <HAL_GPIO_Init+0x2b8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d007      	beq.n	8000f34 <HAL_GPIO_Init+0x1dc>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a3b      	ldr	r2, [pc, #236]	@ (8001014 <HAL_GPIO_Init+0x2bc>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d101      	bne.n	8000f30 <HAL_GPIO_Init+0x1d8>
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	e004      	b.n	8000f3a <HAL_GPIO_Init+0x1e2>
 8000f30:	2303      	movs	r3, #3
 8000f32:	e002      	b.n	8000f3a <HAL_GPIO_Init+0x1e2>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <HAL_GPIO_Init+0x1e2>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f3c:	f002 0203 	and.w	r2, r2, #3
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	4093      	lsls	r3, r2
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f4a:	492f      	ldr	r1, [pc, #188]	@ (8001008 <HAL_GPIO_Init+0x2b0>)
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3302      	adds	r3, #2
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d006      	beq.n	8000f72 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f64:	4b2c      	ldr	r3, [pc, #176]	@ (8001018 <HAL_GPIO_Init+0x2c0>)
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	492b      	ldr	r1, [pc, #172]	@ (8001018 <HAL_GPIO_Init+0x2c0>)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	608b      	str	r3, [r1, #8]
 8000f70:	e006      	b.n	8000f80 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f72:	4b29      	ldr	r3, [pc, #164]	@ (8001018 <HAL_GPIO_Init+0x2c0>)
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	4927      	ldr	r1, [pc, #156]	@ (8001018 <HAL_GPIO_Init+0x2c0>)
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d006      	beq.n	8000f9a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f8c:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <HAL_GPIO_Init+0x2c0>)
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	4921      	ldr	r1, [pc, #132]	@ (8001018 <HAL_GPIO_Init+0x2c0>)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	60cb      	str	r3, [r1, #12]
 8000f98:	e006      	b.n	8000fa8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <HAL_GPIO_Init+0x2c0>)
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	491d      	ldr	r1, [pc, #116]	@ (8001018 <HAL_GPIO_Init+0x2c0>)
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fb4:	4b18      	ldr	r3, [pc, #96]	@ (8001018 <HAL_GPIO_Init+0x2c0>)
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	4917      	ldr	r1, [pc, #92]	@ (8001018 <HAL_GPIO_Init+0x2c0>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	604b      	str	r3, [r1, #4]
 8000fc0:	e006      	b.n	8000fd0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fc2:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <HAL_GPIO_Init+0x2c0>)
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	4913      	ldr	r1, [pc, #76]	@ (8001018 <HAL_GPIO_Init+0x2c0>)
 8000fcc:	4013      	ands	r3, r2
 8000fce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d01f      	beq.n	800101c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <HAL_GPIO_Init+0x2c0>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	490d      	ldr	r1, [pc, #52]	@ (8001018 <HAL_GPIO_Init+0x2c0>)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	600b      	str	r3, [r1, #0]
 8000fe8:	e01f      	b.n	800102a <HAL_GPIO_Init+0x2d2>
 8000fea:	bf00      	nop
 8000fec:	10320000 	.word	0x10320000
 8000ff0:	10310000 	.word	0x10310000
 8000ff4:	10220000 	.word	0x10220000
 8000ff8:	10210000 	.word	0x10210000
 8000ffc:	10120000 	.word	0x10120000
 8001000:	10110000 	.word	0x10110000
 8001004:	40021000 	.word	0x40021000
 8001008:	40010000 	.word	0x40010000
 800100c:	40010800 	.word	0x40010800
 8001010:	40010c00 	.word	0x40010c00
 8001014:	40011000 	.word	0x40011000
 8001018:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <HAL_GPIO_Init+0x2f4>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	43db      	mvns	r3, r3
 8001024:	4909      	ldr	r1, [pc, #36]	@ (800104c <HAL_GPIO_Init+0x2f4>)
 8001026:	4013      	ands	r3, r2
 8001028:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800102a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102c:	3301      	adds	r3, #1
 800102e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001036:	fa22 f303 	lsr.w	r3, r2, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	f47f ae96 	bne.w	8000d6c <HAL_GPIO_Init+0x14>
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	372c      	adds	r7, #44	@ 0x2c
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	40010400 	.word	0x40010400

08001050 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	4013      	ands	r3, r2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d002      	beq.n	800106e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	e001      	b.n	8001072 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	807b      	strh	r3, [r7, #2]
 800108a:	4613      	mov	r3, r2
 800108c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800108e:	787b      	ldrb	r3, [r7, #1]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001094:	887a      	ldrh	r2, [r7, #2]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800109a:	e003      	b.n	80010a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	041a      	lsls	r2, r3, #16
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	611a      	str	r2, [r3, #16]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
	...

080010b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e272      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 8087 	beq.w	80011de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010d0:	4b92      	ldr	r3, [pc, #584]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 030c 	and.w	r3, r3, #12
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d00c      	beq.n	80010f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010dc:	4b8f      	ldr	r3, [pc, #572]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d112      	bne.n	800110e <HAL_RCC_OscConfig+0x5e>
 80010e8:	4b8c      	ldr	r3, [pc, #560]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f4:	d10b      	bne.n	800110e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f6:	4b89      	ldr	r3, [pc, #548]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d06c      	beq.n	80011dc <HAL_RCC_OscConfig+0x12c>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d168      	bne.n	80011dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e24c      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001116:	d106      	bne.n	8001126 <HAL_RCC_OscConfig+0x76>
 8001118:	4b80      	ldr	r3, [pc, #512]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a7f      	ldr	r2, [pc, #508]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 800111e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	e02e      	b.n	8001184 <HAL_RCC_OscConfig+0xd4>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x98>
 800112e:	4b7b      	ldr	r3, [pc, #492]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a7a      	ldr	r2, [pc, #488]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001134:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	4b78      	ldr	r3, [pc, #480]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a77      	ldr	r2, [pc, #476]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001140:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e01d      	b.n	8001184 <HAL_RCC_OscConfig+0xd4>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001150:	d10c      	bne.n	800116c <HAL_RCC_OscConfig+0xbc>
 8001152:	4b72      	ldr	r3, [pc, #456]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a71      	ldr	r2, [pc, #452]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001158:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	4b6f      	ldr	r3, [pc, #444]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a6e      	ldr	r2, [pc, #440]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e00b      	b.n	8001184 <HAL_RCC_OscConfig+0xd4>
 800116c:	4b6b      	ldr	r3, [pc, #428]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a6a      	ldr	r2, [pc, #424]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b68      	ldr	r3, [pc, #416]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a67      	ldr	r2, [pc, #412]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 800117e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001182:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d013      	beq.n	80011b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fcd2 	bl	8000b34 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fcce 	bl	8000b34 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	@ 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e200      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	4b5d      	ldr	r3, [pc, #372]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0xe4>
 80011b2:	e014      	b.n	80011de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fcbe 	bl	8000b34 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fcba 	bl	8000b34 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	@ 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e1ec      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	4b53      	ldr	r3, [pc, #332]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f0      	bne.n	80011bc <HAL_RCC_OscConfig+0x10c>
 80011da:	e000      	b.n	80011de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d063      	beq.n	80012b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ea:	4b4c      	ldr	r3, [pc, #304]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011f6:	4b49      	ldr	r3, [pc, #292]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d11c      	bne.n	800123c <HAL_RCC_OscConfig+0x18c>
 8001202:	4b46      	ldr	r3, [pc, #280]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d116      	bne.n	800123c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	4b43      	ldr	r3, [pc, #268]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <HAL_RCC_OscConfig+0x176>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d001      	beq.n	8001226 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e1c0      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001226:	4b3d      	ldr	r3, [pc, #244]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4939      	ldr	r1, [pc, #228]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001236:	4313      	orrs	r3, r2
 8001238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	e03a      	b.n	80012b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d020      	beq.n	8001286 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001244:	4b36      	ldr	r3, [pc, #216]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124a:	f7ff fc73 	bl	8000b34 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001252:	f7ff fc6f 	bl	8000b34 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e1a1      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	4b2d      	ldr	r3, [pc, #180]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001270:	4b2a      	ldr	r3, [pc, #168]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4927      	ldr	r1, [pc, #156]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 8001280:	4313      	orrs	r3, r2
 8001282:	600b      	str	r3, [r1, #0]
 8001284:	e015      	b.n	80012b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001286:	4b26      	ldr	r3, [pc, #152]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fc52 	bl	8000b34 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001294:	f7ff fc4e 	bl	8000b34 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e180      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d03a      	beq.n	8001334 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d019      	beq.n	80012fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012c6:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <HAL_RCC_OscConfig+0x274>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012cc:	f7ff fc32 	bl	8000b34 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d4:	f7ff fc2e 	bl	8000b34 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e160      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <HAL_RCC_OscConfig+0x26c>)
 80012e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f000 face 	bl	8001894 <RCC_Delay>
 80012f8:	e01c      	b.n	8001334 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <HAL_RCC_OscConfig+0x274>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001300:	f7ff fc18 	bl	8000b34 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001306:	e00f      	b.n	8001328 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001308:	f7ff fc14 	bl	8000b34 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d908      	bls.n	8001328 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e146      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000
 8001320:	42420000 	.word	0x42420000
 8001324:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001328:	4b92      	ldr	r3, [pc, #584]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800132a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1e9      	bne.n	8001308 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80a6 	beq.w	800148e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001346:	4b8b      	ldr	r3, [pc, #556]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10d      	bne.n	800136e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	4b88      	ldr	r3, [pc, #544]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	4a87      	ldr	r2, [pc, #540]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800135c:	61d3      	str	r3, [r2, #28]
 800135e:	4b85      	ldr	r3, [pc, #532]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800136a:	2301      	movs	r3, #1
 800136c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136e:	4b82      	ldr	r3, [pc, #520]	@ (8001578 <HAL_RCC_OscConfig+0x4c8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d118      	bne.n	80013ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800137a:	4b7f      	ldr	r3, [pc, #508]	@ (8001578 <HAL_RCC_OscConfig+0x4c8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a7e      	ldr	r2, [pc, #504]	@ (8001578 <HAL_RCC_OscConfig+0x4c8>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001386:	f7ff fbd5 	bl	8000b34 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138e:	f7ff fbd1 	bl	8000b34 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b64      	cmp	r3, #100	@ 0x64
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e103      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a0:	4b75      	ldr	r3, [pc, #468]	@ (8001578 <HAL_RCC_OscConfig+0x4c8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d106      	bne.n	80013c2 <HAL_RCC_OscConfig+0x312>
 80013b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6213      	str	r3, [r2, #32]
 80013c0:	e02d      	b.n	800141e <HAL_RCC_OscConfig+0x36e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x334>
 80013ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	4a69      	ldr	r2, [pc, #420]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	f023 0301 	bic.w	r3, r3, #1
 80013d4:	6213      	str	r3, [r2, #32]
 80013d6:	4b67      	ldr	r3, [pc, #412]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	4a66      	ldr	r2, [pc, #408]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	f023 0304 	bic.w	r3, r3, #4
 80013e0:	6213      	str	r3, [r2, #32]
 80013e2:	e01c      	b.n	800141e <HAL_RCC_OscConfig+0x36e>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b05      	cmp	r3, #5
 80013ea:	d10c      	bne.n	8001406 <HAL_RCC_OscConfig+0x356>
 80013ec:	4b61      	ldr	r3, [pc, #388]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	4a60      	ldr	r2, [pc, #384]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	6213      	str	r3, [r2, #32]
 80013f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6213      	str	r3, [r2, #32]
 8001404:	e00b      	b.n	800141e <HAL_RCC_OscConfig+0x36e>
 8001406:	4b5b      	ldr	r3, [pc, #364]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4a5a      	ldr	r2, [pc, #360]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	6213      	str	r3, [r2, #32]
 8001412:	4b58      	ldr	r3, [pc, #352]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	4a57      	ldr	r2, [pc, #348]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	f023 0304 	bic.w	r3, r3, #4
 800141c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d015      	beq.n	8001452 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fb85 	bl	8000b34 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f7ff fb81 	bl	8000b34 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800143c:	4293      	cmp	r3, r2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e0b1      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001444:	4b4b      	ldr	r3, [pc, #300]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0ee      	beq.n	800142e <HAL_RCC_OscConfig+0x37e>
 8001450:	e014      	b.n	800147c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff fb6f 	bl	8000b34 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001458:	e00a      	b.n	8001470 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f7ff fb6b 	bl	8000b34 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001468:	4293      	cmp	r3, r2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e09b      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001470:	4b40      	ldr	r3, [pc, #256]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ee      	bne.n	800145a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800147c:	7dfb      	ldrb	r3, [r7, #23]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d105      	bne.n	800148e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001482:	4b3c      	ldr	r3, [pc, #240]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a3b      	ldr	r2, [pc, #236]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800148c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 8087 	beq.w	80015a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001498:	4b36      	ldr	r3, [pc, #216]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d061      	beq.n	8001568 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d146      	bne.n	800153a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ac:	4b33      	ldr	r3, [pc, #204]	@ (800157c <HAL_RCC_OscConfig+0x4cc>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fb3f 	bl	8000b34 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff fb3b 	bl	8000b34 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e06d      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014cc:	4b29      	ldr	r3, [pc, #164]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014e0:	d108      	bne.n	80014f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014e2:	4b24      	ldr	r3, [pc, #144]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	4921      	ldr	r1, [pc, #132]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a19      	ldr	r1, [r3, #32]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001504:	430b      	orrs	r3, r1
 8001506:	491b      	ldr	r1, [pc, #108]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800150c:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <HAL_RCC_OscConfig+0x4cc>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fb0f 	bl	8000b34 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151a:	f7ff fb0b 	bl	8000b34 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e03d      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x46a>
 8001538:	e035      	b.n	80015a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <HAL_RCC_OscConfig+0x4cc>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff faf8 	bl	8000b34 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001548:	f7ff faf4 	bl	8000b34 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e026      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x498>
 8001566:	e01e      	b.n	80015a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d107      	bne.n	8001580 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e019      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
 8001574:	40021000 	.word	0x40021000
 8001578:	40007000 	.word	0x40007000
 800157c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001580:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <HAL_RCC_OscConfig+0x500>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	429a      	cmp	r2, r3
 8001592:	d106      	bne.n	80015a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	429a      	cmp	r2, r3
 80015a0:	d001      	beq.n	80015a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000

080015b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0d0      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d910      	bls.n	80015f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d6:	4b67      	ldr	r3, [pc, #412]	@ (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 0207 	bic.w	r2, r3, #7
 80015de:	4965      	ldr	r1, [pc, #404]	@ (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e6:	4b63      	ldr	r3, [pc, #396]	@ (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0b8      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d020      	beq.n	8001646 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001610:	4b59      	ldr	r3, [pc, #356]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a58      	ldr	r2, [pc, #352]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800161a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001628:	4b53      	ldr	r3, [pc, #332]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4a52      	ldr	r2, [pc, #328]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001632:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001634:	4b50      	ldr	r3, [pc, #320]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	494d      	ldr	r1, [pc, #308]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001642:	4313      	orrs	r3, r2
 8001644:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d040      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d107      	bne.n	800166a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	4b47      	ldr	r3, [pc, #284]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d115      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e07f      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d107      	bne.n	8001682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001672:	4b41      	ldr	r3, [pc, #260]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d109      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e073      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001682:	4b3d      	ldr	r3, [pc, #244]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e06b      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001692:	4b39      	ldr	r3, [pc, #228]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f023 0203 	bic.w	r2, r3, #3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4936      	ldr	r1, [pc, #216]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a4:	f7ff fa46 	bl	8000b34 <HAL_GetTick>
 80016a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ac:	f7ff fa42 	bl	8000b34 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e053      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 020c 	and.w	r2, r3, #12
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d1eb      	bne.n	80016ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d4:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d210      	bcs.n	8001704 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 0207 	bic.w	r2, r3, #7
 80016ea:	4922      	ldr	r1, [pc, #136]	@ (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	4b20      	ldr	r3, [pc, #128]	@ (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e032      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001710:	4b19      	ldr	r3, [pc, #100]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	4916      	ldr	r1, [pc, #88]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d009      	beq.n	8001742 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800172e:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	490e      	ldr	r1, [pc, #56]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	4313      	orrs	r3, r2
 8001740:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001742:	f000 f821 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 8001746:	4602      	mov	r2, r0
 8001748:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	490a      	ldr	r1, [pc, #40]	@ (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001754:	5ccb      	ldrb	r3, [r1, r3]
 8001756:	fa22 f303 	lsr.w	r3, r2, r3
 800175a:	4a09      	ldr	r2, [pc, #36]	@ (8001780 <HAL_RCC_ClockConfig+0x1cc>)
 800175c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800175e:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <HAL_RCC_ClockConfig+0x1d0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff f9a4 	bl	8000ab0 <HAL_InitTick>

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40022000 	.word	0x40022000
 8001778:	40021000 	.word	0x40021000
 800177c:	08003180 	.word	0x08003180
 8001780:	20000000 	.word	0x20000000
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017a2:	4b1e      	ldr	r3, [pc, #120]	@ (800181c <HAL_RCC_GetSysClockFreq+0x94>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d002      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0x30>
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d003      	beq.n	80017be <HAL_RCC_GetSysClockFreq+0x36>
 80017b6:	e027      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017b8:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ba:	613b      	str	r3, [r7, #16]
      break;
 80017bc:	e027      	b.n	800180e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	0c9b      	lsrs	r3, r3, #18
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	4a17      	ldr	r2, [pc, #92]	@ (8001824 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017c8:	5cd3      	ldrb	r3, [r2, r3]
 80017ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d010      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017d6:	4b11      	ldr	r3, [pc, #68]	@ (800181c <HAL_RCC_GetSysClockFreq+0x94>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	0c5b      	lsrs	r3, r3, #17
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	4a11      	ldr	r2, [pc, #68]	@ (8001828 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017e2:	5cd3      	ldrb	r3, [r2, r3]
 80017e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ea:	fb03 f202 	mul.w	r2, r3, r2
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e004      	b.n	8001802 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a0c      	ldr	r2, [pc, #48]	@ (800182c <HAL_RCC_GetSysClockFreq+0xa4>)
 80017fc:	fb02 f303 	mul.w	r3, r2, r3
 8001800:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	613b      	str	r3, [r7, #16]
      break;
 8001806:	e002      	b.n	800180e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x98>)
 800180a:	613b      	str	r3, [r7, #16]
      break;
 800180c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800180e:	693b      	ldr	r3, [r7, #16]
}
 8001810:	4618      	mov	r0, r3
 8001812:	371c      	adds	r7, #28
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000
 8001820:	007a1200 	.word	0x007a1200
 8001824:	08003198 	.word	0x08003198
 8001828:	080031a8 	.word	0x080031a8
 800182c:	003d0900 	.word	0x003d0900

08001830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001834:	4b02      	ldr	r3, [pc, #8]	@ (8001840 <HAL_RCC_GetHCLKFreq+0x10>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	20000000 	.word	0x20000000

08001844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001848:	f7ff fff2 	bl	8001830 <HAL_RCC_GetHCLKFreq>
 800184c:	4602      	mov	r2, r0
 800184e:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	4903      	ldr	r1, [pc, #12]	@ (8001868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800185a:	5ccb      	ldrb	r3, [r1, r3]
 800185c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001860:	4618      	mov	r0, r3
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000
 8001868:	08003190 	.word	0x08003190

0800186c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001870:	f7ff ffde 	bl	8001830 <HAL_RCC_GetHCLKFreq>
 8001874:	4602      	mov	r2, r0
 8001876:	4b05      	ldr	r3, [pc, #20]	@ (800188c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	0adb      	lsrs	r3, r3, #11
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	4903      	ldr	r1, [pc, #12]	@ (8001890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001882:	5ccb      	ldrb	r3, [r1, r3]
 8001884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001888:	4618      	mov	r0, r3
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	08003190 	.word	0x08003190

08001894 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800189c:	4b0a      	ldr	r3, [pc, #40]	@ (80018c8 <RCC_Delay+0x34>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <RCC_Delay+0x38>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	0a5b      	lsrs	r3, r3, #9
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018b0:	bf00      	nop
  }
  while (Delay --);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1e5a      	subs	r2, r3, #1
 80018b6:	60fa      	str	r2, [r7, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f9      	bne.n	80018b0 <RCC_Delay+0x1c>
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	20000000 	.word	0x20000000
 80018cc:	10624dd3 	.word	0x10624dd3

080018d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e041      	b.n	8001966 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d106      	bne.n	80018fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7fe ff72 	bl	80007e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3304      	adds	r3, #4
 800190c:	4619      	mov	r1, r3
 800190e:	4610      	mov	r0, r2
 8001910:	f000 faac 	bl	8001e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e041      	b.n	8001a04 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d106      	bne.n	800199a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f839 	bl	8001a0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2202      	movs	r2, #2
 800199e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3304      	adds	r3, #4
 80019aa:	4619      	mov	r1, r3
 80019ac:	4610      	mov	r0, r2
 80019ae:	f000 fa5d 	bl	8001e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
	...

08001a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d109      	bne.n	8001a44 <HAL_TIM_PWM_Start+0x24>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	bf14      	ite	ne
 8001a3c:	2301      	movne	r3, #1
 8001a3e:	2300      	moveq	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	e022      	b.n	8001a8a <HAL_TIM_PWM_Start+0x6a>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d109      	bne.n	8001a5e <HAL_TIM_PWM_Start+0x3e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	bf14      	ite	ne
 8001a56:	2301      	movne	r3, #1
 8001a58:	2300      	moveq	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	e015      	b.n	8001a8a <HAL_TIM_PWM_Start+0x6a>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d109      	bne.n	8001a78 <HAL_TIM_PWM_Start+0x58>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	bf14      	ite	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	2300      	moveq	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	e008      	b.n	8001a8a <HAL_TIM_PWM_Start+0x6a>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	bf14      	ite	ne
 8001a84:	2301      	movne	r3, #1
 8001a86:	2300      	moveq	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e059      	b.n	8001b46 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d104      	bne.n	8001aa2 <HAL_TIM_PWM_Start+0x82>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001aa0:	e013      	b.n	8001aca <HAL_TIM_PWM_Start+0xaa>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d104      	bne.n	8001ab2 <HAL_TIM_PWM_Start+0x92>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ab0:	e00b      	b.n	8001aca <HAL_TIM_PWM_Start+0xaa>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d104      	bne.n	8001ac2 <HAL_TIM_PWM_Start+0xa2>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ac0:	e003      	b.n	8001aca <HAL_TIM_PWM_Start+0xaa>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	6839      	ldr	r1, [r7, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fc40 	bl	8002358 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1c      	ldr	r2, [pc, #112]	@ (8001b50 <HAL_TIM_PWM_Start+0x130>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d107      	bne.n	8001af2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001af0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a16      	ldr	r2, [pc, #88]	@ (8001b50 <HAL_TIM_PWM_Start+0x130>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d009      	beq.n	8001b10 <HAL_TIM_PWM_Start+0xf0>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b04:	d004      	beq.n	8001b10 <HAL_TIM_PWM_Start+0xf0>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a12      	ldr	r2, [pc, #72]	@ (8001b54 <HAL_TIM_PWM_Start+0x134>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d111      	bne.n	8001b34 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d010      	beq.n	8001b44 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 0201 	orr.w	r2, r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b32:	e007      	b.n	8001b44 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40012c00 	.word	0x40012c00
 8001b54:	40000400 	.word	0x40000400

08001b58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e0ae      	b.n	8001cd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b0c      	cmp	r3, #12
 8001b82:	f200 809f 	bhi.w	8001cc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001b86:	a201      	add	r2, pc, #4	@ (adr r2, 8001b8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8c:	08001bc1 	.word	0x08001bc1
 8001b90:	08001cc5 	.word	0x08001cc5
 8001b94:	08001cc5 	.word	0x08001cc5
 8001b98:	08001cc5 	.word	0x08001cc5
 8001b9c:	08001c01 	.word	0x08001c01
 8001ba0:	08001cc5 	.word	0x08001cc5
 8001ba4:	08001cc5 	.word	0x08001cc5
 8001ba8:	08001cc5 	.word	0x08001cc5
 8001bac:	08001c43 	.word	0x08001c43
 8001bb0:	08001cc5 	.word	0x08001cc5
 8001bb4:	08001cc5 	.word	0x08001cc5
 8001bb8:	08001cc5 	.word	0x08001cc5
 8001bbc:	08001c83 	.word	0x08001c83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 f9a8 	bl	8001f1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0208 	orr.w	r2, r2, #8
 8001bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0204 	bic.w	r2, r2, #4
 8001bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6999      	ldr	r1, [r3, #24]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	619a      	str	r2, [r3, #24]
      break;
 8001bfe:	e064      	b.n	8001cca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f9ee 	bl	8001fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699a      	ldr	r2, [r3, #24]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6999      	ldr	r1, [r3, #24]
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	021a      	lsls	r2, r3, #8
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	619a      	str	r2, [r3, #24]
      break;
 8001c40:	e043      	b.n	8001cca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68b9      	ldr	r1, [r7, #8]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 fa37 	bl	80020bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	69da      	ldr	r2, [r3, #28]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 0208 	orr.w	r2, r2, #8
 8001c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	69da      	ldr	r2, [r3, #28]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0204 	bic.w	r2, r2, #4
 8001c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69d9      	ldr	r1, [r3, #28]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	61da      	str	r2, [r3, #28]
      break;
 8001c80:	e023      	b.n	8001cca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 fa81 	bl	8002190 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69da      	ldr	r2, [r3, #28]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	69da      	ldr	r2, [r3, #28]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	69d9      	ldr	r1, [r3, #28]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	021a      	lsls	r2, r3, #8
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	61da      	str	r2, [r3, #28]
      break;
 8001cc2:	e002      	b.n	8001cca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8001cc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_TIM_ConfigClockSource+0x1c>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e0b4      	b.n	8001e62 <HAL_TIM_ConfigClockSource+0x186>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001d1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d30:	d03e      	beq.n	8001db0 <HAL_TIM_ConfigClockSource+0xd4>
 8001d32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d36:	f200 8087 	bhi.w	8001e48 <HAL_TIM_ConfigClockSource+0x16c>
 8001d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d3e:	f000 8086 	beq.w	8001e4e <HAL_TIM_ConfigClockSource+0x172>
 8001d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d46:	d87f      	bhi.n	8001e48 <HAL_TIM_ConfigClockSource+0x16c>
 8001d48:	2b70      	cmp	r3, #112	@ 0x70
 8001d4a:	d01a      	beq.n	8001d82 <HAL_TIM_ConfigClockSource+0xa6>
 8001d4c:	2b70      	cmp	r3, #112	@ 0x70
 8001d4e:	d87b      	bhi.n	8001e48 <HAL_TIM_ConfigClockSource+0x16c>
 8001d50:	2b60      	cmp	r3, #96	@ 0x60
 8001d52:	d050      	beq.n	8001df6 <HAL_TIM_ConfigClockSource+0x11a>
 8001d54:	2b60      	cmp	r3, #96	@ 0x60
 8001d56:	d877      	bhi.n	8001e48 <HAL_TIM_ConfigClockSource+0x16c>
 8001d58:	2b50      	cmp	r3, #80	@ 0x50
 8001d5a:	d03c      	beq.n	8001dd6 <HAL_TIM_ConfigClockSource+0xfa>
 8001d5c:	2b50      	cmp	r3, #80	@ 0x50
 8001d5e:	d873      	bhi.n	8001e48 <HAL_TIM_ConfigClockSource+0x16c>
 8001d60:	2b40      	cmp	r3, #64	@ 0x40
 8001d62:	d058      	beq.n	8001e16 <HAL_TIM_ConfigClockSource+0x13a>
 8001d64:	2b40      	cmp	r3, #64	@ 0x40
 8001d66:	d86f      	bhi.n	8001e48 <HAL_TIM_ConfigClockSource+0x16c>
 8001d68:	2b30      	cmp	r3, #48	@ 0x30
 8001d6a:	d064      	beq.n	8001e36 <HAL_TIM_ConfigClockSource+0x15a>
 8001d6c:	2b30      	cmp	r3, #48	@ 0x30
 8001d6e:	d86b      	bhi.n	8001e48 <HAL_TIM_ConfigClockSource+0x16c>
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	d060      	beq.n	8001e36 <HAL_TIM_ConfigClockSource+0x15a>
 8001d74:	2b20      	cmp	r3, #32
 8001d76:	d867      	bhi.n	8001e48 <HAL_TIM_ConfigClockSource+0x16c>
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d05c      	beq.n	8001e36 <HAL_TIM_ConfigClockSource+0x15a>
 8001d7c:	2b10      	cmp	r3, #16
 8001d7e:	d05a      	beq.n	8001e36 <HAL_TIM_ConfigClockSource+0x15a>
 8001d80:	e062      	b.n	8001e48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d92:	f000 fac2 	bl	800231a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001da4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	609a      	str	r2, [r3, #8]
      break;
 8001dae:	e04f      	b.n	8001e50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001dc0:	f000 faab 	bl	800231a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001dd2:	609a      	str	r2, [r3, #8]
      break;
 8001dd4:	e03c      	b.n	8001e50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001de2:	461a      	mov	r2, r3
 8001de4:	f000 fa22 	bl	800222c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2150      	movs	r1, #80	@ 0x50
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 fa79 	bl	80022e6 <TIM_ITRx_SetConfig>
      break;
 8001df4:	e02c      	b.n	8001e50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e02:	461a      	mov	r2, r3
 8001e04:	f000 fa40 	bl	8002288 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2160      	movs	r1, #96	@ 0x60
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fa69 	bl	80022e6 <TIM_ITRx_SetConfig>
      break;
 8001e14:	e01c      	b.n	8001e50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e22:	461a      	mov	r2, r3
 8001e24:	f000 fa02 	bl	800222c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2140      	movs	r1, #64	@ 0x40
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fa59 	bl	80022e6 <TIM_ITRx_SetConfig>
      break;
 8001e34:	e00c      	b.n	8001e50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4610      	mov	r0, r2
 8001e42:	f000 fa50 	bl	80022e6 <TIM_ITRx_SetConfig>
      break;
 8001e46:	e003      	b.n	8001e50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e4c:	e000      	b.n	8001e50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001e4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a25      	ldr	r2, [pc, #148]	@ (8001f14 <TIM_Base_SetConfig+0xa8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d007      	beq.n	8001e94 <TIM_Base_SetConfig+0x28>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e8a:	d003      	beq.n	8001e94 <TIM_Base_SetConfig+0x28>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a22      	ldr	r2, [pc, #136]	@ (8001f18 <TIM_Base_SetConfig+0xac>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d108      	bne.n	8001ea6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f14 <TIM_Base_SetConfig+0xa8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <TIM_Base_SetConfig+0x52>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eb4:	d003      	beq.n	8001ebe <TIM_Base_SetConfig+0x52>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a17      	ldr	r2, [pc, #92]	@ (8001f18 <TIM_Base_SetConfig+0xac>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d108      	bne.n	8001ed0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a07      	ldr	r2, [pc, #28]	@ (8001f14 <TIM_Base_SetConfig+0xa8>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d103      	bne.n	8001f04 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	615a      	str	r2, [r3, #20]
}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	40012c00 	.word	0x40012c00
 8001f18:	40000400 	.word	0x40000400

08001f1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f023 0201 	bic.w	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f023 0303 	bic.w	r3, r3, #3
 8001f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f023 0302 	bic.w	r3, r3, #2
 8001f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe4 <TIM_OC1_SetConfig+0xc8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d10c      	bne.n	8001f92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f023 0308 	bic.w	r3, r3, #8
 8001f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f023 0304 	bic.w	r3, r3, #4
 8001f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a13      	ldr	r2, [pc, #76]	@ (8001fe4 <TIM_OC1_SetConfig+0xc8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d111      	bne.n	8001fbe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	621a      	str	r2, [r3, #32]
}
 8001fd8:	bf00      	nop
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40012c00 	.word	0x40012c00

08001fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	f023 0210 	bic.w	r2, r3, #16
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800201e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f023 0320 	bic.w	r3, r3, #32
 8002032:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4313      	orrs	r3, r2
 800203e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a1d      	ldr	r2, [pc, #116]	@ (80020b8 <TIM_OC2_SetConfig+0xd0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d10d      	bne.n	8002064 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800204e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4313      	orrs	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002062:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a14      	ldr	r2, [pc, #80]	@ (80020b8 <TIM_OC2_SetConfig+0xd0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d113      	bne.n	8002094 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002072:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800207a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	621a      	str	r2, [r3, #32]
}
 80020ae:	bf00      	nop
 80020b0:	371c      	adds	r7, #28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	40012c00 	.word	0x40012c00

080020bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f023 0303 	bic.w	r3, r3, #3
 80020f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	4313      	orrs	r3, r2
 8002110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a1d      	ldr	r2, [pc, #116]	@ (800218c <TIM_OC3_SetConfig+0xd0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d10d      	bne.n	8002136 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	4313      	orrs	r3, r2
 800212c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a14      	ldr	r2, [pc, #80]	@ (800218c <TIM_OC3_SetConfig+0xd0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d113      	bne.n	8002166 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800214c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	621a      	str	r2, [r3, #32]
}
 8002180:	bf00      	nop
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40012c00 	.word	0x40012c00

08002190 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80021da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	031b      	lsls	r3, r3, #12
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002228 <TIM_OC4_SetConfig+0x98>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d109      	bne.n	8002204 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	019b      	lsls	r3, r3, #6
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	621a      	str	r2, [r3, #32]
}
 800221e:	bf00      	nop
 8002220:	371c      	adds	r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	40012c00 	.word	0x40012c00

0800222c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	f023 0201 	bic.w	r2, r3, #1
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f023 030a 	bic.w	r3, r3, #10
 8002268:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
 8002270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	621a      	str	r2, [r3, #32]
}
 800227e:	bf00      	nop
 8002280:	371c      	adds	r7, #28
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	f023 0210 	bic.w	r2, r3, #16
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80022b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	031b      	lsls	r3, r3, #12
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80022c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	621a      	str	r2, [r3, #32]
}
 80022dc:	bf00      	nop
 80022de:	371c      	adds	r7, #28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr

080022e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b085      	sub	sp, #20
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	f043 0307 	orr.w	r3, r3, #7
 8002308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	609a      	str	r2, [r3, #8]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800231a:	b480      	push	{r7}
 800231c:	b087      	sub	sp, #28
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002334:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	021a      	lsls	r2, r3, #8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	431a      	orrs	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	4313      	orrs	r3, r2
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4313      	orrs	r3, r2
 8002346:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	609a      	str	r2, [r3, #8]
}
 800234e:	bf00      	nop
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	2201      	movs	r2, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a1a      	ldr	r2, [r3, #32]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	43db      	mvns	r3, r3
 800237a:	401a      	ands	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a1a      	ldr	r2, [r3, #32]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	431a      	orrs	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	621a      	str	r2, [r3, #32]
}
 8002396:	bf00      	nop
 8002398:	371c      	adds	r7, #28
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e041      	b.n	800243c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a14      	ldr	r2, [pc, #80]	@ (8002448 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d009      	beq.n	8002410 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002404:	d004      	beq.n	8002410 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a10      	ldr	r2, [pc, #64]	@ (800244c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d10c      	bne.n	800242a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002416:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	4313      	orrs	r3, r2
 8002420:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40012c00 	.word	0x40012c00
 800244c:	40000400 	.word	0x40000400

08002450 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e042      	b.n	80024e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe fa1c 	bl	80008b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2224      	movs	r2, #36	@ 0x24
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002492:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f91d 	bl	80026d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695a      	ldr	r2, [r3, #20]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	@ 0x28
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b20      	cmp	r3, #32
 800250e:	d16d      	bne.n	80025ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_UART_Transmit+0x2c>
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e066      	b.n	80025ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2221      	movs	r2, #33	@ 0x21
 800252a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800252e:	f7fe fb01 	bl	8000b34 <HAL_GetTick>
 8002532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	88fa      	ldrh	r2, [r7, #6]
 8002538:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	88fa      	ldrh	r2, [r7, #6]
 800253e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002548:	d108      	bne.n	800255c <HAL_UART_Transmit+0x6c>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d104      	bne.n	800255c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	e003      	b.n	8002564 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002560:	2300      	movs	r3, #0
 8002562:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002564:	e02a      	b.n	80025bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2200      	movs	r2, #0
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f840 	bl	80025f6 <UART_WaitOnFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e036      	b.n	80025ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10b      	bne.n	800259e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002594:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	3302      	adds	r3, #2
 800259a:	61bb      	str	r3, [r7, #24]
 800259c:	e007      	b.n	80025ae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	781a      	ldrb	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	3301      	adds	r3, #1
 80025ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1cf      	bne.n	8002566 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2200      	movs	r2, #0
 80025ce:	2140      	movs	r1, #64	@ 0x40
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f810 	bl	80025f6 <UART_WaitOnFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e006      	b.n	80025ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e000      	b.n	80025ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80025ec:	2302      	movs	r3, #2
  }
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b090      	sub	sp, #64	@ 0x40
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	603b      	str	r3, [r7, #0]
 8002602:	4613      	mov	r3, r2
 8002604:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002606:	e050      	b.n	80026aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800260a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260e:	d04c      	beq.n	80026aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002610:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <UART_WaitOnFlagUntilTimeout+0x30>
 8002616:	f7fe fa8d 	bl	8000b34 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002622:	429a      	cmp	r2, r3
 8002624:	d241      	bcs.n	80026aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	330c      	adds	r3, #12
 800262c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002630:	e853 3f00 	ldrex	r3, [r3]
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002638:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800263c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	330c      	adds	r3, #12
 8002644:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002646:	637a      	str	r2, [r7, #52]	@ 0x34
 8002648:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800264c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800264e:	e841 2300 	strex	r3, r2, [r1]
 8002652:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1e5      	bne.n	8002626 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3314      	adds	r3, #20
 8002660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	e853 3f00 	ldrex	r3, [r3]
 8002668:	613b      	str	r3, [r7, #16]
   return(result);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3314      	adds	r3, #20
 8002678:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800267a:	623a      	str	r2, [r7, #32]
 800267c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267e:	69f9      	ldr	r1, [r7, #28]
 8002680:	6a3a      	ldr	r2, [r7, #32]
 8002682:	e841 2300 	strex	r3, r2, [r1]
 8002686:	61bb      	str	r3, [r7, #24]
   return(result);
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1e5      	bne.n	800265a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e00f      	b.n	80026ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4013      	ands	r3, r2
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	bf0c      	ite	eq
 80026ba:	2301      	moveq	r3, #1
 80026bc:	2300      	movne	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d09f      	beq.n	8002608 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3740      	adds	r7, #64	@ 0x40
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800270e:	f023 030c 	bic.w	r3, r3, #12
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	430b      	orrs	r3, r1
 800271a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a2c      	ldr	r2, [pc, #176]	@ (80027e8 <UART_SetConfig+0x114>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d103      	bne.n	8002744 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800273c:	f7ff f896 	bl	800186c <HAL_RCC_GetPCLK2Freq>
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	e002      	b.n	800274a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002744:	f7ff f87e 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 8002748:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	009a      	lsls	r2, r3, #2
 8002754:	441a      	add	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	4a22      	ldr	r2, [pc, #136]	@ (80027ec <UART_SetConfig+0x118>)
 8002762:	fba2 2303 	umull	r2, r3, r2, r3
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	0119      	lsls	r1, r3, #4
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	009a      	lsls	r2, r3, #2
 8002774:	441a      	add	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002780:	4b1a      	ldr	r3, [pc, #104]	@ (80027ec <UART_SetConfig+0x118>)
 8002782:	fba3 0302 	umull	r0, r3, r3, r2
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	2064      	movs	r0, #100	@ 0x64
 800278a:	fb00 f303 	mul.w	r3, r0, r3
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	3332      	adds	r3, #50	@ 0x32
 8002794:	4a15      	ldr	r2, [pc, #84]	@ (80027ec <UART_SetConfig+0x118>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027a0:	4419      	add	r1, r3
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	009a      	lsls	r2, r3, #2
 80027ac:	441a      	add	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027b8:	4b0c      	ldr	r3, [pc, #48]	@ (80027ec <UART_SetConfig+0x118>)
 80027ba:	fba3 0302 	umull	r0, r3, r3, r2
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	2064      	movs	r0, #100	@ 0x64
 80027c2:	fb00 f303 	mul.w	r3, r0, r3
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	3332      	adds	r3, #50	@ 0x32
 80027cc:	4a07      	ldr	r2, [pc, #28]	@ (80027ec <UART_SetConfig+0x118>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	f003 020f 	and.w	r2, r3, #15
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	440a      	add	r2, r1
 80027de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40013800 	.word	0x40013800
 80027ec:	51eb851f 	.word	0x51eb851f

080027f0 <siprintf>:
 80027f0:	b40e      	push	{r1, r2, r3}
 80027f2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80027f6:	b500      	push	{lr}
 80027f8:	b09c      	sub	sp, #112	@ 0x70
 80027fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80027fc:	9002      	str	r0, [sp, #8]
 80027fe:	9006      	str	r0, [sp, #24]
 8002800:	9107      	str	r1, [sp, #28]
 8002802:	9104      	str	r1, [sp, #16]
 8002804:	4808      	ldr	r0, [pc, #32]	@ (8002828 <siprintf+0x38>)
 8002806:	4909      	ldr	r1, [pc, #36]	@ (800282c <siprintf+0x3c>)
 8002808:	f853 2b04 	ldr.w	r2, [r3], #4
 800280c:	9105      	str	r1, [sp, #20]
 800280e:	6800      	ldr	r0, [r0, #0]
 8002810:	a902      	add	r1, sp, #8
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	f000 f992 	bl	8002b3c <_svfiprintf_r>
 8002818:	2200      	movs	r2, #0
 800281a:	9b02      	ldr	r3, [sp, #8]
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	b01c      	add	sp, #112	@ 0x70
 8002820:	f85d eb04 	ldr.w	lr, [sp], #4
 8002824:	b003      	add	sp, #12
 8002826:	4770      	bx	lr
 8002828:	2000000c 	.word	0x2000000c
 800282c:	ffff0208 	.word	0xffff0208

08002830 <memset>:
 8002830:	4603      	mov	r3, r0
 8002832:	4402      	add	r2, r0
 8002834:	4293      	cmp	r3, r2
 8002836:	d100      	bne.n	800283a <memset+0xa>
 8002838:	4770      	bx	lr
 800283a:	f803 1b01 	strb.w	r1, [r3], #1
 800283e:	e7f9      	b.n	8002834 <memset+0x4>

08002840 <__errno>:
 8002840:	4b01      	ldr	r3, [pc, #4]	@ (8002848 <__errno+0x8>)
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	2000000c 	.word	0x2000000c

0800284c <__libc_init_array>:
 800284c:	b570      	push	{r4, r5, r6, lr}
 800284e:	2600      	movs	r6, #0
 8002850:	4d0c      	ldr	r5, [pc, #48]	@ (8002884 <__libc_init_array+0x38>)
 8002852:	4c0d      	ldr	r4, [pc, #52]	@ (8002888 <__libc_init_array+0x3c>)
 8002854:	1b64      	subs	r4, r4, r5
 8002856:	10a4      	asrs	r4, r4, #2
 8002858:	42a6      	cmp	r6, r4
 800285a:	d109      	bne.n	8002870 <__libc_init_array+0x24>
 800285c:	f000 fc78 	bl	8003150 <_init>
 8002860:	2600      	movs	r6, #0
 8002862:	4d0a      	ldr	r5, [pc, #40]	@ (800288c <__libc_init_array+0x40>)
 8002864:	4c0a      	ldr	r4, [pc, #40]	@ (8002890 <__libc_init_array+0x44>)
 8002866:	1b64      	subs	r4, r4, r5
 8002868:	10a4      	asrs	r4, r4, #2
 800286a:	42a6      	cmp	r6, r4
 800286c:	d105      	bne.n	800287a <__libc_init_array+0x2e>
 800286e:	bd70      	pop	{r4, r5, r6, pc}
 8002870:	f855 3b04 	ldr.w	r3, [r5], #4
 8002874:	4798      	blx	r3
 8002876:	3601      	adds	r6, #1
 8002878:	e7ee      	b.n	8002858 <__libc_init_array+0xc>
 800287a:	f855 3b04 	ldr.w	r3, [r5], #4
 800287e:	4798      	blx	r3
 8002880:	3601      	adds	r6, #1
 8002882:	e7f2      	b.n	800286a <__libc_init_array+0x1e>
 8002884:	080031e0 	.word	0x080031e0
 8002888:	080031e0 	.word	0x080031e0
 800288c:	080031e0 	.word	0x080031e0
 8002890:	080031e4 	.word	0x080031e4

08002894 <__retarget_lock_acquire_recursive>:
 8002894:	4770      	bx	lr

08002896 <__retarget_lock_release_recursive>:
 8002896:	4770      	bx	lr

08002898 <_free_r>:
 8002898:	b538      	push	{r3, r4, r5, lr}
 800289a:	4605      	mov	r5, r0
 800289c:	2900      	cmp	r1, #0
 800289e:	d040      	beq.n	8002922 <_free_r+0x8a>
 80028a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028a4:	1f0c      	subs	r4, r1, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	bfb8      	it	lt
 80028aa:	18e4      	addlt	r4, r4, r3
 80028ac:	f000 f8de 	bl	8002a6c <__malloc_lock>
 80028b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002924 <_free_r+0x8c>)
 80028b2:	6813      	ldr	r3, [r2, #0]
 80028b4:	b933      	cbnz	r3, 80028c4 <_free_r+0x2c>
 80028b6:	6063      	str	r3, [r4, #4]
 80028b8:	6014      	str	r4, [r2, #0]
 80028ba:	4628      	mov	r0, r5
 80028bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028c0:	f000 b8da 	b.w	8002a78 <__malloc_unlock>
 80028c4:	42a3      	cmp	r3, r4
 80028c6:	d908      	bls.n	80028da <_free_r+0x42>
 80028c8:	6820      	ldr	r0, [r4, #0]
 80028ca:	1821      	adds	r1, r4, r0
 80028cc:	428b      	cmp	r3, r1
 80028ce:	bf01      	itttt	eq
 80028d0:	6819      	ldreq	r1, [r3, #0]
 80028d2:	685b      	ldreq	r3, [r3, #4]
 80028d4:	1809      	addeq	r1, r1, r0
 80028d6:	6021      	streq	r1, [r4, #0]
 80028d8:	e7ed      	b.n	80028b6 <_free_r+0x1e>
 80028da:	461a      	mov	r2, r3
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	b10b      	cbz	r3, 80028e4 <_free_r+0x4c>
 80028e0:	42a3      	cmp	r3, r4
 80028e2:	d9fa      	bls.n	80028da <_free_r+0x42>
 80028e4:	6811      	ldr	r1, [r2, #0]
 80028e6:	1850      	adds	r0, r2, r1
 80028e8:	42a0      	cmp	r0, r4
 80028ea:	d10b      	bne.n	8002904 <_free_r+0x6c>
 80028ec:	6820      	ldr	r0, [r4, #0]
 80028ee:	4401      	add	r1, r0
 80028f0:	1850      	adds	r0, r2, r1
 80028f2:	4283      	cmp	r3, r0
 80028f4:	6011      	str	r1, [r2, #0]
 80028f6:	d1e0      	bne.n	80028ba <_free_r+0x22>
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4408      	add	r0, r1
 80028fe:	6010      	str	r0, [r2, #0]
 8002900:	6053      	str	r3, [r2, #4]
 8002902:	e7da      	b.n	80028ba <_free_r+0x22>
 8002904:	d902      	bls.n	800290c <_free_r+0x74>
 8002906:	230c      	movs	r3, #12
 8002908:	602b      	str	r3, [r5, #0]
 800290a:	e7d6      	b.n	80028ba <_free_r+0x22>
 800290c:	6820      	ldr	r0, [r4, #0]
 800290e:	1821      	adds	r1, r4, r0
 8002910:	428b      	cmp	r3, r1
 8002912:	bf01      	itttt	eq
 8002914:	6819      	ldreq	r1, [r3, #0]
 8002916:	685b      	ldreq	r3, [r3, #4]
 8002918:	1809      	addeq	r1, r1, r0
 800291a:	6021      	streq	r1, [r4, #0]
 800291c:	6063      	str	r3, [r4, #4]
 800291e:	6054      	str	r4, [r2, #4]
 8002920:	e7cb      	b.n	80028ba <_free_r+0x22>
 8002922:	bd38      	pop	{r3, r4, r5, pc}
 8002924:	20000260 	.word	0x20000260

08002928 <sbrk_aligned>:
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	4e0f      	ldr	r6, [pc, #60]	@ (8002968 <sbrk_aligned+0x40>)
 800292c:	460c      	mov	r4, r1
 800292e:	6831      	ldr	r1, [r6, #0]
 8002930:	4605      	mov	r5, r0
 8002932:	b911      	cbnz	r1, 800293a <sbrk_aligned+0x12>
 8002934:	f000 fbaa 	bl	800308c <_sbrk_r>
 8002938:	6030      	str	r0, [r6, #0]
 800293a:	4621      	mov	r1, r4
 800293c:	4628      	mov	r0, r5
 800293e:	f000 fba5 	bl	800308c <_sbrk_r>
 8002942:	1c43      	adds	r3, r0, #1
 8002944:	d103      	bne.n	800294e <sbrk_aligned+0x26>
 8002946:	f04f 34ff 	mov.w	r4, #4294967295
 800294a:	4620      	mov	r0, r4
 800294c:	bd70      	pop	{r4, r5, r6, pc}
 800294e:	1cc4      	adds	r4, r0, #3
 8002950:	f024 0403 	bic.w	r4, r4, #3
 8002954:	42a0      	cmp	r0, r4
 8002956:	d0f8      	beq.n	800294a <sbrk_aligned+0x22>
 8002958:	1a21      	subs	r1, r4, r0
 800295a:	4628      	mov	r0, r5
 800295c:	f000 fb96 	bl	800308c <_sbrk_r>
 8002960:	3001      	adds	r0, #1
 8002962:	d1f2      	bne.n	800294a <sbrk_aligned+0x22>
 8002964:	e7ef      	b.n	8002946 <sbrk_aligned+0x1e>
 8002966:	bf00      	nop
 8002968:	2000025c 	.word	0x2000025c

0800296c <_malloc_r>:
 800296c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002970:	1ccd      	adds	r5, r1, #3
 8002972:	f025 0503 	bic.w	r5, r5, #3
 8002976:	3508      	adds	r5, #8
 8002978:	2d0c      	cmp	r5, #12
 800297a:	bf38      	it	cc
 800297c:	250c      	movcc	r5, #12
 800297e:	2d00      	cmp	r5, #0
 8002980:	4606      	mov	r6, r0
 8002982:	db01      	blt.n	8002988 <_malloc_r+0x1c>
 8002984:	42a9      	cmp	r1, r5
 8002986:	d904      	bls.n	8002992 <_malloc_r+0x26>
 8002988:	230c      	movs	r3, #12
 800298a:	6033      	str	r3, [r6, #0]
 800298c:	2000      	movs	r0, #0
 800298e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002992:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a68 <_malloc_r+0xfc>
 8002996:	f000 f869 	bl	8002a6c <__malloc_lock>
 800299a:	f8d8 3000 	ldr.w	r3, [r8]
 800299e:	461c      	mov	r4, r3
 80029a0:	bb44      	cbnz	r4, 80029f4 <_malloc_r+0x88>
 80029a2:	4629      	mov	r1, r5
 80029a4:	4630      	mov	r0, r6
 80029a6:	f7ff ffbf 	bl	8002928 <sbrk_aligned>
 80029aa:	1c43      	adds	r3, r0, #1
 80029ac:	4604      	mov	r4, r0
 80029ae:	d158      	bne.n	8002a62 <_malloc_r+0xf6>
 80029b0:	f8d8 4000 	ldr.w	r4, [r8]
 80029b4:	4627      	mov	r7, r4
 80029b6:	2f00      	cmp	r7, #0
 80029b8:	d143      	bne.n	8002a42 <_malloc_r+0xd6>
 80029ba:	2c00      	cmp	r4, #0
 80029bc:	d04b      	beq.n	8002a56 <_malloc_r+0xea>
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	4639      	mov	r1, r7
 80029c2:	4630      	mov	r0, r6
 80029c4:	eb04 0903 	add.w	r9, r4, r3
 80029c8:	f000 fb60 	bl	800308c <_sbrk_r>
 80029cc:	4581      	cmp	r9, r0
 80029ce:	d142      	bne.n	8002a56 <_malloc_r+0xea>
 80029d0:	6821      	ldr	r1, [r4, #0]
 80029d2:	4630      	mov	r0, r6
 80029d4:	1a6d      	subs	r5, r5, r1
 80029d6:	4629      	mov	r1, r5
 80029d8:	f7ff ffa6 	bl	8002928 <sbrk_aligned>
 80029dc:	3001      	adds	r0, #1
 80029de:	d03a      	beq.n	8002a56 <_malloc_r+0xea>
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	442b      	add	r3, r5
 80029e4:	6023      	str	r3, [r4, #0]
 80029e6:	f8d8 3000 	ldr.w	r3, [r8]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	bb62      	cbnz	r2, 8002a48 <_malloc_r+0xdc>
 80029ee:	f8c8 7000 	str.w	r7, [r8]
 80029f2:	e00f      	b.n	8002a14 <_malloc_r+0xa8>
 80029f4:	6822      	ldr	r2, [r4, #0]
 80029f6:	1b52      	subs	r2, r2, r5
 80029f8:	d420      	bmi.n	8002a3c <_malloc_r+0xd0>
 80029fa:	2a0b      	cmp	r2, #11
 80029fc:	d917      	bls.n	8002a2e <_malloc_r+0xc2>
 80029fe:	1961      	adds	r1, r4, r5
 8002a00:	42a3      	cmp	r3, r4
 8002a02:	6025      	str	r5, [r4, #0]
 8002a04:	bf18      	it	ne
 8002a06:	6059      	strne	r1, [r3, #4]
 8002a08:	6863      	ldr	r3, [r4, #4]
 8002a0a:	bf08      	it	eq
 8002a0c:	f8c8 1000 	streq.w	r1, [r8]
 8002a10:	5162      	str	r2, [r4, r5]
 8002a12:	604b      	str	r3, [r1, #4]
 8002a14:	4630      	mov	r0, r6
 8002a16:	f000 f82f 	bl	8002a78 <__malloc_unlock>
 8002a1a:	f104 000b 	add.w	r0, r4, #11
 8002a1e:	1d23      	adds	r3, r4, #4
 8002a20:	f020 0007 	bic.w	r0, r0, #7
 8002a24:	1ac2      	subs	r2, r0, r3
 8002a26:	bf1c      	itt	ne
 8002a28:	1a1b      	subne	r3, r3, r0
 8002a2a:	50a3      	strne	r3, [r4, r2]
 8002a2c:	e7af      	b.n	800298e <_malloc_r+0x22>
 8002a2e:	6862      	ldr	r2, [r4, #4]
 8002a30:	42a3      	cmp	r3, r4
 8002a32:	bf0c      	ite	eq
 8002a34:	f8c8 2000 	streq.w	r2, [r8]
 8002a38:	605a      	strne	r2, [r3, #4]
 8002a3a:	e7eb      	b.n	8002a14 <_malloc_r+0xa8>
 8002a3c:	4623      	mov	r3, r4
 8002a3e:	6864      	ldr	r4, [r4, #4]
 8002a40:	e7ae      	b.n	80029a0 <_malloc_r+0x34>
 8002a42:	463c      	mov	r4, r7
 8002a44:	687f      	ldr	r7, [r7, #4]
 8002a46:	e7b6      	b.n	80029b6 <_malloc_r+0x4a>
 8002a48:	461a      	mov	r2, r3
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	42a3      	cmp	r3, r4
 8002a4e:	d1fb      	bne.n	8002a48 <_malloc_r+0xdc>
 8002a50:	2300      	movs	r3, #0
 8002a52:	6053      	str	r3, [r2, #4]
 8002a54:	e7de      	b.n	8002a14 <_malloc_r+0xa8>
 8002a56:	230c      	movs	r3, #12
 8002a58:	4630      	mov	r0, r6
 8002a5a:	6033      	str	r3, [r6, #0]
 8002a5c:	f000 f80c 	bl	8002a78 <__malloc_unlock>
 8002a60:	e794      	b.n	800298c <_malloc_r+0x20>
 8002a62:	6005      	str	r5, [r0, #0]
 8002a64:	e7d6      	b.n	8002a14 <_malloc_r+0xa8>
 8002a66:	bf00      	nop
 8002a68:	20000260 	.word	0x20000260

08002a6c <__malloc_lock>:
 8002a6c:	4801      	ldr	r0, [pc, #4]	@ (8002a74 <__malloc_lock+0x8>)
 8002a6e:	f7ff bf11 	b.w	8002894 <__retarget_lock_acquire_recursive>
 8002a72:	bf00      	nop
 8002a74:	20000258 	.word	0x20000258

08002a78 <__malloc_unlock>:
 8002a78:	4801      	ldr	r0, [pc, #4]	@ (8002a80 <__malloc_unlock+0x8>)
 8002a7a:	f7ff bf0c 	b.w	8002896 <__retarget_lock_release_recursive>
 8002a7e:	bf00      	nop
 8002a80:	20000258 	.word	0x20000258

08002a84 <__ssputs_r>:
 8002a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a88:	461f      	mov	r7, r3
 8002a8a:	688e      	ldr	r6, [r1, #8]
 8002a8c:	4682      	mov	sl, r0
 8002a8e:	42be      	cmp	r6, r7
 8002a90:	460c      	mov	r4, r1
 8002a92:	4690      	mov	r8, r2
 8002a94:	680b      	ldr	r3, [r1, #0]
 8002a96:	d82d      	bhi.n	8002af4 <__ssputs_r+0x70>
 8002a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002aa0:	d026      	beq.n	8002af0 <__ssputs_r+0x6c>
 8002aa2:	6965      	ldr	r5, [r4, #20]
 8002aa4:	6909      	ldr	r1, [r1, #16]
 8002aa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002aaa:	eba3 0901 	sub.w	r9, r3, r1
 8002aae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ab2:	1c7b      	adds	r3, r7, #1
 8002ab4:	444b      	add	r3, r9
 8002ab6:	106d      	asrs	r5, r5, #1
 8002ab8:	429d      	cmp	r5, r3
 8002aba:	bf38      	it	cc
 8002abc:	461d      	movcc	r5, r3
 8002abe:	0553      	lsls	r3, r2, #21
 8002ac0:	d527      	bpl.n	8002b12 <__ssputs_r+0x8e>
 8002ac2:	4629      	mov	r1, r5
 8002ac4:	f7ff ff52 	bl	800296c <_malloc_r>
 8002ac8:	4606      	mov	r6, r0
 8002aca:	b360      	cbz	r0, 8002b26 <__ssputs_r+0xa2>
 8002acc:	464a      	mov	r2, r9
 8002ace:	6921      	ldr	r1, [r4, #16]
 8002ad0:	f000 fafa 	bl	80030c8 <memcpy>
 8002ad4:	89a3      	ldrh	r3, [r4, #12]
 8002ad6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ade:	81a3      	strh	r3, [r4, #12]
 8002ae0:	6126      	str	r6, [r4, #16]
 8002ae2:	444e      	add	r6, r9
 8002ae4:	6026      	str	r6, [r4, #0]
 8002ae6:	463e      	mov	r6, r7
 8002ae8:	6165      	str	r5, [r4, #20]
 8002aea:	eba5 0509 	sub.w	r5, r5, r9
 8002aee:	60a5      	str	r5, [r4, #8]
 8002af0:	42be      	cmp	r6, r7
 8002af2:	d900      	bls.n	8002af6 <__ssputs_r+0x72>
 8002af4:	463e      	mov	r6, r7
 8002af6:	4632      	mov	r2, r6
 8002af8:	4641      	mov	r1, r8
 8002afa:	6820      	ldr	r0, [r4, #0]
 8002afc:	f000 faac 	bl	8003058 <memmove>
 8002b00:	2000      	movs	r0, #0
 8002b02:	68a3      	ldr	r3, [r4, #8]
 8002b04:	1b9b      	subs	r3, r3, r6
 8002b06:	60a3      	str	r3, [r4, #8]
 8002b08:	6823      	ldr	r3, [r4, #0]
 8002b0a:	4433      	add	r3, r6
 8002b0c:	6023      	str	r3, [r4, #0]
 8002b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b12:	462a      	mov	r2, r5
 8002b14:	f000 fae6 	bl	80030e4 <_realloc_r>
 8002b18:	4606      	mov	r6, r0
 8002b1a:	2800      	cmp	r0, #0
 8002b1c:	d1e0      	bne.n	8002ae0 <__ssputs_r+0x5c>
 8002b1e:	4650      	mov	r0, sl
 8002b20:	6921      	ldr	r1, [r4, #16]
 8002b22:	f7ff feb9 	bl	8002898 <_free_r>
 8002b26:	230c      	movs	r3, #12
 8002b28:	f8ca 3000 	str.w	r3, [sl]
 8002b2c:	89a3      	ldrh	r3, [r4, #12]
 8002b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b36:	81a3      	strh	r3, [r4, #12]
 8002b38:	e7e9      	b.n	8002b0e <__ssputs_r+0x8a>
	...

08002b3c <_svfiprintf_r>:
 8002b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b40:	4698      	mov	r8, r3
 8002b42:	898b      	ldrh	r3, [r1, #12]
 8002b44:	4607      	mov	r7, r0
 8002b46:	061b      	lsls	r3, r3, #24
 8002b48:	460d      	mov	r5, r1
 8002b4a:	4614      	mov	r4, r2
 8002b4c:	b09d      	sub	sp, #116	@ 0x74
 8002b4e:	d510      	bpl.n	8002b72 <_svfiprintf_r+0x36>
 8002b50:	690b      	ldr	r3, [r1, #16]
 8002b52:	b973      	cbnz	r3, 8002b72 <_svfiprintf_r+0x36>
 8002b54:	2140      	movs	r1, #64	@ 0x40
 8002b56:	f7ff ff09 	bl	800296c <_malloc_r>
 8002b5a:	6028      	str	r0, [r5, #0]
 8002b5c:	6128      	str	r0, [r5, #16]
 8002b5e:	b930      	cbnz	r0, 8002b6e <_svfiprintf_r+0x32>
 8002b60:	230c      	movs	r3, #12
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	b01d      	add	sp, #116	@ 0x74
 8002b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b6e:	2340      	movs	r3, #64	@ 0x40
 8002b70:	616b      	str	r3, [r5, #20]
 8002b72:	2300      	movs	r3, #0
 8002b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b76:	2320      	movs	r3, #32
 8002b78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002b7c:	2330      	movs	r3, #48	@ 0x30
 8002b7e:	f04f 0901 	mov.w	r9, #1
 8002b82:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b86:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002d20 <_svfiprintf_r+0x1e4>
 8002b8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002b8e:	4623      	mov	r3, r4
 8002b90:	469a      	mov	sl, r3
 8002b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b96:	b10a      	cbz	r2, 8002b9c <_svfiprintf_r+0x60>
 8002b98:	2a25      	cmp	r2, #37	@ 0x25
 8002b9a:	d1f9      	bne.n	8002b90 <_svfiprintf_r+0x54>
 8002b9c:	ebba 0b04 	subs.w	fp, sl, r4
 8002ba0:	d00b      	beq.n	8002bba <_svfiprintf_r+0x7e>
 8002ba2:	465b      	mov	r3, fp
 8002ba4:	4622      	mov	r2, r4
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	4638      	mov	r0, r7
 8002baa:	f7ff ff6b 	bl	8002a84 <__ssputs_r>
 8002bae:	3001      	adds	r0, #1
 8002bb0:	f000 80a7 	beq.w	8002d02 <_svfiprintf_r+0x1c6>
 8002bb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002bb6:	445a      	add	r2, fp
 8002bb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8002bba:	f89a 3000 	ldrb.w	r3, [sl]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 809f 	beq.w	8002d02 <_svfiprintf_r+0x1c6>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bce:	f10a 0a01 	add.w	sl, sl, #1
 8002bd2:	9304      	str	r3, [sp, #16]
 8002bd4:	9307      	str	r3, [sp, #28]
 8002bd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002bda:	931a      	str	r3, [sp, #104]	@ 0x68
 8002bdc:	4654      	mov	r4, sl
 8002bde:	2205      	movs	r2, #5
 8002be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002be4:	484e      	ldr	r0, [pc, #312]	@ (8002d20 <_svfiprintf_r+0x1e4>)
 8002be6:	f000 fa61 	bl	80030ac <memchr>
 8002bea:	9a04      	ldr	r2, [sp, #16]
 8002bec:	b9d8      	cbnz	r0, 8002c26 <_svfiprintf_r+0xea>
 8002bee:	06d0      	lsls	r0, r2, #27
 8002bf0:	bf44      	itt	mi
 8002bf2:	2320      	movmi	r3, #32
 8002bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002bf8:	0711      	lsls	r1, r2, #28
 8002bfa:	bf44      	itt	mi
 8002bfc:	232b      	movmi	r3, #43	@ 0x2b
 8002bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002c02:	f89a 3000 	ldrb.w	r3, [sl]
 8002c06:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c08:	d015      	beq.n	8002c36 <_svfiprintf_r+0xfa>
 8002c0a:	4654      	mov	r4, sl
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f04f 0c0a 	mov.w	ip, #10
 8002c12:	9a07      	ldr	r2, [sp, #28]
 8002c14:	4621      	mov	r1, r4
 8002c16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c1a:	3b30      	subs	r3, #48	@ 0x30
 8002c1c:	2b09      	cmp	r3, #9
 8002c1e:	d94b      	bls.n	8002cb8 <_svfiprintf_r+0x17c>
 8002c20:	b1b0      	cbz	r0, 8002c50 <_svfiprintf_r+0x114>
 8002c22:	9207      	str	r2, [sp, #28]
 8002c24:	e014      	b.n	8002c50 <_svfiprintf_r+0x114>
 8002c26:	eba0 0308 	sub.w	r3, r0, r8
 8002c2a:	fa09 f303 	lsl.w	r3, r9, r3
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	46a2      	mov	sl, r4
 8002c32:	9304      	str	r3, [sp, #16]
 8002c34:	e7d2      	b.n	8002bdc <_svfiprintf_r+0xa0>
 8002c36:	9b03      	ldr	r3, [sp, #12]
 8002c38:	1d19      	adds	r1, r3, #4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	9103      	str	r1, [sp, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bfbb      	ittet	lt
 8002c42:	425b      	neglt	r3, r3
 8002c44:	f042 0202 	orrlt.w	r2, r2, #2
 8002c48:	9307      	strge	r3, [sp, #28]
 8002c4a:	9307      	strlt	r3, [sp, #28]
 8002c4c:	bfb8      	it	lt
 8002c4e:	9204      	strlt	r2, [sp, #16]
 8002c50:	7823      	ldrb	r3, [r4, #0]
 8002c52:	2b2e      	cmp	r3, #46	@ 0x2e
 8002c54:	d10a      	bne.n	8002c6c <_svfiprintf_r+0x130>
 8002c56:	7863      	ldrb	r3, [r4, #1]
 8002c58:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c5a:	d132      	bne.n	8002cc2 <_svfiprintf_r+0x186>
 8002c5c:	9b03      	ldr	r3, [sp, #12]
 8002c5e:	3402      	adds	r4, #2
 8002c60:	1d1a      	adds	r2, r3, #4
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	9203      	str	r2, [sp, #12]
 8002c66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002c6a:	9305      	str	r3, [sp, #20]
 8002c6c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002d24 <_svfiprintf_r+0x1e8>
 8002c70:	2203      	movs	r2, #3
 8002c72:	4650      	mov	r0, sl
 8002c74:	7821      	ldrb	r1, [r4, #0]
 8002c76:	f000 fa19 	bl	80030ac <memchr>
 8002c7a:	b138      	cbz	r0, 8002c8c <_svfiprintf_r+0x150>
 8002c7c:	2240      	movs	r2, #64	@ 0x40
 8002c7e:	9b04      	ldr	r3, [sp, #16]
 8002c80:	eba0 000a 	sub.w	r0, r0, sl
 8002c84:	4082      	lsls	r2, r0
 8002c86:	4313      	orrs	r3, r2
 8002c88:	3401      	adds	r4, #1
 8002c8a:	9304      	str	r3, [sp, #16]
 8002c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c90:	2206      	movs	r2, #6
 8002c92:	4825      	ldr	r0, [pc, #148]	@ (8002d28 <_svfiprintf_r+0x1ec>)
 8002c94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002c98:	f000 fa08 	bl	80030ac <memchr>
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	d036      	beq.n	8002d0e <_svfiprintf_r+0x1d2>
 8002ca0:	4b22      	ldr	r3, [pc, #136]	@ (8002d2c <_svfiprintf_r+0x1f0>)
 8002ca2:	bb1b      	cbnz	r3, 8002cec <_svfiprintf_r+0x1b0>
 8002ca4:	9b03      	ldr	r3, [sp, #12]
 8002ca6:	3307      	adds	r3, #7
 8002ca8:	f023 0307 	bic.w	r3, r3, #7
 8002cac:	3308      	adds	r3, #8
 8002cae:	9303      	str	r3, [sp, #12]
 8002cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002cb2:	4433      	add	r3, r6
 8002cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002cb6:	e76a      	b.n	8002b8e <_svfiprintf_r+0x52>
 8002cb8:	460c      	mov	r4, r1
 8002cba:	2001      	movs	r0, #1
 8002cbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002cc0:	e7a8      	b.n	8002c14 <_svfiprintf_r+0xd8>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f04f 0c0a 	mov.w	ip, #10
 8002cc8:	4619      	mov	r1, r3
 8002cca:	3401      	adds	r4, #1
 8002ccc:	9305      	str	r3, [sp, #20]
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002cd4:	3a30      	subs	r2, #48	@ 0x30
 8002cd6:	2a09      	cmp	r2, #9
 8002cd8:	d903      	bls.n	8002ce2 <_svfiprintf_r+0x1a6>
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0c6      	beq.n	8002c6c <_svfiprintf_r+0x130>
 8002cde:	9105      	str	r1, [sp, #20]
 8002ce0:	e7c4      	b.n	8002c6c <_svfiprintf_r+0x130>
 8002ce2:	4604      	mov	r4, r0
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	fb0c 2101 	mla	r1, ip, r1, r2
 8002cea:	e7f0      	b.n	8002cce <_svfiprintf_r+0x192>
 8002cec:	ab03      	add	r3, sp, #12
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	462a      	mov	r2, r5
 8002cf2:	4638      	mov	r0, r7
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d30 <_svfiprintf_r+0x1f4>)
 8002cf6:	a904      	add	r1, sp, #16
 8002cf8:	f3af 8000 	nop.w
 8002cfc:	1c42      	adds	r2, r0, #1
 8002cfe:	4606      	mov	r6, r0
 8002d00:	d1d6      	bne.n	8002cb0 <_svfiprintf_r+0x174>
 8002d02:	89ab      	ldrh	r3, [r5, #12]
 8002d04:	065b      	lsls	r3, r3, #25
 8002d06:	f53f af2d 	bmi.w	8002b64 <_svfiprintf_r+0x28>
 8002d0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002d0c:	e72c      	b.n	8002b68 <_svfiprintf_r+0x2c>
 8002d0e:	ab03      	add	r3, sp, #12
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	462a      	mov	r2, r5
 8002d14:	4638      	mov	r0, r7
 8002d16:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <_svfiprintf_r+0x1f4>)
 8002d18:	a904      	add	r1, sp, #16
 8002d1a:	f000 f87d 	bl	8002e18 <_printf_i>
 8002d1e:	e7ed      	b.n	8002cfc <_svfiprintf_r+0x1c0>
 8002d20:	080031aa 	.word	0x080031aa
 8002d24:	080031b0 	.word	0x080031b0
 8002d28:	080031b4 	.word	0x080031b4
 8002d2c:	00000000 	.word	0x00000000
 8002d30:	08002a85 	.word	0x08002a85

08002d34 <_printf_common>:
 8002d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d38:	4616      	mov	r6, r2
 8002d3a:	4698      	mov	r8, r3
 8002d3c:	688a      	ldr	r2, [r1, #8]
 8002d3e:	690b      	ldr	r3, [r1, #16]
 8002d40:	4607      	mov	r7, r0
 8002d42:	4293      	cmp	r3, r2
 8002d44:	bfb8      	it	lt
 8002d46:	4613      	movlt	r3, r2
 8002d48:	6033      	str	r3, [r6, #0]
 8002d4a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002d4e:	460c      	mov	r4, r1
 8002d50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002d54:	b10a      	cbz	r2, 8002d5a <_printf_common+0x26>
 8002d56:	3301      	adds	r3, #1
 8002d58:	6033      	str	r3, [r6, #0]
 8002d5a:	6823      	ldr	r3, [r4, #0]
 8002d5c:	0699      	lsls	r1, r3, #26
 8002d5e:	bf42      	ittt	mi
 8002d60:	6833      	ldrmi	r3, [r6, #0]
 8002d62:	3302      	addmi	r3, #2
 8002d64:	6033      	strmi	r3, [r6, #0]
 8002d66:	6825      	ldr	r5, [r4, #0]
 8002d68:	f015 0506 	ands.w	r5, r5, #6
 8002d6c:	d106      	bne.n	8002d7c <_printf_common+0x48>
 8002d6e:	f104 0a19 	add.w	sl, r4, #25
 8002d72:	68e3      	ldr	r3, [r4, #12]
 8002d74:	6832      	ldr	r2, [r6, #0]
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	42ab      	cmp	r3, r5
 8002d7a:	dc2b      	bgt.n	8002dd4 <_printf_common+0xa0>
 8002d7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002d80:	6822      	ldr	r2, [r4, #0]
 8002d82:	3b00      	subs	r3, #0
 8002d84:	bf18      	it	ne
 8002d86:	2301      	movne	r3, #1
 8002d88:	0692      	lsls	r2, r2, #26
 8002d8a:	d430      	bmi.n	8002dee <_printf_common+0xba>
 8002d8c:	4641      	mov	r1, r8
 8002d8e:	4638      	mov	r0, r7
 8002d90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002d94:	47c8      	blx	r9
 8002d96:	3001      	adds	r0, #1
 8002d98:	d023      	beq.n	8002de2 <_printf_common+0xae>
 8002d9a:	6823      	ldr	r3, [r4, #0]
 8002d9c:	6922      	ldr	r2, [r4, #16]
 8002d9e:	f003 0306 	and.w	r3, r3, #6
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	bf14      	ite	ne
 8002da6:	2500      	movne	r5, #0
 8002da8:	6833      	ldreq	r3, [r6, #0]
 8002daa:	f04f 0600 	mov.w	r6, #0
 8002dae:	bf08      	it	eq
 8002db0:	68e5      	ldreq	r5, [r4, #12]
 8002db2:	f104 041a 	add.w	r4, r4, #26
 8002db6:	bf08      	it	eq
 8002db8:	1aed      	subeq	r5, r5, r3
 8002dba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002dbe:	bf08      	it	eq
 8002dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	bfc4      	itt	gt
 8002dc8:	1a9b      	subgt	r3, r3, r2
 8002dca:	18ed      	addgt	r5, r5, r3
 8002dcc:	42b5      	cmp	r5, r6
 8002dce:	d11a      	bne.n	8002e06 <_printf_common+0xd2>
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	e008      	b.n	8002de6 <_printf_common+0xb2>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	4652      	mov	r2, sl
 8002dd8:	4641      	mov	r1, r8
 8002dda:	4638      	mov	r0, r7
 8002ddc:	47c8      	blx	r9
 8002dde:	3001      	adds	r0, #1
 8002de0:	d103      	bne.n	8002dea <_printf_common+0xb6>
 8002de2:	f04f 30ff 	mov.w	r0, #4294967295
 8002de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dea:	3501      	adds	r5, #1
 8002dec:	e7c1      	b.n	8002d72 <_printf_common+0x3e>
 8002dee:	2030      	movs	r0, #48	@ 0x30
 8002df0:	18e1      	adds	r1, r4, r3
 8002df2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002dfc:	4422      	add	r2, r4
 8002dfe:	3302      	adds	r3, #2
 8002e00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002e04:	e7c2      	b.n	8002d8c <_printf_common+0x58>
 8002e06:	2301      	movs	r3, #1
 8002e08:	4622      	mov	r2, r4
 8002e0a:	4641      	mov	r1, r8
 8002e0c:	4638      	mov	r0, r7
 8002e0e:	47c8      	blx	r9
 8002e10:	3001      	adds	r0, #1
 8002e12:	d0e6      	beq.n	8002de2 <_printf_common+0xae>
 8002e14:	3601      	adds	r6, #1
 8002e16:	e7d9      	b.n	8002dcc <_printf_common+0x98>

08002e18 <_printf_i>:
 8002e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e1c:	7e0f      	ldrb	r7, [r1, #24]
 8002e1e:	4691      	mov	r9, r2
 8002e20:	2f78      	cmp	r7, #120	@ 0x78
 8002e22:	4680      	mov	r8, r0
 8002e24:	460c      	mov	r4, r1
 8002e26:	469a      	mov	sl, r3
 8002e28:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002e2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002e2e:	d807      	bhi.n	8002e40 <_printf_i+0x28>
 8002e30:	2f62      	cmp	r7, #98	@ 0x62
 8002e32:	d80a      	bhi.n	8002e4a <_printf_i+0x32>
 8002e34:	2f00      	cmp	r7, #0
 8002e36:	f000 80d3 	beq.w	8002fe0 <_printf_i+0x1c8>
 8002e3a:	2f58      	cmp	r7, #88	@ 0x58
 8002e3c:	f000 80ba 	beq.w	8002fb4 <_printf_i+0x19c>
 8002e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002e44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002e48:	e03a      	b.n	8002ec0 <_printf_i+0xa8>
 8002e4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002e4e:	2b15      	cmp	r3, #21
 8002e50:	d8f6      	bhi.n	8002e40 <_printf_i+0x28>
 8002e52:	a101      	add	r1, pc, #4	@ (adr r1, 8002e58 <_printf_i+0x40>)
 8002e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e58:	08002eb1 	.word	0x08002eb1
 8002e5c:	08002ec5 	.word	0x08002ec5
 8002e60:	08002e41 	.word	0x08002e41
 8002e64:	08002e41 	.word	0x08002e41
 8002e68:	08002e41 	.word	0x08002e41
 8002e6c:	08002e41 	.word	0x08002e41
 8002e70:	08002ec5 	.word	0x08002ec5
 8002e74:	08002e41 	.word	0x08002e41
 8002e78:	08002e41 	.word	0x08002e41
 8002e7c:	08002e41 	.word	0x08002e41
 8002e80:	08002e41 	.word	0x08002e41
 8002e84:	08002fc7 	.word	0x08002fc7
 8002e88:	08002eef 	.word	0x08002eef
 8002e8c:	08002f81 	.word	0x08002f81
 8002e90:	08002e41 	.word	0x08002e41
 8002e94:	08002e41 	.word	0x08002e41
 8002e98:	08002fe9 	.word	0x08002fe9
 8002e9c:	08002e41 	.word	0x08002e41
 8002ea0:	08002eef 	.word	0x08002eef
 8002ea4:	08002e41 	.word	0x08002e41
 8002ea8:	08002e41 	.word	0x08002e41
 8002eac:	08002f89 	.word	0x08002f89
 8002eb0:	6833      	ldr	r3, [r6, #0]
 8002eb2:	1d1a      	adds	r2, r3, #4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6032      	str	r2, [r6, #0]
 8002eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ebc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e09e      	b.n	8003002 <_printf_i+0x1ea>
 8002ec4:	6833      	ldr	r3, [r6, #0]
 8002ec6:	6820      	ldr	r0, [r4, #0]
 8002ec8:	1d19      	adds	r1, r3, #4
 8002eca:	6031      	str	r1, [r6, #0]
 8002ecc:	0606      	lsls	r6, r0, #24
 8002ece:	d501      	bpl.n	8002ed4 <_printf_i+0xbc>
 8002ed0:	681d      	ldr	r5, [r3, #0]
 8002ed2:	e003      	b.n	8002edc <_printf_i+0xc4>
 8002ed4:	0645      	lsls	r5, r0, #25
 8002ed6:	d5fb      	bpl.n	8002ed0 <_printf_i+0xb8>
 8002ed8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002edc:	2d00      	cmp	r5, #0
 8002ede:	da03      	bge.n	8002ee8 <_printf_i+0xd0>
 8002ee0:	232d      	movs	r3, #45	@ 0x2d
 8002ee2:	426d      	negs	r5, r5
 8002ee4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ee8:	230a      	movs	r3, #10
 8002eea:	4859      	ldr	r0, [pc, #356]	@ (8003050 <_printf_i+0x238>)
 8002eec:	e011      	b.n	8002f12 <_printf_i+0xfa>
 8002eee:	6821      	ldr	r1, [r4, #0]
 8002ef0:	6833      	ldr	r3, [r6, #0]
 8002ef2:	0608      	lsls	r0, r1, #24
 8002ef4:	f853 5b04 	ldr.w	r5, [r3], #4
 8002ef8:	d402      	bmi.n	8002f00 <_printf_i+0xe8>
 8002efa:	0649      	lsls	r1, r1, #25
 8002efc:	bf48      	it	mi
 8002efe:	b2ad      	uxthmi	r5, r5
 8002f00:	2f6f      	cmp	r7, #111	@ 0x6f
 8002f02:	6033      	str	r3, [r6, #0]
 8002f04:	bf14      	ite	ne
 8002f06:	230a      	movne	r3, #10
 8002f08:	2308      	moveq	r3, #8
 8002f0a:	4851      	ldr	r0, [pc, #324]	@ (8003050 <_printf_i+0x238>)
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002f12:	6866      	ldr	r6, [r4, #4]
 8002f14:	2e00      	cmp	r6, #0
 8002f16:	bfa8      	it	ge
 8002f18:	6821      	ldrge	r1, [r4, #0]
 8002f1a:	60a6      	str	r6, [r4, #8]
 8002f1c:	bfa4      	itt	ge
 8002f1e:	f021 0104 	bicge.w	r1, r1, #4
 8002f22:	6021      	strge	r1, [r4, #0]
 8002f24:	b90d      	cbnz	r5, 8002f2a <_printf_i+0x112>
 8002f26:	2e00      	cmp	r6, #0
 8002f28:	d04b      	beq.n	8002fc2 <_printf_i+0x1aa>
 8002f2a:	4616      	mov	r6, r2
 8002f2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f30:	fb03 5711 	mls	r7, r3, r1, r5
 8002f34:	5dc7      	ldrb	r7, [r0, r7]
 8002f36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f3a:	462f      	mov	r7, r5
 8002f3c:	42bb      	cmp	r3, r7
 8002f3e:	460d      	mov	r5, r1
 8002f40:	d9f4      	bls.n	8002f2c <_printf_i+0x114>
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d10b      	bne.n	8002f5e <_printf_i+0x146>
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	07df      	lsls	r7, r3, #31
 8002f4a:	d508      	bpl.n	8002f5e <_printf_i+0x146>
 8002f4c:	6923      	ldr	r3, [r4, #16]
 8002f4e:	6861      	ldr	r1, [r4, #4]
 8002f50:	4299      	cmp	r1, r3
 8002f52:	bfde      	ittt	le
 8002f54:	2330      	movle	r3, #48	@ 0x30
 8002f56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002f5e:	1b92      	subs	r2, r2, r6
 8002f60:	6122      	str	r2, [r4, #16]
 8002f62:	464b      	mov	r3, r9
 8002f64:	4621      	mov	r1, r4
 8002f66:	4640      	mov	r0, r8
 8002f68:	f8cd a000 	str.w	sl, [sp]
 8002f6c:	aa03      	add	r2, sp, #12
 8002f6e:	f7ff fee1 	bl	8002d34 <_printf_common>
 8002f72:	3001      	adds	r0, #1
 8002f74:	d14a      	bne.n	800300c <_printf_i+0x1f4>
 8002f76:	f04f 30ff 	mov.w	r0, #4294967295
 8002f7a:	b004      	add	sp, #16
 8002f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	f043 0320 	orr.w	r3, r3, #32
 8002f86:	6023      	str	r3, [r4, #0]
 8002f88:	2778      	movs	r7, #120	@ 0x78
 8002f8a:	4832      	ldr	r0, [pc, #200]	@ (8003054 <_printf_i+0x23c>)
 8002f8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	6831      	ldr	r1, [r6, #0]
 8002f94:	061f      	lsls	r7, r3, #24
 8002f96:	f851 5b04 	ldr.w	r5, [r1], #4
 8002f9a:	d402      	bmi.n	8002fa2 <_printf_i+0x18a>
 8002f9c:	065f      	lsls	r7, r3, #25
 8002f9e:	bf48      	it	mi
 8002fa0:	b2ad      	uxthmi	r5, r5
 8002fa2:	6031      	str	r1, [r6, #0]
 8002fa4:	07d9      	lsls	r1, r3, #31
 8002fa6:	bf44      	itt	mi
 8002fa8:	f043 0320 	orrmi.w	r3, r3, #32
 8002fac:	6023      	strmi	r3, [r4, #0]
 8002fae:	b11d      	cbz	r5, 8002fb8 <_printf_i+0x1a0>
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	e7ab      	b.n	8002f0c <_printf_i+0xf4>
 8002fb4:	4826      	ldr	r0, [pc, #152]	@ (8003050 <_printf_i+0x238>)
 8002fb6:	e7e9      	b.n	8002f8c <_printf_i+0x174>
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	f023 0320 	bic.w	r3, r3, #32
 8002fbe:	6023      	str	r3, [r4, #0]
 8002fc0:	e7f6      	b.n	8002fb0 <_printf_i+0x198>
 8002fc2:	4616      	mov	r6, r2
 8002fc4:	e7bd      	b.n	8002f42 <_printf_i+0x12a>
 8002fc6:	6833      	ldr	r3, [r6, #0]
 8002fc8:	6825      	ldr	r5, [r4, #0]
 8002fca:	1d18      	adds	r0, r3, #4
 8002fcc:	6961      	ldr	r1, [r4, #20]
 8002fce:	6030      	str	r0, [r6, #0]
 8002fd0:	062e      	lsls	r6, r5, #24
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	d501      	bpl.n	8002fda <_printf_i+0x1c2>
 8002fd6:	6019      	str	r1, [r3, #0]
 8002fd8:	e002      	b.n	8002fe0 <_printf_i+0x1c8>
 8002fda:	0668      	lsls	r0, r5, #25
 8002fdc:	d5fb      	bpl.n	8002fd6 <_printf_i+0x1be>
 8002fde:	8019      	strh	r1, [r3, #0]
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	4616      	mov	r6, r2
 8002fe4:	6123      	str	r3, [r4, #16]
 8002fe6:	e7bc      	b.n	8002f62 <_printf_i+0x14a>
 8002fe8:	6833      	ldr	r3, [r6, #0]
 8002fea:	2100      	movs	r1, #0
 8002fec:	1d1a      	adds	r2, r3, #4
 8002fee:	6032      	str	r2, [r6, #0]
 8002ff0:	681e      	ldr	r6, [r3, #0]
 8002ff2:	6862      	ldr	r2, [r4, #4]
 8002ff4:	4630      	mov	r0, r6
 8002ff6:	f000 f859 	bl	80030ac <memchr>
 8002ffa:	b108      	cbz	r0, 8003000 <_printf_i+0x1e8>
 8002ffc:	1b80      	subs	r0, r0, r6
 8002ffe:	6060      	str	r0, [r4, #4]
 8003000:	6863      	ldr	r3, [r4, #4]
 8003002:	6123      	str	r3, [r4, #16]
 8003004:	2300      	movs	r3, #0
 8003006:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800300a:	e7aa      	b.n	8002f62 <_printf_i+0x14a>
 800300c:	4632      	mov	r2, r6
 800300e:	4649      	mov	r1, r9
 8003010:	4640      	mov	r0, r8
 8003012:	6923      	ldr	r3, [r4, #16]
 8003014:	47d0      	blx	sl
 8003016:	3001      	adds	r0, #1
 8003018:	d0ad      	beq.n	8002f76 <_printf_i+0x15e>
 800301a:	6823      	ldr	r3, [r4, #0]
 800301c:	079b      	lsls	r3, r3, #30
 800301e:	d413      	bmi.n	8003048 <_printf_i+0x230>
 8003020:	68e0      	ldr	r0, [r4, #12]
 8003022:	9b03      	ldr	r3, [sp, #12]
 8003024:	4298      	cmp	r0, r3
 8003026:	bfb8      	it	lt
 8003028:	4618      	movlt	r0, r3
 800302a:	e7a6      	b.n	8002f7a <_printf_i+0x162>
 800302c:	2301      	movs	r3, #1
 800302e:	4632      	mov	r2, r6
 8003030:	4649      	mov	r1, r9
 8003032:	4640      	mov	r0, r8
 8003034:	47d0      	blx	sl
 8003036:	3001      	adds	r0, #1
 8003038:	d09d      	beq.n	8002f76 <_printf_i+0x15e>
 800303a:	3501      	adds	r5, #1
 800303c:	68e3      	ldr	r3, [r4, #12]
 800303e:	9903      	ldr	r1, [sp, #12]
 8003040:	1a5b      	subs	r3, r3, r1
 8003042:	42ab      	cmp	r3, r5
 8003044:	dcf2      	bgt.n	800302c <_printf_i+0x214>
 8003046:	e7eb      	b.n	8003020 <_printf_i+0x208>
 8003048:	2500      	movs	r5, #0
 800304a:	f104 0619 	add.w	r6, r4, #25
 800304e:	e7f5      	b.n	800303c <_printf_i+0x224>
 8003050:	080031bb 	.word	0x080031bb
 8003054:	080031cc 	.word	0x080031cc

08003058 <memmove>:
 8003058:	4288      	cmp	r0, r1
 800305a:	b510      	push	{r4, lr}
 800305c:	eb01 0402 	add.w	r4, r1, r2
 8003060:	d902      	bls.n	8003068 <memmove+0x10>
 8003062:	4284      	cmp	r4, r0
 8003064:	4623      	mov	r3, r4
 8003066:	d807      	bhi.n	8003078 <memmove+0x20>
 8003068:	1e43      	subs	r3, r0, #1
 800306a:	42a1      	cmp	r1, r4
 800306c:	d008      	beq.n	8003080 <memmove+0x28>
 800306e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003072:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003076:	e7f8      	b.n	800306a <memmove+0x12>
 8003078:	4601      	mov	r1, r0
 800307a:	4402      	add	r2, r0
 800307c:	428a      	cmp	r2, r1
 800307e:	d100      	bne.n	8003082 <memmove+0x2a>
 8003080:	bd10      	pop	{r4, pc}
 8003082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800308a:	e7f7      	b.n	800307c <memmove+0x24>

0800308c <_sbrk_r>:
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	2300      	movs	r3, #0
 8003090:	4d05      	ldr	r5, [pc, #20]	@ (80030a8 <_sbrk_r+0x1c>)
 8003092:	4604      	mov	r4, r0
 8003094:	4608      	mov	r0, r1
 8003096:	602b      	str	r3, [r5, #0]
 8003098:	f7fd fc92 	bl	80009c0 <_sbrk>
 800309c:	1c43      	adds	r3, r0, #1
 800309e:	d102      	bne.n	80030a6 <_sbrk_r+0x1a>
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	b103      	cbz	r3, 80030a6 <_sbrk_r+0x1a>
 80030a4:	6023      	str	r3, [r4, #0]
 80030a6:	bd38      	pop	{r3, r4, r5, pc}
 80030a8:	20000254 	.word	0x20000254

080030ac <memchr>:
 80030ac:	4603      	mov	r3, r0
 80030ae:	b510      	push	{r4, lr}
 80030b0:	b2c9      	uxtb	r1, r1
 80030b2:	4402      	add	r2, r0
 80030b4:	4293      	cmp	r3, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	d101      	bne.n	80030be <memchr+0x12>
 80030ba:	2000      	movs	r0, #0
 80030bc:	e003      	b.n	80030c6 <memchr+0x1a>
 80030be:	7804      	ldrb	r4, [r0, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	428c      	cmp	r4, r1
 80030c4:	d1f6      	bne.n	80030b4 <memchr+0x8>
 80030c6:	bd10      	pop	{r4, pc}

080030c8 <memcpy>:
 80030c8:	440a      	add	r2, r1
 80030ca:	4291      	cmp	r1, r2
 80030cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80030d0:	d100      	bne.n	80030d4 <memcpy+0xc>
 80030d2:	4770      	bx	lr
 80030d4:	b510      	push	{r4, lr}
 80030d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030da:	4291      	cmp	r1, r2
 80030dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030e0:	d1f9      	bne.n	80030d6 <memcpy+0xe>
 80030e2:	bd10      	pop	{r4, pc}

080030e4 <_realloc_r>:
 80030e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030e8:	4680      	mov	r8, r0
 80030ea:	4615      	mov	r5, r2
 80030ec:	460c      	mov	r4, r1
 80030ee:	b921      	cbnz	r1, 80030fa <_realloc_r+0x16>
 80030f0:	4611      	mov	r1, r2
 80030f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030f6:	f7ff bc39 	b.w	800296c <_malloc_r>
 80030fa:	b92a      	cbnz	r2, 8003108 <_realloc_r+0x24>
 80030fc:	f7ff fbcc 	bl	8002898 <_free_r>
 8003100:	2400      	movs	r4, #0
 8003102:	4620      	mov	r0, r4
 8003104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003108:	f000 f81a 	bl	8003140 <_malloc_usable_size_r>
 800310c:	4285      	cmp	r5, r0
 800310e:	4606      	mov	r6, r0
 8003110:	d802      	bhi.n	8003118 <_realloc_r+0x34>
 8003112:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003116:	d8f4      	bhi.n	8003102 <_realloc_r+0x1e>
 8003118:	4629      	mov	r1, r5
 800311a:	4640      	mov	r0, r8
 800311c:	f7ff fc26 	bl	800296c <_malloc_r>
 8003120:	4607      	mov	r7, r0
 8003122:	2800      	cmp	r0, #0
 8003124:	d0ec      	beq.n	8003100 <_realloc_r+0x1c>
 8003126:	42b5      	cmp	r5, r6
 8003128:	462a      	mov	r2, r5
 800312a:	4621      	mov	r1, r4
 800312c:	bf28      	it	cs
 800312e:	4632      	movcs	r2, r6
 8003130:	f7ff ffca 	bl	80030c8 <memcpy>
 8003134:	4621      	mov	r1, r4
 8003136:	4640      	mov	r0, r8
 8003138:	f7ff fbae 	bl	8002898 <_free_r>
 800313c:	463c      	mov	r4, r7
 800313e:	e7e0      	b.n	8003102 <_realloc_r+0x1e>

08003140 <_malloc_usable_size_r>:
 8003140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003144:	1f18      	subs	r0, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	bfbc      	itt	lt
 800314a:	580b      	ldrlt	r3, [r1, r0]
 800314c:	18c0      	addlt	r0, r0, r3
 800314e:	4770      	bx	lr

08003150 <_init>:
 8003150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003152:	bf00      	nop
 8003154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003156:	bc08      	pop	{r3}
 8003158:	469e      	mov	lr, r3
 800315a:	4770      	bx	lr

0800315c <_fini>:
 800315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315e:	bf00      	nop
 8003160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003162:	bc08      	pop	{r3}
 8003164:	469e      	mov	lr, r3
 8003166:	4770      	bx	lr
